"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resourceMetadata = resourceMetadata;
const cloud_assembly_schema_1 = require("@aws-cdk/cloud-assembly-schema");
/**
 * Attempts to read metadata for resources from a CloudFormation stack artifact
 *
 * @param stack - The CloudFormation stack to read from
 * @param logicalId - The logical ID of the resource to read
 *
 * @returns The resource metadata, or undefined if the resource was not found
 */
function resourceMetadata(stack, logicalId) {
    const metadata = stack.manifest?.metadata;
    if (!metadata) {
        return undefined;
    }
    for (const path of Object.keys(metadata)) {
        const entry = metadata[path]
            .filter((e) => e.type === cloud_assembly_schema_1.ArtifactMetadataEntryType.LOGICAL_ID)
            .find((e) => e.data === logicalId);
        if (entry) {
            return {
                entry,
                constructPath: simplifyConstructPath(path, stack.stackName),
            };
        }
    }
    return undefined;
}
function simplifyConstructPath(path, stackName) {
    path = path.replace(/\/Resource$/, '');
    path = path.replace(/^\//, ''); // remove "/" prefix
    // remove "<stack-name>/" prefix
    if (stackName) {
        if (path.startsWith(stackName + '/')) {
            path = path.slice(stackName.length + 1);
        }
    }
    return path;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtbWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXNvdXJjZS1tZXRhZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQXlCQSw0Q0FrQkM7QUEzQ0QsMEVBQStGO0FBaUIvRjs7Ozs7OztHQU9HO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQUMsS0FBa0MsRUFBRSxTQUFpQjtJQUNwRixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQztJQUMxQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDZCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsS0FBSyxNQUFNLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDekMsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQzthQUN6QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssaURBQXlCLENBQUMsVUFBVSxDQUFDO2FBQzlELElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsQ0FBQztRQUNyQyxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ1YsT0FBTztnQkFDTCxLQUFLO2dCQUNMLGFBQWEsRUFBRSxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQzthQUM1RCxDQUFDO1FBQ0osQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBRUQsU0FBUyxxQkFBcUIsQ0FBQyxJQUFZLEVBQUUsU0FBaUI7SUFDNUQsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLG9CQUFvQjtJQUVwRCxnQ0FBZ0M7SUFDaEMsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUNkLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNyQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzFDLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJ0aWZhY3RNZXRhZGF0YUVudHJ5VHlwZSwgdHlwZSBNZXRhZGF0YUVudHJ5IH0gZnJvbSAnQGF3cy1jZGsvY2xvdWQtYXNzZW1ibHktc2NoZW1hJztcbmltcG9ydCB0eXBlIHsgQ2xvdWRGb3JtYXRpb25TdGFja0FydGlmYWN0IH0gZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcblxuLyoqXG4gKiBNZXRhZGF0YSBlbnRyeSBmb3IgYSByZXNvdXJjZSB3aXRoaW4gYSBDbG91ZEZvcm1hdGlvbiBzdGFja1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc291cmNlTWV0YWRhdGEge1xuICAvKipcbiAgICogVGhlIHJlc291cmNlJ3MgbWV0YWRhdGEgYXMgZGVjbGFyZWQgaW4gdGhlIGNsb3VkIGFzc2VtYmx5XG4gICAqL1xuICByZWFkb25seSBlbnRyeTogTWV0YWRhdGFFbnRyeTtcbiAgLyoqXG4gICAqIFRoZSBjb25zdHJ1Y3QgcGF0aCBvZiB0aGUgcmVzb3VyY2VcbiAgICovXG4gIHJlYWRvbmx5IGNvbnN0cnVjdFBhdGg6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBdHRlbXB0cyB0byByZWFkIG1ldGFkYXRhIGZvciByZXNvdXJjZXMgZnJvbSBhIENsb3VkRm9ybWF0aW9uIHN0YWNrIGFydGlmYWN0XG4gKlxuICogQHBhcmFtIHN0YWNrIC0gVGhlIENsb3VkRm9ybWF0aW9uIHN0YWNrIHRvIHJlYWQgZnJvbVxuICogQHBhcmFtIGxvZ2ljYWxJZCAtIFRoZSBsb2dpY2FsIElEIG9mIHRoZSByZXNvdXJjZSB0byByZWFkXG4gKlxuICogQHJldHVybnMgVGhlIHJlc291cmNlIG1ldGFkYXRhLCBvciB1bmRlZmluZWQgaWYgdGhlIHJlc291cmNlIHdhcyBub3QgZm91bmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc291cmNlTWV0YWRhdGEoc3RhY2s6IENsb3VkRm9ybWF0aW9uU3RhY2tBcnRpZmFjdCwgbG9naWNhbElkOiBzdHJpbmcpOiBSZXNvdXJjZU1ldGFkYXRhIHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgbWV0YWRhdGEgPSBzdGFjay5tYW5pZmVzdD8ubWV0YWRhdGE7XG4gIGlmICghbWV0YWRhdGEpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgZm9yIChjb25zdCBwYXRoIG9mIE9iamVjdC5rZXlzKG1ldGFkYXRhKSkge1xuICAgIGNvbnN0IGVudHJ5ID0gbWV0YWRhdGFbcGF0aF1cbiAgICAgIC5maWx0ZXIoKGUpID0+IGUudHlwZSA9PT0gQXJ0aWZhY3RNZXRhZGF0YUVudHJ5VHlwZS5MT0dJQ0FMX0lEKVxuICAgICAgLmZpbmQoKGUpID0+IGUuZGF0YSA9PT0gbG9naWNhbElkKTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVudHJ5LFxuICAgICAgICBjb25zdHJ1Y3RQYXRoOiBzaW1wbGlmeUNvbnN0cnVjdFBhdGgocGF0aCwgc3RhY2suc3RhY2tOYW1lKSxcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHNpbXBsaWZ5Q29uc3RydWN0UGF0aChwYXRoOiBzdHJpbmcsIHN0YWNrTmFtZTogc3RyaW5nKSB7XG4gIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcL1Jlc291cmNlJC8sICcnKTtcbiAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXlxcLy8sICcnKTsgLy8gcmVtb3ZlIFwiL1wiIHByZWZpeFxuXG4gIC8vIHJlbW92ZSBcIjxzdGFjay1uYW1lPi9cIiBwcmVmaXhcbiAgaWYgKHN0YWNrTmFtZSkge1xuICAgIGlmIChwYXRoLnN0YXJ0c1dpdGgoc3RhY2tOYW1lICsgJy8nKSkge1xuICAgICAgcGF0aCA9IHBhdGguc2xpY2Uoc3RhY2tOYW1lLmxlbmd0aCArIDEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbiJdfQ==