import { AuthRoleName, BackendOutputStorageStrategy, ConstructFactory, ConstructFactoryGetInstanceProps, ReferenceAuthResources, ResourceAccessAcceptorFactory, ResourceProvider, StackProvider } from '@aws-amplify/plugin-types';
import { AuthAccessGenerator, Expand } from './types.js';
import { AuthOutput } from '@aws-amplify/backend-output-schemas';
export type ReferenceAuthProps = {
    /**
     * @internal
     */
    outputStorageStrategy?: BackendOutputStorageStrategy<AuthOutput>;
    /**
     * Existing UserPool Id
     */
    userPoolId: string;
    /**
     * Existing IdentityPool Id
     */
    identityPoolId: string;
    /**
     * Existing UserPoolClient Id
     */
    userPoolClientId: string;
    /**
     * Existing AuthRole ARN
     */
    authRoleArn: string;
    /**
     * Existing UnauthRole ARN
     */
    unauthRoleArn: string;
    /**
     * A mapping of existing group names and their associated role ARNs
     * which can be used for group permissions.
     */
    groups?: {
        [groupName: string]: string;
    };
};
export type BackendReferenceAuth = ResourceProvider<ReferenceAuthResources> & ResourceAccessAcceptorFactory<AuthRoleName | string> & StackProvider;
export type AmplifyReferenceAuthProps = Expand<Omit<ReferenceAuthProps, 'outputStorageStrategy'> & {
    /**
     * Configure access to auth for other Amplify resources
     * @see https://docs.amplify.aws/react/build-a-backend/auth/grant-access-to-auth-resources/
     * @example
     * access: (allow) => [allow.resource(postConfirmation).to(["addUserToGroup"])]
     * @example
     * access: (allow) => [allow.resource(groupManager).to(["manageGroups"])]
     */
    access?: AuthAccessGenerator;
}>;
/**
 * Singleton factory for AmplifyReferenceAuth that can be used in Amplify project files.
 *
 * Exported for testing purpose only & should NOT be exported out of the package.
 */
export declare class AmplifyReferenceAuthFactory implements ConstructFactory<BackendReferenceAuth> {
    private readonly props;
    private readonly importStack;
    readonly provides = "AuthResources";
    private generator;
    /**
     * Set the properties that will be used to initialize AmplifyReferenceAuth
     */
    constructor(props: AmplifyReferenceAuthProps, importStack?: string | undefined);
    /**
     * Get a singleton instance of AmplifyReferenceAuth
     */
    getInstance: (getInstanceProps: ConstructFactoryGetInstanceProps) => BackendReferenceAuth;
}
/**
 * Provide references to existing auth resources.
 */
export declare const referenceAuth: (props: AmplifyReferenceAuthProps) => ConstructFactory<BackendReferenceAuth>;
//# sourceMappingURL=reference_factory.d.ts.map