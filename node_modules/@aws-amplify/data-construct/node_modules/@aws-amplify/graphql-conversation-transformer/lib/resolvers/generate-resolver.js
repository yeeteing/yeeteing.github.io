"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateResolverFunction = exports.generateResolverPipeline = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const fs_extra_1 = __importDefault(require("fs-extra"));
const graphql_transformer_common_1 = require("graphql-transformer-common");
const path_1 = __importDefault(require("path"));
const generateResolverPipeline = (pipelineDefinition, directiveConfig, ctx) => {
    const { typeName, fieldName } = pipelineDefinition.field(directiveConfig);
    const resolverResourceId = graphql_transformer_common_1.ResolverResourceIDs.ResolverResourceID(typeName, fieldName);
    const codeMappingTemplate = (0, exports.generateResolverFunction)(pipelineDefinition.dataSlot, directiveConfig, ctx);
    const dataSourceProvider = pipelineDefinition.dataSlot.dataSource(directiveConfig);
    const requestSlots = pipelineDefinition.requestSlots.map((slot) => slot.slotName);
    const responseSlots = pipelineDefinition.responseSlots.map((slot) => slot.slotName);
    const pipelineResolver = new graphql_transformer_core_1.TransformerResolver(typeName, fieldName, resolverResourceId, { codeMappingTemplate }, requestSlots, responseSlots, dataSourceProvider, graphql_transformer_core_1.APPSYNC_JS_RUNTIME);
    const resolverSlots = [...pipelineDefinition.requestSlots, ...pipelineDefinition.responseSlots];
    for (const slot of resolverSlots) {
        const mappingTemplate = (0, exports.generateResolverFunction)(slot, directiveConfig, ctx);
        pipelineResolver.addJsFunctionToSlot(slot.slotName, mappingTemplate, slot.dataSource(directiveConfig));
    }
    return pipelineResolver;
};
exports.generateResolverPipeline = generateResolverPipeline;
const generateResolverFunction = (definition, config, ctx) => {
    const template = fs_extra_1.default.readFileSync(path_1.default.join(__dirname, 'templates', definition.fileName), 'utf8');
    const substitutions = definition.substitutions(config, ctx);
    const resolver = substituteResolverTemplateValues(template, substitutions);
    return definition.generateTemplate(config, resolver);
};
exports.generateResolverFunction = generateResolverFunction;
const substituteResolverTemplateValues = (resolver, substitutions) => {
    Object.entries(substitutions).forEach(([key, value]) => {
        const replaced = resolver.replace(new RegExp(`\\[\\[${key}\\]\\]`, 'g'), value);
        resolver = replaced;
    });
    return resolver;
};
//# sourceMappingURL=generate-resolver.js.map