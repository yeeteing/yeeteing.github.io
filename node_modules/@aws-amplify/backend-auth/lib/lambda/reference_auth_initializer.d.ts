import { CloudFormationCustomResourceEvent, CloudFormationCustomResourceResponse, CloudFormationCustomResourceSuccessResponse } from 'aws-lambda';
import { CognitoIdentityProviderClient } from '@aws-sdk/client-cognito-identity-provider';
import { CognitoIdentityClient } from '@aws-sdk/client-cognito-identity';
export type ReferenceAuthInitializerProps = {
    userPoolId: string;
    identityPoolId: string;
    authRoleArn: string;
    unauthRoleArn: string;
    userPoolClientId: string;
    groups: Record<string, string>;
    region: string;
};
/**
 * Initializer that fetches and process auth resources.
 */
export declare class ReferenceAuthInitializer {
    private cognitoIdentityClient;
    private cognitoIdentityProviderClient;
    private uuidGenerator;
    /**
     * Create a new initializer
     * @param cognitoIdentityClient identity client
     * @param cognitoIdentityProviderClient identity provider client
     */
    constructor(cognitoIdentityClient: CognitoIdentityClient, cognitoIdentityProviderClient: CognitoIdentityProviderClient, uuidGenerator: () => string);
    /**
     * Handles custom resource events
     * @param event event to process
     * @returns custom resource response
     */
    handleEvent: (event: CloudFormationCustomResourceEvent) => Promise<CloudFormationCustomResourceSuccessResponse<Record<string, any>>>;
    private getUserPool;
    private getUserPoolMFASettings;
    private getUserPoolGroups;
    private getUserPoolProviders;
    private getIdentityPool;
    private getIdentityPoolRoles;
    private getUserPoolClient;
    /**
     * Retrieves all of the resource data that is necessary for validation and output generation.
     * @param userPoolId userPoolId
     * @param identityPoolId identityPoolId
     * @param userPoolClientId userPoolClientId
     * @returns all necessary resource data
     */
    private getResourceDetails;
    /**
     * Validate the resource associations.
     * 1. make sure the user pool & user pool client pair are a cognito provider for the identity pool
     * 2. make sure the provided auth/unauth role ARNs match the roles for the identity pool
     * 3. make sure the user pool client is a web client
     * @param userPool userPool
     * @param userPoolProviders the user pool providers
     * @param userPoolGroups the existing groups for the userPool
     * @param userPoolClient userPoolClient
     * @param identityPool identityPool
     * @param identityPoolRoles identityPool roles
     * @param props props that include the roles which we compare with the actual roles for the identity pool
     */
    private validateResources;
    /**
     * Transform the userPool data into outputs.
     * @param userPool user pool
     * @param userPoolPasswordPolicy user pool password policy
     * @param userPoolProviders user pool providers
     * @param userPoolMFA user pool MFA settings
     * @returns formatted outputs
     */
    private getUserPoolOutputs;
    /**
     * Transforms identityPool info into outputs.
     * @param identityPool identity pool data
     * @returns formatted outputs
     */
    private getIdentityPoolOutputs;
    /**
     * Transforms userPoolClient info into outputs.
     * @param userPoolClient userPoolClient data
     * @returns formatted outputs
     */
    private getUserPoolClientOutputs;
}
/**
 * Entry point for the lambda-backend custom resource to retrieve auth outputs.
 */
export declare const handler: (event: CloudFormationCustomResourceEvent) => Promise<CloudFormationCustomResourceResponse>;
//# sourceMappingURL=reference_auth_initializer.d.ts.map