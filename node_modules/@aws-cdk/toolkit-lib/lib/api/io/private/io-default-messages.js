"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IoDefaultMessages = void 0;
const util = require("util");
/**
 * Helper class to emit standard log messages to an IoHost
 *
 * It wraps an `IoHelper`, and adds convenience methods to emit default messages
 * for the various log levels.
 */
class IoDefaultMessages {
    ioHelper;
    constructor(ioHelper) {
        this.ioHelper = ioHelper;
    }
    async notify(msg) {
        return this.ioHelper.notify({
            ...msg,
            code: undefined,
        });
    }
    async error(input, ...args) {
        return this.emitMessage('error', input, ...args);
    }
    async warn(input, ...args) {
        return this.emitMessage('warn', input, ...args);
    }
    async warning(input, ...args) {
        return this.emitMessage('warn', input, ...args);
    }
    async info(input, ...args) {
        return this.emitMessage('info', input, ...args);
    }
    async debug(input, ...args) {
        return this.emitMessage('debug', input, ...args);
    }
    async trace(input, ...args) {
        return this.emitMessage('trace', input, ...args);
    }
    async result(input, ...args) {
        return this.emitMessage('result', input, ...args);
    }
    /**
     * Makes a default message object from a level and a message
     */
    msg(level, input, ...args) {
        // Format message if args are provided
        const message = args.length > 0 ? util.format(input, ...args) : input;
        return {
            time: new Date(),
            level,
            message,
            data: undefined,
        };
    }
    async emitMessage(level, input, ...args) {
        return this.ioHelper.notify(this.msg(level, input, ...args));
    }
}
exports.IoDefaultMessages = IoDefaultMessages;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW8tZGVmYXVsdC1tZXNzYWdlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImlvLWRlZmF1bHQtbWVzc2FnZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQTZCO0FBSTdCOzs7OztHQUtHO0FBQ0gsTUFBYSxpQkFBaUI7SUFDWCxRQUFRLENBQVc7SUFFcEMsWUFBWSxRQUFrQjtRQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMzQixDQUFDO0lBRU0sS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUE2QztRQUMvRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQzFCLEdBQUcsR0FBRztZQUNOLElBQUksRUFBRSxTQUFTO1NBQ2hCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQWEsRUFBRSxHQUFHLElBQWU7UUFDbEQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFhLEVBQUUsR0FBRyxJQUFlO1FBQ2pELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBYSxFQUFFLEdBQUcsSUFBZTtRQUNwRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQWEsRUFBRSxHQUFHLElBQWU7UUFDakQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFhLEVBQUUsR0FBRyxJQUFlO1FBQ2xELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBYSxFQUFFLEdBQUcsSUFBZTtRQUNsRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQWEsRUFBRSxHQUFHLElBQWU7UUFDbkQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxHQUFHLENBQUMsS0FBcUIsRUFBRSxLQUFhLEVBQUUsR0FBRyxJQUFlO1FBQ2pFLHNDQUFzQztRQUN0QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBRXRFLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7WUFDaEIsS0FBSztZQUNMLE9BQU87WUFDUCxJQUFJLEVBQUUsU0FBUztTQUNoQixDQUFDO0lBQ0osQ0FBQztJQUVPLEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBcUIsRUFBRSxLQUFhLEVBQUUsR0FBRyxJQUFlO1FBQ2hGLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0NBQ0Y7QUE1REQsOENBNERDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdXRpbCBmcm9tICd1dGlsJztcbmltcG9ydCB0eXBlIHsgQWN0aW9uTGVzc01lc3NhZ2UsIElvSGVscGVyIH0gZnJvbSAnLi9pby1oZWxwZXInO1xuaW1wb3J0IHR5cGUgeyBJb01lc3NhZ2VMZXZlbCB9IGZyb20gJy4uL2lvLW1lc3NhZ2UnO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyB0byBlbWl0IHN0YW5kYXJkIGxvZyBtZXNzYWdlcyB0byBhbiBJb0hvc3RcbiAqXG4gKiBJdCB3cmFwcyBhbiBgSW9IZWxwZXJgLCBhbmQgYWRkcyBjb252ZW5pZW5jZSBtZXRob2RzIHRvIGVtaXQgZGVmYXVsdCBtZXNzYWdlc1xuICogZm9yIHRoZSB2YXJpb3VzIGxvZyBsZXZlbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBJb0RlZmF1bHRNZXNzYWdlcyB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW9IZWxwZXI6IElvSGVscGVyO1xuXG4gIGNvbnN0cnVjdG9yKGlvSGVscGVyOiBJb0hlbHBlcikge1xuICAgIHRoaXMuaW9IZWxwZXIgPSBpb0hlbHBlcjtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBub3RpZnkobXNnOiBPbWl0PEFjdGlvbkxlc3NNZXNzYWdlPHVua25vd24+LCAnY29kZSc+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuaW9IZWxwZXIubm90aWZ5KHtcbiAgICAgIC4uLm1zZyxcbiAgICAgIGNvZGU6IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBlcnJvcihpbnB1dDogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5lbWl0TWVzc2FnZSgnZXJyb3InLCBpbnB1dCwgLi4uYXJncyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgd2FybihpbnB1dDogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy5lbWl0TWVzc2FnZSgnd2FybicsIGlucHV0LCAuLi5hcmdzKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB3YXJuaW5nKGlucHV0OiBzdHJpbmcsIC4uLmFyZ3M6IHVua25vd25bXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmVtaXRNZXNzYWdlKCd3YXJuJywgaW5wdXQsIC4uLmFyZ3MpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGluZm8oaW5wdXQ6IHN0cmluZywgLi4uYXJnczogdW5rbm93bltdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdE1lc3NhZ2UoJ2luZm8nLCBpbnB1dCwgLi4uYXJncyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVidWcoaW5wdXQ6IHN0cmluZywgLi4uYXJnczogdW5rbm93bltdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdE1lc3NhZ2UoJ2RlYnVnJywgaW5wdXQsIC4uLmFyZ3MpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHRyYWNlKGlucHV0OiBzdHJpbmcsIC4uLmFyZ3M6IHVua25vd25bXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLmVtaXRNZXNzYWdlKCd0cmFjZScsIGlucHV0LCAuLi5hcmdzKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZXN1bHQoaW5wdXQ6IHN0cmluZywgLi4uYXJnczogdW5rbm93bltdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuZW1pdE1lc3NhZ2UoJ3Jlc3VsdCcsIGlucHV0LCAuLi5hcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlcyBhIGRlZmF1bHQgbWVzc2FnZSBvYmplY3QgZnJvbSBhIGxldmVsIGFuZCBhIG1lc3NhZ2VcbiAgICovXG4gIHB1YmxpYyBtc2cobGV2ZWw6IElvTWVzc2FnZUxldmVsLCBpbnB1dDogc3RyaW5nLCAuLi5hcmdzOiB1bmtub3duW10pOiBBY3Rpb25MZXNzTWVzc2FnZTx1bmRlZmluZWQ+IHtcbiAgICAvLyBGb3JtYXQgbWVzc2FnZSBpZiBhcmdzIGFyZSBwcm92aWRlZFxuICAgIGNvbnN0IG1lc3NhZ2UgPSBhcmdzLmxlbmd0aCA+IDAgPyB1dGlsLmZvcm1hdChpbnB1dCwgLi4uYXJncykgOiBpbnB1dDtcblxuICAgIHJldHVybiB7XG4gICAgICB0aW1lOiBuZXcgRGF0ZSgpLFxuICAgICAgbGV2ZWwsXG4gICAgICBtZXNzYWdlLFxuICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGVtaXRNZXNzYWdlKGxldmVsOiBJb01lc3NhZ2VMZXZlbCwgaW5wdXQ6IHN0cmluZywgLi4uYXJnczogdW5rbm93bltdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuaW9IZWxwZXIubm90aWZ5KHRoaXMubXNnKGxldmVsLCBpbnB1dCwgLi4uYXJncykpO1xuICB9XG59XG4iXX0=