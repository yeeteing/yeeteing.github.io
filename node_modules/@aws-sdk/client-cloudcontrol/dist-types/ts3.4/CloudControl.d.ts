import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import { CloudControlClient } from "./CloudControlClient";
import {
  CancelResourceRequestCommandInput,
  CancelResourceRequestCommandOutput,
} from "./commands/CancelResourceRequestCommand";
import {
  CreateResourceCommandInput,
  CreateResourceCommandOutput,
} from "./commands/CreateResourceCommand";
import {
  DeleteResourceCommandInput,
  DeleteResourceCommandOutput,
} from "./commands/DeleteResourceCommand";
import {
  GetResourceCommandInput,
  GetResourceCommandOutput,
} from "./commands/GetResourceCommand";
import {
  GetResourceRequestStatusCommandInput,
  GetResourceRequestStatusCommandOutput,
} from "./commands/GetResourceRequestStatusCommand";
import {
  ListResourceRequestsCommandInput,
  ListResourceRequestsCommandOutput,
} from "./commands/ListResourceRequestsCommand";
import {
  ListResourcesCommandInput,
  ListResourcesCommandOutput,
} from "./commands/ListResourcesCommand";
import {
  UpdateResourceCommandInput,
  UpdateResourceCommandOutput,
} from "./commands/UpdateResourceCommand";
export interface CloudControl {
  cancelResourceRequest(
    args: CancelResourceRequestCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CancelResourceRequestCommandOutput>;
  cancelResourceRequest(
    args: CancelResourceRequestCommandInput,
    cb: (err: any, data?: CancelResourceRequestCommandOutput) => void
  ): void;
  cancelResourceRequest(
    args: CancelResourceRequestCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CancelResourceRequestCommandOutput) => void
  ): void;
  createResource(
    args: CreateResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateResourceCommandOutput>;
  createResource(
    args: CreateResourceCommandInput,
    cb: (err: any, data?: CreateResourceCommandOutput) => void
  ): void;
  createResource(
    args: CreateResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateResourceCommandOutput) => void
  ): void;
  deleteResource(
    args: DeleteResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteResourceCommandOutput>;
  deleteResource(
    args: DeleteResourceCommandInput,
    cb: (err: any, data?: DeleteResourceCommandOutput) => void
  ): void;
  deleteResource(
    args: DeleteResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteResourceCommandOutput) => void
  ): void;
  getResource(
    args: GetResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetResourceCommandOutput>;
  getResource(
    args: GetResourceCommandInput,
    cb: (err: any, data?: GetResourceCommandOutput) => void
  ): void;
  getResource(
    args: GetResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetResourceCommandOutput) => void
  ): void;
  getResourceRequestStatus(
    args: GetResourceRequestStatusCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<GetResourceRequestStatusCommandOutput>;
  getResourceRequestStatus(
    args: GetResourceRequestStatusCommandInput,
    cb: (err: any, data?: GetResourceRequestStatusCommandOutput) => void
  ): void;
  getResourceRequestStatus(
    args: GetResourceRequestStatusCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: GetResourceRequestStatusCommandOutput) => void
  ): void;
  listResourceRequests(): Promise<ListResourceRequestsCommandOutput>;
  listResourceRequests(
    args: ListResourceRequestsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListResourceRequestsCommandOutput>;
  listResourceRequests(
    args: ListResourceRequestsCommandInput,
    cb: (err: any, data?: ListResourceRequestsCommandOutput) => void
  ): void;
  listResourceRequests(
    args: ListResourceRequestsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListResourceRequestsCommandOutput) => void
  ): void;
  listResources(
    args: ListResourcesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListResourcesCommandOutput>;
  listResources(
    args: ListResourcesCommandInput,
    cb: (err: any, data?: ListResourcesCommandOutput) => void
  ): void;
  listResources(
    args: ListResourcesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListResourcesCommandOutput) => void
  ): void;
  updateResource(
    args: UpdateResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateResourceCommandOutput>;
  updateResource(
    args: UpdateResourceCommandInput,
    cb: (err: any, data?: UpdateResourceCommandOutput) => void
  ): void;
  updateResource(
    args: UpdateResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateResourceCommandOutput) => void
  ): void;
}
export declare class CloudControl
  extends CloudControlClient
  implements CloudControl {}
