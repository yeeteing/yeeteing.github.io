"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationPrepareHandler = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const message_model_1 = require("../graphql-types/message-model");
class ConversationPrepareHandler {
    constructor(modelTransformer, hasManyTransformer, belongsToTransformer, authProvider) {
        this.modelTransformer = modelTransformer;
        this.hasManyTransformer = hasManyTransformer;
        this.belongsToTransformer = belongsToTransformer;
        this.authProvider = authProvider;
    }
    prepare(ctx, directives) {
        const conversationTurnErrorInput = (0, message_model_1.createConversationTurnErrorInput)();
        ctx.output.addInput(conversationTurnErrorInput);
        for (const directive of directives) {
            this.prepareResourcesForDirective(directive, ctx);
        }
    }
    prepareResourcesForDirective(directive, ctx) {
        const { conversation, message, assistantResponseMutation, assistantResponseStreamingMutation, assistantResponseSubscriptionField } = directive;
        const conversationName = conversation.model.name.value;
        const messageName = message.model.name.value;
        ctx.output.addInput(assistantResponseMutation.input);
        ctx.output.addInput(assistantResponseStreamingMutation.input);
        ctx.output.addMutationFields([assistantResponseMutation.field, assistantResponseStreamingMutation.field]);
        ctx.output.addSubscriptionFields([assistantResponseSubscriptionField]);
        ctx.output.addObject(conversation.model);
        ctx.output.addObject(message.model);
        ctx.providerRegistry.registerDataSourceProvider(conversation.model, this.modelTransformer);
        ctx.providerRegistry.registerDataSourceProvider(message.model, this.modelTransformer);
        ctx.dataSourceStrategies[conversationName] = graphql_transformer_core_1.DDB_AMPLIFY_MANAGED_DATASOURCE_STRATEGY;
        ctx.dataSourceStrategies[messageName] = graphql_transformer_core_1.DDB_AMPLIFY_MANAGED_DATASOURCE_STRATEGY;
        this.modelTransformer.object(conversation.model, conversation.modelDirective, ctx);
        this.modelTransformer.object(message.model, message.modelDirective, ctx);
        this.modelTransformer.before(ctx);
        this.belongsToTransformer.field(message.model, message.conversationField, message.belongsToConversationDirective, ctx);
        this.hasManyTransformer.field(conversation.model, conversation.messagesField, conversation.hasManyMessagesDirective, ctx);
        if (!this.authProvider.object) {
            throw new graphql_transformer_core_1.InvalidTransformerError('No authentication provider found.');
        }
        this.authProvider.object(conversation.model, conversation.authDirective, ctx);
        this.authProvider.object(message.model, message.authDirective, ctx);
    }
}
exports.ConversationPrepareHandler = ConversationPrepareHandler;
//# sourceMappingURL=conversation-prepare-handler.js.map