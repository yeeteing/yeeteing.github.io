"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountIdFetcher = void 0;
const client_sts_1 = require("@aws-sdk/client-sts");
const uuid_1 = require("uuid");
const NO_ACCOUNT_ID = 'NO_ACCOUNT_ID';
// eslint-disable-next-line spellcheck/spell-checker
const AMPLIFY_CLI_UUID_NAMESPACE = '283cae3e-c611-4659-9044-6796e5d696ec'; // A random v4 UUID
/**
 * Retrieves the account ID of the user
 */
class AccountIdFetcher {
    stsClient;
    accountId;
    /**
     * constructor for AccountIdFetcher
     */
    constructor(stsClient = new client_sts_1.STSClient()) {
        this.stsClient = stsClient;
    }
    fetch = async () => {
        if (this.accountId) {
            return this.accountId;
        }
        try {
            const stsResponse = await this.stsClient.send(new client_sts_1.GetCallerIdentityCommand({}));
            if (stsResponse && stsResponse.Account) {
                const accountIdBucket = stsResponse.Account.slice(0, -2);
                this.accountId = (0, uuid_1.v5)(accountIdBucket, AMPLIFY_CLI_UUID_NAMESPACE);
                return this.accountId;
            }
            // We failed to get the account Id. Most likely the user doesn't have credentials
            return NO_ACCOUNT_ID;
        }
        catch {
            // We failed to get the account Id. Most likely the user doesn't have credentials
            return NO_ACCOUNT_ID;
        }
    };
}
exports.AccountIdFetcher = AccountIdFetcher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF9pZF9mZXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzYWdlLWRhdGEvYWNjb3VudF9pZF9mZXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUEwRTtBQUMxRSwrQkFBb0M7QUFFcEMsTUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDO0FBRXRDLG9EQUFvRDtBQUNwRCxNQUFNLDBCQUEwQixHQUFHLHNDQUFzQyxDQUFDLENBQUMsbUJBQW1CO0FBRTlGOztHQUVHO0FBQ0gsTUFBYSxnQkFBZ0I7SUFLRTtJQUpyQixTQUFTLENBQXFCO0lBQ3RDOztPQUVHO0lBQ0gsWUFBNkIsWUFBWSxJQUFJLHNCQUFTLEVBQUU7UUFBM0IsY0FBUyxHQUFULFNBQVMsQ0FBa0I7SUFBRyxDQUFDO0lBQzVELEtBQUssR0FBRyxLQUFLLElBQUksRUFBRTtRQUNqQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSTtZQUNGLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQzNDLElBQUkscUNBQXdCLENBQUMsRUFBRSxDQUFDLENBQ2pDLENBQUM7WUFDRixJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFO2dCQUN0QyxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDekQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFBLFNBQU0sRUFBQyxlQUFlLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztnQkFDckUsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO2FBQ3ZCO1lBQ0QsaUZBQWlGO1lBQ2pGLE9BQU8sYUFBYSxDQUFDO1NBQ3RCO1FBQUMsTUFBTTtZQUNOLGlGQUFpRjtZQUNqRixPQUFPLGFBQWEsQ0FBQztTQUN0QjtJQUNILENBQUMsQ0FBQztDQUNIO0FBMUJELDRDQTBCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdldENhbGxlcklkZW50aXR5Q29tbWFuZCwgU1RTQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXN0cyc7XG5pbXBvcnQgeyB2NSBhcyB1dWlkVjUgfSBmcm9tICd1dWlkJztcblxuY29uc3QgTk9fQUNDT1VOVF9JRCA9ICdOT19BQ0NPVU5UX0lEJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHNwZWxsY2hlY2svc3BlbGwtY2hlY2tlclxuY29uc3QgQU1QTElGWV9DTElfVVVJRF9OQU1FU1BBQ0UgPSAnMjgzY2FlM2UtYzYxMS00NjU5LTkwNDQtNjc5NmU1ZDY5NmVjJzsgLy8gQSByYW5kb20gdjQgVVVJRFxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgYWNjb3VudCBJRCBvZiB0aGUgdXNlclxuICovXG5leHBvcnQgY2xhc3MgQWNjb3VudElkRmV0Y2hlciB7XG4gIHByaXZhdGUgYWNjb3VudElkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBjb25zdHJ1Y3RvciBmb3IgQWNjb3VudElkRmV0Y2hlclxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzdHNDbGllbnQgPSBuZXcgU1RTQ2xpZW50KCkpIHt9XG4gIGZldGNoID0gYXN5bmMgKCkgPT4ge1xuICAgIGlmICh0aGlzLmFjY291bnRJZCkge1xuICAgICAgcmV0dXJuIHRoaXMuYWNjb3VudElkO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3RzUmVzcG9uc2UgPSBhd2FpdCB0aGlzLnN0c0NsaWVudC5zZW5kKFxuICAgICAgICBuZXcgR2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kKHt9KSxcbiAgICAgICk7XG4gICAgICBpZiAoc3RzUmVzcG9uc2UgJiYgc3RzUmVzcG9uc2UuQWNjb3VudCkge1xuICAgICAgICBjb25zdCBhY2NvdW50SWRCdWNrZXQgPSBzdHNSZXNwb25zZS5BY2NvdW50LnNsaWNlKDAsIC0yKTtcbiAgICAgICAgdGhpcy5hY2NvdW50SWQgPSB1dWlkVjUoYWNjb3VudElkQnVja2V0LCBBTVBMSUZZX0NMSV9VVUlEX05BTUVTUEFDRSk7XG4gICAgICAgIHJldHVybiB0aGlzLmFjY291bnRJZDtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGZhaWxlZCB0byBnZXQgdGhlIGFjY291bnQgSWQuIE1vc3QgbGlrZWx5IHRoZSB1c2VyIGRvZXNuJ3QgaGF2ZSBjcmVkZW50aWFsc1xuICAgICAgcmV0dXJuIE5PX0FDQ09VTlRfSUQ7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBXZSBmYWlsZWQgdG8gZ2V0IHRoZSBhY2NvdW50IElkLiBNb3N0IGxpa2VseSB0aGUgdXNlciBkb2Vzbid0IGhhdmUgY3JlZGVudGlhbHNcbiAgICAgIHJldHVybiBOT19BQ0NPVU5UX0lEO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==