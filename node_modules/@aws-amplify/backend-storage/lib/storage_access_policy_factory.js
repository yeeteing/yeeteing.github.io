import { Effect, Policy, PolicyStatement } from 'aws-cdk-lib/aws-iam';
import { Stack } from 'aws-cdk-lib';
import { AmplifyFault } from '@aws-amplify/platform-core';
/**
 * Generates IAM policies scoped to a single bucket
 */
export class StorageAccessPolicyFactory {
    bucket;
    stack;
    /**
     * Instantiate with the bucket to generate policies for
     */
    constructor(bucket) {
        this.bucket = bucket;
        this.stack = Stack.of(bucket);
    }
    createPolicy = (permissions) => {
        if (permissions.size === 0) {
            throw new AmplifyFault('EmptyPolicyFault', {
                message: 'At least one permission must be specified',
            });
        }
        const statements = [];
        permissions.forEach(({ allow: allowPrefixes, deny: denyPrefixes }, action) => {
            if (allowPrefixes.size > 0) {
                statements.push(this.getStatement(allowPrefixes, action, Effect.ALLOW));
            }
            if (denyPrefixes.size > 0) {
                statements.push(this.getStatement(denyPrefixes, action, Effect.DENY));
            }
        });
        if (statements.length === 0) {
            // this could happen if the Map contained entries but all of the path sets were empty
            throw new AmplifyFault('EmptyPolicyFault', {
                message: 'At least one permission must be specified',
            });
        }
        return new Policy(this.stack, `${this.stack.node.path}Access${this.stack.node.children.length}`, {
            statements,
        });
    };
    getStatement = (s3Prefixes, action, effect) => {
        switch (action) {
            case 'delete':
            case 'get':
            case 'write':
                return new PolicyStatement({
                    effect,
                    actions: actionMap[action],
                    resources: Array.from(s3Prefixes).map((s3Prefix) => `${this.bucket.bucketArn}/${s3Prefix}`),
                });
            case 'list':
                return new PolicyStatement({
                    effect,
                    actions: actionMap[action],
                    resources: [this.bucket.bucketArn],
                    conditions: {
                        StringLike: {
                            's3:prefix': Array.from(s3Prefixes).flatMap(toConditionPrefix),
                        },
                    },
                });
        }
    };
}
const actionMap = {
    get: ['s3:GetObject'],
    list: ['s3:ListBucket'],
    write: ['s3:PutObject'],
    delete: ['s3:DeleteObject'],
};
/**
 * Converts a prefix like foo/bar/* into [foo/bar/, foo/bar/*]
 * This is necessary to grant the ability to list all objects directly in "foo/bar" and all objects under "foo/bar"
 */
const toConditionPrefix = (prefix) => {
    const noTrailingWildcard = prefix.slice(0, -1);
    return [prefix, noTrailingWildcard];
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZV9hY2Nlc3NfcG9saWN5X2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RvcmFnZV9hY2Nlc3NfcG9saWN5X2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFZMUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBTVI7SUFMWixLQUFLLENBQVE7SUFFOUI7O09BRUc7SUFDSCxZQUE2QixNQUFlO1FBQWYsV0FBTSxHQUFOLE1BQU0sQ0FBUztRQUMxQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELFlBQVksR0FBRyxDQUNiLFdBR0MsRUFDRCxFQUFFO1FBQ0YsSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzNCLE1BQU0sSUFBSSxZQUFZLENBQUMsa0JBQWtCLEVBQUU7Z0JBQ3pDLE9BQU8sRUFBRSwyQ0FBMkM7YUFDckQsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sVUFBVSxHQUFzQixFQUFFLENBQUM7UUFFekMsV0FBVyxDQUFDLE9BQU8sQ0FDakIsQ0FBQyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3ZELElBQUksYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDM0IsVUFBVSxDQUFDLElBQUksQ0FDYixJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUN2RCxDQUFDO1lBQ0osQ0FBQztZQUNELElBQUksWUFBWSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDMUIsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDeEUsQ0FBQztRQUNILENBQUMsQ0FDRixDQUFDO1FBRUYsSUFBSSxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzVCLHFGQUFxRjtZQUNyRixNQUFNLElBQUksWUFBWSxDQUFDLGtCQUFrQixFQUFFO2dCQUN6QyxPQUFPLEVBQUUsMkNBQTJDO2FBQ3JELENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxPQUFPLElBQUksTUFBTSxDQUNmLElBQUksQ0FBQyxLQUFLLEVBQ1YsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLFNBQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUNqRTtZQUNFLFVBQVU7U0FDWCxDQUNGLENBQUM7SUFDSixDQUFDLENBQUM7SUFFTSxZQUFZLEdBQUcsQ0FDckIsVUFBc0MsRUFDdEMsTUFBNkIsRUFDN0IsTUFBYyxFQUNkLEVBQUU7UUFDRixRQUFRLE1BQU0sRUFBRSxDQUFDO1lBQ2YsS0FBSyxRQUFRLENBQUM7WUFDZCxLQUFLLEtBQUssQ0FBQztZQUNYLEtBQUssT0FBTztnQkFDVixPQUFPLElBQUksZUFBZSxDQUFDO29CQUN6QixNQUFNO29CQUNOLE9BQU8sRUFBRSxTQUFTLENBQUMsTUFBTSxDQUFDO29CQUMxQixTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQ25DLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLFFBQVEsRUFBRSxDQUNyRDtpQkFDRixDQUFDLENBQUM7WUFDTCxLQUFLLE1BQU07Z0JBQ1QsT0FBTyxJQUFJLGVBQWUsQ0FBQztvQkFDekIsTUFBTTtvQkFDTixPQUFPLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQztvQkFDMUIsU0FBUyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUM7b0JBQ2xDLFVBQVUsRUFBRTt3QkFDVixVQUFVLEVBQUU7NEJBQ1YsV0FBVyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO3lCQUMvRDtxQkFDRjtpQkFDRixDQUFDLENBQUM7UUFDUCxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0NBQ0g7QUFFRCxNQUFNLFNBQVMsR0FBNEM7SUFDekQsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDO0lBQ3JCLElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQztJQUN2QixLQUFLLEVBQUUsQ0FBQyxjQUFjLENBQUM7SUFDdkIsTUFBTSxFQUFFLENBQUMsaUJBQWlCLENBQUM7Q0FDNUIsQ0FBQztBQUVGOzs7R0FHRztBQUNILE1BQU0saUJBQWlCLEdBQUcsQ0FBQyxNQUFtQixFQUFFLEVBQUU7SUFDaEQsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxNQUFNLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJQnVja2V0IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCB7IEVmZmVjdCwgUG9saWN5LCBQb2xpY3lTdGF0ZW1lbnQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQW1wbGlmeUZhdWx0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgU3RvcmFnZUFjdGlvbiwgU3RvcmFnZVBhdGggfSBmcm9tICcuL3R5cGVzLmpzJztcbmltcG9ydCB7IEludGVybmFsU3RvcmFnZUFjdGlvbiB9IGZyb20gJy4vcHJpdmF0ZV90eXBlcy5qcyc7XG5cbmV4cG9ydCB0eXBlIFBlcm1pc3Npb24gPSB7XG4gIGFjdGlvbnM6IFN0b3JhZ2VBY3Rpb25bXTtcbiAgLyoqXG4gICAqIEFuIHMzIHByZWZpeCB0aGF0IGRlZmluZXMgdGhlIHNjb3BlIG9mIHRoZSBhY3Rpb25zXG4gICAqL1xuICByZXNvdXJjZXM6IHN0cmluZ1tdO1xufTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgSUFNIHBvbGljaWVzIHNjb3BlZCB0byBhIHNpbmdsZSBidWNrZXRcbiAqL1xuZXhwb3J0IGNsYXNzIFN0b3JhZ2VBY2Nlc3NQb2xpY3lGYWN0b3J5IHtcbiAgcHJpdmF0ZSByZWFkb25seSBzdGFjazogU3RhY2s7XG5cbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlIHdpdGggdGhlIGJ1Y2tldCB0byBnZW5lcmF0ZSBwb2xpY2llcyBmb3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYnVja2V0OiBJQnVja2V0KSB7XG4gICAgdGhpcy5zdGFjayA9IFN0YWNrLm9mKGJ1Y2tldCk7XG4gIH1cblxuICBjcmVhdGVQb2xpY3kgPSAoXG4gICAgcGVybWlzc2lvbnM6IE1hcDxcbiAgICAgIEludGVybmFsU3RvcmFnZUFjdGlvbixcbiAgICAgIHsgYWxsb3c6IFNldDxTdG9yYWdlUGF0aD47IGRlbnk6IFNldDxTdG9yYWdlUGF0aD4gfVxuICAgID4sXG4gICkgPT4ge1xuICAgIGlmIChwZXJtaXNzaW9ucy5zaXplID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeUZhdWx0KCdFbXB0eVBvbGljeUZhdWx0Jywge1xuICAgICAgICBtZXNzYWdlOiAnQXQgbGVhc3Qgb25lIHBlcm1pc3Npb24gbXVzdCBiZSBzcGVjaWZpZWQnLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RhdGVtZW50czogUG9saWN5U3RhdGVtZW50W10gPSBbXTtcblxuICAgIHBlcm1pc3Npb25zLmZvckVhY2goXG4gICAgICAoeyBhbGxvdzogYWxsb3dQcmVmaXhlcywgZGVueTogZGVueVByZWZpeGVzIH0sIGFjdGlvbikgPT4ge1xuICAgICAgICBpZiAoYWxsb3dQcmVmaXhlcy5zaXplID4gMCkge1xuICAgICAgICAgIHN0YXRlbWVudHMucHVzaChcbiAgICAgICAgICAgIHRoaXMuZ2V0U3RhdGVtZW50KGFsbG93UHJlZml4ZXMsIGFjdGlvbiwgRWZmZWN0LkFMTE9XKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZW55UHJlZml4ZXMuc2l6ZSA+IDApIHtcbiAgICAgICAgICBzdGF0ZW1lbnRzLnB1c2godGhpcy5nZXRTdGF0ZW1lbnQoZGVueVByZWZpeGVzLCBhY3Rpb24sIEVmZmVjdC5ERU5ZKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKTtcblxuICAgIGlmIChzdGF0ZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gdGhpcyBjb3VsZCBoYXBwZW4gaWYgdGhlIE1hcCBjb250YWluZWQgZW50cmllcyBidXQgYWxsIG9mIHRoZSBwYXRoIHNldHMgd2VyZSBlbXB0eVxuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlGYXVsdCgnRW1wdHlQb2xpY3lGYXVsdCcsIHtcbiAgICAgICAgbWVzc2FnZTogJ0F0IGxlYXN0IG9uZSBwZXJtaXNzaW9uIG11c3QgYmUgc3BlY2lmaWVkJyxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUG9saWN5KFxuICAgICAgdGhpcy5zdGFjayxcbiAgICAgIGAke3RoaXMuc3RhY2subm9kZS5wYXRofUFjY2VzcyR7dGhpcy5zdGFjay5ub2RlLmNoaWxkcmVuLmxlbmd0aH1gLFxuICAgICAge1xuICAgICAgICBzdGF0ZW1lbnRzLFxuICAgICAgfSxcbiAgICApO1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0U3RhdGVtZW50ID0gKFxuICAgIHMzUHJlZml4ZXM6IFJlYWRvbmx5PFNldDxTdG9yYWdlUGF0aD4+LFxuICAgIGFjdGlvbjogSW50ZXJuYWxTdG9yYWdlQWN0aW9uLFxuICAgIGVmZmVjdDogRWZmZWN0LFxuICApID0+IHtcbiAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgIGNhc2UgJ2dldCc6XG4gICAgICBjYXNlICd3cml0ZSc6XG4gICAgICAgIHJldHVybiBuZXcgUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBlZmZlY3QsXG4gICAgICAgICAgYWN0aW9uczogYWN0aW9uTWFwW2FjdGlvbl0sXG4gICAgICAgICAgcmVzb3VyY2VzOiBBcnJheS5mcm9tKHMzUHJlZml4ZXMpLm1hcChcbiAgICAgICAgICAgIChzM1ByZWZpeCkgPT4gYCR7dGhpcy5idWNrZXQuYnVja2V0QXJufS8ke3MzUHJlZml4fWAsXG4gICAgICAgICAgKSxcbiAgICAgICAgfSk7XG4gICAgICBjYXNlICdsaXN0JzpcbiAgICAgICAgcmV0dXJuIG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgICAgICAgIGVmZmVjdCxcbiAgICAgICAgICBhY3Rpb25zOiBhY3Rpb25NYXBbYWN0aW9uXSxcbiAgICAgICAgICByZXNvdXJjZXM6IFt0aGlzLmJ1Y2tldC5idWNrZXRBcm5dLFxuICAgICAgICAgIGNvbmRpdGlvbnM6IHtcbiAgICAgICAgICAgIFN0cmluZ0xpa2U6IHtcbiAgICAgICAgICAgICAgJ3MzOnByZWZpeCc6IEFycmF5LmZyb20oczNQcmVmaXhlcykuZmxhdE1hcCh0b0NvbmRpdGlvblByZWZpeCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuY29uc3QgYWN0aW9uTWFwOiBSZWNvcmQ8SW50ZXJuYWxTdG9yYWdlQWN0aW9uLCBzdHJpbmdbXT4gPSB7XG4gIGdldDogWydzMzpHZXRPYmplY3QnXSxcbiAgbGlzdDogWydzMzpMaXN0QnVja2V0J10sXG4gIHdyaXRlOiBbJ3MzOlB1dE9iamVjdCddLFxuICBkZWxldGU6IFsnczM6RGVsZXRlT2JqZWN0J10sXG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgcHJlZml4IGxpa2UgZm9vL2Jhci8qIGludG8gW2Zvby9iYXIvLCBmb28vYmFyLypdXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSB0byBncmFudCB0aGUgYWJpbGl0eSB0byBsaXN0IGFsbCBvYmplY3RzIGRpcmVjdGx5IGluIFwiZm9vL2JhclwiIGFuZCBhbGwgb2JqZWN0cyB1bmRlciBcImZvby9iYXJcIlxuICovXG5jb25zdCB0b0NvbmRpdGlvblByZWZpeCA9IChwcmVmaXg6IFN0b3JhZ2VQYXRoKSA9PiB7XG4gIGNvbnN0IG5vVHJhaWxpbmdXaWxkY2FyZCA9IHByZWZpeC5zbGljZSgwLCAtMSk7XG4gIHJldHVybiBbcHJlZml4LCBub1RyYWlsaW5nV2lsZGNhcmRdO1xufTtcbiJdfQ==