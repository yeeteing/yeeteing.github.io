import { AmplifyUserError, CallerDirectoryExtractor, TagName, } from '@aws-amplify/platform-core';
import { Duration, Size, Stack, Tags } from 'aws-cdk-lib';
import { Rule } from 'aws-cdk-lib/aws-events';
import * as targets from 'aws-cdk-lib/aws-events-targets';
import { Architecture, LayerVersion, Runtime, } from 'aws-cdk-lib/aws-lambda';
import { LogLevel as EsBuildLogLevel, NodejsFunction, OutputFormat, } from 'aws-cdk-lib/aws-lambda-nodejs';
import { readFileSync } from 'fs';
import { createRequire } from 'module';
import { EOL } from 'os';
import * as path from 'path';
import { FunctionEnvironmentTranslator } from './function_env_translator.js';
import { FunctionEnvironmentTypeGenerator } from './function_env_type_generator.js';
import { FunctionLayerArnParser } from './layer_parser.js';
import { convertLoggingOptionsToCDK } from './logging_options_parser.js';
import { convertFunctionSchedulesToRuleSchedules } from './schedule_parser.js';
import { ProvidedFunctionFactory, } from './provided_function_factory.js';
import { AmplifyFunctionBase } from './function_construct_base.js';
import { FunctionResourceAccessAcceptor } from './resource_access_acceptor.js';
/**
 * Entry point for defining a function in the Amplify ecosystem
 */
// This is the "implementation overload", it's not visible in public api.
// We have to use function notation instead of arrow notation.
// Arrow notation does not support overloads.
// eslint-disable-next-line no-restricted-syntax
export function defineFunction(propsOrProvider = {}, providerProps) {
    if (propsOrProvider && typeof propsOrProvider === 'function') {
        return new ProvidedFunctionFactory(propsOrProvider, providerProps);
    }
    return new FunctionFactory(propsOrProvider, new Error().stack);
}
/**
 * Create Lambda functions in the context of an Amplify backend definition
 */
class FunctionFactory {
    props;
    callerStack;
    generator;
    /**
     * Create a new AmplifyFunctionFactory
     */
    constructor(props, callerStack) {
        this.props = props;
        this.callerStack = callerStack;
    }
    /**
     * Creates an instance of AmplifyFunction within the provided Amplify context
     */
    getInstance = ({ constructContainer, outputStorageStrategy, resourceNameValidator, }) => {
        if (!this.generator) {
            this.generator = new FunctionGenerator(this.hydrateDefaults(resourceNameValidator), outputStorageStrategy);
        }
        return constructContainer.getOrCompute(this.generator);
    };
    hydrateDefaults = (resourceNameValidator) => {
        const name = this.resolveName();
        resourceNameValidator?.validate(name);
        return {
            name,
            entry: this.resolveEntry(),
            timeoutSeconds: this.resolveTimeout(),
            memoryMB: this.resolveMemory(),
            ephemeralStorageSizeMB: this.resolveEphemeralStorageSize(),
            environment: this.resolveEnvironment(),
            runtime: this.resolveRuntime(),
            architecture: this.resolveArchitecture(),
            schedule: this.resolveSchedule(),
            bundling: this.resolveBundling(),
            layers: this.props.layers ?? {},
            resourceGroupName: this.props.resourceGroupName ?? 'function',
            logging: this.props.logging ?? {},
        };
    };
    resolveName = () => {
        // If name is set explicitly, use that
        if (this.props.name) {
            return this.props.name;
        }
        // If entry is set, use the basename of the entry path
        if (this.props.entry) {
            return path.parse(this.props.entry).name;
        }
        // Otherwise, use the directory name where the function is defined
        return path.basename(new CallerDirectoryExtractor(this.callerStack).extract());
    };
    resolveEntry = () => {
        // if entry is not set, default to handler.ts
        if (!this.props.entry) {
            return path.join(new CallerDirectoryExtractor(this.callerStack).extract(), 'handler.ts');
        }
        // if entry is absolute use that
        if (path.isAbsolute(this.props.entry)) {
            return this.props.entry;
        }
        // if entry is relative, compute with respect to the caller directory
        return path.join(new CallerDirectoryExtractor(this.callerStack).extract(), this.props.entry);
    };
    resolveTimeout = () => {
        const timeoutMin = 1;
        const timeoutMax = 60 * 15; // 15 minutes in seconds
        const timeoutDefault = 3;
        if (this.props.timeoutSeconds === undefined) {
            return timeoutDefault;
        }
        if (!isWholeNumberBetweenInclusive(this.props.timeoutSeconds, timeoutMin, timeoutMax)) {
            throw new AmplifyUserError('InvalidTimeoutError', {
                message: `Invalid function timeout of ${this.props.timeoutSeconds}`,
                resolution: `timeoutSeconds must be a whole number between ${timeoutMin} and ${timeoutMax} inclusive`,
            });
        }
        return this.props.timeoutSeconds;
    };
    resolveMemory = () => {
        const memoryMin = 128;
        const memoryMax = 10240;
        const memoryDefault = 512;
        if (this.props.memoryMB === undefined) {
            return memoryDefault;
        }
        if (!isWholeNumberBetweenInclusive(this.props.memoryMB, memoryMin, memoryMax)) {
            throw new AmplifyUserError('InvalidMemoryMBError', {
                message: `Invalid function memoryMB of ${this.props.memoryMB}`,
                resolution: `memoryMB must be a whole number between ${memoryMin} and ${memoryMax} inclusive`,
            });
        }
        return this.props.memoryMB;
    };
    resolveEphemeralStorageSize = () => {
        const ephemeralStorageSizeMin = 512;
        const ephemeralStorageSizeMax = 10240;
        const ephemeralStorageSizeDefault = 512;
        if (this.props.ephemeralStorageSizeMB === undefined) {
            return ephemeralStorageSizeDefault;
        }
        if (!isWholeNumberBetweenInclusive(this.props.ephemeralStorageSizeMB, ephemeralStorageSizeMin, ephemeralStorageSizeMax)) {
            throw new AmplifyUserError('InvalidEphemeralStorageSizeMBError', {
                message: `Invalid function ephemeralStorageSizeMB of ${this.props.ephemeralStorageSizeMB}`,
                resolution: `ephemeralStorageSizeMB must be a whole number between ${ephemeralStorageSizeMin} and ${ephemeralStorageSizeMax} inclusive`,
            });
        }
        return this.props.ephemeralStorageSizeMB;
    };
    resolveEnvironment = () => {
        if (this.props.environment === undefined) {
            return {};
        }
        const invalidKeys = [];
        Object.keys(this.props.environment).forEach((key) => {
            // validate using key pattern from https://docs.aws.amazon.com/lambda/latest/api/API_Environment.html
            if (!key.match(/^[a-zA-Z]([a-zA-Z0-9_])+$/)) {
                invalidKeys.push(key);
            }
        });
        if (invalidKeys.length > 0) {
            throw new AmplifyUserError('InvalidEnvironmentKeyError', {
                message: `Invalid function environment key(s): ${invalidKeys.join(', ')}`,
                resolution: 'Environment keys must match [a-zA-Z]([a-zA-Z0-9_])+ and be at least 2 characters',
            });
        }
        return this.props.environment;
    };
    resolveRuntime = () => {
        const runtimeDefault = 20;
        // if runtime is not set, default to the oldest LTS
        if (!this.props.runtime) {
            return runtimeDefault;
        }
        if (!(this.props.runtime in nodeVersionMap)) {
            throw new AmplifyUserError('InvalidRuntimeError', {
                message: `Invalid function runtime of ${this.props.runtime}`,
                resolution: `runtime must be one of the following: ${Object.keys(nodeVersionMap).join(', ')}`,
            });
        }
        return this.props.runtime;
    };
    resolveArchitecture = () => {
        const architectureDefault = 'x86_64';
        if (!this.props.architecture) {
            return architectureDefault;
        }
        if (!(this.props.architecture in architectureMap)) {
            throw new AmplifyUserError('InvalidArchitectureError', {
                message: `Invalid function architecture of ${this.props.architecture}`,
                resolution: `architecture must be one of the following: ${Object.keys(architectureMap).join(', ')}`,
            });
        }
        return this.props.architecture;
    };
    resolveSchedule = () => {
        if (!this.props.schedule) {
            return [];
        }
        return this.props.schedule;
    };
    resolveBundling = () => {
        const bundlingDefault = {
            format: OutputFormat.ESM,
            bundleAwsSDK: true,
            loader: {
                '.node': 'file',
            },
            minify: true,
            sourceMap: true,
        };
        return {
            ...bundlingDefault,
            minify: this.resolveMinify(this.props.bundling),
        };
    };
    resolveMinify = (bundling) => {
        return bundling?.minify === undefined ? true : bundling.minify;
    };
}
class FunctionGenerator {
    props;
    outputStorageStrategy;
    resourceGroupName;
    constructor(props, outputStorageStrategy) {
        this.props = props;
        this.outputStorageStrategy = outputStorageStrategy;
        this.resourceGroupName = props.resourceGroupName;
    }
    generateContainerEntry = ({ scope, backendSecretResolver, }) => {
        // Move layer resolution here where we have access to scope
        const parser = new FunctionLayerArnParser(Stack.of(scope).region, Stack.of(scope).account);
        const resolvedLayerArns = parser.parseLayers(this.props.layers ?? {}, this.props.name);
        // resolve layers to LayerVersion objects for the NodejsFunction constructor
        const resolvedLayers = Object.entries(resolvedLayerArns).map(([key, arn]) => LayerVersion.fromLayerVersionArn(scope, `${this.props.name}-${key}-layer`, arn));
        return new AmplifyFunction(scope, this.props.name, { ...this.props, resolvedLayers }, backendSecretResolver, this.outputStorageStrategy);
    };
}
class AmplifyFunction extends AmplifyFunctionBase {
    resources;
    functionEnvironmentTranslator;
    constructor(scope, id, props, backendSecretResolver, outputStorageStrategy) {
        super(scope, id, outputStorageStrategy);
        const runtime = nodeVersionMap[props.runtime];
        const require = createRequire(import.meta.url);
        const shims = runtime === Runtime.NODEJS_16_X
            ? []
            : [require.resolve('./lambda-shims/cjs_shim')];
        const ssmResolverFile = runtime === Runtime.NODEJS_16_X
            ? require.resolve('./lambda-shims/resolve_ssm_params_sdk_v2') // use aws cdk v2 in node 16
            : require.resolve('./lambda-shims/resolve_ssm_params');
        const invokeSsmResolverFile = require.resolve('./lambda-shims/invoke_ssm_shim');
        /**
         * This code concatenates the contents of the ssm resolver and invoker into a single line that can be used as the esbuild banner content
         * This banner is responsible for resolving the customer's SSM parameters at runtime
         */
        const bannerCode = readFileSync(ssmResolverFile, 'utf-8')
            .concat(readFileSync(invokeSsmResolverFile, 'utf-8'))
            .split(new RegExp(`${EOL}|\n|\r`, 'g'))
            .map((line) => line.replace(/\/\/.*$/, '')) // strip out inline comments because the banner is going to be flattened into a single line
            .join('');
        const functionEnvironmentTypeGenerator = new FunctionEnvironmentTypeGenerator(id);
        // esbuild runs as part of the NodejsFunction constructor, so we eagerly generate the process env shim without types so it can be included in the function bundle.
        // This will be overwritten with the typed file at the end of synthesis
        functionEnvironmentTypeGenerator.generateProcessEnvShim();
        let functionLambda;
        const cdkLoggingOptions = convertLoggingOptionsToCDK(props.logging);
        try {
            functionLambda = new NodejsFunction(scope, `${id}-lambda`, {
                entry: props.entry,
                timeout: Duration.seconds(props.timeoutSeconds),
                memorySize: props.memoryMB,
                architecture: architectureMap[props.architecture],
                ephemeralStorageSize: Size.mebibytes(props.ephemeralStorageSizeMB),
                runtime: nodeVersionMap[props.runtime],
                layers: props.resolvedLayers,
                bundling: {
                    ...props.bundling,
                    banner: bannerCode,
                    inject: shims,
                    externalModules: Object.keys(props.layers),
                    logLevel: EsBuildLogLevel.ERROR,
                },
                logRetention: cdkLoggingOptions.retention,
                applicationLogLevelV2: cdkLoggingOptions.level,
                loggingFormat: cdkLoggingOptions.format,
            });
        }
        catch (error) {
            // If the error is from ES Bundler which is executed as a child process by CDK,
            // then the error from CDK contains the command that was executed along with the exit status.
            // Wrapping it here  would cause the cdk_deployer to re-throw this wrapped exception
            // instead of scraping the stderr for actual ESBuild error.
            if (error instanceof Error &&
                error.message.match(/Failed to bundle asset.*exited with status/)) {
                throw error;
            }
            throw new AmplifyUserError('NodeJSFunctionConstructInitializationError', {
                message: 'Failed to instantiate nodejs function construct',
                resolution: 'See the underlying error message for more details. Use `--debug` for additional debugging information.',
            }, error);
        }
        try {
            const schedules = convertFunctionSchedulesToRuleSchedules(functionLambda, props.schedule);
            const lambdaTarget = new targets.LambdaFunction(functionLambda);
            schedules.forEach((schedule, index) => {
                // Lambda name will be prepended to rule id, so only using index here for uniqueness
                const rule = new Rule(functionLambda, `schedule${index}`, {
                    schedule,
                });
                rule.addTarget(lambdaTarget);
            });
        }
        catch (error) {
            throw new AmplifyUserError('FunctionScheduleInitializationError', {
                message: 'Failed to instantiate schedule for nodejs function',
                resolution: 'See the underlying error message for more details.',
            }, error);
        }
        Tags.of(functionLambda).add(TagName.FRIENDLY_NAME, id);
        this.functionEnvironmentTranslator = new FunctionEnvironmentTranslator(functionLambda, props.environment, backendSecretResolver, functionEnvironmentTypeGenerator);
        this.resources = {
            lambda: functionLambda,
            cfnResources: {
                cfnFunction: functionLambda.node.findChild('Resource'),
            },
        };
        this.storeOutput();
    }
    addEnvironment = (key, value) => {
        this.functionEnvironmentTranslator.addEnvironmentEntry(key, value);
    };
    getResourceAccessAcceptor = () => new FunctionResourceAccessAcceptor(this, this.functionEnvironmentTranslator);
}
const isWholeNumberBetweenInclusive = (test, min, max) => min <= test && test <= max && test % 1 === 0;
const nodeVersionMap = {
    16: Runtime.NODEJS_16_X,
    18: Runtime.NODEJS_18_X,
    20: Runtime.NODEJS_20_X,
    22: Runtime.NODEJS_22_X,
};
const architectureMap = {
    arm64: Architecture.ARM_64,
    x86_64: Architecture.X86_64,
};
//# sourceMappingURL=data:application/json;base64,