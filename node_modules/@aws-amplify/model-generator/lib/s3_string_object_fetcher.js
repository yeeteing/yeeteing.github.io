import { AmplifyFault } from '@aws-amplify/platform-core';
import { GetObjectCommand, NoSuchBucket } from '@aws-sdk/client-s3';
/**
 * Handles fetching an object from an s3 bucket and parsing the object contents to a string
 */
export class S3StringObjectFetcher {
    s3Client;
    /**
     * Creates an S3StringObjectFetcher with the provided s3 client
     */
    constructor(s3Client) {
        this.s3Client = s3Client;
    }
    /**
     * Fetches an s3 object and converts its contents to a string
     */
    fetch = async (uri) => {
        const { bucket, key } = this.parseS3Uri(uri);
        try {
            const getSchemaCommandResult = await this.s3Client.send(new GetObjectCommand({ Bucket: bucket, Key: key }));
            const schema = await getSchemaCommandResult.Body?.transformToString();
            if (!schema) {
                // eslint-disable-next-line @aws-amplify/amplify-backend-rules/prefer-amplify-errors
                throw new Error('Error on parsing output schema');
            }
            return schema;
        }
        catch (caught) {
            if (caught instanceof NoSuchBucket) {
                throw new AmplifyFault('NoSuchBucketFault', {
                    message: `${bucket} does not exist. \n
            Try redeploying your changes again, if the error persists, create a bug report here: https://github.com/aws-amplify/amplify-backend/issues/new/choose`,
                }, caught);
            }
            else {
                throw caught;
            }
        }
    };
    parseS3Uri = (uri) => {
        const { hostname, pathname } = new URL(uri);
        return {
            bucket: hostname,
            key: pathname.replace('/', ''),
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNfc3RyaW5nX29iamVjdF9mZXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3MzX3N0cmluZ19vYmplY3RfZmV0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBWSxNQUFNLG9CQUFvQixDQUFDO0FBRTlFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUlIO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFHLENBQUM7SUFFbkQ7O09BRUc7SUFDSCxLQUFLLEdBQUcsS0FBSyxFQUFFLEdBQVcsRUFBRSxFQUFFO1FBQzVCLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUM7WUFDSCxNQUFNLHNCQUFzQixHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ3JELElBQUksZ0JBQWdCLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUNuRCxDQUFDO1lBQ0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQztZQUN0RSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBQ1osb0ZBQW9GO2dCQUNwRixNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7WUFDcEQsQ0FBQztZQUNELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUM7UUFBQyxPQUFPLE1BQU0sRUFBRSxDQUFDO1lBQ2hCLElBQUksTUFBTSxZQUFZLFlBQVksRUFBRSxDQUFDO2dCQUNuQyxNQUFNLElBQUksWUFBWSxDQUNwQixtQkFBbUIsRUFDbkI7b0JBQ0UsT0FBTyxFQUFFLEdBQUcsTUFBTTtrS0FDb0k7aUJBQ3ZKLEVBQ0QsTUFBTSxDQUNQLENBQUM7WUFDSixDQUFDO2lCQUFNLENBQUM7Z0JBQ04sTUFBTSxNQUFNLENBQUM7WUFDZixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUMsQ0FBQztJQUVNLFVBQVUsR0FBRyxDQUFDLEdBQVcsRUFBbUMsRUFBRTtRQUNwRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLE9BQU87WUFDTCxNQUFNLEVBQUUsUUFBUTtZQUNoQixHQUFHLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO1NBQy9CLENBQUM7SUFDSixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFtcGxpZnlGYXVsdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IEdldE9iamVjdENvbW1hbmQsIE5vU3VjaEJ1Y2tldCwgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuXG4vKipcbiAqIEhhbmRsZXMgZmV0Y2hpbmcgYW4gb2JqZWN0IGZyb20gYW4gczMgYnVja2V0IGFuZCBwYXJzaW5nIHRoZSBvYmplY3QgY29udGVudHMgdG8gYSBzdHJpbmdcbiAqL1xuZXhwb3J0IGNsYXNzIFMzU3RyaW5nT2JqZWN0RmV0Y2hlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIFMzU3RyaW5nT2JqZWN0RmV0Y2hlciB3aXRoIHRoZSBwcm92aWRlZCBzMyBjbGllbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgczNDbGllbnQ6IFMzQ2xpZW50KSB7fVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGFuIHMzIG9iamVjdCBhbmQgY29udmVydHMgaXRzIGNvbnRlbnRzIHRvIGEgc3RyaW5nXG4gICAqL1xuICBmZXRjaCA9IGFzeW5jICh1cmk6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHsgYnVja2V0LCBrZXkgfSA9IHRoaXMucGFyc2VTM1VyaSh1cmkpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBnZXRTY2hlbWFDb21tYW5kUmVzdWx0ID0gYXdhaXQgdGhpcy5zM0NsaWVudC5zZW5kKFxuICAgICAgICBuZXcgR2V0T2JqZWN0Q29tbWFuZCh7IEJ1Y2tldDogYnVja2V0LCBLZXk6IGtleSB9KSxcbiAgICAgICk7XG4gICAgICBjb25zdCBzY2hlbWEgPSBhd2FpdCBnZXRTY2hlbWFDb21tYW5kUmVzdWx0LkJvZHk/LnRyYW5zZm9ybVRvU3RyaW5nKCk7XG4gICAgICBpZiAoIXNjaGVtYSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGF3cy1hbXBsaWZ5L2FtcGxpZnktYmFja2VuZC1ydWxlcy9wcmVmZXItYW1wbGlmeS1lcnJvcnNcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBvbiBwYXJzaW5nIG91dHB1dCBzY2hlbWEnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzY2hlbWE7XG4gICAgfSBjYXRjaCAoY2F1Z2h0KSB7XG4gICAgICBpZiAoY2F1Z2h0IGluc3RhbmNlb2YgTm9TdWNoQnVja2V0KSB7XG4gICAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoXG4gICAgICAgICAgJ05vU3VjaEJ1Y2tldEZhdWx0JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlOiBgJHtidWNrZXR9IGRvZXMgbm90IGV4aXN0LiBcXG5cbiAgICAgICAgICAgIFRyeSByZWRlcGxveWluZyB5b3VyIGNoYW5nZXMgYWdhaW4sIGlmIHRoZSBlcnJvciBwZXJzaXN0cywgY3JlYXRlIGEgYnVnIHJlcG9ydCBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vYXdzLWFtcGxpZnkvYW1wbGlmeS1iYWNrZW5kL2lzc3Vlcy9uZXcvY2hvb3NlYCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNhdWdodCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGNhdWdodDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBwYXJzZVMzVXJpID0gKHVyaTogc3RyaW5nKTogeyBidWNrZXQ6IHN0cmluZzsga2V5OiBzdHJpbmcgfSA9PiB7XG4gICAgY29uc3QgeyBob3N0bmFtZSwgcGF0aG5hbWUgfSA9IG5ldyBVUkwodXJpKTtcbiAgICByZXR1cm4ge1xuICAgICAgYnVja2V0OiBob3N0bmFtZSxcbiAgICAgIGtleTogcGF0aG5hbWUucmVwbGFjZSgnLycsICcnKSxcbiAgICB9O1xuICB9O1xufVxuIl19