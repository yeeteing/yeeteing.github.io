"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IamChanges = void 0;
const service_spec_types_1 = require("@aws-cdk/service-spec-types");
const chalk = require("chalk");
const iam_identity_center_1 = require("./iam-identity-center");
const managed_policy_1 = require("./managed-policy");
const statement_1 = require("./statement");
const diffable_1 = require("../diffable");
const render_intrinsics_1 = require("../render-intrinsics");
const util_1 = require("../util");
/**
 * Changes to IAM statements and IAM identity center
 */
class IamChanges {
    constructor(props) {
        // each entry in a DiffableCollection is used to generate a single row of the security changes table that is presented for cdk diff and cdk deploy.
        this.statements = new diffable_1.DiffableCollection();
        this.managedPolicies = new diffable_1.DiffableCollection();
        this.ssoPermissionSets = new diffable_1.DiffableCollection();
        this.ssoAssignments = new diffable_1.DiffableCollection();
        this.ssoInstanceACAConfigs = new diffable_1.DiffableCollection();
        for (const propertyChange of props.propertyChanges) {
            this.readPropertyChange(propertyChange);
        }
        for (const resourceChange of props.resourceChanges) {
            this.readResourceChange(resourceChange);
        }
        this.statements.calculateDiff();
        this.managedPolicies.calculateDiff();
        this.ssoPermissionSets.calculateDiff();
        this.ssoAssignments.calculateDiff();
        this.ssoInstanceACAConfigs.calculateDiff();
    }
    get hasChanges() {
        return (this.statements.hasChanges
            || this.managedPolicies.hasChanges
            || this.ssoPermissionSets.hasChanges
            || this.ssoAssignments.hasChanges
            || this.ssoInstanceACAConfigs.hasChanges);
    }
    /**
     * Return whether the changes include broadened permissions
     *
     * Permissions are broadened if positive statements are added or
     * negative statements are removed, or if managed policies are added.
     */
    get permissionsBroadened() {
        return this.statements.additions.some(s => !s.isNegativeStatement)
            || this.statements.removals.some(s => s.isNegativeStatement)
            || this.managedPolicies.hasAdditions
            || this.ssoPermissionSets.hasAdditions
            || this.ssoAssignments.hasAdditions
            || this.ssoInstanceACAConfigs.hasAdditions;
    }
    /**
     * Return a summary table of changes
     */
    summarizeStatements() {
        const ret = [];
        const header = ['', 'Resource', 'Effect', 'Action', 'Principal', 'Condition'];
        // First generate all lines, then sort on Resource so that similar resources are together
        for (const statement of this.statements.additions) {
            const renderedStatement = statement.render();
            ret.push([
                '+',
                renderedStatement.resource,
                renderedStatement.effect,
                renderedStatement.action,
                renderedStatement.principal,
                renderedStatement.condition,
            ].map(s => chalk.green(s)));
        }
        for (const statement of this.statements.removals) {
            const renderedStatement = statement.render();
            ret.push([
                '-',
                renderedStatement.resource,
                renderedStatement.effect,
                renderedStatement.action,
                renderedStatement.principal,
                renderedStatement.condition,
            ].map(s => chalk.red(s)));
        }
        // Sort by 2nd column
        ret.sort((0, util_1.makeComparator)((row) => [row[1]]));
        ret.splice(0, 0, header);
        return ret;
    }
    summarizeManagedPolicies() {
        const ret = [];
        const header = ['', 'Resource', 'Managed Policy ARN'];
        for (const att of this.managedPolicies.additions) {
            ret.push([
                '+',
                att.identityArn,
                att.managedPolicyArn,
            ].map(s => chalk.green(s)));
        }
        for (const att of this.managedPolicies.removals) {
            ret.push([
                '-',
                att.identityArn,
                att.managedPolicyArn,
            ].map(s => chalk.red(s)));
        }
        // Sort by 2nd column
        ret.sort((0, util_1.makeComparator)((row) => [row[1]]));
        ret.splice(0, 0, header);
        return ret;
    }
    summarizeSsoAssignments() {
        const ret = [];
        const header = ['', 'Resource', 'InstanceArn', 'PermissionSetArn', 'PrincipalId', 'PrincipalType', 'TargetId', 'TargetType'];
        for (const att of this.ssoAssignments.additions) {
            ret.push([
                '+',
                att.cfnLogicalId || '',
                att.ssoInstanceArn || '',
                att.permissionSetArn || '',
                att.principalId || '',
                att.principalType || '',
                att.targetId || '',
                att.targetType || '',
            ].map(s => chalk.green(s)));
        }
        for (const att of this.ssoAssignments.removals) {
            ret.push([
                '-',
                att.cfnLogicalId || '',
                att.ssoInstanceArn || '',
                att.permissionSetArn || '',
                att.principalId || '',
                att.principalType || '',
                att.targetId || '',
                att.targetType || '',
            ].map(s => chalk.red(s)));
        }
        // Sort by resource name to ensure a unique value is used for sorting
        ret.sort((0, util_1.makeComparator)((row) => [row[1]]));
        ret.splice(0, 0, header);
        return ret;
    }
    summarizeSsoInstanceACAConfigs() {
        const ret = [];
        const header = ['', 'Resource', 'InstanceArn', 'AccessControlAttributes'];
        function formatAccessControlAttribute(aca) {
            return `Key: ${aca?.Key}, Values: [${aca?.Value?.Source.join(', ')}]`;
        }
        for (const att of this.ssoInstanceACAConfigs.additions) {
            ret.push([
                '+',
                att.cfnLogicalId || '',
                att.ssoInstanceArn || '',
                att.accessControlAttributes?.map(formatAccessControlAttribute).join('\n') || '',
            ].map(s => chalk.green(s)));
        }
        for (const att of this.ssoInstanceACAConfigs.removals) {
            ret.push([
                '-',
                att.cfnLogicalId || '',
                att.ssoInstanceArn || '',
                att.accessControlAttributes?.map(formatAccessControlAttribute).join('\n') || '',
            ].map(s => chalk.red(s)));
        }
        // Sort by resource name to ensure a unique value is used for sorting
        ret.sort((0, util_1.makeComparator)((row) => [row[1]]));
        ret.splice(0, 0, header);
        return ret;
    }
    summarizeSsoPermissionSets() {
        const ret = [];
        const header = ['', 'Resource', 'InstanceArn', 'PermissionSet name', 'PermissionsBoundary', 'CustomerManagedPolicyReferences'];
        function formatManagedPolicyRef(s) {
            return `Name: ${s?.Name || ''}, Path: ${s?.Path || ''}`;
        }
        function formatSsoPermissionsBoundary(ssoPb) {
            // ManagedPolicyArn OR CustomerManagedPolicyReference can be specified -- but not both.
            if (ssoPb?.ManagedPolicyArn !== undefined) {
                return `ManagedPolicyArn: ${ssoPb?.ManagedPolicyArn || ''}`;
            }
            else if (ssoPb?.CustomerManagedPolicyReference !== undefined) {
                return `CustomerManagedPolicyReference: {\n  ${formatManagedPolicyRef(ssoPb?.CustomerManagedPolicyReference)}\n}`;
            }
            else {
                return '';
            }
        }
        for (const att of this.ssoPermissionSets.additions) {
            ret.push([
                '+',
                att.cfnLogicalId || '',
                att.ssoInstanceArn || '',
                att.name || '',
                formatSsoPermissionsBoundary(att.ssoPermissionsBoundary),
                att.ssoCustomerManagedPolicyReferences?.map(formatManagedPolicyRef).join('\n') || '',
            ].map(s => chalk.green(s)));
        }
        for (const att of this.ssoPermissionSets.removals) {
            ret.push([
                '-',
                att.cfnLogicalId || '',
                att.ssoInstanceArn || '',
                att.name || '',
                formatSsoPermissionsBoundary(att.ssoPermissionsBoundary),
                att.ssoCustomerManagedPolicyReferences?.map(formatManagedPolicyRef).join('\n') || '',
            ].map(s => chalk.red(s)));
        }
        // Sort by resource name to ensure a unique value is used for sorting
        ret.sort((0, util_1.makeComparator)((row) => [row[1]]));
        ret.splice(0, 0, header);
        return ret;
    }
    /**
     * Return a machine-readable version of the changes.
     * This is only used in tests.
     *
     * @internal
     */
    _toJson() {
        return (0, util_1.deepRemoveUndefined)({
            statementAdditions: (0, util_1.dropIfEmpty)(this.statements.additions.map(s => s._toJson())),
            statementRemovals: (0, util_1.dropIfEmpty)(this.statements.removals.map(s => s._toJson())),
            managedPolicyAdditions: (0, util_1.dropIfEmpty)(this.managedPolicies.additions.map(s => s._toJson())),
            managedPolicyRemovals: (0, util_1.dropIfEmpty)(this.managedPolicies.removals.map(s => s._toJson())),
        });
    }
    readPropertyChange(propertyChange) {
        switch (propertyChange.scrutinyType) {
            case service_spec_types_1.PropertyScrutinyType.InlineIdentityPolicies:
                // AWS::IAM::{ Role | User | Group }.Policies
                this.statements.addOld(...this.readIdentityPolicies(propertyChange.oldValue, propertyChange.resourceLogicalId));
                this.statements.addNew(...this.readIdentityPolicies(propertyChange.newValue, propertyChange.resourceLogicalId));
                break;
            case service_spec_types_1.PropertyScrutinyType.InlineResourcePolicy:
                // Any PolicyDocument on a resource (including AssumeRolePolicyDocument)
                this.statements.addOld(...this.readResourceStatements(propertyChange.oldValue, propertyChange.resourceLogicalId));
                this.statements.addNew(...this.readResourceStatements(propertyChange.newValue, propertyChange.resourceLogicalId));
                break;
            case service_spec_types_1.PropertyScrutinyType.ManagedPolicies:
                // Just a list of managed policies
                this.managedPolicies.addOld(...this.readManagedPolicies(propertyChange.oldValue, propertyChange.resourceLogicalId));
                this.managedPolicies.addNew(...this.readManagedPolicies(propertyChange.newValue, propertyChange.resourceLogicalId));
                break;
        }
    }
    readResourceChange(resourceChange) {
        switch (resourceChange.scrutinyType) {
            case service_spec_types_1.ResourceScrutinyType.IdentityPolicyResource:
                // AWS::IAM::Policy
                this.statements.addOld(...this.readIdentityPolicyResource(resourceChange.oldProperties));
                this.statements.addNew(...this.readIdentityPolicyResource(resourceChange.newProperties));
                break;
            case service_spec_types_1.ResourceScrutinyType.ResourcePolicyResource:
                // AWS::*::{Bucket,Queue,Topic}Policy
                this.statements.addOld(...this.readResourcePolicyResource(resourceChange.oldProperties));
                this.statements.addNew(...this.readResourcePolicyResource(resourceChange.newProperties));
                break;
            case service_spec_types_1.ResourceScrutinyType.LambdaPermission:
                this.statements.addOld(...this.readLambdaStatements(resourceChange.oldProperties));
                this.statements.addNew(...this.readLambdaStatements(resourceChange.newProperties));
                break;
            case service_spec_types_1.ResourceScrutinyType.SsoPermissionSet:
                this.ssoPermissionSets.addOld(...this.readSsoPermissionSet(resourceChange.oldProperties, resourceChange.resourceLogicalId));
                this.ssoPermissionSets.addNew(...this.readSsoPermissionSet(resourceChange.newProperties, resourceChange.resourceLogicalId));
                break;
            case service_spec_types_1.ResourceScrutinyType.SsoAssignmentResource:
                this.ssoAssignments.addOld(...this.readSsoAssignments(resourceChange.oldProperties, resourceChange.resourceLogicalId));
                this.ssoAssignments.addNew(...this.readSsoAssignments(resourceChange.newProperties, resourceChange.resourceLogicalId));
                break;
            case service_spec_types_1.ResourceScrutinyType.SsoInstanceACAConfigResource:
                this.ssoInstanceACAConfigs.addOld(...this.readSsoInstanceACAConfigs(resourceChange.oldProperties, resourceChange.resourceLogicalId));
                this.ssoInstanceACAConfigs.addNew(...this.readSsoInstanceACAConfigs(resourceChange.newProperties, resourceChange.resourceLogicalId));
                break;
        }
    }
    /**
     * Parse a list of policies on an identity
     */
    readIdentityPolicies(policies, logicalId) {
        if (policies === undefined || !Array.isArray(policies)) {
            return [];
        }
        const appliesToPrincipal = 'AWS:${' + logicalId + '}';
        return (0, util_1.flatMap)(policies, (policy) => {
            // check if the Policy itself is not an intrinsic, like an Fn::If
            const unparsedStatement = policy.PolicyDocument?.Statement
                ? policy.PolicyDocument.Statement
                : policy;
            return defaultPrincipal(appliesToPrincipal, (0, statement_1.parseStatements)((0, render_intrinsics_1.renderIntrinsics)(unparsedStatement)));
        });
    }
    /**
     * Parse an IAM::Policy resource
     */
    readIdentityPolicyResource(properties) {
        if (properties === undefined) {
            return [];
        }
        properties = (0, render_intrinsics_1.renderIntrinsics)(properties);
        const principals = (properties.Groups || []).concat(properties.Users || []).concat(properties.Roles || []);
        return (0, util_1.flatMap)(principals, (principal) => {
            const ref = 'AWS:' + principal;
            return defaultPrincipal(ref, (0, statement_1.parseStatements)(properties.PolicyDocument.Statement));
        });
    }
    readSsoInstanceACAConfigs(properties, logicalId) {
        if (properties === undefined) {
            return [];
        }
        properties = (0, render_intrinsics_1.renderIntrinsics)(properties);
        return [new iam_identity_center_1.SsoInstanceACAConfig({
                cfnLogicalId: '${' + logicalId + '}',
                ssoInstanceArn: properties.InstanceArn,
                accessControlAttributes: properties.AccessControlAttributes,
            })];
    }
    readSsoAssignments(properties, logicalId) {
        if (properties === undefined) {
            return [];
        }
        properties = (0, render_intrinsics_1.renderIntrinsics)(properties);
        return [new iam_identity_center_1.SsoAssignment({
                cfnLogicalId: '${' + logicalId + '}',
                ssoInstanceArn: properties.InstanceArn,
                permissionSetArn: properties.PermissionSetArn,
                principalId: properties.PrincipalId,
                principalType: properties.PrincipalType,
                targetId: properties.TargetId,
                targetType: properties.TargetType,
            })];
    }
    readSsoPermissionSet(properties, logicalId) {
        if (properties === undefined) {
            return [];
        }
        properties = (0, render_intrinsics_1.renderIntrinsics)(properties);
        return [new iam_identity_center_1.SsoPermissionSet({
                cfnLogicalId: '${' + logicalId + '}',
                name: properties.Name,
                ssoInstanceArn: properties.InstanceArn,
                ssoCustomerManagedPolicyReferences: properties.CustomerManagedPolicyReferences,
                ssoPermissionsBoundary: properties.PermissionsBoundary,
            })];
    }
    readResourceStatements(policy, logicalId) {
        if (policy === undefined) {
            return [];
        }
        const appliesToResource = '${' + logicalId + '.Arn}';
        return defaultResource(appliesToResource, (0, statement_1.parseStatements)((0, render_intrinsics_1.renderIntrinsics)(policy.Statement)));
    }
    /**
     * Parse an AWS::*::{Bucket,Topic,Queue}policy
     */
    readResourcePolicyResource(properties) {
        if (properties === undefined) {
            return [];
        }
        properties = (0, render_intrinsics_1.renderIntrinsics)(properties);
        const policyKeys = Object.keys(properties).filter(key => key.indexOf('Policy') > -1);
        // Find the key that identifies the resource(s) this policy applies to
        const resourceKeys = Object.keys(properties).filter(key => !policyKeys.includes(key) && !key.endsWith('Name'));
        let resources = resourceKeys.length === 1 ? properties[resourceKeys[0]] : ['???'];
        // For some resources, this is a singleton string, for some it's an array
        if (!Array.isArray(resources)) {
            resources = [resources];
        }
        return (0, util_1.flatMap)(resources, (resource) => {
            return defaultResource(resource, (0, statement_1.parseStatements)(properties[policyKeys[0]].Statement));
        });
    }
    readManagedPolicies(policyArns, logicalId) {
        if (!policyArns) {
            return [];
        }
        const rep = '${' + logicalId + '}';
        return managed_policy_1.ManagedPolicyAttachment.parseManagedPolicies(rep, (0, render_intrinsics_1.renderIntrinsics)(policyArns));
    }
    readLambdaStatements(properties) {
        if (!properties) {
            return [];
        }
        return [(0, statement_1.parseLambdaPermission)((0, render_intrinsics_1.renderIntrinsics)(properties))];
    }
}
exports.IamChanges = IamChanges;
IamChanges.IamPropertyScrutinies = [
    service_spec_types_1.PropertyScrutinyType.InlineIdentityPolicies,
    service_spec_types_1.PropertyScrutinyType.InlineResourcePolicy,
    service_spec_types_1.PropertyScrutinyType.ManagedPolicies,
];
IamChanges.IamResourceScrutinies = [
    service_spec_types_1.ResourceScrutinyType.ResourcePolicyResource,
    service_spec_types_1.ResourceScrutinyType.IdentityPolicyResource,
    service_spec_types_1.ResourceScrutinyType.LambdaPermission,
    service_spec_types_1.ResourceScrutinyType.SsoAssignmentResource,
    service_spec_types_1.ResourceScrutinyType.SsoInstanceACAConfigResource,
    service_spec_types_1.ResourceScrutinyType.SsoPermissionSet,
];
/**
 * Set an undefined or wildcarded principal on these statements
 */
function defaultPrincipal(principal, statements) {
    statements.forEach(s => s.principals.replaceEmpty(principal));
    statements.forEach(s => s.principals.replaceStar(principal));
    return statements;
}
/**
 * Set an undefined or wildcarded resource on these statements
 */
function defaultResource(resource, statements) {
    statements.forEach(s => s.resources.replaceEmpty(resource));
    statements.forEach(s => s.resources.replaceStar(resource));
    return statements;
}
//# sourceMappingURL=data:application/json;base64,