import { CustomResource, Lazy } from 'aws-cdk-lib';
/**
 * Resource provider ID for the backend secret resource.
 */
export const SECRET_RESOURCE_PROVIDER_ID = 'AmplifySecretFetcherResourceProvider';
class SecretFetcherCustomResource extends CustomResource {
    secrets;
    constructor(scope, id, props, secrets) {
        super(scope, id, {
            ...props,
        });
        this.secrets = secrets;
    }
    addSecret = (secretName) => {
        this.secrets.add(secretName);
    };
}
/**
 * Type of the backend custom CFN resource.
 */
const SECRET_RESOURCE_TYPE = `Custom::AmplifySecretFetcherResource`;
/**
 * The factory to create backend secret-fetcher resource.
 */
export class BackendSecretFetcherFactory {
    secretProviderFactory;
    /**
     * Creates a backend secret-fetcher resource factory.
     */
    constructor(secretProviderFactory) {
        this.secretProviderFactory = secretProviderFactory;
    }
    /**
     * Returns a resource if it exists in the input scope. Otherwise,
     * creates a new one.
     */
    getOrCreate = (scope, secretName, backendIdentifier) => {
        const secretResourceId = `AmplifySecretFetcherResource`;
        const existingResource = scope.node.tryFindChild(secretResourceId);
        if (existingResource) {
            existingResource.addSecret(secretName);
            return existingResource;
        }
        const secrets = new Set();
        secrets.add(secretName);
        const provider = this.secretProviderFactory.getOrCreateInstance(scope, SECRET_RESOURCE_PROVIDER_ID, backendIdentifier);
        // Sandbox deployment passes down the secret's last updated timestamp to
        // trigger secret update. It is to optimize sandbox deployment time by
        // leveraging cdk hotswap.
        const secretLastUpdated = scope.node.tryGetContext('secretLastUpdated') ?? Date.now();
        const customResourceProps = {
            namespace: backendIdentifier.namespace,
            name: backendIdentifier.name,
            type: backendIdentifier.type,
            secretNames: Lazy.list({
                produce: () => {
                    return Array.from(secrets);
                },
            }),
        };
        return new SecretFetcherCustomResource(scope, secretResourceId, {
            serviceToken: provider.serviceToken,
            properties: {
                ...customResourceProps,
                secretLastUpdated, // this property is only to trigger resource update event.
            },
            resourceType: SECRET_RESOURCE_TYPE,
        }, secrets);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VuZ2luZS9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGNBQWMsRUFBdUIsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBSXhFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMkJBQTJCLEdBQ3RDLHNDQUFzQyxDQUFDO0FBRXpDLE1BQU0sMkJBQTRCLFNBQVEsY0FBYztJQUM5QyxPQUFPLENBQWM7SUFDN0IsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FBMEIsRUFDMUIsT0FBb0I7UUFFcEIsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixHQUFHLEtBQUs7U0FDVCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0lBRU0sU0FBUyxHQUFHLENBQUMsVUFBa0IsRUFBRSxFQUFFO1FBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9CLENBQUMsQ0FBQztDQUNIO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLG9CQUFvQixHQUFHLHNDQUFzQyxDQUFDO0FBRXBFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUEyQjtJQUtuQjtJQUpuQjs7T0FFRztJQUNILFlBQ21CLHFCQUEwRDtRQUExRCwwQkFBcUIsR0FBckIscUJBQXFCLENBQXFDO0lBQzFFLENBQUM7SUFFSjs7O09BR0c7SUFDSCxXQUFXLEdBQUcsQ0FDWixLQUFnQixFQUNoQixVQUFrQixFQUNsQixpQkFBb0MsRUFDUCxFQUFFO1FBQy9CLE1BQU0sZ0JBQWdCLEdBQUcsOEJBQThCLENBQUM7UUFDeEQsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FDOUMsZ0JBQWdCLENBQ2MsQ0FBQztRQUVqQyxJQUFJLGdCQUFnQixFQUFFLENBQUM7WUFDckIsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3ZDLE9BQU8sZ0JBQWdCLENBQUM7UUFDMUIsQ0FBQztRQUNELE1BQU0sT0FBTyxHQUFnQixJQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFeEIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLG1CQUFtQixDQUM3RCxLQUFLLEVBQ0wsMkJBQTJCLEVBQzNCLGlCQUFpQixDQUNsQixDQUFDO1FBRUYsd0VBQXdFO1FBQ3hFLHNFQUFzRTtRQUN0RSwwQkFBMEI7UUFDMUIsTUFBTSxpQkFBaUIsR0FDckIsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFOUQsTUFBTSxtQkFBbUIsR0FBd0I7WUFDL0MsU0FBUyxFQUFFLGlCQUFpQixDQUFDLFNBQVM7WUFDdEMsSUFBSSxFQUFFLGlCQUFpQixDQUFDLElBQUk7WUFDNUIsSUFBSSxFQUFFLGlCQUFpQixDQUFDLElBQUk7WUFDNUIsV0FBVyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQ3JCLE9BQU8sRUFBRSxHQUFHLEVBQUU7b0JBQ1osT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUM3QixDQUFDO2FBQ0YsQ0FBQztTQUNILENBQUM7UUFFRixPQUFPLElBQUksMkJBQTJCLENBQ3BDLEtBQUssRUFDTCxnQkFBZ0IsRUFDaEI7WUFDRSxZQUFZLEVBQUUsUUFBUSxDQUFDLFlBQVk7WUFDbkMsVUFBVSxFQUFFO2dCQUNWLEdBQUcsbUJBQW1CO2dCQUN0QixpQkFBaUIsRUFBRSwwREFBMEQ7YUFDOUU7WUFDRCxZQUFZLEVBQUUsb0JBQW9CO1NBQ25DLEVBQ0QsT0FBTyxDQUNSLENBQUM7SUFDSixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQmFja2VuZFNlY3JldEZldGNoZXJQcm92aWRlckZhY3RvcnkgfSBmcm9tICcuL2JhY2tlbmRfc2VjcmV0X2ZldGNoZXJfcHJvdmlkZXJfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBDdXN0b21SZXNvdXJjZSwgQ3VzdG9tUmVzb3VyY2VQcm9wcywgTGF6eSB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBTZWNyZXRSZXNvdXJjZVByb3BzIH0gZnJvbSAnLi9sYW1iZGEvYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl90eXBlcy5qcyc7XG5cbi8qKlxuICogUmVzb3VyY2UgcHJvdmlkZXIgSUQgZm9yIHRoZSBiYWNrZW5kIHNlY3JldCByZXNvdXJjZS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNFQ1JFVF9SRVNPVVJDRV9QUk9WSURFUl9JRCA9XG4gICdBbXBsaWZ5U2VjcmV0RmV0Y2hlclJlc291cmNlUHJvdmlkZXInO1xuXG5jbGFzcyBTZWNyZXRGZXRjaGVyQ3VzdG9tUmVzb3VyY2UgZXh0ZW5kcyBDdXN0b21SZXNvdXJjZSB7XG4gIHByaXZhdGUgc2VjcmV0czogU2V0PHN0cmluZz47XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBwcm9wczogQ3VzdG9tUmVzb3VyY2VQcm9wcyxcbiAgICBzZWNyZXRzOiBTZXQ8c3RyaW5nPixcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICAuLi5wcm9wcyxcbiAgICB9KTtcbiAgICB0aGlzLnNlY3JldHMgPSBzZWNyZXRzO1xuICB9XG5cbiAgcHVibGljIGFkZFNlY3JldCA9IChzZWNyZXROYW1lOiBzdHJpbmcpID0+IHtcbiAgICB0aGlzLnNlY3JldHMuYWRkKHNlY3JldE5hbWUpO1xuICB9O1xufVxuXG4vKipcbiAqIFR5cGUgb2YgdGhlIGJhY2tlbmQgY3VzdG9tIENGTiByZXNvdXJjZS5cbiAqL1xuY29uc3QgU0VDUkVUX1JFU09VUkNFX1RZUEUgPSBgQ3VzdG9tOjpBbXBsaWZ5U2VjcmV0RmV0Y2hlclJlc291cmNlYDtcblxuLyoqXG4gKiBUaGUgZmFjdG9yeSB0byBjcmVhdGUgYmFja2VuZCBzZWNyZXQtZmV0Y2hlciByZXNvdXJjZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhY2tlbmRTZWNyZXRGZXRjaGVyRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgYmFja2VuZCBzZWNyZXQtZmV0Y2hlciByZXNvdXJjZSBmYWN0b3J5LlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZWNyZXRQcm92aWRlckZhY3Rvcnk6IEJhY2tlbmRTZWNyZXRGZXRjaGVyUHJvdmlkZXJGYWN0b3J5LFxuICApIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZXNvdXJjZSBpZiBpdCBleGlzdHMgaW4gdGhlIGlucHV0IHNjb3BlLiBPdGhlcndpc2UsXG4gICAqIGNyZWF0ZXMgYSBuZXcgb25lLlxuICAgKi9cbiAgZ2V0T3JDcmVhdGUgPSAoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBzZWNyZXROYW1lOiBzdHJpbmcsXG4gICAgYmFja2VuZElkZW50aWZpZXI6IEJhY2tlbmRJZGVudGlmaWVyLFxuICApOiBTZWNyZXRGZXRjaGVyQ3VzdG9tUmVzb3VyY2UgPT4ge1xuICAgIGNvbnN0IHNlY3JldFJlc291cmNlSWQgPSBgQW1wbGlmeVNlY3JldEZldGNoZXJSZXNvdXJjZWA7XG4gICAgY29uc3QgZXhpc3RpbmdSZXNvdXJjZSA9IHNjb3BlLm5vZGUudHJ5RmluZENoaWxkKFxuICAgICAgc2VjcmV0UmVzb3VyY2VJZCxcbiAgICApIGFzIFNlY3JldEZldGNoZXJDdXN0b21SZXNvdXJjZTtcblxuICAgIGlmIChleGlzdGluZ1Jlc291cmNlKSB7XG4gICAgICBleGlzdGluZ1Jlc291cmNlLmFkZFNlY3JldChzZWNyZXROYW1lKTtcbiAgICAgIHJldHVybiBleGlzdGluZ1Jlc291cmNlO1xuICAgIH1cbiAgICBjb25zdCBzZWNyZXRzOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoKTtcbiAgICBzZWNyZXRzLmFkZChzZWNyZXROYW1lKTtcblxuICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5zZWNyZXRQcm92aWRlckZhY3RvcnkuZ2V0T3JDcmVhdGVJbnN0YW5jZShcbiAgICAgIHNjb3BlLFxuICAgICAgU0VDUkVUX1JFU09VUkNFX1BST1ZJREVSX0lELFxuICAgICAgYmFja2VuZElkZW50aWZpZXIsXG4gICAgKTtcblxuICAgIC8vIFNhbmRib3ggZGVwbG95bWVudCBwYXNzZXMgZG93biB0aGUgc2VjcmV0J3MgbGFzdCB1cGRhdGVkIHRpbWVzdGFtcCB0b1xuICAgIC8vIHRyaWdnZXIgc2VjcmV0IHVwZGF0ZS4gSXQgaXMgdG8gb3B0aW1pemUgc2FuZGJveCBkZXBsb3ltZW50IHRpbWUgYnlcbiAgICAvLyBsZXZlcmFnaW5nIGNkayBob3Rzd2FwLlxuICAgIGNvbnN0IHNlY3JldExhc3RVcGRhdGVkID1cbiAgICAgIHNjb3BlLm5vZGUudHJ5R2V0Q29udGV4dCgnc2VjcmV0TGFzdFVwZGF0ZWQnKSA/PyBEYXRlLm5vdygpO1xuXG4gICAgY29uc3QgY3VzdG9tUmVzb3VyY2VQcm9wczogU2VjcmV0UmVzb3VyY2VQcm9wcyA9IHtcbiAgICAgIG5hbWVzcGFjZTogYmFja2VuZElkZW50aWZpZXIubmFtZXNwYWNlLFxuICAgICAgbmFtZTogYmFja2VuZElkZW50aWZpZXIubmFtZSxcbiAgICAgIHR5cGU6IGJhY2tlbmRJZGVudGlmaWVyLnR5cGUsXG4gICAgICBzZWNyZXROYW1lczogTGF6eS5saXN0KHtcbiAgICAgICAgcHJvZHVjZTogKCkgPT4ge1xuICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHNlY3JldHMpO1xuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgU2VjcmV0RmV0Y2hlckN1c3RvbVJlc291cmNlKFxuICAgICAgc2NvcGUsXG4gICAgICBzZWNyZXRSZXNvdXJjZUlkLFxuICAgICAge1xuICAgICAgICBzZXJ2aWNlVG9rZW46IHByb3ZpZGVyLnNlcnZpY2VUb2tlbixcbiAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgIC4uLmN1c3RvbVJlc291cmNlUHJvcHMsXG4gICAgICAgICAgc2VjcmV0TGFzdFVwZGF0ZWQsIC8vIHRoaXMgcHJvcGVydHkgaXMgb25seSB0byB0cmlnZ2VyIHJlc291cmNlIHVwZGF0ZSBldmVudC5cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb3VyY2VUeXBlOiBTRUNSRVRfUkVTT1VSQ0VfVFlQRSxcbiAgICAgIH0sXG4gICAgICBzZWNyZXRzLFxuICAgICk7XG4gIH07XG59XG4iXX0=