"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Notices = void 0;
const path = require("path");
const util_1 = require("../../util");
const cached_data_source_1 = require("./cached-data-source");
const filter_1 = require("./filter");
const web_data_source_1 = require("./web-data-source");
const private_1 = require("../io/private");
const CACHE_FILE_PATH = path.join((0, util_1.cdkCacheDir)(), 'notices.json');
/**
 * Provides access to notices the CLI can display.
 */
class Notices {
    /**
     * Create an instance. Note that this replaces the singleton.
     */
    static create(props) {
        this._instance = new Notices(props);
        return this._instance;
    }
    /**
     * Get the singleton instance. May return `undefined` if `create` has not been called.
     */
    static get() {
        return this._instance;
    }
    static _instance;
    context;
    output;
    acknowledgedIssueNumbers;
    httpOptions;
    ioHelper;
    cliVersion;
    data = new Set();
    // sets don't deduplicate interfaces, so we use a map.
    bootstrappedEnvironments = new Map();
    constructor(props) {
        this.context = props.context;
        this.acknowledgedIssueNumbers = new Set(this.context.get('acknowledged-issue-numbers') ?? []);
        this.output = props.output ?? 'cdk.out';
        this.httpOptions = props.httpOptions ?? {};
        this.ioHelper = (0, private_1.asIoHelper)(props.ioHost, 'notices' /* forcing a CliAction to a ToolkitAction */);
        this.cliVersion = props.cliVersion;
    }
    /**
     * Add a bootstrap information to filter on. Can have multiple values
     * in case of multi-environment deployments.
     */
    addBootstrappedEnvironment(bootstrapped) {
        const key = [
            bootstrapped.bootstrapStackVersion,
            bootstrapped.environment.account,
            bootstrapped.environment.region,
            bootstrapped.environment.name,
        ].join(':');
        this.bootstrappedEnvironments.set(key, bootstrapped);
    }
    /**
     * Refresh the list of notices this instance is aware of.
     *
     * This method throws an error if the data source fails to fetch notices.
     * When using, consider if execution should halt immdiately or if catching the rror and continuing is more appropriate
     *
     * @throws on failure to refresh the data source
     */
    async refresh(options = {}) {
        const innerDataSource = options.dataSource ?? new web_data_source_1.WebsiteNoticeDataSource(this.ioHelper, this.httpOptions);
        const dataSource = new cached_data_source_1.CachedDataSource(this.ioHelper, CACHE_FILE_PATH, innerDataSource, options.force ?? false);
        const notices = await dataSource.fetch();
        this.data = new Set(notices);
    }
    /**
     * Filter the data source for relevant notices
     */
    filter(options = {}) {
        return new filter_1.NoticesFilter(this.ioHelper).filter({
            data: this.noticesFromData(options.includeAcknowledged ?? false),
            cliVersion: this.cliVersion,
            outDir: this.output,
            bootstrappedEnvironments: Array.from(this.bootstrappedEnvironments.values()),
        });
    }
    /**
     * Display the relevant notices (unless context dictates we shouldn't).
     */
    async display(options = {}) {
        const filteredNotices = await this.filter(options);
        if (filteredNotices.length > 0) {
            await this.ioHelper.notify(private_1.IO.CDK_TOOLKIT_I0100.msg([
                '',
                'NOTICES         (What\'s this? https://github.com/aws/aws-cdk/wiki/CLI-Notices)',
                '',
            ].join('\n')));
            for (const filtered of filteredNotices) {
                const formatted = filtered.format() + '\n';
                switch (filtered.notice.severity) {
                    case 'warning':
                        await this.ioHelper.notify(private_1.IO.CDK_TOOLKIT_W0101.msg(formatted));
                        break;
                    case 'error':
                        await this.ioHelper.notify(private_1.IO.CDK_TOOLKIT_E0101.msg(formatted));
                        break;
                    default:
                        await this.ioHelper.notify(private_1.IO.CDK_TOOLKIT_I0101.msg(formatted));
                        break;
                }
            }
            await this.ioHelper.notify(private_1.IO.CDK_TOOLKIT_I0100.msg(`If you donâ€™t want to see a notice anymore, use "cdk acknowledge <id>". For example, "cdk acknowledge ${filteredNotices[0].notice.issueNumber}".`));
        }
        if (options.showTotal ?? false) {
            await this.ioHelper.notify(private_1.IO.CDK_TOOLKIT_I0100.msg(`\nThere are ${filteredNotices.length} unacknowledged notice(s).`));
        }
    }
    /**
     * List all notices available in the data source.
     *
     * @param includeAcknowlegded - Whether to include acknowledged notices.
     */
    noticesFromData(includeAcknowlegded = false) {
        const data = Array.from(this.data);
        if (includeAcknowlegded) {
            return data;
        }
        return data.filter(n => !this.acknowledgedIssueNumbers.has(n.issueNumber));
    }
}
exports.Notices = Notices;
//# sourceMappingURL=data:application/json;base64,