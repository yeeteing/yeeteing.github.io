import { GetObjectCommand } from '@aws-sdk/client-s3';
/**
 * Handles fetching an object from an s3 bucket and parsing the object contents to a string
 */
export class S3StringObjectFetcher {
    s3Client;
    /**
     * Creates an S3StringObjectFetcher with the provided s3 client
     */
    constructor(s3Client) {
        this.s3Client = s3Client;
    }
    /**
     * Fetches an s3 object and converts its contents to a string
     */
    fetch = async (uri) => {
        const { bucket, key } = this.parseS3Uri(uri);
        const getSchemaCommandResult = await this.s3Client.send(new GetObjectCommand({ Bucket: bucket, Key: key }));
        const schema = await getSchemaCommandResult.Body?.transformToString();
        if (!schema) {
            // eslint-disable-next-line @aws-amplify/amplify-backend-rules/prefer-amplify-errors
            throw new Error('Error on parsing output schema');
        }
        return schema;
    };
    parseS3Uri = (uri) => {
        const { hostname, pathname } = new URL(uri);
        return {
            bucket: hostname,
            key: pathname.replace('/', ''),
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNfc3RyaW5nX29iamVjdF9mZXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3MzX3N0cmluZ19vYmplY3RfZmV0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQVksTUFBTSxvQkFBb0IsQ0FBQztBQUVoRTs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBcUI7SUFJSDtJQUg3Qjs7T0FFRztJQUNILFlBQTZCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFBRyxDQUFDO0lBRW5EOztPQUVHO0lBQ0gsS0FBSyxHQUFHLEtBQUssRUFBRSxHQUFXLEVBQUUsRUFBRTtRQUM1QixNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0MsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNyRCxJQUFJLGdCQUFnQixDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FDbkQsQ0FBQztRQUNGLE1BQU0sTUFBTSxHQUFHLE1BQU0sc0JBQXNCLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFLENBQUM7UUFDdEUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ1osb0ZBQW9GO1lBQ3BGLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRCxDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0lBRU0sVUFBVSxHQUFHLENBQUMsR0FBVyxFQUFtQyxFQUFFO1FBQ3BFLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUMsT0FBTztZQUNMLE1BQU0sRUFBRSxRQUFRO1lBQ2hCLEdBQUcsRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUM7U0FDL0IsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2V0T2JqZWN0Q29tbWFuZCwgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuXG4vKipcbiAqIEhhbmRsZXMgZmV0Y2hpbmcgYW4gb2JqZWN0IGZyb20gYW4gczMgYnVja2V0IGFuZCBwYXJzaW5nIHRoZSBvYmplY3QgY29udGVudHMgdG8gYSBzdHJpbmdcbiAqL1xuZXhwb3J0IGNsYXNzIFMzU3RyaW5nT2JqZWN0RmV0Y2hlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIFMzU3RyaW5nT2JqZWN0RmV0Y2hlciB3aXRoIHRoZSBwcm92aWRlZCBzMyBjbGllbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgczNDbGllbnQ6IFMzQ2xpZW50KSB7fVxuXG4gIC8qKlxuICAgKiBGZXRjaGVzIGFuIHMzIG9iamVjdCBhbmQgY29udmVydHMgaXRzIGNvbnRlbnRzIHRvIGEgc3RyaW5nXG4gICAqL1xuICBmZXRjaCA9IGFzeW5jICh1cmk6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHsgYnVja2V0LCBrZXkgfSA9IHRoaXMucGFyc2VTM1VyaSh1cmkpO1xuICAgIGNvbnN0IGdldFNjaGVtYUNvbW1hbmRSZXN1bHQgPSBhd2FpdCB0aGlzLnMzQ2xpZW50LnNlbmQoXG4gICAgICBuZXcgR2V0T2JqZWN0Q29tbWFuZCh7IEJ1Y2tldDogYnVja2V0LCBLZXk6IGtleSB9KSxcbiAgICApO1xuICAgIGNvbnN0IHNjaGVtYSA9IGF3YWl0IGdldFNjaGVtYUNvbW1hbmRSZXN1bHQuQm9keT8udHJhbnNmb3JtVG9TdHJpbmcoKTtcbiAgICBpZiAoIXNjaGVtYSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhd3MtYW1wbGlmeS9hbXBsaWZ5LWJhY2tlbmQtcnVsZXMvcHJlZmVyLWFtcGxpZnktZXJyb3JzXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIG9uIHBhcnNpbmcgb3V0cHV0IHNjaGVtYScpO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hO1xuICB9O1xuXG4gIHByaXZhdGUgcGFyc2VTM1VyaSA9ICh1cmk6IHN0cmluZyk6IHsgYnVja2V0OiBzdHJpbmc7IGtleTogc3RyaW5nIH0gPT4ge1xuICAgIGNvbnN0IHsgaG9zdG5hbWUsIHBhdGhuYW1lIH0gPSBuZXcgVVJMKHVyaSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJ1Y2tldDogaG9zdG5hbWUsXG4gICAgICBrZXk6IHBhdGhuYW1lLnJlcGxhY2UoJy8nLCAnJyksXG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==