import * as path from 'path';
import { StorageContainerEntryGenerator } from './storage_container_entry_generator.js';
import { Aspects, Stack } from 'aws-cdk-lib';
import { StorageOutputsAspect } from './storage_outputs_aspect.js';
/**
 * Singleton factory for a Storage bucket that can be used in `resource.ts` files
 */
export class AmplifyStorageFactory {
    props;
    importStack;
    generator;
    /**
     * Set the properties that will be used to initialize the bucket
     */
    constructor(props, importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
    }
    /**
     * Get a singleton instance of the Bucket
     */
    getInstance = (getInstanceProps) => {
        const { constructContainer, importPathVerifier, resourceNameValidator } = getInstanceProps;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'storage', 'resource'), 'Amplify Storage must be defined in amplify/storage/resource.ts');
        resourceNameValidator?.validate(this.props.name);
        if (!this.generator) {
            this.generator = new StorageContainerEntryGenerator(this.props, getInstanceProps);
        }
        const amplifyStorage = constructContainer.getOrCompute(this.generator);
        /*
         * only call Aspects once,
         * otherwise there will be the an error -
         * "there is already a construct with name 'storageRegion'"
         */
        const aspects = Aspects.of(Stack.of(amplifyStorage));
        if (!aspects.all.length) {
            aspects.add(new StorageOutputsAspect(getInstanceProps.outputStorageStrategy));
        }
        return amplifyStorage;
    };
}
/**
 * Include storage in your Amplify backend.
 * @see https://docs.amplify.aws/gen2/build-a-backend/storage/
 */
export const defineStorage = (props) => new AmplifyStorageFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sS0FBSyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRzdCLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRW5FOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQVNiO0lBQ0E7SUFQWCxTQUFTLENBQW1DO0lBRXBEOztPQUVHO0lBQ0gsWUFDbUIsS0FBaUMsRUFDakMsY0FBYyxJQUFJLEtBQUssRUFBRSxDQUFDLEtBQUs7UUFEL0IsVUFBSyxHQUFMLEtBQUssQ0FBNEI7UUFDakMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO0lBQy9DLENBQUM7SUFFSjs7T0FFRztJQUNILFdBQVcsR0FBRyxDQUNaLGdCQUFrRCxFQUNsQyxFQUFFO1FBQ2xCLE1BQU0sRUFBRSxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSxHQUNyRSxnQkFBZ0IsQ0FBQztRQUNuQixrQkFBa0IsRUFBRSxNQUFNLENBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUMsRUFDM0MsZ0VBQWdFLENBQ2pFLENBQUM7UUFDRixxQkFBcUIsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVqRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSw4QkFBOEIsQ0FDakQsSUFBSSxDQUFDLEtBQUssRUFDVixnQkFBZ0IsQ0FDakIsQ0FBQztRQUNKLENBQUM7UUFDRCxNQUFNLGNBQWMsR0FBRyxrQkFBa0IsQ0FBQyxZQUFZLENBQ3BELElBQUksQ0FBQyxTQUFTLENBQ0csQ0FBQztRQUVwQjs7OztXQUlHO1FBQ0gsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDeEIsT0FBTyxDQUFDLEdBQUcsQ0FDVCxJQUFJLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDLENBQ2pFLENBQUM7UUFDSixDQUFDO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0NBQ0g7QUFFRDs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FDM0IsS0FBaUMsRUFDcUMsRUFBRSxDQUN4RSxJQUFJLHFCQUFxQixDQUFDLEtBQUssRUFBRSxJQUFJLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3IsXG4gIENvbnN0cnVjdEZhY3RvcnksXG4gIENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICBSZXNvdXJjZVByb3ZpZGVyLFxuICBTdGFja1Byb3ZpZGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBBbXBsaWZ5U3RvcmFnZSwgU3RvcmFnZVJlc291cmNlcyB9IGZyb20gJy4vY29uc3RydWN0LmpzJztcbmltcG9ydCB7IEFtcGxpZnlTdG9yYWdlRmFjdG9yeVByb3BzIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBTdG9yYWdlQ29udGFpbmVyRW50cnlHZW5lcmF0b3IgfSBmcm9tICcuL3N0b3JhZ2VfY29udGFpbmVyX2VudHJ5X2dlbmVyYXRvci5qcyc7XG5pbXBvcnQgeyBBc3BlY3RzLCBTdGFjayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IFN0b3JhZ2VPdXRwdXRzQXNwZWN0IH0gZnJvbSAnLi9zdG9yYWdlX291dHB1dHNfYXNwZWN0LmpzJztcblxuLyoqXG4gKiBTaW5nbGV0b24gZmFjdG9yeSBmb3IgYSBTdG9yYWdlIGJ1Y2tldCB0aGF0IGNhbiBiZSB1c2VkIGluIGByZXNvdXJjZS50c2AgZmlsZXNcbiAqL1xuZXhwb3J0IGNsYXNzIEFtcGxpZnlTdG9yYWdlRmFjdG9yeVxuICBpbXBsZW1lbnRzIENvbnN0cnVjdEZhY3Rvcnk8UmVzb3VyY2VQcm92aWRlcjxTdG9yYWdlUmVzb3VyY2VzPj5cbntcbiAgcHJpdmF0ZSBnZW5lcmF0b3I6IENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgYnVja2V0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBBbXBsaWZ5U3RvcmFnZUZhY3RvcnlQcm9wcyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGltcG9ydFN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2ssXG4gICkge31cblxuICAvKipcbiAgICogR2V0IGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIHRoZSBCdWNrZXRcbiAgICovXG4gIGdldEluc3RhbmNlID0gKFxuICAgIGdldEluc3RhbmNlUHJvcHM6IENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICApOiBBbXBsaWZ5U3RvcmFnZSA9PiB7XG4gICAgY29uc3QgeyBjb25zdHJ1Y3RDb250YWluZXIsIGltcG9ydFBhdGhWZXJpZmllciwgcmVzb3VyY2VOYW1lVmFsaWRhdG9yIH0gPVxuICAgICAgZ2V0SW5zdGFuY2VQcm9wcztcbiAgICBpbXBvcnRQYXRoVmVyaWZpZXI/LnZlcmlmeShcbiAgICAgIHRoaXMuaW1wb3J0U3RhY2ssXG4gICAgICBwYXRoLmpvaW4oJ2FtcGxpZnknLCAnc3RvcmFnZScsICdyZXNvdXJjZScpLFxuICAgICAgJ0FtcGxpZnkgU3RvcmFnZSBtdXN0IGJlIGRlZmluZWQgaW4gYW1wbGlmeS9zdG9yYWdlL3Jlc291cmNlLnRzJyxcbiAgICApO1xuICAgIHJlc291cmNlTmFtZVZhbGlkYXRvcj8udmFsaWRhdGUodGhpcy5wcm9wcy5uYW1lKTtcblxuICAgIGlmICghdGhpcy5nZW5lcmF0b3IpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdG9yID0gbmV3IFN0b3JhZ2VDb250YWluZXJFbnRyeUdlbmVyYXRvcihcbiAgICAgICAgdGhpcy5wcm9wcyxcbiAgICAgICAgZ2V0SW5zdGFuY2VQcm9wcyxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGFtcGxpZnlTdG9yYWdlID0gY29uc3RydWN0Q29udGFpbmVyLmdldE9yQ29tcHV0ZShcbiAgICAgIHRoaXMuZ2VuZXJhdG9yLFxuICAgICkgYXMgQW1wbGlmeVN0b3JhZ2U7XG5cbiAgICAvKlxuICAgICAqIG9ubHkgY2FsbCBBc3BlY3RzIG9uY2UsXG4gICAgICogb3RoZXJ3aXNlIHRoZXJlIHdpbGwgYmUgdGhlIGFuIGVycm9yIC1cbiAgICAgKiBcInRoZXJlIGlzIGFscmVhZHkgYSBjb25zdHJ1Y3Qgd2l0aCBuYW1lICdzdG9yYWdlUmVnaW9uJ1wiXG4gICAgICovXG4gICAgY29uc3QgYXNwZWN0cyA9IEFzcGVjdHMub2YoU3RhY2sub2YoYW1wbGlmeVN0b3JhZ2UpKTtcbiAgICBpZiAoIWFzcGVjdHMuYWxsLmxlbmd0aCkge1xuICAgICAgYXNwZWN0cy5hZGQoXG4gICAgICAgIG5ldyBTdG9yYWdlT3V0cHV0c0FzcGVjdChnZXRJbnN0YW5jZVByb3BzLm91dHB1dFN0b3JhZ2VTdHJhdGVneSksXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhbXBsaWZ5U3RvcmFnZTtcbiAgfTtcbn1cblxuLyoqXG4gKiBJbmNsdWRlIHN0b3JhZ2UgaW4geW91ciBBbXBsaWZ5IGJhY2tlbmQuXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5hbXBsaWZ5LmF3cy9nZW4yL2J1aWxkLWEtYmFja2VuZC9zdG9yYWdlL1xuICovXG5leHBvcnQgY29uc3QgZGVmaW5lU3RvcmFnZSA9IChcbiAgcHJvcHM6IEFtcGxpZnlTdG9yYWdlRmFjdG9yeVByb3BzLFxuKTogQ29uc3RydWN0RmFjdG9yeTxSZXNvdXJjZVByb3ZpZGVyPFN0b3JhZ2VSZXNvdXJjZXM+ICYgU3RhY2tQcm92aWRlcj4gPT5cbiAgbmV3IEFtcGxpZnlTdG9yYWdlRmFjdG9yeShwcm9wcywgbmV3IEVycm9yKCkuc3RhY2spO1xuIl19