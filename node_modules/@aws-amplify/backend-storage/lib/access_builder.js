import { entityIdSubstitution } from './constants.js';
export const roleAccessBuilder = {
    authenticated: {
        to: (actions) => ({
            getResourceAccessAcceptors: [getAuthRoleResourceAccessAcceptor],
            uniqueDefinitionIdValidations: [
                {
                    uniqueDefinitionId: `authenticated`,
                    validationErrorOptions: {
                        message: `Entity access definition for authenticated users specified multiple times.`,
                        resolution: `Combine all access definitions for authenticated users on a single path into one access rule.`,
                    },
                },
            ],
            actions,
            idSubstitution: '*',
        }),
    },
    guest: {
        to: (actions) => ({
            getResourceAccessAcceptors: [getUnauthRoleResourceAccessAcceptor],
            uniqueDefinitionIdValidations: [
                {
                    uniqueDefinitionId: `guest`,
                    validationErrorOptions: {
                        message: `Entity access definition for guest users specified multiple times.`,
                        resolution: `Combine all access definitions for guest users on a single path into one access rule.`,
                    },
                },
            ],
            actions,
            idSubstitution: '*',
        }),
    },
    groups: (groupNames) => ({
        to: (actions) => ({
            getResourceAccessAcceptors: groupNames.map((groupName) => (getInstanceProps) => getUserRoleResourceAccessAcceptor(getInstanceProps, groupName)),
            uniqueDefinitionIdValidations: groupNames.map((groupName) => ({
                uniqueDefinitionId: `groups${groupName}`,
                validationErrorOptions: {
                    message: `Group access definition for ${groupName} specified multiple times.`,
                    resolution: `Combine all access definitions for ${groupName} on a single path into one access rule.`,
                },
            })),
            actions,
            idSubstitution: '*',
        }),
    }),
    entity: (entityId) => ({
        to: (actions) => ({
            getResourceAccessAcceptors: [getAuthRoleResourceAccessAcceptor],
            uniqueDefinitionIdValidations: [
                {
                    uniqueDefinitionId: `entity${entityId}`,
                    validationErrorOptions: {
                        message: `Entity access definition for ${entityId} specified multiple times.`,
                        resolution: `Combine all access definitions for ${entityId} on a single path into one access rule.`,
                    },
                },
            ],
            actions,
            idSubstitution: entityIdSubstitution,
        }),
    }),
    resource: (other) => ({
        to: (actions) => ({
            getResourceAccessAcceptors: [
                (getInstanceProps) => other.getInstance(getInstanceProps).getResourceAccessAcceptor(),
            ],
            uniqueDefinitionIdValidations: [],
            actions,
            idSubstitution: '*',
        }),
    }),
};
const getAuthRoleResourceAccessAcceptor = (getInstanceProps) => getUserRoleResourceAccessAcceptor(getInstanceProps, 'authenticatedUserIamRole');
const getUnauthRoleResourceAccessAcceptor = (getInstanceProps) => getUserRoleResourceAccessAcceptor(getInstanceProps, 'unauthenticatedUserIamRole');
const getUserRoleResourceAccessAcceptor = (getInstanceProps, roleName) => {
    const resourceAccessAcceptor = getInstanceProps.constructContainer
        .getConstructFactory('AuthResources')
        ?.getInstance(getInstanceProps)
        .getResourceAccessAcceptor(roleName);
    if (!resourceAccessAcceptor) {
        throw new Error(`Cannot specify auth access for ${roleName} users without defining auth. See https://docs.amplify.aws/gen2/build-a-backend/auth/set-up-auth/ for more information.`);
    }
    return resourceAccessAcceptor;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzX2J1aWxkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYWNjZXNzX2J1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQXlCO0lBQ3JELGFBQWEsRUFBRTtRQUNiLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNoQiwwQkFBMEIsRUFBRSxDQUFDLGlDQUFpQyxDQUFDO1lBQy9ELDZCQUE2QixFQUFFO2dCQUM3QjtvQkFDRSxrQkFBa0IsRUFBRSxlQUFlO29CQUNuQyxzQkFBc0IsRUFBRTt3QkFDdEIsT0FBTyxFQUFFLDRFQUE0RTt3QkFDckYsVUFBVSxFQUFFLCtGQUErRjtxQkFDNUc7aUJBQ0Y7YUFDRjtZQUNELE9BQU87WUFDUCxjQUFjLEVBQUUsR0FBRztTQUNwQixDQUFDO0tBQ0g7SUFDRCxLQUFLLEVBQUU7UUFDTCxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDaEIsMEJBQTBCLEVBQUUsQ0FBQyxtQ0FBbUMsQ0FBQztZQUNqRSw2QkFBNkIsRUFBRTtnQkFDN0I7b0JBQ0Usa0JBQWtCLEVBQUUsT0FBTztvQkFDM0Isc0JBQXNCLEVBQUU7d0JBQ3RCLE9BQU8sRUFBRSxvRUFBb0U7d0JBQzdFLFVBQVUsRUFBRSx1RkFBdUY7cUJBQ3BHO2lCQUNGO2FBQ0Y7WUFDRCxPQUFPO1lBQ1AsY0FBYyxFQUFFLEdBQUc7U0FDcEIsQ0FBQztLQUNIO0lBQ0QsTUFBTSxFQUFFLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZCLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNoQiwwQkFBMEIsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUN4QyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQ2xDLGlDQUFpQyxDQUFDLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUNqRTtZQUNELDZCQUE2QixFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQzVELGtCQUFrQixFQUFFLFNBQVMsU0FBUyxFQUFFO2dCQUN4QyxzQkFBc0IsRUFBRTtvQkFDdEIsT0FBTyxFQUFFLCtCQUErQixTQUFTLDRCQUE0QjtvQkFDN0UsVUFBVSxFQUFFLHNDQUFzQyxTQUFTLHlDQUF5QztpQkFDckc7YUFDRixDQUFDLENBQUM7WUFDSCxPQUFPO1lBQ1AsY0FBYyxFQUFFLEdBQUc7U0FDcEIsQ0FBQztLQUNILENBQUM7SUFDRixNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckIsRUFBRSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2hCLDBCQUEwQixFQUFFLENBQUMsaUNBQWlDLENBQUM7WUFDL0QsNkJBQTZCLEVBQUU7Z0JBQzdCO29CQUNFLGtCQUFrQixFQUFFLFNBQVMsUUFBUSxFQUFFO29CQUN2QyxzQkFBc0IsRUFBRTt3QkFDdEIsT0FBTyxFQUFFLGdDQUFnQyxRQUFRLDRCQUE0Qjt3QkFDN0UsVUFBVSxFQUFFLHNDQUFzQyxRQUFRLHlDQUF5QztxQkFDcEc7aUJBQ0Y7YUFDRjtZQUNELE9BQU87WUFDUCxjQUFjLEVBQUUsb0JBQW9CO1NBQ3JDLENBQUM7S0FDSCxDQUFDO0lBQ0YsUUFBUSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLEVBQUUsRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNoQiwwQkFBMEIsRUFBRTtnQkFDMUIsQ0FBQyxnQkFBZ0IsRUFBRSxFQUFFLENBQ25CLEtBQUssQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyx5QkFBeUIsRUFBRTthQUNsRTtZQUNELDZCQUE2QixFQUFFLEVBQUU7WUFDakMsT0FBTztZQUNQLGNBQWMsRUFBRSxHQUFHO1NBQ3BCLENBQUM7S0FDSCxDQUFDO0NBQ0gsQ0FBQztBQUVGLE1BQU0saUNBQWlDLEdBQUcsQ0FDeEMsZ0JBQWtELEVBQ2xELEVBQUUsQ0FDRixpQ0FBaUMsQ0FDL0IsZ0JBQWdCLEVBQ2hCLDBCQUEwQixDQUMzQixDQUFDO0FBRUosTUFBTSxtQ0FBbUMsR0FBRyxDQUMxQyxnQkFBa0QsRUFDbEQsRUFBRSxDQUNGLGlDQUFpQyxDQUMvQixnQkFBZ0IsRUFDaEIsNEJBQTRCLENBQzdCLENBQUM7QUFFSixNQUFNLGlDQUFpQyxHQUFHLENBQ3hDLGdCQUFrRCxFQUNsRCxRQUErQixFQUMvQixFQUFFO0lBQ0YsTUFBTSxzQkFBc0IsR0FBRyxnQkFBZ0IsQ0FBQyxrQkFBa0I7U0FDL0QsbUJBQW1CLENBRWxCLGVBQWUsQ0FBQztRQUNsQixFQUFFLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQztTQUM5Qix5QkFBeUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2QyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztRQUM1QixNQUFNLElBQUksS0FBSyxDQUNiLGtDQUNFLFFBQ0YseUhBQXlILENBQzFILENBQUM7SUFDSixDQUFDO0lBQ0QsT0FBTyxzQkFBc0IsQ0FBQztBQUNoQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBdXRoUm9sZU5hbWUsXG4gIENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICBSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yRmFjdG9yeSxcbiAgUmVzb3VyY2VQcm92aWRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBTdG9yYWdlQWNjZXNzQnVpbGRlciB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgZW50aXR5SWRTdWJzdGl0dXRpb24gfSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5cbmV4cG9ydCBjb25zdCByb2xlQWNjZXNzQnVpbGRlcjogU3RvcmFnZUFjY2Vzc0J1aWxkZXIgPSB7XG4gIGF1dGhlbnRpY2F0ZWQ6IHtcbiAgICB0bzogKGFjdGlvbnMpID0+ICh7XG4gICAgICBnZXRSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yczogW2dldEF1dGhSb2xlUmVzb3VyY2VBY2Nlc3NBY2NlcHRvcl0sXG4gICAgICB1bmlxdWVEZWZpbml0aW9uSWRWYWxpZGF0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgdW5pcXVlRGVmaW5pdGlvbklkOiBgYXV0aGVudGljYXRlZGAsXG4gICAgICAgICAgdmFsaWRhdGlvbkVycm9yT3B0aW9uczoge1xuICAgICAgICAgICAgbWVzc2FnZTogYEVudGl0eSBhY2Nlc3MgZGVmaW5pdGlvbiBmb3IgYXV0aGVudGljYXRlZCB1c2VycyBzcGVjaWZpZWQgbXVsdGlwbGUgdGltZXMuYCxcbiAgICAgICAgICAgIHJlc29sdXRpb246IGBDb21iaW5lIGFsbCBhY2Nlc3MgZGVmaW5pdGlvbnMgZm9yIGF1dGhlbnRpY2F0ZWQgdXNlcnMgb24gYSBzaW5nbGUgcGF0aCBpbnRvIG9uZSBhY2Nlc3MgcnVsZS5gLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgYWN0aW9ucyxcbiAgICAgIGlkU3Vic3RpdHV0aW9uOiAnKicsXG4gICAgfSksXG4gIH0sXG4gIGd1ZXN0OiB7XG4gICAgdG86IChhY3Rpb25zKSA9PiAoe1xuICAgICAgZ2V0UmVzb3VyY2VBY2Nlc3NBY2NlcHRvcnM6IFtnZXRVbmF1dGhSb2xlUmVzb3VyY2VBY2Nlc3NBY2NlcHRvcl0sXG4gICAgICB1bmlxdWVEZWZpbml0aW9uSWRWYWxpZGF0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgdW5pcXVlRGVmaW5pdGlvbklkOiBgZ3Vlc3RgLFxuICAgICAgICAgIHZhbGlkYXRpb25FcnJvck9wdGlvbnM6IHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBFbnRpdHkgYWNjZXNzIGRlZmluaXRpb24gZm9yIGd1ZXN0IHVzZXJzIHNwZWNpZmllZCBtdWx0aXBsZSB0aW1lcy5gLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogYENvbWJpbmUgYWxsIGFjY2VzcyBkZWZpbml0aW9ucyBmb3IgZ3Vlc3QgdXNlcnMgb24gYSBzaW5nbGUgcGF0aCBpbnRvIG9uZSBhY2Nlc3MgcnVsZS5gLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgYWN0aW9ucyxcbiAgICAgIGlkU3Vic3RpdHV0aW9uOiAnKicsXG4gICAgfSksXG4gIH0sXG4gIGdyb3VwczogKGdyb3VwTmFtZXMpID0+ICh7XG4gICAgdG86IChhY3Rpb25zKSA9PiAoe1xuICAgICAgZ2V0UmVzb3VyY2VBY2Nlc3NBY2NlcHRvcnM6IGdyb3VwTmFtZXMubWFwKFxuICAgICAgICAoZ3JvdXBOYW1lKSA9PiAoZ2V0SW5zdGFuY2VQcm9wcykgPT5cbiAgICAgICAgICBnZXRVc2VyUm9sZVJlc291cmNlQWNjZXNzQWNjZXB0b3IoZ2V0SW5zdGFuY2VQcm9wcywgZ3JvdXBOYW1lKSxcbiAgICAgICksXG4gICAgICB1bmlxdWVEZWZpbml0aW9uSWRWYWxpZGF0aW9uczogZ3JvdXBOYW1lcy5tYXAoKGdyb3VwTmFtZSkgPT4gKHtcbiAgICAgICAgdW5pcXVlRGVmaW5pdGlvbklkOiBgZ3JvdXBzJHtncm91cE5hbWV9YCxcbiAgICAgICAgdmFsaWRhdGlvbkVycm9yT3B0aW9uczoge1xuICAgICAgICAgIG1lc3NhZ2U6IGBHcm91cCBhY2Nlc3MgZGVmaW5pdGlvbiBmb3IgJHtncm91cE5hbWV9IHNwZWNpZmllZCBtdWx0aXBsZSB0aW1lcy5gLFxuICAgICAgICAgIHJlc29sdXRpb246IGBDb21iaW5lIGFsbCBhY2Nlc3MgZGVmaW5pdGlvbnMgZm9yICR7Z3JvdXBOYW1lfSBvbiBhIHNpbmdsZSBwYXRoIGludG8gb25lIGFjY2VzcyBydWxlLmAsXG4gICAgICAgIH0sXG4gICAgICB9KSksXG4gICAgICBhY3Rpb25zLFxuICAgICAgaWRTdWJzdGl0dXRpb246ICcqJyxcbiAgICB9KSxcbiAgfSksXG4gIGVudGl0eTogKGVudGl0eUlkKSA9PiAoe1xuICAgIHRvOiAoYWN0aW9ucykgPT4gKHtcbiAgICAgIGdldFJlc291cmNlQWNjZXNzQWNjZXB0b3JzOiBbZ2V0QXV0aFJvbGVSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yXSxcbiAgICAgIHVuaXF1ZURlZmluaXRpb25JZFZhbGlkYXRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICB1bmlxdWVEZWZpbml0aW9uSWQ6IGBlbnRpdHkke2VudGl0eUlkfWAsXG4gICAgICAgICAgdmFsaWRhdGlvbkVycm9yT3B0aW9uczoge1xuICAgICAgICAgICAgbWVzc2FnZTogYEVudGl0eSBhY2Nlc3MgZGVmaW5pdGlvbiBmb3IgJHtlbnRpdHlJZH0gc3BlY2lmaWVkIG11bHRpcGxlIHRpbWVzLmAsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiBgQ29tYmluZSBhbGwgYWNjZXNzIGRlZmluaXRpb25zIGZvciAke2VudGl0eUlkfSBvbiBhIHNpbmdsZSBwYXRoIGludG8gb25lIGFjY2VzcyBydWxlLmAsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBhY3Rpb25zLFxuICAgICAgaWRTdWJzdGl0dXRpb246IGVudGl0eUlkU3Vic3RpdHV0aW9uLFxuICAgIH0pLFxuICB9KSxcbiAgcmVzb3VyY2U6IChvdGhlcikgPT4gKHtcbiAgICB0bzogKGFjdGlvbnMpID0+ICh7XG4gICAgICBnZXRSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yczogW1xuICAgICAgICAoZ2V0SW5zdGFuY2VQcm9wcykgPT5cbiAgICAgICAgICBvdGhlci5nZXRJbnN0YW5jZShnZXRJbnN0YW5jZVByb3BzKS5nZXRSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yKCksXG4gICAgICBdLFxuICAgICAgdW5pcXVlRGVmaW5pdGlvbklkVmFsaWRhdGlvbnM6IFtdLFxuICAgICAgYWN0aW9ucyxcbiAgICAgIGlkU3Vic3RpdHV0aW9uOiAnKicsXG4gICAgfSksXG4gIH0pLFxufTtcblxuY29uc3QgZ2V0QXV0aFJvbGVSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yID0gKFxuICBnZXRJbnN0YW5jZVByb3BzOiBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wcyxcbikgPT5cbiAgZ2V0VXNlclJvbGVSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yKFxuICAgIGdldEluc3RhbmNlUHJvcHMsXG4gICAgJ2F1dGhlbnRpY2F0ZWRVc2VySWFtUm9sZScsXG4gICk7XG5cbmNvbnN0IGdldFVuYXV0aFJvbGVSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yID0gKFxuICBnZXRJbnN0YW5jZVByb3BzOiBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wcyxcbikgPT5cbiAgZ2V0VXNlclJvbGVSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yKFxuICAgIGdldEluc3RhbmNlUHJvcHMsXG4gICAgJ3VuYXV0aGVudGljYXRlZFVzZXJJYW1Sb2xlJyxcbiAgKTtcblxuY29uc3QgZ2V0VXNlclJvbGVSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yID0gKFxuICBnZXRJbnN0YW5jZVByb3BzOiBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wcyxcbiAgcm9sZU5hbWU6IEF1dGhSb2xlTmFtZSB8IHN0cmluZyxcbikgPT4ge1xuICBjb25zdCByZXNvdXJjZUFjY2Vzc0FjY2VwdG9yID0gZ2V0SW5zdGFuY2VQcm9wcy5jb25zdHJ1Y3RDb250YWluZXJcbiAgICAuZ2V0Q29uc3RydWN0RmFjdG9yeTxcbiAgICAgIFJlc291cmNlUHJvdmlkZXIgJiBSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yRmFjdG9yeTxBdXRoUm9sZU5hbWUgfCBzdHJpbmc+XG4gICAgPignQXV0aFJlc291cmNlcycpXG4gICAgPy5nZXRJbnN0YW5jZShnZXRJbnN0YW5jZVByb3BzKVxuICAgIC5nZXRSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yKHJvbGVOYW1lKTtcbiAgaWYgKCFyZXNvdXJjZUFjY2Vzc0FjY2VwdG9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYENhbm5vdCBzcGVjaWZ5IGF1dGggYWNjZXNzIGZvciAke1xuICAgICAgICByb2xlTmFtZSBhcyBzdHJpbmdcbiAgICAgIH0gdXNlcnMgd2l0aG91dCBkZWZpbmluZyBhdXRoLiBTZWUgaHR0cHM6Ly9kb2NzLmFtcGxpZnkuYXdzL2dlbjIvYnVpbGQtYS1iYWNrZW5kL2F1dGgvc2V0LXVwLWF1dGgvIGZvciBtb3JlIGluZm9ybWF0aW9uLmAsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzb3VyY2VBY2Nlc3NBY2NlcHRvcjtcbn07XG4iXX0=