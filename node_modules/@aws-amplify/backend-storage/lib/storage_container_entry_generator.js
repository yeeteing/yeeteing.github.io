import { AmplifyStorage } from './construct.js';
import { StorageAccessOrchestratorFactory } from './storage_access_orchestrator.js';
import { EventType } from 'aws-cdk-lib/aws-s3';
import { StorageAccessPolicyFactory } from './storage_access_policy_factory.js';
import { Tags } from 'aws-cdk-lib';
import { TagName } from '@aws-amplify/platform-core';
/**
 * Generates a single instance of storage resources
 */
export class StorageContainerEntryGenerator {
    props;
    getInstanceProps;
    storageAccessOrchestratorFactory;
    resourceGroupName = 'storage';
    /**
     * Initialize with context from storage factory
     */
    constructor(props, getInstanceProps, storageAccessOrchestratorFactory = new StorageAccessOrchestratorFactory()) {
        this.props = props;
        this.getInstanceProps = getInstanceProps;
        this.storageAccessOrchestratorFactory = storageAccessOrchestratorFactory;
    }
    generateContainerEntry = ({ scope, ssmEnvironmentEntriesGenerator, }) => {
        const amplifyStorage = new AmplifyStorage(scope, this.props.name, {
            ...this.props,
            outputStorageStrategy: this.getInstanceProps.outputStorageStrategy,
        });
        Tags.of(amplifyStorage).add(TagName.FRIENDLY_NAME, this.props.name);
        Object.entries(this.props.triggers || {}).forEach(([triggerEvent, handlerFactory]) => {
            const events = [];
            const handler = handlerFactory.getInstance(this.getInstanceProps)
                .resources.lambda;
            // triggerEvent is converted string from Object.entries
            switch (triggerEvent) {
                case 'onDelete':
                    events.push(EventType.OBJECT_REMOVED);
                    break;
                case 'onUpload':
                    events.push(EventType.OBJECT_CREATED);
                    break;
            }
            amplifyStorage.addTrigger(events, handler);
        });
        if (!this.props.access) {
            return amplifyStorage;
        }
        // generate the ssm environment context necessary to access the s3 bucket (in this case, just the bucket name)
        const ssmEnvironmentEntries = ssmEnvironmentEntriesGenerator.generateSsmEnvironmentEntries({
            [`${this.props.name}_BUCKET_NAME`]: amplifyStorage.resources.bucket.bucketName,
        });
        // we pass the access definition along with other dependencies to the storageAccessOrchestrator
        const storageAccessOrchestrator = this.storageAccessOrchestratorFactory.getInstance(this.props.access, this.getInstanceProps, ssmEnvironmentEntries, new StorageAccessPolicyFactory(amplifyStorage.resources.bucket));
        // the orchestrator generates policies according to the accessDefinition and attaches the policies to appropriate roles
        const storageAccessOutput = storageAccessOrchestrator.orchestrateStorageAccess();
        amplifyStorage.addAccessDefinition(storageAccessOutput);
        return amplifyStorage;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZV9jb250YWluZXJfZW50cnlfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3N0b3JhZ2VfY29udGFpbmVyX2VudHJ5X2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQUUsY0FBYyxFQUE4QixNQUFNLGdCQUFnQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXBGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNoRixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVyRDs7R0FFRztBQUNILE1BQU0sT0FBTyw4QkFBOEI7SUFTdEI7SUFDQTtJQUNBO0lBUlYsaUJBQWlCLEdBQTZCLFNBQVMsQ0FBQztJQUVqRTs7T0FFRztJQUNILFlBQ21CLEtBQWlDLEVBQ2pDLGdCQUFrRCxFQUNsRCxtQ0FBcUUsSUFBSSxnQ0FBZ0MsRUFBRTtRQUYzRyxVQUFLLEdBQUwsS0FBSyxDQUE0QjtRQUNqQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtDO1FBQ2xELHFDQUFnQyxHQUFoQyxnQ0FBZ0MsQ0FBMkU7SUFDM0gsQ0FBQztJQUVKLHNCQUFzQixHQUFHLENBQUMsRUFDeEIsS0FBSyxFQUNMLDhCQUE4QixHQUNGLEVBQUUsRUFBRTtRQUNoQyxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7WUFDaEUsR0FBRyxJQUFJLENBQUMsS0FBSztZQUNiLHFCQUFxQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUI7U0FDbkUsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUMvQyxDQUFDLENBQUMsWUFBWSxFQUFFLGNBQWMsQ0FBQyxFQUFFLEVBQUU7WUFDakMsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLE1BQU0sT0FBTyxHQUFHLGNBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO2lCQUM5RCxTQUFTLENBQUMsTUFBTSxDQUFDO1lBQ3BCLHVEQUF1RDtZQUN2RCxRQUFRLFlBQTBDLEVBQUUsQ0FBQztnQkFDbkQsS0FBSyxVQUFVO29CQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUN0QyxNQUFNO2dCQUNSLEtBQUssVUFBVTtvQkFDYixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsQ0FBQztvQkFDdEMsTUFBTTtZQUNWLENBQUM7WUFDRCxjQUFjLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQ0YsQ0FBQztRQUVGLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3ZCLE9BQU8sY0FBYyxDQUFDO1FBQ3hCLENBQUM7UUFFRCw4R0FBOEc7UUFDOUcsTUFBTSxxQkFBcUIsR0FDekIsOEJBQThCLENBQUMsNkJBQTZCLENBQUM7WUFDM0QsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxjQUFjLENBQUMsRUFDaEMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtTQUM3QyxDQUFDLENBQUM7UUFFTCwrRkFBK0Y7UUFDL0YsTUFBTSx5QkFBeUIsR0FDN0IsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLFdBQVcsQ0FDL0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsRUFDckIscUJBQXFCLEVBQ3JCLElBQUksMEJBQTBCLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FDaEUsQ0FBQztRQUVKLHVIQUF1SDtRQUN2SCxNQUFNLG1CQUFtQixHQUN2Qix5QkFBeUIsQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ3ZELGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRXhELE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQW1wbGlmeVJlc291cmNlR3JvdXBOYW1lLFxuICBDb25zdHJ1Y3RDb250YWluZXJFbnRyeUdlbmVyYXRvcixcbiAgQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHMsXG4gIEdlbmVyYXRlQ29udGFpbmVyRW50cnlQcm9wcyxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBBbXBsaWZ5U3RvcmFnZSwgQW1wbGlmeVN0b3JhZ2VUcmlnZ2VyRXZlbnQgfSBmcm9tICcuL2NvbnN0cnVjdC5qcyc7XG5pbXBvcnQgeyBTdG9yYWdlQWNjZXNzT3JjaGVzdHJhdG9yRmFjdG9yeSB9IGZyb20gJy4vc3RvcmFnZV9hY2Nlc3Nfb3JjaGVzdHJhdG9yLmpzJztcbmltcG9ydCB7IEFtcGxpZnlTdG9yYWdlRmFjdG9yeVByb3BzIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBFdmVudFR5cGUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtczMnO1xuaW1wb3J0IHsgU3RvcmFnZUFjY2Vzc1BvbGljeUZhY3RvcnkgfSBmcm9tICcuL3N0b3JhZ2VfYWNjZXNzX3BvbGljeV9mYWN0b3J5LmpzJztcbmltcG9ydCB7IFRhZ3MgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBUYWdOYW1lIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHNpbmdsZSBpbnN0YW5jZSBvZiBzdG9yYWdlIHJlc291cmNlc1xuICovXG5leHBvcnQgY2xhc3MgU3RvcmFnZUNvbnRhaW5lckVudHJ5R2VuZXJhdG9yXG4gIGltcGxlbWVudHMgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3JcbntcbiAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cE5hbWU6IEFtcGxpZnlSZXNvdXJjZUdyb3VwTmFtZSA9ICdzdG9yYWdlJztcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB3aXRoIGNvbnRleHQgZnJvbSBzdG9yYWdlIGZhY3RvcnlcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEFtcGxpZnlTdG9yYWdlRmFjdG9yeVByb3BzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0SW5zdGFuY2VQcm9wczogQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdG9yYWdlQWNjZXNzT3JjaGVzdHJhdG9yRmFjdG9yeTogU3RvcmFnZUFjY2Vzc09yY2hlc3RyYXRvckZhY3RvcnkgPSBuZXcgU3RvcmFnZUFjY2Vzc09yY2hlc3RyYXRvckZhY3RvcnkoKSxcbiAgKSB7fVxuXG4gIGdlbmVyYXRlQ29udGFpbmVyRW50cnkgPSAoe1xuICAgIHNjb3BlLFxuICAgIHNzbUVudmlyb25tZW50RW50cmllc0dlbmVyYXRvcixcbiAgfTogR2VuZXJhdGVDb250YWluZXJFbnRyeVByb3BzKSA9PiB7XG4gICAgY29uc3QgYW1wbGlmeVN0b3JhZ2UgPSBuZXcgQW1wbGlmeVN0b3JhZ2Uoc2NvcGUsIHRoaXMucHJvcHMubmFtZSwge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIG91dHB1dFN0b3JhZ2VTdHJhdGVneTogdGhpcy5nZXRJbnN0YW5jZVByb3BzLm91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbiAgICB9KTtcblxuICAgIFRhZ3Mub2YoYW1wbGlmeVN0b3JhZ2UpLmFkZChUYWdOYW1lLkZSSUVORExZX05BTUUsIHRoaXMucHJvcHMubmFtZSk7XG5cbiAgICBPYmplY3QuZW50cmllcyh0aGlzLnByb3BzLnRyaWdnZXJzIHx8IHt9KS5mb3JFYWNoKFxuICAgICAgKFt0cmlnZ2VyRXZlbnQsIGhhbmRsZXJGYWN0b3J5XSkgPT4ge1xuICAgICAgICBjb25zdCBldmVudHMgPSBbXTtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IGhhbmRsZXJGYWN0b3J5LmdldEluc3RhbmNlKHRoaXMuZ2V0SW5zdGFuY2VQcm9wcylcbiAgICAgICAgICAucmVzb3VyY2VzLmxhbWJkYTtcbiAgICAgICAgLy8gdHJpZ2dlckV2ZW50IGlzIGNvbnZlcnRlZCBzdHJpbmcgZnJvbSBPYmplY3QuZW50cmllc1xuICAgICAgICBzd2l0Y2ggKHRyaWdnZXJFdmVudCBhcyBBbXBsaWZ5U3RvcmFnZVRyaWdnZXJFdmVudCkge1xuICAgICAgICAgIGNhc2UgJ29uRGVsZXRlJzpcbiAgICAgICAgICAgIGV2ZW50cy5wdXNoKEV2ZW50VHlwZS5PQkpFQ1RfUkVNT1ZFRCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdvblVwbG9hZCc6XG4gICAgICAgICAgICBldmVudHMucHVzaChFdmVudFR5cGUuT0JKRUNUX0NSRUFURUQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYW1wbGlmeVN0b3JhZ2UuYWRkVHJpZ2dlcihldmVudHMsIGhhbmRsZXIpO1xuICAgICAgfSxcbiAgICApO1xuXG4gICAgaWYgKCF0aGlzLnByb3BzLmFjY2Vzcykge1xuICAgICAgcmV0dXJuIGFtcGxpZnlTdG9yYWdlO1xuICAgIH1cblxuICAgIC8vIGdlbmVyYXRlIHRoZSBzc20gZW52aXJvbm1lbnQgY29udGV4dCBuZWNlc3NhcnkgdG8gYWNjZXNzIHRoZSBzMyBidWNrZXQgKGluIHRoaXMgY2FzZSwganVzdCB0aGUgYnVja2V0IG5hbWUpXG4gICAgY29uc3Qgc3NtRW52aXJvbm1lbnRFbnRyaWVzID1cbiAgICAgIHNzbUVudmlyb25tZW50RW50cmllc0dlbmVyYXRvci5nZW5lcmF0ZVNzbUVudmlyb25tZW50RW50cmllcyh7XG4gICAgICAgIFtgJHt0aGlzLnByb3BzLm5hbWV9X0JVQ0tFVF9OQU1FYF06XG4gICAgICAgICAgYW1wbGlmeVN0b3JhZ2UucmVzb3VyY2VzLmJ1Y2tldC5idWNrZXROYW1lLFxuICAgICAgfSk7XG5cbiAgICAvLyB3ZSBwYXNzIHRoZSBhY2Nlc3MgZGVmaW5pdGlvbiBhbG9uZyB3aXRoIG90aGVyIGRlcGVuZGVuY2llcyB0byB0aGUgc3RvcmFnZUFjY2Vzc09yY2hlc3RyYXRvclxuICAgIGNvbnN0IHN0b3JhZ2VBY2Nlc3NPcmNoZXN0cmF0b3IgPVxuICAgICAgdGhpcy5zdG9yYWdlQWNjZXNzT3JjaGVzdHJhdG9yRmFjdG9yeS5nZXRJbnN0YW5jZShcbiAgICAgICAgdGhpcy5wcm9wcy5hY2Nlc3MsXG4gICAgICAgIHRoaXMuZ2V0SW5zdGFuY2VQcm9wcyxcbiAgICAgICAgc3NtRW52aXJvbm1lbnRFbnRyaWVzLFxuICAgICAgICBuZXcgU3RvcmFnZUFjY2Vzc1BvbGljeUZhY3RvcnkoYW1wbGlmeVN0b3JhZ2UucmVzb3VyY2VzLmJ1Y2tldCksXG4gICAgICApO1xuXG4gICAgLy8gdGhlIG9yY2hlc3RyYXRvciBnZW5lcmF0ZXMgcG9saWNpZXMgYWNjb3JkaW5nIHRvIHRoZSBhY2Nlc3NEZWZpbml0aW9uIGFuZCBhdHRhY2hlcyB0aGUgcG9saWNpZXMgdG8gYXBwcm9wcmlhdGUgcm9sZXNcbiAgICBjb25zdCBzdG9yYWdlQWNjZXNzT3V0cHV0ID1cbiAgICAgIHN0b3JhZ2VBY2Nlc3NPcmNoZXN0cmF0b3Iub3JjaGVzdHJhdGVTdG9yYWdlQWNjZXNzKCk7XG4gICAgYW1wbGlmeVN0b3JhZ2UuYWRkQWNjZXNzRGVmaW5pdGlvbihzdG9yYWdlQWNjZXNzT3V0cHV0KTtcblxuICAgIHJldHVybiBhbXBsaWZ5U3RvcmFnZTtcbiAgfTtcbn1cbiJdfQ==