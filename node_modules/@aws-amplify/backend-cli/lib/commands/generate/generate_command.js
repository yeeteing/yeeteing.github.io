import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * An entry point for generate command.
 */
export class GenerateCommand {
    generateOutputsCommand;
    generateFormsCommand;
    generateGraphqlClientCodeCommand;
    generateSchemaCommand;
    commandMiddleware;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for generate command.
     */
    constructor(generateOutputsCommand, generateFormsCommand, generateGraphqlClientCodeCommand, generateSchemaCommand, commandMiddleware) {
        this.generateOutputsCommand = generateOutputsCommand;
        this.generateFormsCommand = generateFormsCommand;
        this.generateGraphqlClientCodeCommand = generateGraphqlClientCodeCommand;
        this.generateSchemaCommand = generateSchemaCommand;
        this.commandMiddleware = commandMiddleware;
        this.command = 'generate';
        this.describe = 'Generates post deployment artifacts';
    }
    /**
     * @inheritDoc
     */
    handler = () => {
        // CommandModule requires handler implementation. But this is never called if top level command
        // is configured to require subcommand.
        // Help is printed by default in that case before ever attempting to call handler.
        throw new Error('Top level generate handler should never be called');
    };
    builder = (yargs) => {
        return (yargs
            .version(false)
            // Cast to erase options types used in internal sub command implementation. Otherwise, compiler fails here.
            .command(this.generateOutputsCommand)
            .command(this.generateFormsCommand)
            .command(this.generateGraphqlClientCodeCommand)
            .command(this.generateSchemaCommand)
            .demandCommand()
            .strictCommands()
            .recommendCommands()
            .option('profile', {
            describe: 'An AWS profile name.',
            type: 'string',
            array: false,
        })
            .check(async (argv) => {
            const stackNameRegex = /^[a-zA-Z][-a-zA-Z0-9]{1,127}$|^arn:[-a-zA-Z0-9:/._+]$/;
            if (argv['stack'] && typeof argv['stack'] === 'string') {
                if (!argv.stack.match(stackNameRegex)) {
                    throw new AmplifyUserError('InvalidCommandInputError', {
                        message: `Invalid --stack name provided: ${argv.stack}`,
                        resolution: 'Check the value of the stack name provided and try again.',
                    });
                }
            }
            return true;
        })
            .middleware([this.commandMiddleware.ensureAwsCredentialAndRegion]));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmF0ZS9nZW5lcmF0ZV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTlEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFlUDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBbEJuQjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUztJQUUxQjs7T0FFRztJQUNILFlBQ21CLHNCQUE4QyxFQUM5QyxvQkFBMEMsRUFDMUMsZ0NBQWtFLEVBQ2xFLHFCQUE0QyxFQUM1QyxpQkFBb0M7UUFKcEMsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLHFDQUFnQyxHQUFoQyxnQ0FBZ0MsQ0FBa0M7UUFDbEUsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBRXJELElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcscUNBQXFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEdBQXlCLEVBQUU7UUFDbkMsK0ZBQStGO1FBQy9GLHVDQUF1QztRQUN2QyxrRkFBa0Y7UUFDbEYsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0lBQ3ZFLENBQUMsQ0FBQztJQUVGLE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBUSxFQUFFO1FBQzlCLE9BQU8sQ0FDTCxLQUFLO2FBQ0YsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUNmLDJHQUEyRzthQUMxRyxPQUFPLENBQUMsSUFBSSxDQUFDLHNCQUFrRCxDQUFDO2FBQ2hFLE9BQU8sQ0FBQyxJQUFJLENBQUMsb0JBQWdELENBQUM7YUFDOUQsT0FBTyxDQUNOLElBQUksQ0FBQyxnQ0FBNEQsQ0FDbEU7YUFDQSxPQUFPLENBQUMsSUFBSSxDQUFDLHFCQUFpRCxDQUFDO2FBQy9ELGFBQWEsRUFBRTthQUNmLGNBQWMsRUFBRTthQUNoQixpQkFBaUIsRUFBRTthQUNuQixNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ2pCLFFBQVEsRUFBRSxzQkFBc0I7WUFDaEMsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUM7YUFDRCxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ3BCLE1BQU0sY0FBYyxHQUNsQix1REFBdUQsQ0FBQztZQUMxRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUUsQ0FBQztnQkFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUM7b0JBQ3RDLE1BQU0sSUFBSSxnQkFBZ0IsQ0FBQywwQkFBMEIsRUFBRTt3QkFDckQsT0FBTyxFQUFFLGtDQUFrQyxJQUFJLENBQUMsS0FBSyxFQUFFO3dCQUN2RCxVQUFVLEVBQ1IsMkRBQTJEO3FCQUM5RCxDQUFDLENBQUM7Z0JBQ0wsQ0FBQztZQUNILENBQUM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQzthQUNELFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQ3JFLENBQUM7SUFDSixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBHZW5lcmF0ZU91dHB1dHNDb21tYW5kIH0gZnJvbSAnLi9vdXRwdXRzL2dlbmVyYXRlX291dHB1dHNfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUZvcm1zQ29tbWFuZCB9IGZyb20gJy4vZm9ybXMvZ2VuZXJhdGVfZm9ybXNfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZCB9IGZyb20gJy4vZ3JhcGhxbC1jbGllbnQtY29kZS9nZW5lcmF0ZV9ncmFwaHFsX2NsaWVudF9jb2RlX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgQ29tbWFuZE1pZGRsZXdhcmUgfSBmcm9tICcuLi8uLi9jb21tYW5kX21pZGRsZXdhcmUuanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVTY2hlbWFDb21tYW5kIH0gZnJvbSAnLi9zY2hlbWEtZnJvbS1kYXRhYmFzZS9nZW5lcmF0ZV9zY2hlbWFfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG4vKipcbiAqIEFuIGVudHJ5IHBvaW50IGZvciBnZW5lcmF0ZSBjb21tYW5kLlxuICovXG5leHBvcnQgY2xhc3MgR2VuZXJhdGVDb21tYW5kIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZSB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogQ3JlYXRlcyB0b3AgbGV2ZWwgZW50cnkgcG9pbnQgZm9yIGdlbmVyYXRlIGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdlbmVyYXRlT3V0cHV0c0NvbW1hbmQ6IEdlbmVyYXRlT3V0cHV0c0NvbW1hbmQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZW5lcmF0ZUZvcm1zQ29tbWFuZDogR2VuZXJhdGVGb3Jtc0NvbW1hbmQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZDogR2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZW5lcmF0ZVNjaGVtYUNvbW1hbmQ6IEdlbmVyYXRlU2NoZW1hQ29tbWFuZCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbW1hbmRNaWRkbGV3YXJlOiBDb21tYW5kTWlkZGxld2FyZSxcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ2dlbmVyYXRlJztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0dlbmVyYXRlcyBwb3N0IGRlcGxveW1lbnQgYXJ0aWZhY3RzJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9ICgpOiB2b2lkIHwgUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgLy8gQ29tbWFuZE1vZHVsZSByZXF1aXJlcyBoYW5kbGVyIGltcGxlbWVudGF0aW9uLiBCdXQgdGhpcyBpcyBuZXZlciBjYWxsZWQgaWYgdG9wIGxldmVsIGNvbW1hbmRcbiAgICAvLyBpcyBjb25maWd1cmVkIHRvIHJlcXVpcmUgc3ViY29tbWFuZC5cbiAgICAvLyBIZWxwIGlzIHByaW50ZWQgYnkgZGVmYXVsdCBpbiB0aGF0IGNhc2UgYmVmb3JlIGV2ZXIgYXR0ZW1wdGluZyB0byBjYWxsIGhhbmRsZXIuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb3AgbGV2ZWwgZ2VuZXJhdGUgaGFuZGxlciBzaG91bGQgbmV2ZXIgYmUgY2FsbGVkJyk7XG4gIH07XG5cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndik6IEFyZ3YgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICB5YXJnc1xuICAgICAgICAudmVyc2lvbihmYWxzZSlcbiAgICAgICAgLy8gQ2FzdCB0byBlcmFzZSBvcHRpb25zIHR5cGVzIHVzZWQgaW4gaW50ZXJuYWwgc3ViIGNvbW1hbmQgaW1wbGVtZW50YXRpb24uIE90aGVyd2lzZSwgY29tcGlsZXIgZmFpbHMgaGVyZS5cbiAgICAgICAgLmNvbW1hbmQodGhpcy5nZW5lcmF0ZU91dHB1dHNDb21tYW5kIGFzIHVua25vd24gYXMgQ29tbWFuZE1vZHVsZSlcbiAgICAgICAgLmNvbW1hbmQodGhpcy5nZW5lcmF0ZUZvcm1zQ29tbWFuZCBhcyB1bmtub3duIGFzIENvbW1hbmRNb2R1bGUpXG4gICAgICAgIC5jb21tYW5kKFxuICAgICAgICAgIHRoaXMuZ2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQgYXMgdW5rbm93biBhcyBDb21tYW5kTW9kdWxlLFxuICAgICAgICApXG4gICAgICAgIC5jb21tYW5kKHRoaXMuZ2VuZXJhdGVTY2hlbWFDb21tYW5kIGFzIHVua25vd24gYXMgQ29tbWFuZE1vZHVsZSlcbiAgICAgICAgLmRlbWFuZENvbW1hbmQoKVxuICAgICAgICAuc3RyaWN0Q29tbWFuZHMoKVxuICAgICAgICAucmVjb21tZW5kQ29tbWFuZHMoKVxuICAgICAgICAub3B0aW9uKCdwcm9maWxlJywge1xuICAgICAgICAgIGRlc2NyaWJlOiAnQW4gQVdTIHByb2ZpbGUgbmFtZS4nLFxuICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgICAgfSlcbiAgICAgICAgLmNoZWNrKGFzeW5jIChhcmd2KSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3RhY2tOYW1lUmVnZXggPVxuICAgICAgICAgICAgL15bYS16QS1aXVstYS16QS1aMC05XXsxLDEyN30kfF5hcm46Wy1hLXpBLVowLTk6Ly5fK10kLztcbiAgICAgICAgICBpZiAoYXJndlsnc3RhY2snXSAmJiB0eXBlb2YgYXJndlsnc3RhY2snXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICghYXJndi5zdGFjay5tYXRjaChzdGFja05hbWVSZWdleCkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoJ0ludmFsaWRDb21tYW5kSW5wdXRFcnJvcicsIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBgSW52YWxpZCAtLXN0YWNrIG5hbWUgcHJvdmlkZWQ6ICR7YXJndi5zdGFja31gLFxuICAgICAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgICAgICAnQ2hlY2sgdGhlIHZhbHVlIG9mIHRoZSBzdGFjayBuYW1lIHByb3ZpZGVkIGFuZCB0cnkgYWdhaW4uJyxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KVxuICAgICAgICAubWlkZGxld2FyZShbdGhpcy5jb21tYW5kTWlkZGxld2FyZS5lbnN1cmVBd3NDcmVkZW50aWFsQW5kUmVnaW9uXSlcbiAgICApO1xuICB9O1xufVxuIl19