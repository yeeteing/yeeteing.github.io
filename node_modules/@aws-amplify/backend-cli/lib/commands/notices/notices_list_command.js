/**
 * Notices list command.
 */
export class NoticesListCommand {
    noticesController;
    noticesPrinter;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates notices list command
     */
    constructor(noticesController, noticesPrinter) {
        this.noticesController = noticesController;
        this.noticesPrinter = noticesPrinter;
        this.command = 'list';
        this.describe =
            'Displays active notices relevant to your Amplify backend environment. ' +
                'Shows important information about package compatibility, version updates, ' +
                'and potential issues that may affect your development workflow.';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const notices = await this.noticesController.getApplicableNotices({
            event: 'listNoticesCommand',
            includeAcknowledged: args.all,
        });
        this.noticesPrinter.print(notices);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .version(false)
            .option('all', {
            type: 'boolean',
            describe: 'Includes already acknowledged notices',
        })
            .help();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWNlc19saXN0X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvbm90aWNlcy9ub3RpY2VzX2xpc3RfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTQTs7R0FFRztBQUNILE1BQU0sT0FBTyxrQkFBa0I7SUFpQlY7SUFDQTtJQWZuQjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUztJQUUxQjs7T0FFRztJQUNILFlBQ21CLGlCQUFvQyxFQUNwQyxjQUE4QjtRQUQ5QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUUvQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUTtZQUNYLHdFQUF3RTtnQkFDeEUsNEVBQTRFO2dCQUM1RSxpRUFBaUUsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLEdBQUcsS0FBSyxFQUFFLElBQXdDLEVBQWlCLEVBQUU7UUFDMUUsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsb0JBQW9CLENBQUM7WUFDaEUsS0FBSyxFQUFFLG9CQUFvQjtZQUMzQixtQkFBbUIsRUFBRSxJQUFJLENBQUMsR0FBRztTQUM5QixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBUSxFQUFFO1FBQzlCLE9BQU8sS0FBSzthQUNULE9BQU8sQ0FBQyxLQUFLLENBQUM7YUFDZCxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2IsSUFBSSxFQUFFLFNBQVM7WUFDZixRQUFRLEVBQUUsdUNBQXVDO1NBQ2xELENBQUM7YUFDRCxJQUFJLEVBQUUsQ0FBQztJQUNaLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IE5vdGljZXNDb250cm9sbGVyIH0gZnJvbSAnLi4vLi4vbm90aWNlcy9ub3RpY2VzX2NvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHsgTm90aWNlc1ByaW50ZXIgfSBmcm9tICcuLi8uLi9ub3RpY2VzL25vdGljZXNfcHJpbnRlci5qcyc7XG5pbXBvcnQgeyBBcmd1bWVudHNLZWJhYkNhc2UgfSBmcm9tICcuLi8uLi9rZWJhYl9jYXNlLmpzJztcblxudHlwZSBOb3RpY2VzTGlzdENvbW1hbmRPcHRpb25zS2ViYWJDYXNlID0gQXJndW1lbnRzS2ViYWJDYXNlPHtcbiAgYWxsPzogYm9vbGVhbjtcbn0+O1xuXG4vKipcbiAqIE5vdGljZXMgbGlzdCBjb21tYW5kLlxuICovXG5leHBvcnQgY2xhc3MgTm90aWNlc0xpc3RDb21tYW5kXG4gIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZTxvYmplY3QsIE5vdGljZXNMaXN0Q29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogQ3JlYXRlcyBub3RpY2VzIGxpc3QgY29tbWFuZFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBub3RpY2VzQ29udHJvbGxlcjogTm90aWNlc0NvbnRyb2xsZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBub3RpY2VzUHJpbnRlcjogTm90aWNlc1ByaW50ZXIsXG4gICkge1xuICAgIHRoaXMuY29tbWFuZCA9ICdsaXN0JztcbiAgICB0aGlzLmRlc2NyaWJlID1cbiAgICAgICdEaXNwbGF5cyBhY3RpdmUgbm90aWNlcyByZWxldmFudCB0byB5b3VyIEFtcGxpZnkgYmFja2VuZCBlbnZpcm9ubWVudC4gJyArXG4gICAgICAnU2hvd3MgaW1wb3J0YW50IGluZm9ybWF0aW9uIGFib3V0IHBhY2thZ2UgY29tcGF0aWJpbGl0eSwgdmVyc2lvbiB1cGRhdGVzLCAnICtcbiAgICAgICdhbmQgcG90ZW50aWFsIGlzc3VlcyB0aGF0IG1heSBhZmZlY3QgeW91ciBkZXZlbG9wbWVudCB3b3JrZmxvdy4nO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBoYW5kbGVyID0gYXN5bmMgKGFyZ3M6IE5vdGljZXNMaXN0Q29tbWFuZE9wdGlvbnNLZWJhYkNhc2UpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBub3RpY2VzID0gYXdhaXQgdGhpcy5ub3RpY2VzQ29udHJvbGxlci5nZXRBcHBsaWNhYmxlTm90aWNlcyh7XG4gICAgICBldmVudDogJ2xpc3ROb3RpY2VzQ29tbWFuZCcsXG4gICAgICBpbmNsdWRlQWNrbm93bGVkZ2VkOiBhcmdzLmFsbCxcbiAgICB9KTtcbiAgICB0aGlzLm5vdGljZXNQcmludGVyLnByaW50KG5vdGljZXMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndik6IEFyZ3YgPT4ge1xuICAgIHJldHVybiB5YXJnc1xuICAgICAgLnZlcnNpb24oZmFsc2UpXG4gICAgICAub3B0aW9uKCdhbGwnLCB7XG4gICAgICAgIHR5cGU6ICdib29sZWFuJyxcbiAgICAgICAgZGVzY3JpYmU6ICdJbmNsdWRlcyBhbHJlYWR5IGFja25vd2xlZGdlZCBub3RpY2VzJyxcbiAgICAgIH0pXG4gICAgICAuaGVscCgpO1xuICB9O1xufVxuIl19