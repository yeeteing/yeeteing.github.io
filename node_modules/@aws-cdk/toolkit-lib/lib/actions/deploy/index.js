"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackParameters = exports.AssetBuildTime = void 0;
/**
 * When to build assets
 */
var AssetBuildTime;
(function (AssetBuildTime) {
    /**
     * Build all assets before deploying the first stack
     *
     * This is intended for expensive Docker image builds; so that if the Docker image build
     * fails, no stacks are unnecessarily deployed (with the attendant wait time).
     */
    AssetBuildTime["ALL_BEFORE_DEPLOY"] = "all-before-deploy";
    /**
     * Build assets just-in-time, before publishing
     */
    AssetBuildTime["JUST_IN_TIME"] = "just-in-time";
})(AssetBuildTime || (exports.AssetBuildTime = AssetBuildTime = {}));
class StackParameters {
    /**
     * Use only existing parameters on the stack.
     */
    static onlyExisting() {
        return new StackParameters({}, true);
    }
    /**
     * Use exactly these parameters and remove any other existing parameters from the stack.
     */
    static exactly(params) {
        return new StackParameters(params, false);
    }
    /**
     * Define additional parameters for the stack, while keeping existing parameters for unspecified values.
     */
    static withExisting(params) {
        return new StackParameters(params, true);
    }
    parameters;
    keepExistingParameters;
    constructor(params, usePreviousParameters = true) {
        this.keepExistingParameters = usePreviousParameters;
        this.parameters = new Map(Object.entries(params));
    }
}
exports.StackParameters = StackParameters;
//# sourceMappingURL=data:application/json;base64,