/**
 * Reads SSM environment context from a known Amplify environment variable,
 * fetches values from SSM and places those values in the corresponding environment variables
 */
export const internalAmplifyFunctionResolveSsmParams = async (client) => {
    const envPathObject = JSON.parse(process.env.AMPLIFY_SSM_ENV_CONFIG ?? '{}');
    const paths = Object.values(envPathObject).map((paths) => paths.path);
    if (paths.length === 0) {
        return;
    }
    let actualSsmClient;
    if (client) {
        actualSsmClient = client;
    }
    else {
        const ssmSdk = await import('@aws-sdk/client-ssm');
        actualSsmClient = new ssmSdk.SSM();
    }
    const chunkArray = (array, chunkSize) => {
        const chunks = [];
        for (let i = 0; i < array.length; i += chunkSize) {
            chunks.push(array.slice(i, i + chunkSize));
        }
        return chunks;
    };
    const resolveSecrets = async (paths) => {
        const response = (await Promise.all(chunkArray(paths, 10).map(async (chunkedPaths) => await actualSsmClient.getParameters({
            Names: chunkedPaths,
            WithDecryption: true,
        })))).reduce((accumulator, res) => {
            accumulator.Parameters?.push(...(res.Parameters ?? []));
            accumulator.InvalidParameters?.push(...(res.InvalidParameters ?? []));
            return accumulator;
        }, {
            Parameters: [],
            InvalidParameters: [],
        });
        if (response.Parameters && response.Parameters.length > 0) {
            for (const parameter of response.Parameters) {
                if (parameter.Name) {
                    const envKey = Object.keys(envPathObject).find((key) => envPathObject[key].sharedPath === parameter.Name ||
                        envPathObject[key].path === parameter.Name);
                    if (envKey) {
                        process.env[envKey] = parameter.Value;
                    }
                }
            }
        }
        return response;
    };
    const response = await resolveSecrets(paths);
    const sharedPaths = (response?.InvalidParameters || [])
        .map((invalidParam) => Object.values(envPathObject).find((paths) => paths.path === invalidParam)?.sharedPath)
        .filter((sharedParam) => !!sharedParam); // this assertion is safe because we are filtering out undefined
    if (sharedPaths.length > 0) {
        await resolveSecrets(sharedPaths);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZV9zc21fcGFyYW1zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xhbWJkYS1zaGltcy9yZXNvbHZlX3NzbV9wYXJhbXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0E7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUNBQXVDLEdBQUcsS0FBSyxFQUFFLE1BQVksRUFBRSxFQUFFO0lBQzVFLE1BQU0sYUFBYSxHQUFlLElBQUksQ0FBQyxLQUFLLENBQzFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLElBQUksSUFBSSxDQUMzQyxDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV0RSxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDdkIsT0FBTztJQUNULENBQUM7SUFFRCxJQUFJLGVBQW9CLENBQUM7SUFDekIsSUFBSSxNQUFNLEVBQUUsQ0FBQztRQUNYLGVBQWUsR0FBRyxNQUFNLENBQUM7SUFDM0IsQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBQ25ELGVBQWUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUNyQyxDQUFDO0lBRUQsTUFBTSxVQUFVLEdBQUcsQ0FBSSxLQUFVLEVBQUUsU0FBaUIsRUFBUyxFQUFFO1FBQzdELE1BQU0sTUFBTSxHQUFVLEVBQUUsQ0FBQztRQUN6QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksU0FBUyxFQUFFLENBQUM7WUFDakQsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQUcsS0FBSyxFQUFFLEtBQWUsRUFBRSxFQUFFO1FBQy9DLE1BQU0sUUFBUSxHQUFHLENBQ2YsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNmLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUN2QixLQUFLLEVBQUUsWUFBWSxFQUFFLEVBQUUsQ0FDckIsTUFBTSxlQUFlLENBQUMsYUFBYSxDQUFDO1lBQ2xDLEtBQUssRUFBRSxZQUFZO1lBQ25CLGNBQWMsRUFBRSxJQUFJO1NBQ3JCLENBQUMsQ0FDTCxDQUNGLENBQ0YsQ0FBQyxNQUFNLENBQ04sQ0FBQyxXQUFXLEVBQUUsR0FBK0IsRUFBRSxFQUFFO1lBQy9DLFdBQVcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDeEQsV0FBVyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLGlCQUFpQixJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEUsT0FBTyxXQUFXLENBQUM7UUFDckIsQ0FBQyxFQUNEO1lBQ0UsVUFBVSxFQUFFLEVBQUU7WUFDZCxpQkFBaUIsRUFBRSxFQUFFO1NBQ2lCLENBQ3pDLENBQUM7UUFFRixJQUFJLFFBQVEsQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDMUQsS0FBSyxNQUFNLFNBQVMsSUFBSSxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7Z0JBQzVDLElBQUksU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUNuQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDNUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUNOLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEtBQUssU0FBUyxDQUFDLElBQUk7d0JBQ2hELGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLElBQUksQ0FDN0MsQ0FBQztvQkFDRixJQUFJLE1BQU0sRUFBRSxDQUFDO3dCQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQztvQkFDeEMsQ0FBQztnQkFDSCxDQUFDO1lBQ0gsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDLENBQUM7SUFFRixNQUFNLFFBQVEsR0FBRyxNQUFNLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU3QyxNQUFNLFdBQVcsR0FBRyxDQUFDLFFBQVEsRUFBRSxpQkFBaUIsSUFBSSxFQUFFLENBQUM7U0FDcEQsR0FBRyxDQUNGLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FDZixNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDL0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssWUFBWSxDQUN2QyxFQUFFLFVBQVUsQ0FDaEI7U0FDQSxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQWEsQ0FBQyxDQUFDLGdFQUFnRTtJQUV2SCxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7UUFDM0IsTUFBTSxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDcEMsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBjb2RlIGxvYWRzIGVudmlyb25tZW50IHZhbHVlcyBmcm9tIFNTTSBhbmQgcGxhY2VzIHRoZW0gaW4gdGhlaXIgY29ycmVzcG9uZGluZyBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG4gKiBJZiB0aGVyZSBhcmUgbm8gU1NNIGVudmlyb25tZW50IHZhbHVlcyBmb3IgdGhpcyBmdW5jdGlvbiwgdGhpcyBpcyBhIG5vb3AuXG4gKi9cbmltcG9ydCB0eXBlIHsgR2V0UGFyYW1ldGVyc0NvbW1hbmRPdXRwdXQsIFNTTSB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zc20nO1xuaW1wb3J0IHR5cGUgeyBTc21FbnZWYXJzIH0gZnJvbSAnLi4vZnVuY3Rpb25fZW52X3RyYW5zbGF0b3IuanMnO1xuXG4vKipcbiAqIFJlYWRzIFNTTSBlbnZpcm9ubWVudCBjb250ZXh0IGZyb20gYSBrbm93biBBbXBsaWZ5IGVudmlyb25tZW50IHZhcmlhYmxlLFxuICogZmV0Y2hlcyB2YWx1ZXMgZnJvbSBTU00gYW5kIHBsYWNlcyB0aG9zZSB2YWx1ZXMgaW4gdGhlIGNvcnJlc3BvbmRpbmcgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gKi9cbmV4cG9ydCBjb25zdCBpbnRlcm5hbEFtcGxpZnlGdW5jdGlvblJlc29sdmVTc21QYXJhbXMgPSBhc3luYyAoY2xpZW50PzogU1NNKSA9PiB7XG4gIGNvbnN0IGVudlBhdGhPYmplY3Q6IFNzbUVudlZhcnMgPSBKU09OLnBhcnNlKFxuICAgIHByb2Nlc3MuZW52LkFNUExJRllfU1NNX0VOVl9DT05GSUcgPz8gJ3t9JyxcbiAgKTtcbiAgY29uc3QgcGF0aHMgPSBPYmplY3QudmFsdWVzKGVudlBhdGhPYmplY3QpLm1hcCgocGF0aHMpID0+IHBhdGhzLnBhdGgpO1xuXG4gIGlmIChwYXRocy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgYWN0dWFsU3NtQ2xpZW50OiBTU007XG4gIGlmIChjbGllbnQpIHtcbiAgICBhY3R1YWxTc21DbGllbnQgPSBjbGllbnQ7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc3NtU2RrID0gYXdhaXQgaW1wb3J0KCdAYXdzLXNkay9jbGllbnQtc3NtJyk7XG4gICAgYWN0dWFsU3NtQ2xpZW50ID0gbmV3IHNzbVNkay5TU00oKTtcbiAgfVxuXG4gIGNvbnN0IGNodW5rQXJyYXkgPSA8VD4oYXJyYXk6IFRbXSwgY2h1bmtTaXplOiBudW1iZXIpOiBUW11bXSA9PiB7XG4gICAgY29uc3QgY2h1bmtzOiBUW11bXSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IGNodW5rU2l6ZSkge1xuICAgICAgY2h1bmtzLnB1c2goYXJyYXkuc2xpY2UoaSwgaSArIGNodW5rU2l6ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gY2h1bmtzO1xuICB9O1xuXG4gIGNvbnN0IHJlc29sdmVTZWNyZXRzID0gYXN5bmMgKHBhdGhzOiBzdHJpbmdbXSkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gKFxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgIGNodW5rQXJyYXkocGF0aHMsIDEwKS5tYXAoXG4gICAgICAgICAgYXN5bmMgKGNodW5rZWRQYXRocykgPT5cbiAgICAgICAgICAgIGF3YWl0IGFjdHVhbFNzbUNsaWVudC5nZXRQYXJhbWV0ZXJzKHtcbiAgICAgICAgICAgICAgTmFtZXM6IGNodW5rZWRQYXRocyxcbiAgICAgICAgICAgICAgV2l0aERlY3J5cHRpb246IHRydWUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKSxcbiAgICAgIClcbiAgICApLnJlZHVjZShcbiAgICAgIChhY2N1bXVsYXRvciwgcmVzOiBHZXRQYXJhbWV0ZXJzQ29tbWFuZE91dHB1dCkgPT4ge1xuICAgICAgICBhY2N1bXVsYXRvci5QYXJhbWV0ZXJzPy5wdXNoKC4uLihyZXMuUGFyYW1ldGVycyA/PyBbXSkpO1xuICAgICAgICBhY2N1bXVsYXRvci5JbnZhbGlkUGFyYW1ldGVycz8ucHVzaCguLi4ocmVzLkludmFsaWRQYXJhbWV0ZXJzID8/IFtdKSk7XG4gICAgICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFBhcmFtZXRlcnM6IFtdLFxuICAgICAgICBJbnZhbGlkUGFyYW1ldGVyczogW10sXG4gICAgICB9IGFzIFBhcnRpYWw8R2V0UGFyYW1ldGVyc0NvbW1hbmRPdXRwdXQ+LFxuICAgICk7XG5cbiAgICBpZiAocmVzcG9uc2UuUGFyYW1ldGVycyAmJiByZXNwb25zZS5QYXJhbWV0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGZvciAoY29uc3QgcGFyYW1ldGVyIG9mIHJlc3BvbnNlLlBhcmFtZXRlcnMpIHtcbiAgICAgICAgaWYgKHBhcmFtZXRlci5OYW1lKSB7XG4gICAgICAgICAgY29uc3QgZW52S2V5ID0gT2JqZWN0LmtleXMoZW52UGF0aE9iamVjdCkuZmluZChcbiAgICAgICAgICAgIChrZXkpID0+XG4gICAgICAgICAgICAgIGVudlBhdGhPYmplY3Rba2V5XS5zaGFyZWRQYXRoID09PSBwYXJhbWV0ZXIuTmFtZSB8fFxuICAgICAgICAgICAgICBlbnZQYXRoT2JqZWN0W2tleV0ucGF0aCA9PT0gcGFyYW1ldGVyLk5hbWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoZW52S2V5KSB7XG4gICAgICAgICAgICBwcm9jZXNzLmVudltlbnZLZXldID0gcGFyYW1ldGVyLlZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfTtcblxuICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc29sdmVTZWNyZXRzKHBhdGhzKTtcblxuICBjb25zdCBzaGFyZWRQYXRocyA9IChyZXNwb25zZT8uSW52YWxpZFBhcmFtZXRlcnMgfHwgW10pXG4gICAgLm1hcChcbiAgICAgIChpbnZhbGlkUGFyYW0pID0+XG4gICAgICAgIE9iamVjdC52YWx1ZXMoZW52UGF0aE9iamVjdCkuZmluZChcbiAgICAgICAgICAocGF0aHMpID0+IHBhdGhzLnBhdGggPT09IGludmFsaWRQYXJhbSxcbiAgICAgICAgKT8uc2hhcmVkUGF0aCxcbiAgICApXG4gICAgLmZpbHRlcigoc2hhcmVkUGFyYW0pID0+ICEhc2hhcmVkUGFyYW0pIGFzIHN0cmluZ1tdOyAvLyB0aGlzIGFzc2VydGlvbiBpcyBzYWZlIGJlY2F1c2Ugd2UgYXJlIGZpbHRlcmluZyBvdXQgdW5kZWZpbmVkXG5cbiAgaWYgKHNoYXJlZFBhdGhzLmxlbmd0aCA+IDApIHtcbiAgICBhd2FpdCByZXNvbHZlU2VjcmV0cyhzaGFyZWRQYXRocyk7XG4gIH1cbn07XG4iXX0=