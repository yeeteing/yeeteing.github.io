import { NoticesManifestFetcher } from './notices_manifest_fetcher.js';
import { AmplifyUserError, PackageJsonReader, } from '@aws-amplify/platform-core';
import { LocalNamespaceResolver, } from '../backend-identifier/local_namespace_resolver.js';
import { NoticePredicatesEvaluator } from './notice_predicates_evaluator.js';
import { noticesAcknowledgementFileInstance, noticesMetadataFileInstance, } from './notices_files.js';
/**
 * A notices controller.
 */
export class NoticesController {
    packageManagerController;
    noticesAcknowledgementFile;
    noticesMetadataFile;
    namespaceResolver;
    noticesManifestFetcher;
    noticePredicatesEvaluator;
    /**
     * Creates notices controller.
     */
    constructor(packageManagerController, noticesAcknowledgementFile = noticesAcknowledgementFileInstance, noticesMetadataFile = noticesMetadataFileInstance, namespaceResolver = new LocalNamespaceResolver(new PackageJsonReader()), noticesManifestFetcher = new NoticesManifestFetcher(), noticePredicatesEvaluator = new NoticePredicatesEvaluator(packageManagerController)) {
        this.packageManagerController = packageManagerController;
        this.noticesAcknowledgementFile = noticesAcknowledgementFile;
        this.noticesMetadataFile = noticesMetadataFile;
        this.namespaceResolver = namespaceResolver;
        this.noticesManifestFetcher = noticesManifestFetcher;
        this.noticePredicatesEvaluator = noticePredicatesEvaluator;
    }
    getApplicableNotices = async (params) => {
        const noticesManifest = await this.noticesManifestFetcher.fetchNoticesManifest();
        let notices = noticesManifest.notices;
        if (!params.includeAcknowledged) {
            notices = await this.filterAcknowledgedNotices(notices);
        }
        notices = this.applyValidityPeriod(notices);
        notices = await this.applyFrequency(notices, params);
        notices = await this.applyPredicates(notices, params);
        return notices;
    };
    acknowledge = async (noticeId) => {
        const projectName = await this.namespaceResolver.resolve();
        const noticesManifest = await this.noticesManifestFetcher.fetchNoticesManifest();
        const notice = noticesManifest.notices.find((item) => item.id === noticeId);
        if (!notice) {
            throw new AmplifyUserError('NoticeNotFoundError', {
                message: `Notice with id=${noticeId} does not exist.`,
                resolution: `Ensure that notice being acknowledged exists. Run '${this.packageManagerController.getCommand(['ampx', 'notices', 'list'])}' to find available notices`,
            });
        }
        const acknowledgementFileContent = await this.noticesAcknowledgementFile.read();
        const existingAcknowledgement = acknowledgementFileContent.projectAcknowledgements.find((item) => item.projectName === projectName && item.noticeId === noticeId);
        if (existingAcknowledgement) {
            existingAcknowledgement.acknowledgedAt = Date.now();
        }
        else {
            acknowledgementFileContent.projectAcknowledgements.push({
                projectName,
                noticeId,
                acknowledgedAt: Date.now(),
            });
        }
        await this.noticesAcknowledgementFile.write(acknowledgementFileContent);
    };
    recordPrintingTimes = async (notices) => {
        const projectName = await this.namespaceResolver.resolve();
        const trackerFileContent = await this.noticesMetadataFile.read();
        for (const notice of notices) {
            const trackerItem = trackerFileContent.printTimes.find((item) => {
                return item.noticeId === notice.id && item.projectName === projectName;
            });
            if (trackerItem) {
                trackerItem.shownAt = Date.now();
            }
            else {
                trackerFileContent.printTimes.push({
                    projectName,
                    noticeId: notice.id,
                    shownAt: Date.now(),
                });
            }
        }
        await this.noticesMetadataFile.write(trackerFileContent);
    };
    filterAcknowledgedNotices = async (notices) => {
        const filteredNotices = [];
        const acknowledgementFileContent = await this.noticesAcknowledgementFile.read();
        const projectName = await this.namespaceResolver.resolve();
        for (const notice of notices) {
            const isAcknowledged = acknowledgementFileContent.projectAcknowledgements.find((ack) => {
                return ack.projectName === projectName && ack.noticeId === notice.id;
            }) !== undefined;
            if (!isAcknowledged) {
                filteredNotices.push(notice);
            }
        }
        return filteredNotices;
    };
    applyPredicates = async (notices, opts) => {
        const filteredNotices = [];
        for (const notice of notices) {
            if (await this.noticePredicatesEvaluator.evaluate(notice, opts)) {
                filteredNotices.push(notice);
            }
        }
        return filteredNotices;
    };
    applyFrequency = async (notices, opts) => {
        if (opts.event === 'listNoticesCommand') {
            // always show for listing command.
            return notices;
        }
        const projectName = await this.namespaceResolver.resolve();
        const metadata = await this.noticesMetadataFile.read();
        const shouldIncludeNotice = (notice) => {
            const desiredFrequency = notice.frequency ?? 'command';
            if (opts.event === 'postDeployment') {
                return desiredFrequency === 'deployment';
            }
            else if (desiredFrequency === 'command' ||
                desiredFrequency === 'deployment') {
                return opts.event === 'postCommand';
            }
            else if (desiredFrequency === 'once') {
                return (metadata.printTimes.find((item) => {
                    return (item.noticeId === notice.id && item.projectName === projectName);
                }) === undefined);
            }
            else if (desiredFrequency === 'daily') {
                const trackerItem = metadata.printTimes.find((item) => {
                    return (item.noticeId === notice.id && item.projectName === projectName);
                });
                if (!trackerItem) {
                    return true;
                }
                const shownAt = new Date(trackerItem.shownAt);
                const now = new Date();
                return (shownAt.getFullYear() !== now.getFullYear() ||
                    shownAt.getMonth() !== now.getMonth() ||
                    shownAt.getDate() !== now.getDate());
            }
            return false;
        };
        const filteredNotices = [];
        for (const notice of notices) {
            if (shouldIncludeNotice(notice)) {
                filteredNotices.push(notice);
            }
        }
        return filteredNotices;
    };
    applyValidityPeriod = (notices) => {
        const shouldIncludeNotice = (notice) => {
            const now = Date.now();
            return ((notice.validFrom ? now >= notice.validFrom : true) &&
                (notice.validTo ? now <= notice.validTo : true));
        };
        const filteredNotices = [];
        for (const notice of notices) {
            if (shouldIncludeNotice(notice)) {
                filteredNotices.push(notice);
            }
        }
        return filteredNotices;
    };
}
//# sourceMappingURL=data:application/json;base64,