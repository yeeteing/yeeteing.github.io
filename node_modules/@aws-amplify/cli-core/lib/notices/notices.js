import z from 'zod';
const noticePredicateSchema = z.discriminatedUnion('type', [
    z.object({
        type: z.literal('packageVersion'),
        packageName: z.string(),
        versionRange: z.string(),
    }),
    z.object({
        type: z.literal('nodeVersion'),
        versionRange: z.string(),
    }),
    z.object({
        type: z.literal('osFamily'),
        osFamily: z.enum(['windows', 'macos', 'linux']),
    }),
    z.object({
        type: z.literal('backendComponent'),
        backendComponent: z.enum(['data', 'auth', 'function', 'storage', 'ai']),
    }),
    z.object({
        type: z.literal('command'),
        command: z.enum(['sandbox', 'pipeline-deploy', 'generate', 'configure']),
    }),
    z.object({
        type: z.literal('errorMessage'),
        errorMessage: z.string(),
    }),
]);
export const noticeSchema = z.object({
    id: z.string(),
    title: z.string(),
    details: z.string(),
    link: z.string().optional(),
    predicates: z.array(noticePredicateSchema),
    frequency: z.enum(['command', 'deployment', 'once', 'daily']).optional(),
    validFrom: z.number().optional(),
    validTo: z.number().optional(),
});
export const noticesManifestSchema = z.object({
    notices: z.array(noticeSchema),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub3RpY2VzL25vdGljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDO0FBRXBCLE1BQU0scUJBQXFCLEdBQUcsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRTtJQUN6RCxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ1AsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7UUFDakMsV0FBVyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUU7UUFDdkIsWUFBWSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUU7S0FDekIsQ0FBQztJQUNGLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDUCxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDOUIsWUFBWSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUU7S0FDekIsQ0FBQztJQUNGLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDUCxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDM0IsUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ2hELENBQUM7SUFDRixDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ1AsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7UUFDbkMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUN4RSxDQUFDO0lBQ0YsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNQLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUMxQixPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7S0FDekUsQ0FBQztJQUNGLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDUCxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7UUFDL0IsWUFBWSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUU7S0FDekIsQ0FBQztDQUNILENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ25DLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO0lBQ2QsS0FBSyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDakIsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDbkIsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDM0IsVUFBVSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUM7SUFDMUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUN4RSxTQUFTLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNoQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtDQUMvQixDQUFDLENBQUM7QUFJSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQzVDLE9BQU8sRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztDQUMvQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeiBmcm9tICd6b2QnO1xuXG5jb25zdCBub3RpY2VQcmVkaWNhdGVTY2hlbWEgPSB6LmRpc2NyaW1pbmF0ZWRVbmlvbigndHlwZScsIFtcbiAgei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgncGFja2FnZVZlcnNpb24nKSxcbiAgICBwYWNrYWdlTmFtZTogei5zdHJpbmcoKSxcbiAgICB2ZXJzaW9uUmFuZ2U6IHouc3RyaW5nKCksXG4gIH0pLFxuICB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdub2RlVmVyc2lvbicpLFxuICAgIHZlcnNpb25SYW5nZTogei5zdHJpbmcoKSxcbiAgfSksXG4gIHoub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoJ29zRmFtaWx5JyksXG4gICAgb3NGYW1pbHk6IHouZW51bShbJ3dpbmRvd3MnLCAnbWFjb3MnLCAnbGludXgnXSksXG4gIH0pLFxuICB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdiYWNrZW5kQ29tcG9uZW50JyksXG4gICAgYmFja2VuZENvbXBvbmVudDogei5lbnVtKFsnZGF0YScsICdhdXRoJywgJ2Z1bmN0aW9uJywgJ3N0b3JhZ2UnLCAnYWknXSksXG4gIH0pLFxuICB6Lm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKCdjb21tYW5kJyksXG4gICAgY29tbWFuZDogei5lbnVtKFsnc2FuZGJveCcsICdwaXBlbGluZS1kZXBsb3knLCAnZ2VuZXJhdGUnLCAnY29uZmlndXJlJ10pLFxuICB9KSxcbiAgei5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbCgnZXJyb3JNZXNzYWdlJyksXG4gICAgZXJyb3JNZXNzYWdlOiB6LnN0cmluZygpLFxuICB9KSxcbl0pO1xuXG5leHBvcnQgY29uc3Qgbm90aWNlU2NoZW1hID0gei5vYmplY3Qoe1xuICBpZDogei5zdHJpbmcoKSxcbiAgdGl0bGU6IHouc3RyaW5nKCksXG4gIGRldGFpbHM6IHouc3RyaW5nKCksXG4gIGxpbms6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgcHJlZGljYXRlczogei5hcnJheShub3RpY2VQcmVkaWNhdGVTY2hlbWEpLFxuICBmcmVxdWVuY3k6IHouZW51bShbJ2NvbW1hbmQnLCAnZGVwbG95bWVudCcsICdvbmNlJywgJ2RhaWx5J10pLm9wdGlvbmFsKCksXG4gIHZhbGlkRnJvbTogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICB2YWxpZFRvOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IHR5cGUgTm90aWNlID0gei5pbmZlcjx0eXBlb2Ygbm90aWNlU2NoZW1hPjtcblxuZXhwb3J0IGNvbnN0IG5vdGljZXNNYW5pZmVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgbm90aWNlczogei5hcnJheShub3RpY2VTY2hlbWEpLFxufSk7XG5cbmV4cG9ydCB0eXBlIE5vdGljZXNNYW5pZmVzdCA9IHouaW5mZXI8dHlwZW9mIG5vdGljZXNNYW5pZmVzdFNjaGVtYT47XG4iXX0=