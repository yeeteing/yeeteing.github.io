"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IoHostSdkLogger = void 0;
exports.formatSdkLoggerContent = formatSdkLoggerContent;
const util_1 = require("util");
const util_2 = require("../../util");
const private_1 = require("../io/private");
class IoHostSdkLogger {
    ioHelper;
    constructor(ioHelper) {
        this.ioHelper = ioHelper;
    }
    notify(level, ...content) {
        void this.ioHelper.notify(private_1.IO.CDK_SDK_I0100.msg((0, util_1.format)('[SDK %s] %s', level, formatSdkLoggerContent(content)), {
            sdkLevel: level,
            content,
        }));
    }
    trace(..._content) {
        // This is too much detail for our logs
        // this.notify('trace', ...content);
    }
    debug(..._content) {
        // This is too much detail for our logs
        // this.notify('debug', ...content);
    }
    /**
     * Info is called mostly (exclusively?) for successful API calls
     *
     * Payload:
     *
     * (Note the input contains entire CFN templates, for example)
     *
     * ```
     * {
     *   clientName: 'S3Client',
     *   commandName: 'GetBucketLocationCommand',
     *   input: {
     *     Bucket: '.....',
     *     ExpectedBucketOwner: undefined
     *   },
     *   output: { LocationConstraint: 'eu-central-1' },
     *   metadata: {
     *     httpStatusCode: 200,
     *     requestId: '....',
     *     extendedRequestId: '...',
     *     cfId: undefined,
     *     attempts: 1,
     *     totalRetryDelay: 0
     *   }
     * }
     * ```
     */
    info(...content) {
        this.notify('info', ...content);
    }
    warn(...content) {
        this.notify('warn', ...content);
    }
    /**
     * Error is called mostly (exclusively?) for failing API calls
     *
     * Payload (input would be the entire API call arguments).
     *
     * ```
     * {
     *   clientName: 'STSClient',
     *   commandName: 'GetCallerIdentityCommand',
     *   input: {},
     *   error: AggregateError [ECONNREFUSED]:
     *       at internalConnectMultiple (node:net:1121:18)
     *       at afterConnectMultiple (node:net:1688:7) {
     *     code: 'ECONNREFUSED',
     *     '$metadata': { attempts: 3, totalRetryDelay: 600 },
     *     [errors]: [ [Error], [Error] ]
     *   },
     *   metadata: { attempts: 3, totalRetryDelay: 600 }
     * }
     * ```
     */
    error(...content) {
        this.notify('error', ...content);
    }
}
exports.IoHostSdkLogger = IoHostSdkLogger;
/**
 * This can be anything.
 *
 * For debug, it seems to be mostly strings.
 * For info, it seems to be objects.
 *
 * Stringify and join without separator.
 */
function formatSdkLoggerContent(content) {
    if (content.length === 1) {
        const apiFmt = formatApiCall(content[0]);
        if (apiFmt) {
            return apiFmt;
        }
    }
    return content.map((x) => typeof x === 'string' ? x : (0, util_1.inspect)(x)).join('');
}
function formatApiCall(content) {
    if (!isSdkApiCallSuccess(content) && !isSdkApiCallError(content)) {
        return undefined;
    }
    const service = content.clientName.replace(/Client$/, '');
    const api = content.commandName.replace(/Command$/, '');
    const parts = [];
    if ((content.metadata?.attempts ?? 0) > 1) {
        parts.push(`[${content.metadata?.attempts} attempts, ${content.metadata?.totalRetryDelay}ms retry]`);
    }
    parts.push(`${service}.${api}(${JSON.stringify(content.input, util_2.replacerBufferWithInfo)})`);
    if (isSdkApiCallSuccess(content)) {
        parts.push('-> OK');
    }
    else {
        parts.push(`-> ${content.error}`);
    }
    return parts.join(' ');
}
function isSdkApiCallSuccess(x) {
    return x && typeof x === 'object' && x.commandName && x.output;
}
function isSdkApiCallError(x) {
    return x && typeof x === 'object' && x.commandName && x.error;
}
//# sourceMappingURL=data:application/json;base64,