import { glob } from 'glob';
/**
 * This class accumulates information about files that have changed.
 */
export class FilesChangesTracker {
    snapshot;
    /**
     * Creates a new file changes tracker.
     */
    constructor(snapshot) {
        this.snapshot = snapshot;
    }
    trackFileChange = (path) => {
        this.snapshot.didAnyFileChangeSinceStart = true;
        if (path.endsWith('.ts') || path.endsWith('.tsx')) {
            this.snapshot.didAnyTypeScriptFileChangeSinceLastSnapshot = true;
        }
    };
    getAndResetSnapshot = () => {
        // shallow copy is ok for 1 dim data structure
        const currentSnapshot = { ...this.snapshot };
        this.resetSnapshot();
        return currentSnapshot;
    };
    resetSnapshot = () => {
        this.snapshot.didAnyTypeScriptFileChangeSinceLastSnapshot = false;
    };
}
/**
 * Creates a new instance of files changes tracker.
 */
export const createFilesChangesTracker = async (rootPath) => {
    const tsFiles = await glob('**/*.{ts,tsx}', {
        ignore: 'node_modules/**',
        cwd: rootPath,
    });
    return new FilesChangesTracker({
        didAnyFileChangeSinceStart: false,
        hadTypeScriptFilesAtStart: tsFiles.length > 0,
        didAnyTypeScriptFileChangeSinceLastSnapshot: false,
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNfY2hhbmdlc190cmFja2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZpbGVzX2NoYW5nZXNfdHJhY2tlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBUTVCOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFtQjtJQUlEO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsUUFBcUM7UUFBckMsYUFBUSxHQUFSLFFBQVEsQ0FBNkI7SUFBRyxDQUFDO0lBRXRFLGVBQWUsR0FBRyxDQUFDLElBQVksRUFBRSxFQUFFO1FBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsMEJBQTBCLEdBQUcsSUFBSSxDQUFDO1FBQ2hELElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7WUFDbEQsSUFBSSxDQUFDLFFBQVEsQ0FBQywyQ0FBMkMsR0FBRyxJQUFJLENBQUM7UUFDbkUsQ0FBQztJQUNILENBQUMsQ0FBQztJQUVGLG1CQUFtQixHQUFHLEdBQWdDLEVBQUU7UUFDdEQsOENBQThDO1FBQzlDLE1BQU0sZUFBZSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JCLE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUMsQ0FBQztJQUVNLGFBQWEsR0FBRyxHQUFHLEVBQUU7UUFDM0IsSUFBSSxDQUFDLFFBQVEsQ0FBQywyQ0FBMkMsR0FBRyxLQUFLLENBQUM7SUFDcEUsQ0FBQyxDQUFDO0NBQ0g7QUFFRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLEtBQUssRUFDNUMsUUFBZ0IsRUFDYyxFQUFFO0lBQ2hDLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRTtRQUMxQyxNQUFNLEVBQUUsaUJBQWlCO1FBQ3pCLEdBQUcsRUFBRSxRQUFRO0tBQ2QsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxJQUFJLG1CQUFtQixDQUFDO1FBQzdCLDBCQUEwQixFQUFFLEtBQUs7UUFDakMseUJBQXlCLEVBQUUsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQzdDLDJDQUEyQyxFQUFFLEtBQUs7S0FDbkQsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2xvYiB9IGZyb20gJ2dsb2InO1xuXG5leHBvcnQgdHlwZSBGaWxlc0NoYW5nZXNUcmFja2VyU25hcHNob3QgPSB7XG4gIGhhZFR5cGVTY3JpcHRGaWxlc0F0U3RhcnQ6IGJvb2xlYW47XG4gIGRpZEFueUZpbGVDaGFuZ2VTaW5jZVN0YXJ0OiBib29sZWFuO1xuICBkaWRBbnlUeXBlU2NyaXB0RmlsZUNoYW5nZVNpbmNlTGFzdFNuYXBzaG90OiBib29sZWFuO1xufTtcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGFjY3VtdWxhdGVzIGluZm9ybWF0aW9uIGFib3V0IGZpbGVzIHRoYXQgaGF2ZSBjaGFuZ2VkLlxuICovXG5leHBvcnQgY2xhc3MgRmlsZXNDaGFuZ2VzVHJhY2tlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGZpbGUgY2hhbmdlcyB0cmFja2VyLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzbmFwc2hvdDogRmlsZXNDaGFuZ2VzVHJhY2tlclNuYXBzaG90KSB7fVxuXG4gIHRyYWNrRmlsZUNoYW5nZSA9IChwYXRoOiBzdHJpbmcpID0+IHtcbiAgICB0aGlzLnNuYXBzaG90LmRpZEFueUZpbGVDaGFuZ2VTaW5jZVN0YXJ0ID0gdHJ1ZTtcbiAgICBpZiAocGF0aC5lbmRzV2l0aCgnLnRzJykgfHwgcGF0aC5lbmRzV2l0aCgnLnRzeCcpKSB7XG4gICAgICB0aGlzLnNuYXBzaG90LmRpZEFueVR5cGVTY3JpcHRGaWxlQ2hhbmdlU2luY2VMYXN0U25hcHNob3QgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBnZXRBbmRSZXNldFNuYXBzaG90ID0gKCk6IEZpbGVzQ2hhbmdlc1RyYWNrZXJTbmFwc2hvdCA9PiB7XG4gICAgLy8gc2hhbGxvdyBjb3B5IGlzIG9rIGZvciAxIGRpbSBkYXRhIHN0cnVjdHVyZVxuICAgIGNvbnN0IGN1cnJlbnRTbmFwc2hvdCA9IHsgLi4udGhpcy5zbmFwc2hvdCB9O1xuICAgIHRoaXMucmVzZXRTbmFwc2hvdCgpO1xuICAgIHJldHVybiBjdXJyZW50U25hcHNob3Q7XG4gIH07XG5cbiAgcHJpdmF0ZSByZXNldFNuYXBzaG90ID0gKCkgPT4ge1xuICAgIHRoaXMuc25hcHNob3QuZGlkQW55VHlwZVNjcmlwdEZpbGVDaGFuZ2VTaW5jZUxhc3RTbmFwc2hvdCA9IGZhbHNlO1xuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgZmlsZXMgY2hhbmdlcyB0cmFja2VyLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlRmlsZXNDaGFuZ2VzVHJhY2tlciA9IGFzeW5jIChcbiAgcm9vdFBhdGg6IHN0cmluZyxcbik6IFByb21pc2U8RmlsZXNDaGFuZ2VzVHJhY2tlcj4gPT4ge1xuICBjb25zdCB0c0ZpbGVzID0gYXdhaXQgZ2xvYignKiovKi57dHMsdHN4fScsIHtcbiAgICBpZ25vcmU6ICdub2RlX21vZHVsZXMvKionLFxuICAgIGN3ZDogcm9vdFBhdGgsXG4gIH0pO1xuICByZXR1cm4gbmV3IEZpbGVzQ2hhbmdlc1RyYWNrZXIoe1xuICAgIGRpZEFueUZpbGVDaGFuZ2VTaW5jZVN0YXJ0OiBmYWxzZSxcbiAgICBoYWRUeXBlU2NyaXB0RmlsZXNBdFN0YXJ0OiB0c0ZpbGVzLmxlbmd0aCA+IDAsXG4gICAgZGlkQW55VHlwZVNjcmlwdEZpbGVDaGFuZ2VTaW5jZUxhc3RTbmFwc2hvdDogZmFsc2UsXG4gIH0pO1xufTtcbiJdfQ==