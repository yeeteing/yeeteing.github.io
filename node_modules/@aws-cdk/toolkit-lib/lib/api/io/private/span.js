"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpanMaker = void 0;
const util = require("node:util");
const uuid = require("uuid");
const util_1 = require("../../../util");
/**
 * Helper class to make spans around blocks of work
 *
 * Blocks are enclosed by a start and end message.
 * All messages of the span share a unique id.
 * The end message contains the time passed between start and end.
 */
class SpanMaker {
    definition;
    ioHelper;
    makeHelper;
    constructor(ioHelper, definition, makeHelper) {
        this.definition = definition;
        this.ioHelper = ioHelper;
        this.makeHelper = makeHelper;
    }
    async begin(a, b) {
        const span = new MessageSpan(this.ioHelper, this.definition, this.makeHelper);
        const startInput = parseArgs(a, b);
        const startMsg = startInput.message ?? `Starting ${this.definition.name} ...`;
        const startPayload = startInput.payload;
        await span.notify(this.definition.start.msg(startMsg, startPayload));
        return span;
    }
}
exports.SpanMaker = SpanMaker;
class MessageSpan {
    asHelper;
    definition;
    ioHelper;
    spanId;
    startTime;
    timingMsgTemplate;
    constructor(ioHelper, definition, makeHelper) {
        this.definition = definition;
        this.ioHelper = ioHelper;
        this.spanId = uuid.v4();
        this.startTime = new Date().getTime();
        this.timingMsgTemplate = '\nâœ¨  %s time: %ds\n';
        this.asHelper = makeHelper(this);
    }
    get defaults() {
        return this.asHelper.defaults;
    }
    async elapsedTime() {
        return this.time();
    }
    async timing(maker, message) {
        const duration = this.time();
        const timingMsg = message ? message : util.format(this.timingMsgTemplate, this.definition.name, duration.asSec);
        await this.notify(maker.msg(timingMsg, {
            duration: duration.asMs,
        }));
        return duration;
    }
    async notify(msg) {
        return this.ioHelper.notify(withSpanId(this.spanId, msg));
    }
    async end(x, y) {
        const duration = this.time();
        const endInput = parseArgs(x, y);
        const endMsg = endInput.message ?? util.format(this.timingMsgTemplate, this.definition.name, duration.asSec);
        const endPayload = endInput.payload;
        await this.notify(this.definition.end.msg(endMsg, {
            duration: duration.asMs,
            ...endPayload,
        }));
        return duration;
    }
    async requestResponse(msg) {
        return this.ioHelper.requestResponse(withSpanId(this.spanId, msg));
    }
    time() {
        const elapsedTime = new Date().getTime() - this.startTime;
        return {
            asMs: elapsedTime,
            asSec: (0, util_1.formatTime)(elapsedTime),
        };
    }
}
function parseArgs(first, second) {
    const firstIsMessage = typeof first === 'string';
    // When the first argument is a string or we have a second argument, then the first arg is the message
    const message = (firstIsMessage || second) ? first : undefined;
    // When the first argument is a string or we have a second argument,
    // then the second arg is the payload, otherwise the first arg is the payload
    const payload = (firstIsMessage || second) ? second : first;
    return {
        message,
        payload,
    };
}
function withSpanId(span, message) {
    return {
        ...message,
        span,
    };
}
//# sourceMappingURL=data:application/json;base64,