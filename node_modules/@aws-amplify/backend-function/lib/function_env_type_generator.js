import fs from 'fs';
import { staticEnvironmentVariables } from './static_env_types.js';
import path from 'path';
import { EOL } from 'os';
/**
 * Generates a typed process.env shim for environment variables
 */
export class FunctionEnvironmentTypeGenerator {
    functionName;
    header = '// This file is auto-generated by Amplify. Edits will be overwritten.';
    // The variable gets updated when the fully typed file is updated.
    envAssignment = 'export const env = process.env';
    typeDefFilePath;
    indentation = '  ';
    /**
     * Initialize typed process.env shim file name and location
     */
    constructor(functionName) {
        this.functionName = functionName;
        this.typeDefFilePath = `${process.cwd()}/.amplify/generated/env/${this.functionName}.ts`;
    }
    /**
     * Generate a typed process.env shim
     */
    generateTypedProcessEnvShim(amplifyBackendEnvVars) {
        const lambdaEnvVarTypeName = 'LambdaProvidedEnvVars';
        const amplifyBackendEnvVarTypeName = 'AmplifyBackendEnvVars';
        const declarations = [];
        // Add Lambda runtime environment variables to the typed shim
        declarations.push(`/** Lambda runtime environment variables, see https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html#configuration-envvars-runtime */`);
        declarations.push(`type ${lambdaEnvVarTypeName} = {`);
        for (const key in staticEnvironmentVariables) {
            const comment = `${this.indentation}/** ${staticEnvironmentVariables[key]} */`;
            const declaration = `${this.indentation}${key}: string;`;
            declarations.push(comment + EOL + declaration + EOL);
        }
        declarations.push(`};${EOL}`);
        /**
         * Add Amplify backend environment variables to the typed shim which can be either of the following:
         * 1. Defined by the customer passing env vars to the environment parameter for defineFunction
         * 2. Defined by resource access mechanisms
         */
        declarations.push(`/** Amplify backend environment variables available at runtime, this includes environment variables defined in \`defineFunction\` and by cross resource mechanisms */`);
        declarations.push(`type ${amplifyBackendEnvVarTypeName} = {`);
        // Use a Set to remove duplicates
        const uniqueEnvVars = new Set(amplifyBackendEnvVars);
        uniqueEnvVars.forEach((envName) => {
            const declaration = `${this.indentation}${envName}: string;`;
            declarations.push(declaration);
        });
        declarations.push(`};${EOL}`);
        const content = `${this.header}${EOL}${this.envAssignment} as unknown as ${lambdaEnvVarTypeName} & ${amplifyBackendEnvVarTypeName};${EOL}${EOL}${declarations.join(EOL)}`;
        this.writeShimFile(content);
    }
    /**
     * Generate an any-typed process.env shim if doesn't exist
     */
    generateProcessEnvShim = () => {
        // Create an "any" typed variable while creating the initial file to keep TSC happy
        // in case the synth fails and doesn't generate the typed shim.
        // We run TSC regardless after the synth to show more relevant TS errors and this prevents showing env related type errors.
        const content = `${this.header}${EOL}${this.envAssignment} as any;`;
        this.writeShimFile(content);
    };
    writeShimFile = (content) => {
        const typeDefFileDirname = path.dirname(this.typeDefFilePath);
        if (!fs.existsSync(typeDefFileDirname)) {
            fs.mkdirSync(typeDefFileDirname, { recursive: true });
        }
        fs.writeFileSync(this.typeDefFilePath, content);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25fZW52X3R5cGVfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Z1bmN0aW9uX2Vudl90eXBlX2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkUsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFFekI7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZ0NBQWdDO0lBY2Q7SUFiWixNQUFNLEdBQ3JCLHVFQUF1RSxDQUFDO0lBRTFFLGtFQUFrRTtJQUNqRCxhQUFhLEdBQUcsZ0NBQWdDLENBQUM7SUFFMUQsZUFBZSxDQUFTO0lBRXhCLFdBQVcsR0FBVyxJQUFJLENBQUM7SUFFbkM7O09BRUc7SUFDSCxZQUE2QixZQUFvQjtRQUFwQixpQkFBWSxHQUFaLFlBQVksQ0FBUTtRQUMvQyxJQUFJLENBQUMsZUFBZSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsRUFBRSwyQkFDckMsSUFBSSxDQUFDLFlBQ1AsS0FBSyxDQUFDO0lBQ1IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsMkJBQTJCLENBQUMscUJBQStCO1FBQ3pELE1BQU0sb0JBQW9CLEdBQUcsdUJBQXVCLENBQUM7UUFDckQsTUFBTSw0QkFBNEIsR0FBRyx1QkFBdUIsQ0FBQztRQUU3RCxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7UUFFeEIsNkRBQTZEO1FBQzdELFlBQVksQ0FBQyxJQUFJLENBQ2Ysd0pBQXdKLENBQ3pKLENBQUM7UUFDRixZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsb0JBQW9CLE1BQU0sQ0FBQyxDQUFDO1FBQ3RELEtBQUssTUFBTSxHQUFHLElBQUksMEJBQTBCLEVBQUUsQ0FBQztZQUM3QyxNQUFNLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLE9BQU8sMEJBQTBCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztZQUMvRSxNQUFNLFdBQVcsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxXQUFXLENBQUM7WUFFekQsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxHQUFHLFdBQVcsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUN2RCxDQUFDO1FBQ0QsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFFOUI7Ozs7V0FJRztRQUNILFlBQVksQ0FBQyxJQUFJLENBQ2YsdUtBQXVLLENBQ3hLLENBQUM7UUFDRixZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsNEJBQTRCLE1BQU0sQ0FBQyxDQUFDO1FBRTlELGlDQUFpQztRQUNqQyxNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1FBRXJELGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNoQyxNQUFNLFdBQVcsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxXQUFXLENBQUM7WUFFN0QsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNqQyxDQUFDLENBQUMsQ0FBQztRQUNILFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRTlCLE1BQU0sT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLEdBQ2xDLElBQUksQ0FBQyxhQUNQLGtCQUFrQixvQkFBb0IsTUFBTSw0QkFBNEIsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQ3ZHLEdBQUcsQ0FDSixFQUFFLENBQUM7UUFFSixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7T0FFRztJQUNILHNCQUFzQixHQUFHLEdBQUcsRUFBRTtRQUM1QixtRkFBbUY7UUFDbkYsK0RBQStEO1FBQy9ELDJIQUEySDtRQUMzSCxNQUFNLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLFVBQVUsQ0FBQztRQUNwRSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQztJQUVNLGFBQWEsR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO1FBQzFDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFOUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLEVBQUUsQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUN4RCxDQUFDO1FBRUQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2xELENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCB7IHN0YXRpY0Vudmlyb25tZW50VmFyaWFibGVzIH0gZnJvbSAnLi9zdGF0aWNfZW52X3R5cGVzLmpzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBhIHR5cGVkIHByb2Nlc3MuZW52IHNoaW0gZm9yIGVudmlyb25tZW50IHZhcmlhYmxlc1xuICovXG5leHBvcnQgY2xhc3MgRnVuY3Rpb25FbnZpcm9ubWVudFR5cGVHZW5lcmF0b3Ige1xuICBwcml2YXRlIHJlYWRvbmx5IGhlYWRlciA9XG4gICAgJy8vIFRoaXMgZmlsZSBpcyBhdXRvLWdlbmVyYXRlZCBieSBBbXBsaWZ5LiBFZGl0cyB3aWxsIGJlIG92ZXJ3cml0dGVuLic7XG5cbiAgLy8gVGhlIHZhcmlhYmxlIGdldHMgdXBkYXRlZCB3aGVuIHRoZSBmdWxseSB0eXBlZCBmaWxlIGlzIHVwZGF0ZWQuXG4gIHByaXZhdGUgcmVhZG9ubHkgZW52QXNzaWdubWVudCA9ICdleHBvcnQgY29uc3QgZW52ID0gcHJvY2Vzcy5lbnYnO1xuXG4gIHByaXZhdGUgdHlwZURlZkZpbGVQYXRoOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBpbmRlbnRhdGlvbjogc3RyaW5nID0gJyAgJztcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB0eXBlZCBwcm9jZXNzLmVudiBzaGltIGZpbGUgbmFtZSBhbmQgbG9jYXRpb25cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZnVuY3Rpb25OYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLnR5cGVEZWZGaWxlUGF0aCA9IGAke3Byb2Nlc3MuY3dkKCl9Ly5hbXBsaWZ5L2dlbmVyYXRlZC9lbnYvJHtcbiAgICAgIHRoaXMuZnVuY3Rpb25OYW1lXG4gICAgfS50c2A7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYSB0eXBlZCBwcm9jZXNzLmVudiBzaGltXG4gICAqL1xuICBnZW5lcmF0ZVR5cGVkUHJvY2Vzc0VudlNoaW0oYW1wbGlmeUJhY2tlbmRFbnZWYXJzOiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IGxhbWJkYUVudlZhclR5cGVOYW1lID0gJ0xhbWJkYVByb3ZpZGVkRW52VmFycyc7XG4gICAgY29uc3QgYW1wbGlmeUJhY2tlbmRFbnZWYXJUeXBlTmFtZSA9ICdBbXBsaWZ5QmFja2VuZEVudlZhcnMnO1xuXG4gICAgY29uc3QgZGVjbGFyYXRpb25zID0gW107XG5cbiAgICAvLyBBZGQgTGFtYmRhIHJ1bnRpbWUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHRvIHRoZSB0eXBlZCBzaGltXG4gICAgZGVjbGFyYXRpb25zLnB1c2goXG4gICAgICBgLyoqIExhbWJkYSBydW50aW1lIGVudmlyb25tZW50IHZhcmlhYmxlcywgc2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9sYW1iZGEvbGF0ZXN0L2RnL2NvbmZpZ3VyYXRpb24tZW52dmFycy5odG1sI2NvbmZpZ3VyYXRpb24tZW52dmFycy1ydW50aW1lICovYCxcbiAgICApO1xuICAgIGRlY2xhcmF0aW9ucy5wdXNoKGB0eXBlICR7bGFtYmRhRW52VmFyVHlwZU5hbWV9ID0ge2ApO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHN0YXRpY0Vudmlyb25tZW50VmFyaWFibGVzKSB7XG4gICAgICBjb25zdCBjb21tZW50ID0gYCR7dGhpcy5pbmRlbnRhdGlvbn0vKiogJHtzdGF0aWNFbnZpcm9ubWVudFZhcmlhYmxlc1trZXldfSAqL2A7XG4gICAgICBjb25zdCBkZWNsYXJhdGlvbiA9IGAke3RoaXMuaW5kZW50YXRpb259JHtrZXl9OiBzdHJpbmc7YDtcblxuICAgICAgZGVjbGFyYXRpb25zLnB1c2goY29tbWVudCArIEVPTCArIGRlY2xhcmF0aW9uICsgRU9MKTtcbiAgICB9XG4gICAgZGVjbGFyYXRpb25zLnB1c2goYH07JHtFT0x9YCk7XG5cbiAgICAvKipcbiAgICAgKiBBZGQgQW1wbGlmeSBiYWNrZW5kIGVudmlyb25tZW50IHZhcmlhYmxlcyB0byB0aGUgdHlwZWQgc2hpbSB3aGljaCBjYW4gYmUgZWl0aGVyIG9mIHRoZSBmb2xsb3dpbmc6XG4gICAgICogMS4gRGVmaW5lZCBieSB0aGUgY3VzdG9tZXIgcGFzc2luZyBlbnYgdmFycyB0byB0aGUgZW52aXJvbm1lbnQgcGFyYW1ldGVyIGZvciBkZWZpbmVGdW5jdGlvblxuICAgICAqIDIuIERlZmluZWQgYnkgcmVzb3VyY2UgYWNjZXNzIG1lY2hhbmlzbXNcbiAgICAgKi9cbiAgICBkZWNsYXJhdGlvbnMucHVzaChcbiAgICAgIGAvKiogQW1wbGlmeSBiYWNrZW5kIGVudmlyb25tZW50IHZhcmlhYmxlcyBhdmFpbGFibGUgYXQgcnVudGltZSwgdGhpcyBpbmNsdWRlcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgZGVmaW5lZCBpbiBcXGBkZWZpbmVGdW5jdGlvblxcYCBhbmQgYnkgY3Jvc3MgcmVzb3VyY2UgbWVjaGFuaXNtcyAqL2AsXG4gICAgKTtcbiAgICBkZWNsYXJhdGlvbnMucHVzaChgdHlwZSAke2FtcGxpZnlCYWNrZW5kRW52VmFyVHlwZU5hbWV9ID0ge2ApO1xuXG4gICAgLy8gVXNlIGEgU2V0IHRvIHJlbW92ZSBkdXBsaWNhdGVzXG4gICAgY29uc3QgdW5pcXVlRW52VmFycyA9IG5ldyBTZXQoYW1wbGlmeUJhY2tlbmRFbnZWYXJzKTtcblxuICAgIHVuaXF1ZUVudlZhcnMuZm9yRWFjaCgoZW52TmFtZSkgPT4ge1xuICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSBgJHt0aGlzLmluZGVudGF0aW9ufSR7ZW52TmFtZX06IHN0cmluZztgO1xuXG4gICAgICBkZWNsYXJhdGlvbnMucHVzaChkZWNsYXJhdGlvbik7XG4gICAgfSk7XG4gICAgZGVjbGFyYXRpb25zLnB1c2goYH07JHtFT0x9YCk7XG5cbiAgICBjb25zdCBjb250ZW50ID0gYCR7dGhpcy5oZWFkZXJ9JHtFT0x9JHtcbiAgICAgIHRoaXMuZW52QXNzaWdubWVudFxuICAgIH0gYXMgdW5rbm93biBhcyAke2xhbWJkYUVudlZhclR5cGVOYW1lfSAmICR7YW1wbGlmeUJhY2tlbmRFbnZWYXJUeXBlTmFtZX07JHtFT0x9JHtFT0x9JHtkZWNsYXJhdGlvbnMuam9pbihcbiAgICAgIEVPTCxcbiAgICApfWA7XG5cbiAgICB0aGlzLndyaXRlU2hpbUZpbGUoY29udGVudCk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGUgYW4gYW55LXR5cGVkIHByb2Nlc3MuZW52IHNoaW0gaWYgZG9lc24ndCBleGlzdFxuICAgKi9cbiAgZ2VuZXJhdGVQcm9jZXNzRW52U2hpbSA9ICgpID0+IHtcbiAgICAvLyBDcmVhdGUgYW4gXCJhbnlcIiB0eXBlZCB2YXJpYWJsZSB3aGlsZSBjcmVhdGluZyB0aGUgaW5pdGlhbCBmaWxlIHRvIGtlZXAgVFNDIGhhcHB5XG4gICAgLy8gaW4gY2FzZSB0aGUgc3ludGggZmFpbHMgYW5kIGRvZXNuJ3QgZ2VuZXJhdGUgdGhlIHR5cGVkIHNoaW0uXG4gICAgLy8gV2UgcnVuIFRTQyByZWdhcmRsZXNzIGFmdGVyIHRoZSBzeW50aCB0byBzaG93IG1vcmUgcmVsZXZhbnQgVFMgZXJyb3JzIGFuZCB0aGlzIHByZXZlbnRzIHNob3dpbmcgZW52IHJlbGF0ZWQgdHlwZSBlcnJvcnMuXG4gICAgY29uc3QgY29udGVudCA9IGAke3RoaXMuaGVhZGVyfSR7RU9MfSR7dGhpcy5lbnZBc3NpZ25tZW50fSBhcyBhbnk7YDtcbiAgICB0aGlzLndyaXRlU2hpbUZpbGUoY29udGVudCk7XG4gIH07XG5cbiAgcHJpdmF0ZSB3cml0ZVNoaW1GaWxlID0gKGNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHR5cGVEZWZGaWxlRGlybmFtZSA9IHBhdGguZGlybmFtZSh0aGlzLnR5cGVEZWZGaWxlUGF0aCk7XG5cbiAgICBpZiAoIWZzLmV4aXN0c1N5bmModHlwZURlZkZpbGVEaXJuYW1lKSkge1xuICAgICAgZnMubWtkaXJTeW5jKHR5cGVEZWZGaWxlRGlybmFtZSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgfVxuXG4gICAgZnMud3JpdGVGaWxlU3luYyh0aGlzLnR5cGVEZWZGaWxlUGF0aCwgY29udGVudCk7XG4gIH07XG59XG4iXX0=