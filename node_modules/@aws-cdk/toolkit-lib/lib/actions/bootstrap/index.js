"use strict";
var __addDisposableResource = (this && this.__addDisposableResource) || function (env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
        env.stack.push({ value: value, dispose: dispose, async: async });
    }
    else if (async) {
        env.stack.push({ async: true });
    }
    return value;
};
var __disposeResources = (this && this.__disposeResources) || (function (SuppressedError) {
    return function (env) {
        function fail(e) {
            env.error = env.hasError ? new SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        var r, s = 0;
        function next() {
            while (r = env.stack.pop()) {
                try {
                    if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
                    if (r.dispose) {
                        var result = r.dispose.call(r.value);
                        if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
                    }
                    else s |= 1;
                }
                catch (e) {
                    fail(e);
                }
            }
            if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
            if (env.hasError) throw env.error;
        }
        return next();
    };
})(typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.BootstrapSource = exports.BootstrapStackParameters = exports.BootstrapEnvironments = void 0;
const private_1 = require("./private");
const private_2 = require("../../api/cloud-assembly/private");
const private_3 = require("../../api/io/private");
const private_4 = require("../../toolkit/private");
/**
 * Create manage bootstrap environments
 */
class BootstrapEnvironments {
    envProvider;
    /**
     * Create from a list of environment descriptors
     * List of strings like `['aws://012345678912/us-east-1', 'aws://234567890123/eu-west-1']`
     */
    static fromList(environments) {
        return new BootstrapEnvironments((0, private_1.environmentsFromDescriptors)(environments));
    }
    /**
     * Create from a cloud assembly source
     */
    static fromCloudAssemblySource(cx) {
        return new BootstrapEnvironments(async (ioHost) => {
            const env_1 = { stack: [], error: void 0, hasError: false };
            try {
                const ioHelper = (0, private_3.asIoHelper)(ioHost, 'bootstrap');
                const assembly = __addDisposableResource(env_1, await (0, private_4.assemblyFromSource)(ioHelper, cx), true);
                const stackCollection = await assembly.selectStacksV2(private_2.ALL_STACKS);
                return stackCollection.stackArtifacts.map(stack => stack.environment);
            }
            catch (e_1) {
                env_1.error = e_1;
                env_1.hasError = true;
            }
            finally {
                const result_1 = __disposeResources(env_1);
                if (result_1)
                    await result_1;
            }
        });
    }
    constructor(envProvider) {
        this.envProvider = envProvider;
    }
    /**
     * Compute the bootstrap enviornments
     *
     * @internal
     */
    async getEnvironments(ioHost) {
        if (Array.isArray(this.envProvider)) {
            return this.envProvider;
        }
        return this.envProvider(ioHost);
    }
}
exports.BootstrapEnvironments = BootstrapEnvironments;
/**
 * Parameters of the bootstrapping template with flexible configuration options
 */
class BootstrapStackParameters {
    /**
     * Use only existing parameters on the stack.
     */
    static onlyExisting() {
        return new BootstrapStackParameters({}, true);
    }
    /**
     * Use exactly these parameters and remove any other existing parameters from the stack.
     */
    static exactly(params) {
        return new BootstrapStackParameters(params, false);
    }
    /**
     * Define additional parameters for the stack, while keeping existing parameters for unspecified values.
     */
    static withExisting(params) {
        return new BootstrapStackParameters(params, true);
    }
    /**
     * The parameters as a Map for easy access and manipulation
     */
    parameters;
    keepExistingParameters;
    constructor(params, usePreviousParameters = true) {
        this.keepExistingParameters = usePreviousParameters;
        this.parameters = params;
    }
}
exports.BootstrapStackParameters = BootstrapStackParameters;
/**
 * Source configuration for bootstrap operations
 */
class BootstrapSource {
    /**
     * Use the default bootstrap template
     */
    static default() {
        return { source: 'default' };
    }
    /**
     * Use a custom bootstrap template
     */
    static customTemplate(templateFile) {
        return {
            source: 'custom',
            templateFile,
        };
    }
}
exports.BootstrapSource = BootstrapSource;
//# sourceMappingURL=data:application/json;base64,