"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.telemetryPayloadSchema = void 0;
const zod_1 = __importDefault(require("zod"));
const identifiersSchema = zod_1.default.object({
    payloadVersion: zod_1.default.string(),
    sessionUuid: zod_1.default.string(),
    eventId: zod_1.default.string(),
    timestamp: zod_1.default.string(),
    localProjectId: zod_1.default.string(),
    accountId: zod_1.default.string().optional(),
    awsRegion: zod_1.default.string().optional(),
});
const eventSchema = zod_1.default.object({
    state: zod_1.default.enum(['ABORTED', 'FAILED', 'SUCCEEDED']),
    command: zod_1.default.object({
        path: zod_1.default.array(zod_1.default.string()),
        parameters: zod_1.default.array(zod_1.default.string()),
    }),
});
const environmentSchema = zod_1.default.object({
    os: zod_1.default.object({
        platform: zod_1.default.string(),
        release: zod_1.default.string(),
    }),
    shell: zod_1.default.string(),
    npmUserAgent: zod_1.default.string(),
    ci: zod_1.default.boolean(),
    memory: zod_1.default.object({
        total: zod_1.default.number(),
        free: zod_1.default.number(),
    }),
});
const projectSchema = zod_1.default.object({
    dependencies: zod_1.default
        .array(zod_1.default.object({
        name: zod_1.default.string(),
        version: zod_1.default.string(),
    }))
        .optional(),
});
const latencySchema = zod_1.default.object({
    total: zod_1.default.number(),
    init: zod_1.default.number().optional(),
    synthesis: zod_1.default.number().optional(),
    deployment: zod_1.default.number().optional(),
    hotSwap: zod_1.default.number().optional(),
});
const errorSchema = zod_1.default.lazy(() => zod_1.default.object({
    name: zod_1.default.string(),
    message: zod_1.default.string(),
    stack: zod_1.default.string(),
    caused: zod_1.default.optional(errorSchema), // Recursive reference
}));
exports.telemetryPayloadSchema = zod_1.default.object({
    identifiers: identifiersSchema,
    event: eventSchema,
    environment: environmentSchema,
    project: projectSchema,
    latency: latencySchema,
    error: zod_1.default.optional(errorSchema),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVsZW1ldHJ5X3BheWxvYWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGVsZW1ldHJ5L3RlbGVtZXRyeV9wYXlsb2FkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhDQUFvQjtBQUVwQixNQUFNLGlCQUFpQixHQUFHLGFBQUMsQ0FBQyxNQUFNLENBQUM7SUFDakMsY0FBYyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDMUIsV0FBVyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDdkIsT0FBTyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDbkIsU0FBUyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDckIsY0FBYyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7SUFDMUIsU0FBUyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7SUFDaEMsU0FBUyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Q0FDakMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxXQUFXLEdBQUcsYUFBQyxDQUFDLE1BQU0sQ0FBQztJQUMzQixLQUFLLEVBQUUsYUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDakQsT0FBTyxFQUFFLGFBQUMsQ0FBQyxNQUFNLENBQUM7UUFDaEIsSUFBSSxFQUFFLGFBQUMsQ0FBQyxLQUFLLENBQUMsYUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ3pCLFVBQVUsRUFBRSxhQUFDLENBQUMsS0FBSyxDQUFDLGFBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUNoQyxDQUFDO0NBQ0gsQ0FBQyxDQUFDO0FBRUgsTUFBTSxpQkFBaUIsR0FBRyxhQUFDLENBQUMsTUFBTSxDQUFDO0lBQ2pDLEVBQUUsRUFBRSxhQUFDLENBQUMsTUFBTSxDQUFDO1FBQ1gsUUFBUSxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7UUFDcEIsT0FBTyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7S0FDcEIsQ0FBQztJQUNGLEtBQUssRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFO0lBQ2pCLFlBQVksRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFO0lBQ3hCLEVBQUUsRUFBRSxhQUFDLENBQUMsT0FBTyxFQUFFO0lBQ2YsTUFBTSxFQUFFLGFBQUMsQ0FBQyxNQUFNLENBQUM7UUFDZixLQUFLLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtRQUNqQixJQUFJLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtLQUNqQixDQUFDO0NBQ0gsQ0FBQyxDQUFDO0FBRUgsTUFBTSxhQUFhLEdBQUcsYUFBQyxDQUFDLE1BQU0sQ0FBQztJQUM3QixZQUFZLEVBQUUsYUFBQztTQUNaLEtBQUssQ0FDSixhQUFDLENBQUMsTUFBTSxDQUFDO1FBQ1AsSUFBSSxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7UUFDaEIsT0FBTyxFQUFFLGFBQUMsQ0FBQyxNQUFNLEVBQUU7S0FDcEIsQ0FBQyxDQUNIO1NBQ0EsUUFBUSxFQUFFO0NBQ2QsQ0FBQyxDQUFDO0FBRUgsTUFBTSxhQUFhLEdBQUcsYUFBQyxDQUFDLE1BQU0sQ0FBQztJQUM3QixLQUFLLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRTtJQUNqQixJQUFJLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUMzQixTQUFTLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNoQyxVQUFVLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtJQUNqQyxPQUFPLEVBQUUsYUFBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtDQUMvQixDQUFDLENBQUM7QUFTSCxNQUFNLFdBQVcsR0FBNEIsYUFBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FDdkQsYUFBQyxDQUFDLE1BQU0sQ0FBQztJQUNQLElBQUksRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFO0lBQ2hCLE9BQU8sRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFO0lBQ25CLEtBQUssRUFBRSxhQUFDLENBQUMsTUFBTSxFQUFFO0lBQ2pCLE1BQU0sRUFBRSxhQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFLHNCQUFzQjtDQUN4RCxDQUFDLENBQ0gsQ0FBQztBQUVXLFFBQUEsc0JBQXNCLEdBQUcsYUFBQyxDQUFDLE1BQU0sQ0FBQztJQUM3QyxXQUFXLEVBQUUsaUJBQWlCO0lBQzlCLEtBQUssRUFBRSxXQUFXO0lBQ2xCLFdBQVcsRUFBRSxpQkFBaUI7SUFDOUIsT0FBTyxFQUFFLGFBQWE7SUFDdEIsT0FBTyxFQUFFLGFBQWE7SUFDdEIsS0FBSyxFQUFFLGFBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDO0NBQy9CLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB6IGZyb20gJ3pvZCc7XG5cbmNvbnN0IGlkZW50aWZpZXJzU2NoZW1hID0gei5vYmplY3Qoe1xuICBwYXlsb2FkVmVyc2lvbjogei5zdHJpbmcoKSxcbiAgc2Vzc2lvblV1aWQ6IHouc3RyaW5nKCksXG4gIGV2ZW50SWQ6IHouc3RyaW5nKCksXG4gIHRpbWVzdGFtcDogei5zdHJpbmcoKSxcbiAgbG9jYWxQcm9qZWN0SWQ6IHouc3RyaW5nKCksXG4gIGFjY291bnRJZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBhd3NSZWdpb246IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCBldmVudFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgc3RhdGU6IHouZW51bShbJ0FCT1JURUQnLCAnRkFJTEVEJywgJ1NVQ0NFRURFRCddKSxcbiAgY29tbWFuZDogei5vYmplY3Qoe1xuICAgIHBhdGg6IHouYXJyYXkoei5zdHJpbmcoKSksXG4gICAgcGFyYW1ldGVyczogei5hcnJheSh6LnN0cmluZygpKSxcbiAgfSksXG59KTtcblxuY29uc3QgZW52aXJvbm1lbnRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG9zOiB6Lm9iamVjdCh7XG4gICAgcGxhdGZvcm06IHouc3RyaW5nKCksXG4gICAgcmVsZWFzZTogei5zdHJpbmcoKSxcbiAgfSksXG4gIHNoZWxsOiB6LnN0cmluZygpLFxuICBucG1Vc2VyQWdlbnQ6IHouc3RyaW5nKCksXG4gIGNpOiB6LmJvb2xlYW4oKSxcbiAgbWVtb3J5OiB6Lm9iamVjdCh7XG4gICAgdG90YWw6IHoubnVtYmVyKCksXG4gICAgZnJlZTogei5udW1iZXIoKSxcbiAgfSksXG59KTtcblxuY29uc3QgcHJvamVjdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgZGVwZW5kZW5jaWVzOiB6XG4gICAgLmFycmF5KFxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICBuYW1lOiB6LnN0cmluZygpLFxuICAgICAgICB2ZXJzaW9uOiB6LnN0cmluZygpLFxuICAgICAgfSksXG4gICAgKVxuICAgIC5vcHRpb25hbCgpLFxufSk7XG5cbmNvbnN0IGxhdGVuY3lTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHRvdGFsOiB6Lm51bWJlcigpLFxuICBpbml0OiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIHN5bnRoZXNpczogei5udW1iZXIoKS5vcHRpb25hbCgpLFxuICBkZXBsb3ltZW50OiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIGhvdFN3YXA6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5leHBvcnQgdHlwZSBFcnJvckRldGFpbHMgPSB7XG4gIG5hbWU6IHN0cmluZztcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBzdGFjazogc3RyaW5nO1xuICBjYXVzZWQ/OiBFcnJvckRldGFpbHM7XG59O1xuXG5jb25zdCBlcnJvclNjaGVtYTogei5ab2RUeXBlPEVycm9yRGV0YWlscz4gPSB6LmxhenkoKCkgPT5cbiAgei5vYmplY3Qoe1xuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgbWVzc2FnZTogei5zdHJpbmcoKSxcbiAgICBzdGFjazogei5zdHJpbmcoKSxcbiAgICBjYXVzZWQ6IHoub3B0aW9uYWwoZXJyb3JTY2hlbWEpLCAvLyBSZWN1cnNpdmUgcmVmZXJlbmNlXG4gIH0pLFxuKTtcblxuZXhwb3J0IGNvbnN0IHRlbGVtZXRyeVBheWxvYWRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGlkZW50aWZpZXJzOiBpZGVudGlmaWVyc1NjaGVtYSxcbiAgZXZlbnQ6IGV2ZW50U2NoZW1hLFxuICBlbnZpcm9ubWVudDogZW52aXJvbm1lbnRTY2hlbWEsXG4gIHByb2plY3Q6IHByb2plY3RTY2hlbWEsXG4gIGxhdGVuY3k6IGxhdGVuY3lTY2hlbWEsXG4gIGVycm9yOiB6Lm9wdGlvbmFsKGVycm9yU2NoZW1hKSxcbn0pO1xuXG5leHBvcnQgdHlwZSBUZWxlbWV0cnlQYXlsb2FkID0gei5pbmZlcjx0eXBlb2YgdGVsZW1ldHJ5UGF5bG9hZFNjaGVtYT47XG5cbmV4cG9ydCB0eXBlIFRlbGVtZXRyeVBheWxvYWRLZXlzID0ga2V5b2YgVGVsZW1ldHJ5UGF5bG9hZDtcbiJdfQ==