"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = main;
const path = require("path");
const fs = require("fs-extra");
const fact_tables_1 = require("./fact-tables");
const metadata_1 = require("./metadata");
const aws_entities_1 = require("../lib/aws-entities");
async function main() {
    checkRegions(fact_tables_1.APPMESH_ECR_ACCOUNTS);
    checkRegions(fact_tables_1.DLC_REPOSITORY_ACCOUNTS);
    checkRegions(fact_tables_1.ELBV2_ACCOUNTS);
    checkRegions(fact_tables_1.FIREHOSE_CIDR_BLOCKS);
    checkRegions(fact_tables_1.ROUTE_53_BUCKET_WEBSITE_ZONE_IDS);
    checkRegionsSubMap(fact_tables_1.CLOUDWATCH_LAMBDA_INSIGHTS_ARNS);
    checkRegionsSubMap(fact_tables_1.APPCONFIG_LAMBDA_LAYER_ARNS);
    const lines = [
        "import { Fact, FactName } from './fact';",
        '',
        '/* eslint-disable quote-props */',
        '/* eslint-disable max-len */',
        '',
        '/**',
        ' * Built-in regional information, re-generated by `npm run build`.',
        ' *',
        ` * @generated ${new Date().toISOString()}`,
        ' */',
        'export class BuiltIns {',
        '  /**',
        '   * Registers all the built in regional data in the RegionInfo database.',
        '   */',
        '  public static register(): void {',
    ];
    const defaultMap = 'default';
    for (const region of aws_entities_1.AWS_REGIONS) {
        let partition = fact_tables_1.PARTITION_MAP[defaultMap].partition;
        let domainSuffix = fact_tables_1.PARTITION_MAP[defaultMap].domainSuffix;
        for (const key in fact_tables_1.PARTITION_MAP) {
            if (region.startsWith(key)) {
                partition = fact_tables_1.PARTITION_MAP[key].partition;
                domainSuffix = fact_tables_1.PARTITION_MAP[key].domainSuffix;
            }
        }
        registerFact(region, 'PARTITION', partition);
        registerFact(region, 'DOMAIN_SUFFIX', domainSuffix);
        registerFact(region, 'CDK_METADATA_RESOURCE_AVAILABLE', metadata_1.AWS_CDK_METADATA.has(region) ? 'YES' : 'NO');
        registerFact(region, 'IS_OPT_IN_REGION', partition === 'aws' && after(region, aws_entities_1.RULE_CLASSIC_PARTITION_BECOMES_OPT_IN) ? 'YES' : 'NO');
        registerFact(region, 'S3_STATIC_WEBSITE_ENDPOINT', before(region, aws_entities_1.RULE_S3_WEBSITE_REGIONAL_SUBDOMAIN)
            ? `s3-website-${region}.${domainSuffix}`
            : `s3-website.${region}.${domainSuffix}`);
        registerFact(region, 'S3_STATIC_WEBSITE_ZONE_53_HOSTED_ZONE_ID', fact_tables_1.ROUTE_53_BUCKET_WEBSITE_ZONE_IDS[region] || '');
        registerFact(region, 'EBS_ENV_ENDPOINT_HOSTED_ZONE_ID', fact_tables_1.EBS_ENV_ENDPOINT_HOSTED_ZONE_IDS[region] || '');
        registerFact(region, 'ELBV2_ACCOUNT', fact_tables_1.ELBV2_ACCOUNTS[region]);
        registerFact(region, 'DLC_REPOSITORY_ACCOUNT', fact_tables_1.DLC_REPOSITORY_ACCOUNTS[region]);
        registerFact(region, 'APPMESH_ECR_ACCOUNT', fact_tables_1.APPMESH_ECR_ACCOUNTS[region]);
        registerFact(region, 'SAML_SIGN_ON_URL', fact_tables_1.PARTITION_SAML_SIGN_ON_URL[partition] || '');
        registerFact(region, 'LATEST_NODE_RUNTIME', fact_tables_1.LATEST_NODE_RUNTIME_MAP[partition]);
        const firehoseCidrBlock = fact_tables_1.FIREHOSE_CIDR_BLOCKS[region];
        if (firehoseCidrBlock) {
            registerFact(region, 'FIREHOSE_CIDR_BLOCK', `${fact_tables_1.FIREHOSE_CIDR_BLOCKS[region]}/27`);
        }
        const vpcEndpointServiceNamePrefix = `${domainSuffix.split('.').reverse().join('.')}.vpce`;
        registerFact(region, 'VPC_ENDPOINT_SERVICE_NAME_PREFIX', vpcEndpointServiceNamePrefix);
        for (const version in fact_tables_1.CLOUDWATCH_LAMBDA_INSIGHTS_ARNS) {
            for (const arch in fact_tables_1.CLOUDWATCH_LAMBDA_INSIGHTS_ARNS[version]) {
                registerFact(region, ['cloudwatchLambdaInsightsVersion', version, arch], fact_tables_1.CLOUDWATCH_LAMBDA_INSIGHTS_ARNS[version][arch][region]);
            }
        }
        for (const version in fact_tables_1.APPCONFIG_LAMBDA_LAYER_ARNS) {
            for (const arch in fact_tables_1.APPCONFIG_LAMBDA_LAYER_ARNS[version]) {
                registerFact(region, ['appConfigLambdaLayerVersion', version, arch], fact_tables_1.APPCONFIG_LAMBDA_LAYER_ARNS[version][arch][region]);
            }
        }
        for (const type in fact_tables_1.ADOT_LAMBDA_LAYER_ARNS) {
            for (const version in fact_tables_1.ADOT_LAMBDA_LAYER_ARNS[type]) {
                for (const arch in fact_tables_1.ADOT_LAMBDA_LAYER_ARNS[type][version]) {
                    registerFact(region, ['adotLambdaLayer', type, version, arch], fact_tables_1.ADOT_LAMBDA_LAYER_ARNS[type][version][arch][region]);
                }
            }
        }
        for (const version in fact_tables_1.PARAMS_AND_SECRETS_LAMBDA_LAYER_ARNS) {
            for (const arch in fact_tables_1.PARAMS_AND_SECRETS_LAMBDA_LAYER_ARNS[version]) {
                registerFact(region, ['paramsAndSecretsLambdaLayer', version, arch], fact_tables_1.PARAMS_AND_SECRETS_LAMBDA_LAYER_ARNS[version][arch][region]);
            }
        }
    }
    lines.push('  }');
    lines.push('');
    lines.push('  private constructor() {}');
    lines.push('}');
    await fs.writeFile(path.resolve(__dirname, '..', 'lib', 'built-ins.generated.ts'), lines.join('\n'));
    function registerFact(region, name, value) {
        const factName = typeof name === 'string' ? name : `${name[0]}(${name.slice(1).map(s => JSON.stringify(s)).join(', ')})`;
        lines.push(`    Fact.register({ region: ${JSON.stringify(region)}, name: FactName.${factName}, value: ${JSON.stringify(value)} });`);
    }
}
/**
 * Verifies that the provided map of region to fact does not contain an entry
 * for a region that was not registered in `AWS_REGIONS`.
 */
function checkRegions(map) {
    const allRegions = new Set(aws_entities_1.AWS_REGIONS);
    for (const region of Object.keys(map)) {
        if (!allRegions.has(region)) {
            throw new Error(`Un-registered region fact found: ${region}. Add to AWS_REGIONS list!`);
        }
    }
}
/**
 * Verifies that the provided map of <KEY> to region to fact does not contain an entry
 * for a region that was not registered in `AWS_REGIONS`.
 */
function checkRegionsSubMap(map) {
    const allRegions = new Set(aws_entities_1.AWS_REGIONS);
    for (const key of Object.keys(map)) {
        for (const subKey of Object.keys(map[key])) {
            for (const region of Object.keys(map[key][subKey])) {
                if (!allRegions.has(region)) {
                    throw new Error(`Un-registered region fact found: ${region}. Add to AWS_REGIONS list!`);
                }
            }
        }
    }
}
function after(region, ruleOrRegion) {
    return region !== ruleOrRegion && !before(region, ruleOrRegion);
}
/**
 * Whether or not a region predates a given rule (or region).
 *
 * Unknown region => we have to assume no.
 */
function before(region, ruleOrRegion) {
    const ruleIx = aws_entities_1.AWS_REGIONS_AND_RULES.indexOf(ruleOrRegion);
    if (ruleIx === -1) {
        throw new Error(`Unknown rule: ${String(ruleOrRegion)}`);
    }
    const regionIx = aws_entities_1.AWS_REGIONS_AND_RULES.indexOf(region);
    return regionIx === -1 ? false : regionIx < ruleIx;
}
main().catch(e => {
    // eslint-disable-next-line no-console
    console.error(e);
    process.exit(-1);
});
//# sourceMappingURL=data:application/json;base64,