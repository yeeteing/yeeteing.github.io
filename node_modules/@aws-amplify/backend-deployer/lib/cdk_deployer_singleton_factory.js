import { CDKDeployer } from './cdk_deployer.js';
import { CdkErrorMapper } from './cdk_error_mapper.js';
import { BackendLocator } from '@aws-amplify/platform-core';
import { BaseCredentials, Toolkit } from '@aws-cdk/toolkit-lib';
/**
 * Factory to create a backend deployer
 */
export class BackendDeployerFactory {
    packageManagerController;
    formatter;
    backendDeployerIOHost;
    sdkProfileResolver;
    static instance;
    /**
     * constructor - sets the packageManagerController
     */
    constructor(packageManagerController, formatter, backendDeployerIOHost, sdkProfileResolver) {
        this.packageManagerController = packageManagerController;
        this.formatter = formatter;
        this.backendDeployerIOHost = backendDeployerIOHost;
        this.sdkProfileResolver = sdkProfileResolver;
    }
    /**
     * Returns a single instance of BackendDeployer
     */
    getInstance() {
        if (!BackendDeployerFactory.instance) {
            BackendDeployerFactory.instance = new CDKDeployer(new CdkErrorMapper(this.formatter), new BackendLocator(), this.packageManagerController, new Toolkit({
                ioHost: this.backendDeployerIOHost,
                emojis: false,
                color: false,
                sdkConfig: {
                    baseCredentials: BaseCredentials.awsCliCompatible({
                        profile: this.sdkProfileResolver(),
                    }),
                },
            }), this.backendDeployerIOHost);
        }
        return BackendDeployerFactory.instance;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrX2RlcGxveWVyX3NpbmdsZXRvbl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Nka19kZXBsb3llcl9zaW5nbGV0b25fZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBK0JoRTs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFPZDtJQUNBO0lBQ0E7SUFDQTtJQVRYLE1BQU0sQ0FBQyxRQUFRLENBQThCO0lBRXJEOztPQUVHO0lBQ0gsWUFDbUIsd0JBQWtELEVBQ2xELFNBQXlDLEVBQ3pDLHFCQUFvQyxFQUNwQyxrQkFBc0M7UUFIdEMsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxjQUFTLEdBQVQsU0FBUyxDQUFnQztRQUN6QywwQkFBcUIsR0FBckIscUJBQXFCLENBQWU7UUFDcEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtJQUN0RCxDQUFDO0lBRUo7O09BRUc7SUFDSCxXQUFXO1FBQ1QsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3JDLHNCQUFzQixDQUFDLFFBQVEsR0FBRyxJQUFJLFdBQVcsQ0FDL0MsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUNsQyxJQUFJLGNBQWMsRUFBRSxFQUNwQixJQUFJLENBQUMsd0JBQXdCLEVBQzdCLElBQUksT0FBTyxDQUFDO2dCQUNWLE1BQU0sRUFBRSxJQUFJLENBQUMscUJBQXFCO2dCQUNsQyxNQUFNLEVBQUUsS0FBSztnQkFDYixLQUFLLEVBQUUsS0FBSztnQkFDWixTQUFTLEVBQUU7b0JBQ1QsZUFBZSxFQUFFLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQzt3QkFDaEQsT0FBTyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtxQkFDbkMsQ0FBQztpQkFDSDthQUNGLENBQUMsRUFDRixJQUFJLENBQUMscUJBQXFCLENBQzNCLENBQUM7UUFDSixDQUFDO1FBQ0QsT0FBTyxzQkFBc0IsQ0FBQyxRQUFRLENBQUM7SUFDekMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQW1wbGlmeUlPSG9zdCxcbiAgQmFja2VuZElkZW50aWZpZXIsXG4gIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcixcbiAgU0RLUHJvZmlsZVJlc29sdmVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IENES0RlcGxveWVyIH0gZnJvbSAnLi9jZGtfZGVwbG95ZXIuanMnO1xuaW1wb3J0IHsgQ2RrRXJyb3JNYXBwZXIgfSBmcm9tICcuL2Nka19lcnJvcl9tYXBwZXIuanMnO1xuaW1wb3J0IHsgQmFja2VuZExvY2F0b3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBCYWNrZW5kRGVwbG95ZXJPdXRwdXRGb3JtYXR0ZXIgfSBmcm9tICcuL3R5cGVzLmpzJztcbmltcG9ydCB7IEJhc2VDcmVkZW50aWFscywgVG9vbGtpdCB9IGZyb20gJ0Bhd3MtY2RrL3Rvb2xraXQtbGliJztcblxuZXhwb3J0IHR5cGUgRGVwbG95UHJvcHMgPSB7XG4gIHNlY3JldExhc3RVcGRhdGVkPzogRGF0ZTtcbiAgdmFsaWRhdGVBcHBTb3VyY2VzPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIERlcGxveVJlc3VsdCA9IHtcbiAgZGVwbG95bWVudFRpbWVzOiBEZXBsb3ltZW50VGltZXM7XG59O1xuXG5leHBvcnQgdHlwZSBEZXN0cm95UmVzdWx0ID0ge1xuICBkZXBsb3ltZW50VGltZXM6IERlcGxveW1lbnRUaW1lcztcbn07XG5cbmV4cG9ydCB0eXBlIERlcGxveW1lbnRUaW1lcyA9IHtcbiAgc3ludGhlc2lzVGltZT86IG51bWJlcjtcbiAgdG90YWxUaW1lPzogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBJbnZva2VzIGFuIGludm9rYWJsZSBjb21tYW5kXG4gKi9cbmV4cG9ydCB0eXBlIEJhY2tlbmREZXBsb3llciA9IHtcbiAgZGVwbG95OiAoXG4gICAgYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllcixcbiAgICBkZXBsb3lQcm9wcz86IERlcGxveVByb3BzLFxuICApID0+IFByb21pc2U8RGVwbG95UmVzdWx0PjtcbiAgZGVzdHJveTogKGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIpID0+IFByb21pc2U8RGVzdHJveVJlc3VsdD47XG59O1xuXG4vKipcbiAqIEZhY3RvcnkgdG8gY3JlYXRlIGEgYmFja2VuZCBkZXBsb3llclxuICovXG5leHBvcnQgY2xhc3MgQmFja2VuZERlcGxveWVyRmFjdG9yeSB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBCYWNrZW5kRGVwbG95ZXIgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIGNvbnN0cnVjdG9yIC0gc2V0cyB0aGUgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcjogUGFja2FnZU1hbmFnZXJDb250cm9sbGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZm9ybWF0dGVyOiBCYWNrZW5kRGVwbG95ZXJPdXRwdXRGb3JtYXR0ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBiYWNrZW5kRGVwbG95ZXJJT0hvc3Q6IEFtcGxpZnlJT0hvc3QsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZGtQcm9maWxlUmVzb2x2ZXI6IFNES1Byb2ZpbGVSZXNvbHZlcixcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2luZ2xlIGluc3RhbmNlIG9mIEJhY2tlbmREZXBsb3llclxuICAgKi9cbiAgZ2V0SW5zdGFuY2UoKTogQmFja2VuZERlcGxveWVyIHtcbiAgICBpZiAoIUJhY2tlbmREZXBsb3llckZhY3RvcnkuaW5zdGFuY2UpIHtcbiAgICAgIEJhY2tlbmREZXBsb3llckZhY3RvcnkuaW5zdGFuY2UgPSBuZXcgQ0RLRGVwbG95ZXIoXG4gICAgICAgIG5ldyBDZGtFcnJvck1hcHBlcih0aGlzLmZvcm1hdHRlciksXG4gICAgICAgIG5ldyBCYWNrZW5kTG9jYXRvcigpLFxuICAgICAgICB0aGlzLnBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcixcbiAgICAgICAgbmV3IFRvb2xraXQoe1xuICAgICAgICAgIGlvSG9zdDogdGhpcy5iYWNrZW5kRGVwbG95ZXJJT0hvc3QsXG4gICAgICAgICAgZW1vamlzOiBmYWxzZSxcbiAgICAgICAgICBjb2xvcjogZmFsc2UsXG4gICAgICAgICAgc2RrQ29uZmlnOiB7XG4gICAgICAgICAgICBiYXNlQ3JlZGVudGlhbHM6IEJhc2VDcmVkZW50aWFscy5hd3NDbGlDb21wYXRpYmxlKHtcbiAgICAgICAgICAgICAgcHJvZmlsZTogdGhpcy5zZGtQcm9maWxlUmVzb2x2ZXIoKSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICB0aGlzLmJhY2tlbmREZXBsb3llcklPSG9zdCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBCYWNrZW5kRGVwbG95ZXJGYWN0b3J5Lmluc3RhbmNlO1xuICB9XG59XG4iXX0=