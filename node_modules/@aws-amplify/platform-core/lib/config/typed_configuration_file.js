"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZodSchemaTypedConfigurationFile = void 0;
const get_config_dir_path_1 = require("./get_config_dir_path");
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
const fs_1 = require("fs");
/**
 * A configuration file with content validation.
 */
class ZodSchemaTypedConfigurationFile {
    schema;
    defaultValue;
    _fsp;
    _existsSync;
    filePath;
    data;
    /**
     * Creates configuration file with content validation.
     */
    constructor(schema, fileName, defaultValue, _fsp = promises_1.default, _existsSync = fs_1.existsSync) {
        this.schema = schema;
        this.defaultValue = defaultValue;
        this._fsp = _fsp;
        this._existsSync = _existsSync;
        this.filePath = path_1.default.join((0, get_config_dir_path_1.getConfigDirPath)(), fileName);
    }
    read = async () => {
        if (!this.data) {
            if (this._existsSync(this.filePath)) {
                const fileContent = await this._fsp.readFile(this.filePath, 'utf-8');
                try {
                    const jsonParsedContent = JSON.parse(fileContent);
                    this.data = this.schema.parse(jsonParsedContent);
                }
                catch {
                    this.data = this.schema.parse(this.defaultValue);
                }
            }
            else {
                this.data = this.schema.parse(this.defaultValue);
            }
        }
        // return deep clone.
        return this.schema.parse(this.data);
    };
    write = async (data) => {
        await this._fsp.writeFile(this.filePath, JSON.stringify(data, null, 2));
        this.data = data;
    };
    delete = async () => {
        if (this._existsSync(this.filePath)) {
            await this._fsp.unlink(this.filePath);
        }
        this.data = undefined;
    };
}
exports.ZodSchemaTypedConfigurationFile = ZodSchemaTypedConfigurationFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWRfY29uZmlndXJhdGlvbl9maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy90eXBlZF9jb25maWd1cmF0aW9uX2ZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsK0RBQXlEO0FBQ3pELGdEQUF3QjtBQUN4QiwyREFBOEI7QUFDOUIsMkJBQWdDO0FBR2hDOztHQUVHO0FBQ0gsTUFBYSwrQkFBK0I7SUFVdkI7SUFFQTtJQUNBO0lBQ0E7SUFYRixRQUFRLENBQVM7SUFDMUIsSUFBSSxDQUF5QjtJQUVyQzs7T0FFRztJQUNILFlBQ21CLE1BQVMsRUFDMUIsUUFBZ0IsRUFDQyxZQUF3QixFQUN4QixPQUFPLGtCQUFHLEVBQ1YsY0FBYyxlQUFVO1FBSnhCLFdBQU0sR0FBTixNQUFNLENBQUc7UUFFVCxpQkFBWSxHQUFaLFlBQVksQ0FBWTtRQUN4QixTQUFJLEdBQUosSUFBSSxDQUFNO1FBQ1YsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFFekMsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLElBQUEsc0NBQWdCLEdBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsSUFBSSxHQUFHLEtBQUssSUFBeUIsRUFBRTtRQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2YsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO2dCQUNwQyxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3JFLElBQUksQ0FBQztvQkFDSCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7b0JBQ2xELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztnQkFDbkQsQ0FBQztnQkFBQyxNQUFNLENBQUM7b0JBQ1AsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ25ELENBQUM7WUFDSCxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbkQsQ0FBQztRQUNILENBQUM7UUFDRCxxQkFBcUI7UUFDckIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDO0lBRUYsS0FBSyxHQUFHLEtBQUssRUFBRSxJQUFnQixFQUFpQixFQUFFO1FBQ2hELE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4RSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDLENBQUM7SUFFRixNQUFNLEdBQUcsS0FBSyxJQUFtQixFQUFFO1FBQ2pDLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztZQUNwQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QyxDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7SUFDeEIsQ0FBQyxDQUFDO0NBQ0g7QUFoREQsMEVBZ0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBnZXRDb25maWdEaXJQYXRoIH0gZnJvbSAnLi9nZXRfY29uZmlnX2Rpcl9wYXRoJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgeyBleGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgVHlwZWRDb25maWd1cmF0aW9uRmlsZSB9IGZyb20gJy4vdHlwZWRfY29uZmlndXJhdGlvbl9maWxlX2ZhY3RvcnknO1xuXG4vKipcbiAqIEEgY29uZmlndXJhdGlvbiBmaWxlIHdpdGggY29udGVudCB2YWxpZGF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgWm9kU2NoZW1hVHlwZWRDb25maWd1cmF0aW9uRmlsZTxUIGV4dGVuZHMgei5ab2RUeXBlQW55PlxuICBpbXBsZW1lbnRzIFR5cGVkQ29uZmlndXJhdGlvbkZpbGU8ei5pbmZlcjxUPj5cbntcbiAgcHJpdmF0ZSByZWFkb25seSBmaWxlUGF0aDogc3RyaW5nO1xuICBwcml2YXRlIGRhdGE6IHouaW5mZXI8VD4gfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgY29uZmlndXJhdGlvbiBmaWxlIHdpdGggY29udGVudCB2YWxpZGF0aW9uLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzY2hlbWE6IFQsXG4gICAgZmlsZU5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRlZmF1bHRWYWx1ZTogei5pbmZlcjxUPixcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9mc3AgPSBmc3AsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZXhpc3RzU3luYyA9IGV4aXN0c1N5bmMsXG4gICkge1xuICAgIHRoaXMuZmlsZVBhdGggPSBwYXRoLmpvaW4oZ2V0Q29uZmlnRGlyUGF0aCgpLCBmaWxlTmFtZSk7XG4gIH1cblxuICByZWFkID0gYXN5bmMgKCk6IFByb21pc2U8ei5pbmZlcjxUPj4gPT4ge1xuICAgIGlmICghdGhpcy5kYXRhKSB7XG4gICAgICBpZiAodGhpcy5fZXhpc3RzU3luYyh0aGlzLmZpbGVQYXRoKSkge1xuICAgICAgICBjb25zdCBmaWxlQ29udGVudCA9IGF3YWl0IHRoaXMuX2ZzcC5yZWFkRmlsZSh0aGlzLmZpbGVQYXRoLCAndXRmLTgnKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBqc29uUGFyc2VkQ29udGVudCA9IEpTT04ucGFyc2UoZmlsZUNvbnRlbnQpO1xuICAgICAgICAgIHRoaXMuZGF0YSA9IHRoaXMuc2NoZW1hLnBhcnNlKGpzb25QYXJzZWRDb250ZW50KTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgdGhpcy5kYXRhID0gdGhpcy5zY2hlbWEucGFyc2UodGhpcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLnNjaGVtYS5wYXJzZSh0aGlzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHJldHVybiBkZWVwIGNsb25lLlxuICAgIHJldHVybiB0aGlzLnNjaGVtYS5wYXJzZSh0aGlzLmRhdGEpO1xuICB9O1xuXG4gIHdyaXRlID0gYXN5bmMgKGRhdGE6IHouaW5mZXI8VD4pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBhd2FpdCB0aGlzLl9mc3Aud3JpdGVGaWxlKHRoaXMuZmlsZVBhdGgsIEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDIpKTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICB9O1xuXG4gIGRlbGV0ZSA9IGFzeW5jICgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBpZiAodGhpcy5fZXhpc3RzU3luYyh0aGlzLmZpbGVQYXRoKSkge1xuICAgICAgYXdhaXQgdGhpcy5fZnNwLnVubGluayh0aGlzLmZpbGVQYXRoKTtcbiAgICB9XG4gICAgdGhpcy5kYXRhID0gdW5kZWZpbmVkO1xuICB9O1xufVxuIl19