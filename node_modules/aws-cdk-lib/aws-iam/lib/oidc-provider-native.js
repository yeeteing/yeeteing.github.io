"use strict";var __decorate=exports&&exports.__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)(d=decorators[i])&&(r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r);return c>3&&r&&Object.defineProperty(target,key,r),r},_a;Object.defineProperty(exports,"__esModule",{value:!0}),exports.OidcProviderNative=void 0;var jsiiDeprecationWarnings=()=>{var tmp=require("../../.warnings.jsii.js");return jsiiDeprecationWarnings=()=>tmp,tmp};const JSII_RTTI_SYMBOL_1=Symbol.for("jsii.rtti");var iam_generated_1=()=>{var tmp=require("./iam.generated");return iam_generated_1=()=>tmp,tmp},core_1=()=>{var tmp=require("../../core");return core_1=()=>tmp,tmp},metadata_resource_1=()=>{var tmp=require("../../core/lib/metadata-resource");return metadata_resource_1=()=>tmp,tmp},prop_injectable_1=()=>{var tmp=require("../../core/lib/prop-injectable");return prop_injectable_1=()=>tmp,tmp};let OidcProviderNative=class OidcProviderNative2 extends core_1().Resource{static fromOidcProviderArn(scope,id,oidcProviderArn){const resourceName=core_1().Arn.extractResourceName(oidcProviderArn,"oidc-provider");class Import extends core_1().Resource{constructor(){super(...arguments),this.oidcProviderArn=oidcProviderArn,this.oidcProviderIssuer=resourceName}}return new Import(scope,id)}constructor(scope,id,props){super(scope,id,{physicalName:props.oidcProviderName});try{jsiiDeprecationWarnings().aws_cdk_lib_aws_iam_OidcProviderNativeProps(props)}catch(error){throw process.env.JSII_DEBUG!=="1"&&error.name==="DeprecationError"&&Error.captureStackTrace(error,OidcProviderNative2),error}if((0,metadata_resource_1().addConstructMetadata)(this,props),!props.url.startsWith("https://"))throw new(core_1()).ValidationError("The URL of the identity provider must start with https://",scope);if(props.url.length>255)throw new(core_1()).ValidationError("The maximum length allowed for url is 255 characters",scope);if(props.clientIds&&props.clientIds.length>100)throw new(core_1()).ValidationError("The maximum number of clients that can be registered is 100",scope);if(props.clientIds?.some(clientId=>clientId.length>255))throw new(core_1()).ValidationError("The maximum length of a client ID is 255 characters",scope);if(props.thumbprints&&props.thumbprints.length>5)throw new(core_1()).ValidationError("The maximum number of thumbprints is 5",scope);if(props.thumbprints?.some(thumbprint=>thumbprint.length!==40))throw new(core_1()).ValidationError("The length of a thumbprint must be 40 characters",scope);if(props.thumbprints?.some(thumbprint=>!/^[0-9a-fA-F]+$/.test(thumbprint)))throw new(core_1()).ValidationError("All thumbprints must be in hexadecimal format",scope);const resource=new(iam_generated_1()).CfnOIDCProvider(this,"Resource",{url:props.url,clientIdList:props.clientIds,thumbprintList:props.thumbprints});this.oidcProviderArn=core_1().Token.asString(resource.ref),this.oidcProviderIssuer=core_1().Arn.extractResourceName(this.oidcProviderArn,"oidc-provider"),this.oidcProviderThumbprints=core_1().Token.asString(props.thumbprints)}};exports.OidcProviderNative=OidcProviderNative,_a=JSII_RTTI_SYMBOL_1,OidcProviderNative[_a]={fqn:"aws-cdk-lib.aws_iam.OidcProviderNative",version:"2.204.0"},OidcProviderNative.PROPERTY_INJECTION_ID="aws-cdk-lib.aws-iam.OidcProviderNative",exports.OidcProviderNative=OidcProviderNative=__decorate([prop_injectable_1().propertyInjectable],OidcProviderNative);
