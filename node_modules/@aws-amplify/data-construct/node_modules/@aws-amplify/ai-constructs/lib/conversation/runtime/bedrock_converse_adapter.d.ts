import { BedrockRuntimeClient, ContentBlock } from '@aws-sdk/client-bedrock-runtime';
import { ConversationTurnEvent, ExecutableTool, StreamingResponseChunk } from './types.js';
import { ConversationTurnEventToolsProvider } from './event-tools-provider';
import { ConversationMessageHistoryRetriever } from './conversation_message_history_retriever';
import { UserAgentProvider } from './user_agent_provider';
/**
 * This class is responsible for interacting with Bedrock Converse API
 * in order to produce final response that can be sent back to caller.
 */
export declare class BedrockConverseAdapter {
    private readonly event;
    private readonly bedrockClient;
    private readonly messageHistoryRetriever;
    private readonly logger;
    private readonly allTools;
    private readonly executableTools;
    private readonly clientTools;
    private readonly executableToolByName;
    private readonly clientToolByName;
    /**
     * Creates Bedrock Converse Adapter.
     */
    constructor(event: ConversationTurnEvent, additionalTools: Array<ExecutableTool>, bedrockClient?: BedrockRuntimeClient, eventToolsProvider?: ConversationTurnEventToolsProvider, messageHistoryRetriever?: ConversationMessageHistoryRetriever, userAgentProvider?: UserAgentProvider, logger?: Console);
    askBedrock: () => Promise<ContentBlock[]>;
    /**
     * Asks Bedrock for response using streaming version of Converse API.
     */
    askBedrockStreaming(): AsyncGenerator<StreamingResponseChunk>;
    /**
     * Maps event messages to Bedrock types.
     * 1. Makes a copy so that we don't mutate event.
     * 2. Decodes Base64 encoded images.
     */
    private getEventMessagesAsBedrockMessages;
    private createToolConfiguration;
    private executeTool;
}
//# sourceMappingURL=bedrock_converse_adapter.d.ts.map