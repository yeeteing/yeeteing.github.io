/**
 * If the parser finished processing arguments, attempt to extract path and parameters information
 */
export const extractCommandInfo = (yargs) => {
    if (!yargs.parsed) {
        return undefined;
    }
    const argv = yargs.parsed.argv;
    const path = argv._.map((arg) => arg.toString());
    const parameters = [];
    // keys that are in yargs.parsed.argv that we want to filter when getting parameters
    const ignoredArgvKeys = ['_', '$0'];
    Object.keys(argv)
        .filter((key) => !ignoredArgvKeys.includes(key) && argv[key])
        .sort()
        .forEach((option) => parameters.push(option));
    return {
        path: path,
        parameters: parameters,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmFjdF9jb21tYW5kX2luZm8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZXh0cmFjdF9jb21tYW5kX2luZm8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0E7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUNoQyxLQUFXLEVBQ3VDLEVBQUU7SUFDcEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBQ0QsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDL0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sVUFBVSxHQUFhLEVBQUUsQ0FBQztJQUNoQyxvRkFBb0Y7SUFDcEYsTUFBTSxlQUFlLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDZCxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDNUQsSUFBSSxFQUFFO1NBQ04sT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFaEQsT0FBTztRQUNMLElBQUksRUFBRSxJQUFJO1FBQ1YsVUFBVSxFQUFFLFVBQVU7S0FDdkIsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbGVtZXRyeVBheWxvYWQgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBBcmd2IH0gZnJvbSAneWFyZ3MnO1xuXG4vKipcbiAqIElmIHRoZSBwYXJzZXIgZmluaXNoZWQgcHJvY2Vzc2luZyBhcmd1bWVudHMsIGF0dGVtcHQgdG8gZXh0cmFjdCBwYXRoIGFuZCBwYXJhbWV0ZXJzIGluZm9ybWF0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBleHRyYWN0Q29tbWFuZEluZm8gPSAoXG4gIHlhcmdzOiBBcmd2LFxuKTogVGVsZW1ldHJ5UGF5bG9hZFsnZXZlbnQnXVsnY29tbWFuZCddIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKCF5YXJncy5wYXJzZWQpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGNvbnN0IGFyZ3YgPSB5YXJncy5wYXJzZWQuYXJndjtcbiAgY29uc3QgcGF0aCA9IGFyZ3YuXy5tYXAoKGFyZykgPT4gYXJnLnRvU3RyaW5nKCkpO1xuICBjb25zdCBwYXJhbWV0ZXJzOiBzdHJpbmdbXSA9IFtdO1xuICAvLyBrZXlzIHRoYXQgYXJlIGluIHlhcmdzLnBhcnNlZC5hcmd2IHRoYXQgd2Ugd2FudCB0byBmaWx0ZXIgd2hlbiBnZXR0aW5nIHBhcmFtZXRlcnNcbiAgY29uc3QgaWdub3JlZEFyZ3ZLZXlzID0gWydfJywgJyQwJ107XG4gIE9iamVjdC5rZXlzKGFyZ3YpXG4gICAgLmZpbHRlcigoa2V5KSA9PiAhaWdub3JlZEFyZ3ZLZXlzLmluY2x1ZGVzKGtleSkgJiYgYXJndltrZXldKVxuICAgIC5zb3J0KClcbiAgICAuZm9yRWFjaCgob3B0aW9uKSA9PiBwYXJhbWV0ZXJzLnB1c2gob3B0aW9uKSk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLFxuICAgIHBhcmFtZXRlcnM6IHBhcmFtZXRlcnMsXG4gIH07XG59O1xuIl19