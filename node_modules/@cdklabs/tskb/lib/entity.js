"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.optionalCmp = exports.numberCmp = exports.stringCmp = exports.ref = exports.isEntityCollection = exports.calculatedIndex = exports.fieldIndex = exports.entityCollection = void 0;
const sorted_map_1 = require("./sorted-map");
function entityCollection() {
    const entities = new Map();
    const _indexes = {};
    function add(x) {
        entities.set(x.$id, x);
        for (const index of Object.values(_indexes)) {
            // FIXME: why can't we type this?
            index.add(x);
        }
    }
    return {
        type: 'entities',
        entities,
        indexes: _indexes,
        add,
        dehydrate: () => ({
            type: 'entities',
            entities: Array.from(validatePlainObjects(entities).values()),
        }),
        hydrateFrom: (x) => {
            entities.clear();
            for (const e of Object.values(x.entities)) {
                add(e);
            }
        },
        index(indexes) {
            // This limitation exists purely because I couldn't type it otherwise.
            // Declaring a return type of `EntityCollection<A, I | II>` would make a lot
            // of our other type inspection code stop working (the union is hard to pick
            // apart). Since adding indexes in multiple goes is not really a use case,
            // the simpler solution is just to type it as if we replaced all indexes
            // and add a runtime check to make sure the types aren't lying.
            if (Object.keys(_indexes).length > 0) {
                throw new Error('You may only call .index() once on a new collection');
            }
            Object.assign(_indexes, indexes);
            return this;
        },
    };
}
exports.entityCollection = entityCollection;
/**
 * An index that uses the value of an entity's field
 */
function fieldIndex(propName, comparator) {
    return calculatedIndex((x) => x[propName], comparator);
}
exports.fieldIndex = fieldIndex;
/**
 * An index that is calculated based on a function applied to an entity
 */
function calculatedIndex(fn, comparator) {
    const index = [];
    return {
        add: (x) => sorted_map_1.sortedMap.add(index, comparator, fn(x), x.$id),
        lookups: {
            equals: (value) => sorted_map_1.sortedMap.findAll(index, comparator, value),
        },
        index,
    };
}
exports.calculatedIndex = calculatedIndex;
function isEntityCollection(x) {
    return typeof x === 'object' && !!x && x.type === 'entities';
}
exports.isEntityCollection = isEntityCollection;
function validatePlainObjects(xs) {
    for (const x of xs.values()) {
        if (x.constructor !== Object) {
            throw new Error(`Entities should be plain-text objects, got instance of ${x.constructor}`);
        }
    }
    return xs;
}
function ref(x) {
    return typeof x === 'string' ? { $ref: x } : { $ref: x.$id };
}
exports.ref = ref;
/**
 * Determines whether two strings are equivalent in the current or specified locale.
 */
function stringCmp(a, b) {
    return a.localeCompare(b);
}
exports.stringCmp = stringCmp;
/**
 * Determines whether two numbers are equivalent.
 */
function numberCmp(a, b) {
    return a - b;
}
exports.numberCmp = numberCmp;
/**
 * Creates a comparator to determine equivalent of two values, using a given comparator, but allows values to be optional.
 *
 * @param frontOrder If `true`, returns so that undefined values are ordered at the front. If `false`, undefined values are ordered at the back.
 */
function optionalCmp(cmp, frontOrder = true) {
    return (a, b) => {
        if (a == undefined && b != undefined) {
            return frontOrder ? -1 : 1;
        }
        if (a != undefined && b == undefined) {
            return frontOrder ? 1 : -1;
        }
        if (a == undefined && b == undefined) {
            return 0;
        }
        return cmp(a, b);
    };
}
exports.optionalCmp = optionalCmp;
//# sourceMappingURL=data:application/json;base64,