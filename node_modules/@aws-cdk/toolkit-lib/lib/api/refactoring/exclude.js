"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlwaysExclude = exports.NeverExclude = exports.UnionExcludeList = exports.InMemoryExcludeList = exports.ManifestExcludeList = void 0;
const cloud_assembly_schema_1 = require("@aws-cdk/cloud-assembly-schema");
class AbstractExcludeList {
    union(other) {
        return new UnionExcludeList([this, other]);
    }
}
class ManifestExcludeList extends AbstractExcludeList {
    excludedLocations;
    constructor(manifest) {
        super();
        this.excludedLocations = this.getExcludedLocations(manifest);
    }
    getExcludedLocations(asmManifest) {
        // First, we need to filter the artifacts to only include CloudFormation stacks
        const stackManifests = Object.entries(asmManifest.artifacts ?? {}).filter(([_, manifest]) => manifest.type === cloud_assembly_schema_1.ArtifactType.AWS_CLOUDFORMATION_STACK);
        const result = [];
        for (let [stackName, manifest] of stackManifests) {
            const locations = Object.values(manifest.metadata ?? {})
                // Then pick only the resources in each stack marked with DO_NOT_REFACTOR
                .filter((entries) => entries.some((entry) => entry.type === cloud_assembly_schema_1.ArtifactMetadataEntryType.DO_NOT_REFACTOR && entry.data === true))
                // Finally, get the logical ID of each resource
                .map((entries) => {
                const logicalIdEntry = entries.find((entry) => entry.type === cloud_assembly_schema_1.ArtifactMetadataEntryType.LOGICAL_ID);
                const location = {
                    StackName: stackName,
                    LogicalResourceId: logicalIdEntry.data,
                };
                return location;
            });
            result.push(...locations);
        }
        return result;
    }
    isExcluded(location) {
        return this.excludedLocations.some((loc) => loc.StackName === location.stack.stackName && loc.LogicalResourceId === location.logicalResourceId);
    }
}
exports.ManifestExcludeList = ManifestExcludeList;
class InMemoryExcludeList extends AbstractExcludeList {
    excludedLocations;
    excludedPaths;
    constructor(items) {
        super();
        this.excludedLocations = [];
        this.excludedPaths = [];
        if (items.length === 0) {
            return;
        }
        const locationRegex = /^[A-Za-z0-9]+\.[A-Za-z0-9]+$/;
        items.forEach((item) => {
            if (locationRegex.test(item)) {
                const [stackName, logicalId] = item.split('.');
                this.excludedLocations.push({
                    StackName: stackName,
                    LogicalResourceId: logicalId,
                });
            }
            else {
                this.excludedPaths.push(item);
            }
        });
    }
    isExcluded(location) {
        const containsLocation = this.excludedLocations.some((loc) => {
            return loc.StackName === location.stack.stackName && loc.LogicalResourceId === location.logicalResourceId;
        });
        const containsPath = this.excludedPaths.some((path) => location.toPath() === path);
        return containsLocation || containsPath;
    }
}
exports.InMemoryExcludeList = InMemoryExcludeList;
class UnionExcludeList extends AbstractExcludeList {
    excludeLists;
    constructor(excludeLists) {
        super();
        this.excludeLists = excludeLists;
    }
    isExcluded(location) {
        return this.excludeLists.some((excludeList) => excludeList.isExcluded(location));
    }
}
exports.UnionExcludeList = UnionExcludeList;
class NeverExclude extends AbstractExcludeList {
    isExcluded(_location) {
        return false;
    }
}
exports.NeverExclude = NeverExclude;
class AlwaysExclude extends AbstractExcludeList {
    isExcluded(_location) {
        return true;
    }
}
exports.AlwaysExclude = AlwaysExclude;
//# sourceMappingURL=data:application/json;base64,