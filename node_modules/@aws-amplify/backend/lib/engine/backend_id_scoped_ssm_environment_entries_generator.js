import { NamingConverter, ParameterPathConversions, } from '@aws-amplify/platform-core';
import { StringParameter } from 'aws-cdk-lib/aws-ssm';
/**
 * Generates SsmEnvironmentEntry[] with SSM parameters that are scoped to a specific backend identifier
 */
export class BackendIdScopedSsmEnvironmentEntriesGenerator {
    scope;
    backendId;
    /**
     * Initialize with the backend identifier
     */
    constructor(scope, backendId) {
        this.scope = scope;
        this.backendId = backendId;
    }
    /**
     * Creates SSM parameters for CDK tokens in the scope provided to the constructor.
     * This allows values in scopeContext to be fetched from SSM at runtime without a deploy-time dependency between resources.
     * For this to work, the CDK tokens in scopeContext _must_ reside in the scope from the constructor.
     * This method can be called multiple times but an attempt to insert the same contextKey twice will result in an error.
     *
     * The returned SsmEnvironmentEntries must _not_ contain CDK tokens to SSM parameters.
     * Instead the SSM parameters are formatted with a naming convention and the literal string value of the parameter path is returned.
     * @example
     * Consider the following scopeContext input:
     * {
     *   STORAGE_BUCKET_NAME: <CDK token to S3 bucket name>
     * }
     *
     * This function will create an SSM parameter with a value that will resolve to the S3 bucket name at deploy time
     * The SSM parameter will be placed in the provided CDK scope which _must_ be the same as the scope that the CDK tokens in scopeContext come from
     * The return value will be
     * [
     *   {
     *     name: STORAGE_BUCKET_NAME
     *     path: /amplify/resource_reference/<backend namespace>/<backend name>/STORAGE_BUCKET_NAME
     *   }
     * ]
     *
     * The value of this parameter can then be fetched anywhere else without an explicit deploy-time dependency on the storage bucket name
     * @param scopeContext Key/value pairs of values from the scope that should be stored in SSM and retrievable using the key
     */
    generateSsmEnvironmentEntries = (scopeContext) => Object.entries(scopeContext).map(([contextKey, contextValue]) => {
        const sanitizedContextKey = new NamingConverter().toScreamingSnakeCase(contextKey);
        const parameterPath = ParameterPathConversions.toResourceReferenceFullPath(this.backendId, sanitizedContextKey);
        new StringParameter(this.scope, `${sanitizedContextKey}Parameter`, {
            parameterName: parameterPath,
            stringValue: contextValue,
        });
        return {
            name: sanitizedContextKey,
            path: parameterPath,
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9pZF9zY29wZWRfc3NtX2Vudmlyb25tZW50X2VudHJpZXNfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZ2luZS9iYWNrZW5kX2lkX3Njb3BlZF9zc21fZW52aXJvbm1lbnRfZW50cmllc19nZW5lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGVBQWUsRUFDZix3QkFBd0IsR0FDekIsTUFBTSw0QkFBNEIsQ0FBQztBQUtwQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHdEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sNkNBQTZDO0lBT3JDO0lBQ0E7SUFMbkI7O09BRUc7SUFDSCxZQUNtQixLQUFnQixFQUNoQixTQUE0QjtRQUQ1QixVQUFLLEdBQUwsS0FBSyxDQUFXO1FBQ2hCLGNBQVMsR0FBVCxTQUFTLENBQW1CO0lBQzVDLENBQUM7SUFFSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0EwQkc7SUFDSCw2QkFBNkIsR0FBRyxDQUFDLFlBQW9DLEVBQUUsRUFBRSxDQUN2RSxNQUFNLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxFQUFFLEVBQUU7UUFDOUQsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDLG9CQUFvQixDQUNwRSxVQUFVLENBQ1gsQ0FBQztRQUNGLE1BQU0sYUFBYSxHQUNqQix3QkFBd0IsQ0FBQywyQkFBMkIsQ0FDbEQsSUFBSSxDQUFDLFNBQVMsRUFDZCxtQkFBbUIsQ0FDcEIsQ0FBQztRQUNKLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsR0FBRyxtQkFBbUIsV0FBVyxFQUFFO1lBQ2pFLGFBQWEsRUFBRSxhQUFhO1lBQzVCLFdBQVcsRUFBRSxZQUFZO1NBQzFCLENBQUMsQ0FBQztRQUNILE9BQU87WUFDTCxJQUFJLEVBQUUsbUJBQW1CO1lBQ3pCLElBQUksRUFBRSxhQUFhO1NBQ3BCLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztDQUNOIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTmFtaW5nQ29udmVydGVyLFxuICBQYXJhbWV0ZXJQYXRoQ29udmVyc2lvbnMsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7XG4gIEJhY2tlbmRJZGVudGlmaWVyLFxuICBTc21FbnZpcm9ubWVudEVudHJpZXNHZW5lcmF0b3IsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgU3RyaW5nUGFyYW1ldGVyIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXNzbSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgU3NtRW52aXJvbm1lbnRFbnRyeVtdIHdpdGggU1NNIHBhcmFtZXRlcnMgdGhhdCBhcmUgc2NvcGVkIHRvIGEgc3BlY2lmaWMgYmFja2VuZCBpZGVudGlmaWVyXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZW5kSWRTY29wZWRTc21FbnZpcm9ubWVudEVudHJpZXNHZW5lcmF0b3JcbiAgaW1wbGVtZW50cyBTc21FbnZpcm9ubWVudEVudHJpZXNHZW5lcmF0b3JcbntcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgd2l0aCB0aGUgYmFja2VuZCBpZGVudGlmaWVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgcHJpdmF0ZSByZWFkb25seSBiYWNrZW5kSWQ6IEJhY2tlbmRJZGVudGlmaWVyLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgU1NNIHBhcmFtZXRlcnMgZm9yIENESyB0b2tlbnMgaW4gdGhlIHNjb3BlIHByb3ZpZGVkIHRvIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICogVGhpcyBhbGxvd3MgdmFsdWVzIGluIHNjb3BlQ29udGV4dCB0byBiZSBmZXRjaGVkIGZyb20gU1NNIGF0IHJ1bnRpbWUgd2l0aG91dCBhIGRlcGxveS10aW1lIGRlcGVuZGVuY3kgYmV0d2VlbiByZXNvdXJjZXMuXG4gICAqIEZvciB0aGlzIHRvIHdvcmssIHRoZSBDREsgdG9rZW5zIGluIHNjb3BlQ29udGV4dCBfbXVzdF8gcmVzaWRlIGluIHRoZSBzY29wZSBmcm9tIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBidXQgYW4gYXR0ZW1wdCB0byBpbnNlcnQgdGhlIHNhbWUgY29udGV4dEtleSB0d2ljZSB3aWxsIHJlc3VsdCBpbiBhbiBlcnJvci5cbiAgICpcbiAgICogVGhlIHJldHVybmVkIFNzbUVudmlyb25tZW50RW50cmllcyBtdXN0IF9ub3RfIGNvbnRhaW4gQ0RLIHRva2VucyB0byBTU00gcGFyYW1ldGVycy5cbiAgICogSW5zdGVhZCB0aGUgU1NNIHBhcmFtZXRlcnMgYXJlIGZvcm1hdHRlZCB3aXRoIGEgbmFtaW5nIGNvbnZlbnRpb24gYW5kIHRoZSBsaXRlcmFsIHN0cmluZyB2YWx1ZSBvZiB0aGUgcGFyYW1ldGVyIHBhdGggaXMgcmV0dXJuZWQuXG4gICAqIEBleGFtcGxlXG4gICAqIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgc2NvcGVDb250ZXh0IGlucHV0OlxuICAgKiB7XG4gICAqICAgU1RPUkFHRV9CVUNLRVRfTkFNRTogPENESyB0b2tlbiB0byBTMyBidWNrZXQgbmFtZT5cbiAgICogfVxuICAgKlxuICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgY3JlYXRlIGFuIFNTTSBwYXJhbWV0ZXIgd2l0aCBhIHZhbHVlIHRoYXQgd2lsbCByZXNvbHZlIHRvIHRoZSBTMyBidWNrZXQgbmFtZSBhdCBkZXBsb3kgdGltZVxuICAgKiBUaGUgU1NNIHBhcmFtZXRlciB3aWxsIGJlIHBsYWNlZCBpbiB0aGUgcHJvdmlkZWQgQ0RLIHNjb3BlIHdoaWNoIF9tdXN0XyBiZSB0aGUgc2FtZSBhcyB0aGUgc2NvcGUgdGhhdCB0aGUgQ0RLIHRva2VucyBpbiBzY29wZUNvbnRleHQgY29tZSBmcm9tXG4gICAqIFRoZSByZXR1cm4gdmFsdWUgd2lsbCBiZVxuICAgKiBbXG4gICAqICAge1xuICAgKiAgICAgbmFtZTogU1RPUkFHRV9CVUNLRVRfTkFNRVxuICAgKiAgICAgcGF0aDogL2FtcGxpZnkvcmVzb3VyY2VfcmVmZXJlbmNlLzxiYWNrZW5kIG5hbWVzcGFjZT4vPGJhY2tlbmQgbmFtZT4vU1RPUkFHRV9CVUNLRVRfTkFNRVxuICAgKiAgIH1cbiAgICogXVxuICAgKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgY2FuIHRoZW4gYmUgZmV0Y2hlZCBhbnl3aGVyZSBlbHNlIHdpdGhvdXQgYW4gZXhwbGljaXQgZGVwbG95LXRpbWUgZGVwZW5kZW5jeSBvbiB0aGUgc3RvcmFnZSBidWNrZXQgbmFtZVxuICAgKiBAcGFyYW0gc2NvcGVDb250ZXh0IEtleS92YWx1ZSBwYWlycyBvZiB2YWx1ZXMgZnJvbSB0aGUgc2NvcGUgdGhhdCBzaG91bGQgYmUgc3RvcmVkIGluIFNTTSBhbmQgcmV0cmlldmFibGUgdXNpbmcgdGhlIGtleVxuICAgKi9cbiAgZ2VuZXJhdGVTc21FbnZpcm9ubWVudEVudHJpZXMgPSAoc2NvcGVDb250ZXh0OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSA9PlxuICAgIE9iamVjdC5lbnRyaWVzKHNjb3BlQ29udGV4dCkubWFwKChbY29udGV4dEtleSwgY29udGV4dFZhbHVlXSkgPT4ge1xuICAgICAgY29uc3Qgc2FuaXRpemVkQ29udGV4dEtleSA9IG5ldyBOYW1pbmdDb252ZXJ0ZXIoKS50b1NjcmVhbWluZ1NuYWtlQ2FzZShcbiAgICAgICAgY29udGV4dEtleSxcbiAgICAgICk7XG4gICAgICBjb25zdCBwYXJhbWV0ZXJQYXRoID1cbiAgICAgICAgUGFyYW1ldGVyUGF0aENvbnZlcnNpb25zLnRvUmVzb3VyY2VSZWZlcmVuY2VGdWxsUGF0aChcbiAgICAgICAgICB0aGlzLmJhY2tlbmRJZCxcbiAgICAgICAgICBzYW5pdGl6ZWRDb250ZXh0S2V5LFxuICAgICAgICApO1xuICAgICAgbmV3IFN0cmluZ1BhcmFtZXRlcih0aGlzLnNjb3BlLCBgJHtzYW5pdGl6ZWRDb250ZXh0S2V5fVBhcmFtZXRlcmAsIHtcbiAgICAgICAgcGFyYW1ldGVyTmFtZTogcGFyYW1ldGVyUGF0aCxcbiAgICAgICAgc3RyaW5nVmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogc2FuaXRpemVkQ29udGV4dEtleSxcbiAgICAgICAgcGF0aDogcGFyYW1ldGVyUGF0aCxcbiAgICAgIH07XG4gICAgfSk7XG59XG4iXX0=