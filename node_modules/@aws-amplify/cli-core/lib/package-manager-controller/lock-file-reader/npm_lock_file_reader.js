import fsp from 'fs/promises';
import path from 'path';
import z from 'zod';
import { printer } from '../../printer.js';
import { LogLevel } from '../../printer/printer.js';
/**
 * NpmLockFileReader is an abstraction around the logic used to read and parse lock file contents
 */
export class NpmLockFileReader {
    getLockFileContentsFromCwd = async () => {
        const dependencies = [];
        const packageLockJsonPath = path.resolve(process.cwd(), 'package-lock.json');
        let packageLockJson;
        try {
            const jsonLockContents = await fsp.readFile(packageLockJsonPath, 'utf-8');
            const jsonLockParsedValue = JSON.parse(jsonLockContents);
            // This will strip fields that are not part of the package lock schema
            packageLockJson = packageLockJsonSchema.parse(jsonLockParsedValue);
        }
        catch {
            printer.log(`Failed to get lock file contents because ${packageLockJsonPath} does not exist or is not parse-able`, LogLevel.DEBUG);
            return;
        }
        for (const key in packageLockJson.packages) {
            if (key === '') {
                // Skip root project in packages
                continue;
            }
            const dependencyVersion = packageLockJson.packages[key].version;
            // Version may not exist if package is a symbolic link
            if (dependencyVersion) {
                // Remove "node_modules/" prefix
                const dependencyName = key.replace(/^node_modules\//, '');
                dependencies.push({
                    name: dependencyName,
                    version: dependencyVersion,
                });
            }
        }
        return { dependencies };
    };
}
const packageLockJsonSchema = z.object({
    packages: z
        .record(z.string(), z.object({
        version: z.string().optional(),
    }))
        .optional(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnBtX2xvY2tfZmlsZV9yZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFja2FnZS1tYW5hZ2VyLWNvbnRyb2xsZXIvbG9jay1maWxlLXJlYWRlci9ucG1fbG9ja19maWxlX3JlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUM7QUFDOUIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQztBQUVwQixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXBEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QiwwQkFBMEIsR0FBRyxLQUFLLElBRWhDLEVBQUU7UUFDRixNQUFNLFlBQVksR0FBc0IsRUFBRSxDQUFDO1FBQzNDLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FDdEMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUNiLG1CQUFtQixDQUNwQixDQUFDO1FBQ0YsSUFBSSxlQUFlLENBQUM7UUFDcEIsSUFBSSxDQUFDO1lBQ0gsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDMUUsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDekQsc0VBQXNFO1lBQ3RFLGVBQWUsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNyRSxDQUFDO1FBQUMsTUFBTSxDQUFDO1lBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FDVCw0Q0FBNEMsbUJBQW1CLHNDQUFzQyxFQUNyRyxRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7WUFDRixPQUFPO1FBQ1QsQ0FBQztRQUVELEtBQUssTUFBTSxHQUFHLElBQUksZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQzNDLElBQUksR0FBRyxLQUFLLEVBQUUsRUFBRSxDQUFDO2dCQUNmLGdDQUFnQztnQkFDaEMsU0FBUztZQUNYLENBQUM7WUFDRCxNQUFNLGlCQUFpQixHQUFHLGVBQWUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO1lBRWhFLHNEQUFzRDtZQUN0RCxJQUFJLGlCQUFpQixFQUFFLENBQUM7Z0JBQ3RCLGdDQUFnQztnQkFDaEMsTUFBTSxjQUFjLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDMUQsWUFBWSxDQUFDLElBQUksQ0FBQztvQkFDaEIsSUFBSSxFQUFFLGNBQWM7b0JBQ3BCLE9BQU8sRUFBRSxpQkFBaUI7aUJBQzNCLENBQUMsQ0FBQztZQUNMLENBQUM7UUFDSCxDQUFDO1FBRUQsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQztDQUNIO0FBRUQsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3JDLFFBQVEsRUFBRSxDQUFDO1NBQ1IsTUFBTSxDQUNMLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFDVixDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ1AsT0FBTyxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7S0FDL0IsQ0FBQyxDQUNIO1NBQ0EsUUFBUSxFQUFFO0NBQ2QsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVwZW5kZW5jeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IGZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB6IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBMb2NrRmlsZUNvbnRlbnRzLCBMb2NrRmlsZVJlYWRlciB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJy4uLy4uL3ByaW50ZXIuanMnO1xuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICcuLi8uLi9wcmludGVyL3ByaW50ZXIuanMnO1xuXG4vKipcbiAqIE5wbUxvY2tGaWxlUmVhZGVyIGlzIGFuIGFic3RyYWN0aW9uIGFyb3VuZCB0aGUgbG9naWMgdXNlZCB0byByZWFkIGFuZCBwYXJzZSBsb2NrIGZpbGUgY29udGVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIE5wbUxvY2tGaWxlUmVhZGVyIGltcGxlbWVudHMgTG9ja0ZpbGVSZWFkZXIge1xuICBnZXRMb2NrRmlsZUNvbnRlbnRzRnJvbUN3ZCA9IGFzeW5jICgpOiBQcm9taXNlPFxuICAgIExvY2tGaWxlQ29udGVudHMgfCB1bmRlZmluZWRcbiAgPiA9PiB7XG4gICAgY29uc3QgZGVwZW5kZW5jaWVzOiBBcnJheTxEZXBlbmRlbmN5PiA9IFtdO1xuICAgIGNvbnN0IHBhY2thZ2VMb2NrSnNvblBhdGggPSBwYXRoLnJlc29sdmUoXG4gICAgICBwcm9jZXNzLmN3ZCgpLFxuICAgICAgJ3BhY2thZ2UtbG9jay5qc29uJyxcbiAgICApO1xuICAgIGxldCBwYWNrYWdlTG9ja0pzb247XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGpzb25Mb2NrQ29udGVudHMgPSBhd2FpdCBmc3AucmVhZEZpbGUocGFja2FnZUxvY2tKc29uUGF0aCwgJ3V0Zi04Jyk7XG4gICAgICBjb25zdCBqc29uTG9ja1BhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShqc29uTG9ja0NvbnRlbnRzKTtcbiAgICAgIC8vIFRoaXMgd2lsbCBzdHJpcCBmaWVsZHMgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIHBhY2thZ2UgbG9jayBzY2hlbWFcbiAgICAgIHBhY2thZ2VMb2NrSnNvbiA9IHBhY2thZ2VMb2NrSnNvblNjaGVtYS5wYXJzZShqc29uTG9ja1BhcnNlZFZhbHVlKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHByaW50ZXIubG9nKFxuICAgICAgICBgRmFpbGVkIHRvIGdldCBsb2NrIGZpbGUgY29udGVudHMgYmVjYXVzZSAke3BhY2thZ2VMb2NrSnNvblBhdGh9IGRvZXMgbm90IGV4aXN0IG9yIGlzIG5vdCBwYXJzZS1hYmxlYCxcbiAgICAgICAgTG9nTGV2ZWwuREVCVUcsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoY29uc3Qga2V5IGluIHBhY2thZ2VMb2NrSnNvbi5wYWNrYWdlcykge1xuICAgICAgaWYgKGtleSA9PT0gJycpIHtcbiAgICAgICAgLy8gU2tpcCByb290IHByb2plY3QgaW4gcGFja2FnZXNcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBkZXBlbmRlbmN5VmVyc2lvbiA9IHBhY2thZ2VMb2NrSnNvbi5wYWNrYWdlc1trZXldLnZlcnNpb247XG5cbiAgICAgIC8vIFZlcnNpb24gbWF5IG5vdCBleGlzdCBpZiBwYWNrYWdlIGlzIGEgc3ltYm9saWMgbGlua1xuICAgICAgaWYgKGRlcGVuZGVuY3lWZXJzaW9uKSB7XG4gICAgICAgIC8vIFJlbW92ZSBcIm5vZGVfbW9kdWxlcy9cIiBwcmVmaXhcbiAgICAgICAgY29uc3QgZGVwZW5kZW5jeU5hbWUgPSBrZXkucmVwbGFjZSgvXm5vZGVfbW9kdWxlc1xcLy8sICcnKTtcbiAgICAgICAgZGVwZW5kZW5jaWVzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IGRlcGVuZGVuY3lOYW1lLFxuICAgICAgICAgIHZlcnNpb246IGRlcGVuZGVuY3lWZXJzaW9uLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBkZXBlbmRlbmNpZXMgfTtcbiAgfTtcbn1cblxuY29uc3QgcGFja2FnZUxvY2tKc29uU2NoZW1hID0gei5vYmplY3Qoe1xuICBwYWNrYWdlczogelxuICAgIC5yZWNvcmQoXG4gICAgICB6LnN0cmluZygpLFxuICAgICAgei5vYmplY3Qoe1xuICAgICAgICB2ZXJzaW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgICB9KSxcbiAgICApXG4gICAgLm9wdGlvbmFsKCksXG59KTtcbiJdfQ==