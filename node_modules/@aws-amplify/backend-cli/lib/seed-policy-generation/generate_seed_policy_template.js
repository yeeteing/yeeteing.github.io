import { Effect, PolicyDocument, PolicyStatement } from 'aws-cdk-lib/aws-iam';
import { generateClientConfig } from '@aws-amplify/client-config';
import { AmplifyUserError, ParameterPathConversions, } from '@aws-amplify/platform-core';
import { GetCallerIdentityCommand, STSClient } from '@aws-sdk/client-sts';
/**
 * Generates policy template which allows seed to be run
 * @param backendId - backend identifier
 * @returns - policy template as a string
 */
export const generateSeedPolicyTemplate = async (backendId, generateClientConfiguration = generateClientConfig, stsClient = new STSClient()) => {
    const seedPolicy = new PolicyDocument();
    const clientConfig = await generateClientConfiguration(backendId, '1.4');
    if (!clientConfig.auth) {
        throw new AmplifyUserError('MissingAuthError', {
            message: 'There is no auth resource in this sandbox',
            resolution: 'Please add an auth resource to your sandbox and rerun this command',
        });
    }
    const stsResponse = await stsClient.send(new GetCallerIdentityCommand({}));
    const arn = `arn:aws:cognito-idp:${clientConfig.auth.aws_region}:${stsResponse.Account}:userpool/${clientConfig.auth.user_pool_id}`;
    const cognitoGrant = new PolicyStatement({
        effect: Effect.ALLOW,
        actions: ['cognito-idp:AdminCreateUser', 'cognito-idp:AdminAddUserToGroup'],
        resources: [arn],
    });
    const backendParamPrefix = ParameterPathConversions.toParameterPrefix(backendId);
    const sharedParamPrefix = ParameterPathConversions.toParameterPrefix(backendId.namespace);
    const secretsGrant = new PolicyStatement({
        effect: Effect.ALLOW,
        actions: ['ssm:PutParameter', 'ssm:GetParameter'],
        resources: [
            `arn:aws:ssm:*:*:parameter${backendParamPrefix}/*`,
            `arn:aws:ssm:*:*:parameter${sharedParamPrefix}/*`,
        ],
    });
    seedPolicy.addStatements(cognitoGrant, secretsGrant);
    return seedPolicy;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfc2VlZF9wb2xpY3lfdGVtcGxhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VlZC1wb2xpY3ktZ2VuZXJhdGlvbi9nZW5lcmF0ZV9zZWVkX3BvbGljeV90ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVsRSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLHdCQUF3QixHQUN6QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUxRTs7OztHQUlHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsS0FBSyxFQUM3QyxTQUE0QixFQUM1QiwyQkFBMkIsR0FBRyxvQkFBb0IsRUFDbEQsU0FBUyxHQUFHLElBQUksU0FBUyxFQUFFLEVBQ0YsRUFBRTtJQUMzQixNQUFNLFVBQVUsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO0lBQ3hDLE1BQU0sWUFBWSxHQUFHLE1BQU0sMkJBQTJCLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXpFLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsTUFBTSxJQUFJLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFO1lBQzdDLE9BQU8sRUFBRSwyQ0FBMkM7WUFDcEQsVUFBVSxFQUNSLG9FQUFvRTtTQUN2RSxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsTUFBTSxXQUFXLEdBQUcsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksd0JBQXdCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMzRSxNQUFNLEdBQUcsR0FBRyx1QkFBdUIsWUFBWSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksV0FBVyxDQUFDLE9BQU8sYUFBYSxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBRXBJLE1BQU0sWUFBWSxHQUFHLElBQUksZUFBZSxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSztRQUNwQixPQUFPLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxpQ0FBaUMsQ0FBQztRQUMzRSxTQUFTLEVBQUUsQ0FBQyxHQUFHLENBQUM7S0FDakIsQ0FBQyxDQUFDO0lBRUgsTUFBTSxrQkFBa0IsR0FDdEIsd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEQsTUFBTSxpQkFBaUIsR0FBRyx3QkFBd0IsQ0FBQyxpQkFBaUIsQ0FDbEUsU0FBUyxDQUFDLFNBQVMsQ0FDcEIsQ0FBQztJQUVGLE1BQU0sWUFBWSxHQUFHLElBQUksZUFBZSxDQUFDO1FBQ3ZDLE1BQU0sRUFBRSxNQUFNLENBQUMsS0FBSztRQUNwQixPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxrQkFBa0IsQ0FBQztRQUNqRCxTQUFTLEVBQUU7WUFDVCw0QkFBNEIsa0JBQWtCLElBQUk7WUFDbEQsNEJBQTRCLGlCQUFpQixJQUFJO1NBQ2xEO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsVUFBVSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFFckQsT0FBTyxVQUFVLENBQUM7QUFDcEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWZmZWN0LCBQb2xpY3lEb2N1bWVudCwgUG9saWN5U3RhdGVtZW50IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBnZW5lcmF0ZUNsaWVudENvbmZpZyB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGllbnQtY29uZmlnJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQge1xuICBBbXBsaWZ5VXNlckVycm9yLFxuICBQYXJhbWV0ZXJQYXRoQ29udmVyc2lvbnMsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IEdldENhbGxlcklkZW50aXR5Q29tbWFuZCwgU1RTQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXN0cyc7XG5cbi8qKlxuICogR2VuZXJhdGVzIHBvbGljeSB0ZW1wbGF0ZSB3aGljaCBhbGxvd3Mgc2VlZCB0byBiZSBydW5cbiAqIEBwYXJhbSBiYWNrZW5kSWQgLSBiYWNrZW5kIGlkZW50aWZpZXJcbiAqIEByZXR1cm5zIC0gcG9saWN5IHRlbXBsYXRlIGFzIGEgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZVNlZWRQb2xpY3lUZW1wbGF0ZSA9IGFzeW5jIChcbiAgYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllcixcbiAgZ2VuZXJhdGVDbGllbnRDb25maWd1cmF0aW9uID0gZ2VuZXJhdGVDbGllbnRDb25maWcsXG4gIHN0c0NsaWVudCA9IG5ldyBTVFNDbGllbnQoKSxcbik6IFByb21pc2U8UG9saWN5RG9jdW1lbnQ+ID0+IHtcbiAgY29uc3Qgc2VlZFBvbGljeSA9IG5ldyBQb2xpY3lEb2N1bWVudCgpO1xuICBjb25zdCBjbGllbnRDb25maWcgPSBhd2FpdCBnZW5lcmF0ZUNsaWVudENvbmZpZ3VyYXRpb24oYmFja2VuZElkLCAnMS40Jyk7XG5cbiAgaWYgKCFjbGllbnRDb25maWcuYXV0aCkge1xuICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKCdNaXNzaW5nQXV0aEVycm9yJywge1xuICAgICAgbWVzc2FnZTogJ1RoZXJlIGlzIG5vIGF1dGggcmVzb3VyY2UgaW4gdGhpcyBzYW5kYm94JyxcbiAgICAgIHJlc29sdXRpb246XG4gICAgICAgICdQbGVhc2UgYWRkIGFuIGF1dGggcmVzb3VyY2UgdG8geW91ciBzYW5kYm94IGFuZCByZXJ1biB0aGlzIGNvbW1hbmQnLFxuICAgIH0pO1xuICB9XG5cbiAgY29uc3Qgc3RzUmVzcG9uc2UgPSBhd2FpdCBzdHNDbGllbnQuc2VuZChuZXcgR2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kKHt9KSk7XG4gIGNvbnN0IGFybiA9IGBhcm46YXdzOmNvZ25pdG8taWRwOiR7Y2xpZW50Q29uZmlnLmF1dGguYXdzX3JlZ2lvbn06JHtzdHNSZXNwb25zZS5BY2NvdW50fTp1c2VycG9vbC8ke2NsaWVudENvbmZpZy5hdXRoLnVzZXJfcG9vbF9pZH1gO1xuXG4gIGNvbnN0IGNvZ25pdG9HcmFudCA9IG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgIGVmZmVjdDogRWZmZWN0LkFMTE9XLFxuICAgIGFjdGlvbnM6IFsnY29nbml0by1pZHA6QWRtaW5DcmVhdGVVc2VyJywgJ2NvZ25pdG8taWRwOkFkbWluQWRkVXNlclRvR3JvdXAnXSxcbiAgICByZXNvdXJjZXM6IFthcm5dLFxuICB9KTtcblxuICBjb25zdCBiYWNrZW5kUGFyYW1QcmVmaXggPVxuICAgIFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucy50b1BhcmFtZXRlclByZWZpeChiYWNrZW5kSWQpO1xuICBjb25zdCBzaGFyZWRQYXJhbVByZWZpeCA9IFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucy50b1BhcmFtZXRlclByZWZpeChcbiAgICBiYWNrZW5kSWQubmFtZXNwYWNlLFxuICApO1xuXG4gIGNvbnN0IHNlY3JldHNHcmFudCA9IG5ldyBQb2xpY3lTdGF0ZW1lbnQoe1xuICAgIGVmZmVjdDogRWZmZWN0LkFMTE9XLFxuICAgIGFjdGlvbnM6IFsnc3NtOlB1dFBhcmFtZXRlcicsICdzc206R2V0UGFyYW1ldGVyJ10sXG4gICAgcmVzb3VyY2VzOiBbXG4gICAgICBgYXJuOmF3czpzc206KjoqOnBhcmFtZXRlciR7YmFja2VuZFBhcmFtUHJlZml4fS8qYCxcbiAgICAgIGBhcm46YXdzOnNzbToqOio6cGFyYW1ldGVyJHtzaGFyZWRQYXJhbVByZWZpeH0vKmAsXG4gICAgXSxcbiAgfSk7XG5cbiAgc2VlZFBvbGljeS5hZGRTdGF0ZW1lbnRzKGNvZ25pdG9HcmFudCwgc2VjcmV0c0dyYW50KTtcblxuICByZXR1cm4gc2VlZFBvbGljeTtcbn07XG4iXX0=