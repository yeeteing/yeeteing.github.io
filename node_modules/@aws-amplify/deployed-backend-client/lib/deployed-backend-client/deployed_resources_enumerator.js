import { ListStackResourcesCommand, } from '@aws-sdk/client-cloudformation';
/**
 * Lists deployed resources
 */
export class DeployedResourcesEnumerator {
    stackStatusMapper;
    arnGenerator;
    arnParser;
    /**
     * Constructs a DeployedResourcesEnumerator
     */
    constructor(stackStatusMapper, arnGenerator, arnParser) {
        this.stackStatusMapper = stackStatusMapper;
        this.arnGenerator = arnGenerator;
        this.arnParser = arnParser;
    }
    /**
     * Lists all resources deployed in all nested cfn stacks
     */
    listDeployedResources = async (cfnClient, stackName, accountId, region) => {
        const deployedBackendResources = [];
        const stackResourceSummaries = [];
        let nextToken;
        do {
            const stackResources = await cfnClient.send(new ListStackResourcesCommand({
                StackName: stackName,
                NextToken: nextToken,
            }));
            nextToken = stackResources.NextToken;
            stackResourceSummaries.push(...(stackResources.StackResourceSummaries ?? []));
        } while (nextToken);
        const childStackArns = stackResourceSummaries
            .filter((stackResourceSummary) => {
            return (stackResourceSummary.ResourceType === 'AWS::CloudFormation::Stack');
        })
            .map((stackResourceSummary) => {
            return stackResourceSummary.PhysicalResourceId;
        }) ?? [];
        const promises = childStackArns.map((childStackArn) => {
            const childStackName = childStackArn?.split('/')?.[1];
            if (!childStackArn || !childStackName) {
                return [];
            }
            const parsedArn = this.arnParser.tryParseArn(childStackArn);
            // Recursive call to get all the resources from child stacks
            return this.listDeployedResources(cfnClient, childStackName, parsedArn.accountId, parsedArn.region);
        });
        const deployedResourcesPerChildStack = await Promise.all(promises);
        deployedBackendResources.push(...deployedResourcesPerChildStack.flat());
        const parentStackNonStackResources = stackResourceSummaries.filter((stackResourceSummary) => {
            return (stackResourceSummary.ResourceType !== 'AWS::CloudFormation::Stack');
        }) ?? [];
        const parentDeployedNonStackResources = parentStackNonStackResources.map((stackResourceSummary) => ({
            logicalResourceId: stackResourceSummary.LogicalResourceId,
            lastUpdated: stackResourceSummary.LastUpdatedTimestamp,
            resourceStatus: this.stackStatusMapper.translateStackStatus(stackResourceSummary.ResourceStatus),
            resourceStatusReason: stackResourceSummary.ResourceStatusReason,
            resourceType: stackResourceSummary.ResourceType,
            physicalResourceId: stackResourceSummary.PhysicalResourceId,
            arn: this.arnGenerator.generateArn(stackResourceSummary, region, accountId),
        }));
        deployedBackendResources.push(...parentDeployedNonStackResources);
        return deployedBackendResources;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95ZWRfcmVzb3VyY2VzX2VudW1lcmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVwbG95ZWQtYmFja2VuZC1jbGllbnQvZGVwbG95ZWRfcmVzb3VyY2VzX2VudW1lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHlCQUF5QixHQUcxQixNQUFNLGdDQUFnQyxDQUFDO0FBTXhDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDJCQUEyQjtJQUtuQjtJQUNBO0lBQ0E7SUFObkI7O09BRUc7SUFDSCxZQUNtQixpQkFBb0MsRUFDcEMsWUFBMEIsRUFDMUIsU0FBb0I7UUFGcEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixjQUFTLEdBQVQsU0FBUyxDQUFXO0lBQ3BDLENBQUM7SUFFSjs7T0FFRztJQUNILHFCQUFxQixHQUFHLEtBQUssRUFDM0IsU0FBK0IsRUFDL0IsU0FBaUIsRUFDakIsU0FBNkIsRUFDN0IsTUFBMEIsRUFDVSxFQUFFO1FBQ3RDLE1BQU0sd0JBQXdCLEdBQThCLEVBQUUsQ0FBQztRQUMvRCxNQUFNLHNCQUFzQixHQUEyQixFQUFFLENBQUM7UUFDMUQsSUFBSSxTQUFTLENBQUM7UUFDZCxHQUFHLENBQUM7WUFDRixNQUFNLGNBQWMsR0FDbEIsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUNsQixJQUFJLHlCQUF5QixDQUFDO2dCQUM1QixTQUFTLEVBQUUsU0FBUztnQkFDcEIsU0FBUyxFQUFFLFNBQVM7YUFDckIsQ0FBQyxDQUNILENBQUM7WUFFSixTQUFTLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQztZQUNyQyxzQkFBc0IsQ0FBQyxJQUFJLENBQ3pCLEdBQUcsQ0FBQyxjQUFjLENBQUMsc0JBQXNCLElBQUksRUFBRSxDQUFDLENBQ2pELENBQUM7UUFDSixDQUFDLFFBQVEsU0FBUyxFQUFFO1FBRXBCLE1BQU0sY0FBYyxHQUNsQixzQkFBc0I7YUFDbkIsTUFBTSxDQUFDLENBQUMsb0JBQTBDLEVBQUUsRUFBRTtZQUNyRCxPQUFPLENBQ0wsb0JBQW9CLENBQUMsWUFBWSxLQUFLLDRCQUE0QixDQUNuRSxDQUFDO1FBQ0osQ0FBQyxDQUFDO2FBQ0QsR0FBRyxDQUFDLENBQUMsb0JBQTBDLEVBQUUsRUFBRTtZQUNsRCxPQUFPLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDO1FBQ2pELENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUViLE1BQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUNwRCxNQUFNLGNBQWMsR0FBRyxhQUFhLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUN0QyxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUM7WUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUM1RCw0REFBNEQ7WUFDNUQsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQy9CLFNBQVMsRUFDVCxjQUFjLEVBQ2QsU0FBUyxDQUFDLFNBQVMsRUFDbkIsU0FBUyxDQUFDLE1BQU0sQ0FDakIsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSw4QkFBOEIsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbkUsd0JBQXdCLENBQUMsSUFBSSxDQUFDLEdBQUcsOEJBQThCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUV4RSxNQUFNLDRCQUE0QixHQUNoQyxzQkFBc0IsQ0FBQyxNQUFNLENBQzNCLENBQUMsb0JBQTBDLEVBQUUsRUFBRTtZQUM3QyxPQUFPLENBQ0wsb0JBQW9CLENBQUMsWUFBWSxLQUFLLDRCQUE0QixDQUNuRSxDQUFDO1FBQ0osQ0FBQyxDQUNGLElBQUksRUFBRSxDQUFDO1FBRVYsTUFBTSwrQkFBK0IsR0FBRyw0QkFBNEIsQ0FBQyxHQUFHLENBQ3RFLENBQUMsb0JBQTBDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDL0MsaUJBQWlCLEVBQUUsb0JBQW9CLENBQUMsaUJBQWlCO1lBQ3pELFdBQVcsRUFBRSxvQkFBb0IsQ0FBQyxvQkFBb0I7WUFDdEQsY0FBYyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FDekQsb0JBQW9CLENBQUMsY0FBYyxDQUNwQztZQUNELG9CQUFvQixFQUFFLG9CQUFvQixDQUFDLG9CQUFvQjtZQUMvRCxZQUFZLEVBQUUsb0JBQW9CLENBQUMsWUFBWTtZQUMvQyxrQkFBa0IsRUFBRSxvQkFBb0IsQ0FBQyxrQkFBa0I7WUFDM0QsR0FBRyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUNoQyxvQkFBb0IsRUFDcEIsTUFBTSxFQUNOLFNBQVMsQ0FDVjtTQUNGLENBQUMsQ0FDSCxDQUFDO1FBRUYsd0JBQXdCLENBQUMsSUFBSSxDQUFDLEdBQUcsK0JBQStCLENBQUMsQ0FBQztRQUNsRSxPQUFPLHdCQUF3QixDQUFDO0lBQ2xDLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2xvdWRGb3JtYXRpb25DbGllbnQsXG4gIExpc3RTdGFja1Jlc291cmNlc0NvbW1hbmQsXG4gIExpc3RTdGFja1Jlc291cmNlc0NvbW1hbmRPdXRwdXQsXG4gIFN0YWNrUmVzb3VyY2VTdW1tYXJ5LFxufSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb24nO1xuaW1wb3J0IHsgRGVwbG95ZWRCYWNrZW5kUmVzb3VyY2UgfSBmcm9tICcuLi9kZXBsb3llZF9iYWNrZW5kX2NsaWVudF9mYWN0b3J5LmpzJztcbmltcG9ydCB7IFN0YWNrU3RhdHVzTWFwcGVyIH0gZnJvbSAnLi9zdGFja19zdGF0dXNfbWFwcGVyLmpzJztcbmltcG9ydCB7IEFybkdlbmVyYXRvciB9IGZyb20gJy4vYXJuX2dlbmVyYXRvci5qcyc7XG5pbXBvcnQgeyBBcm5QYXJzZXIgfSBmcm9tICcuL2Fybl9wYXJzZXIuanMnO1xuXG4vKipcbiAqIExpc3RzIGRlcGxveWVkIHJlc291cmNlc1xuICovXG5leHBvcnQgY2xhc3MgRGVwbG95ZWRSZXNvdXJjZXNFbnVtZXJhdG9yIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBEZXBsb3llZFJlc291cmNlc0VudW1lcmF0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RhY2tTdGF0dXNNYXBwZXI6IFN0YWNrU3RhdHVzTWFwcGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXJuR2VuZXJhdG9yOiBBcm5HZW5lcmF0b3IsXG4gICAgcHJpdmF0ZSByZWFkb25seSBhcm5QYXJzZXI6IEFyblBhcnNlcixcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBMaXN0cyBhbGwgcmVzb3VyY2VzIGRlcGxveWVkIGluIGFsbCBuZXN0ZWQgY2ZuIHN0YWNrc1xuICAgKi9cbiAgbGlzdERlcGxveWVkUmVzb3VyY2VzID0gYXN5bmMgKFxuICAgIGNmbkNsaWVudDogQ2xvdWRGb3JtYXRpb25DbGllbnQsXG4gICAgc3RhY2tOYW1lOiBzdHJpbmcsXG4gICAgYWNjb3VudElkOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgcmVnaW9uOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICk6IFByb21pc2U8RGVwbG95ZWRCYWNrZW5kUmVzb3VyY2VbXT4gPT4ge1xuICAgIGNvbnN0IGRlcGxveWVkQmFja2VuZFJlc291cmNlczogRGVwbG95ZWRCYWNrZW5kUmVzb3VyY2VbXSA9IFtdO1xuICAgIGNvbnN0IHN0YWNrUmVzb3VyY2VTdW1tYXJpZXM6IFN0YWNrUmVzb3VyY2VTdW1tYXJ5W10gPSBbXTtcbiAgICBsZXQgbmV4dFRva2VuO1xuICAgIGRvIHtcbiAgICAgIGNvbnN0IHN0YWNrUmVzb3VyY2VzOiBMaXN0U3RhY2tSZXNvdXJjZXNDb21tYW5kT3V0cHV0ID1cbiAgICAgICAgYXdhaXQgY2ZuQ2xpZW50LnNlbmQoXG4gICAgICAgICAgbmV3IExpc3RTdGFja1Jlc291cmNlc0NvbW1hbmQoe1xuICAgICAgICAgICAgU3RhY2tOYW1lOiBzdGFja05hbWUsXG4gICAgICAgICAgICBOZXh0VG9rZW46IG5leHRUb2tlbixcbiAgICAgICAgICB9KSxcbiAgICAgICAgKTtcblxuICAgICAgbmV4dFRva2VuID0gc3RhY2tSZXNvdXJjZXMuTmV4dFRva2VuO1xuICAgICAgc3RhY2tSZXNvdXJjZVN1bW1hcmllcy5wdXNoKFxuICAgICAgICAuLi4oc3RhY2tSZXNvdXJjZXMuU3RhY2tSZXNvdXJjZVN1bW1hcmllcyA/PyBbXSksXG4gICAgICApO1xuICAgIH0gd2hpbGUgKG5leHRUb2tlbik7XG5cbiAgICBjb25zdCBjaGlsZFN0YWNrQXJuczogKHN0cmluZyB8IHVuZGVmaW5lZClbXSA9XG4gICAgICBzdGFja1Jlc291cmNlU3VtbWFyaWVzXG4gICAgICAgIC5maWx0ZXIoKHN0YWNrUmVzb3VyY2VTdW1tYXJ5OiBTdGFja1Jlc291cmNlU3VtbWFyeSkgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBzdGFja1Jlc291cmNlU3VtbWFyeS5SZXNvdXJjZVR5cGUgPT09ICdBV1M6OkNsb3VkRm9ybWF0aW9uOjpTdGFjaydcbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgICAubWFwKChzdGFja1Jlc291cmNlU3VtbWFyeTogU3RhY2tSZXNvdXJjZVN1bW1hcnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gc3RhY2tSZXNvdXJjZVN1bW1hcnkuUGh5c2ljYWxSZXNvdXJjZUlkO1xuICAgICAgICB9KSA/PyBbXTtcblxuICAgIGNvbnN0IHByb21pc2VzID0gY2hpbGRTdGFja0FybnMubWFwKChjaGlsZFN0YWNrQXJuKSA9PiB7XG4gICAgICBjb25zdCBjaGlsZFN0YWNrTmFtZSA9IGNoaWxkU3RhY2tBcm4/LnNwbGl0KCcvJyk/LlsxXTtcbiAgICAgIGlmICghY2hpbGRTdGFja0FybiB8fCAhY2hpbGRTdGFja05hbWUpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwYXJzZWRBcm4gPSB0aGlzLmFyblBhcnNlci50cnlQYXJzZUFybihjaGlsZFN0YWNrQXJuKTtcbiAgICAgIC8vIFJlY3Vyc2l2ZSBjYWxsIHRvIGdldCBhbGwgdGhlIHJlc291cmNlcyBmcm9tIGNoaWxkIHN0YWNrc1xuICAgICAgcmV0dXJuIHRoaXMubGlzdERlcGxveWVkUmVzb3VyY2VzKFxuICAgICAgICBjZm5DbGllbnQsXG4gICAgICAgIGNoaWxkU3RhY2tOYW1lLFxuICAgICAgICBwYXJzZWRBcm4uYWNjb3VudElkLFxuICAgICAgICBwYXJzZWRBcm4ucmVnaW9uLFxuICAgICAgKTtcbiAgICB9KTtcbiAgICBjb25zdCBkZXBsb3llZFJlc291cmNlc1BlckNoaWxkU3RhY2sgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgZGVwbG95ZWRCYWNrZW5kUmVzb3VyY2VzLnB1c2goLi4uZGVwbG95ZWRSZXNvdXJjZXNQZXJDaGlsZFN0YWNrLmZsYXQoKSk7XG5cbiAgICBjb25zdCBwYXJlbnRTdGFja05vblN0YWNrUmVzb3VyY2VzOiBTdGFja1Jlc291cmNlU3VtbWFyeVtdID1cbiAgICAgIHN0YWNrUmVzb3VyY2VTdW1tYXJpZXMuZmlsdGVyKFxuICAgICAgICAoc3RhY2tSZXNvdXJjZVN1bW1hcnk6IFN0YWNrUmVzb3VyY2VTdW1tYXJ5KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHN0YWNrUmVzb3VyY2VTdW1tYXJ5LlJlc291cmNlVHlwZSAhPT0gJ0FXUzo6Q2xvdWRGb3JtYXRpb246OlN0YWNrJ1xuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICApID8/IFtdO1xuXG4gICAgY29uc3QgcGFyZW50RGVwbG95ZWROb25TdGFja1Jlc291cmNlcyA9IHBhcmVudFN0YWNrTm9uU3RhY2tSZXNvdXJjZXMubWFwKFxuICAgICAgKHN0YWNrUmVzb3VyY2VTdW1tYXJ5OiBTdGFja1Jlc291cmNlU3VtbWFyeSkgPT4gKHtcbiAgICAgICAgbG9naWNhbFJlc291cmNlSWQ6IHN0YWNrUmVzb3VyY2VTdW1tYXJ5LkxvZ2ljYWxSZXNvdXJjZUlkLFxuICAgICAgICBsYXN0VXBkYXRlZDogc3RhY2tSZXNvdXJjZVN1bW1hcnkuTGFzdFVwZGF0ZWRUaW1lc3RhbXAsXG4gICAgICAgIHJlc291cmNlU3RhdHVzOiB0aGlzLnN0YWNrU3RhdHVzTWFwcGVyLnRyYW5zbGF0ZVN0YWNrU3RhdHVzKFxuICAgICAgICAgIHN0YWNrUmVzb3VyY2VTdW1tYXJ5LlJlc291cmNlU3RhdHVzLFxuICAgICAgICApLFxuICAgICAgICByZXNvdXJjZVN0YXR1c1JlYXNvbjogc3RhY2tSZXNvdXJjZVN1bW1hcnkuUmVzb3VyY2VTdGF0dXNSZWFzb24sXG4gICAgICAgIHJlc291cmNlVHlwZTogc3RhY2tSZXNvdXJjZVN1bW1hcnkuUmVzb3VyY2VUeXBlLFxuICAgICAgICBwaHlzaWNhbFJlc291cmNlSWQ6IHN0YWNrUmVzb3VyY2VTdW1tYXJ5LlBoeXNpY2FsUmVzb3VyY2VJZCxcbiAgICAgICAgYXJuOiB0aGlzLmFybkdlbmVyYXRvci5nZW5lcmF0ZUFybihcbiAgICAgICAgICBzdGFja1Jlc291cmNlU3VtbWFyeSxcbiAgICAgICAgICByZWdpb24sXG4gICAgICAgICAgYWNjb3VudElkLFxuICAgICAgICApLFxuICAgICAgfSksXG4gICAgKTtcblxuICAgIGRlcGxveWVkQmFja2VuZFJlc291cmNlcy5wdXNoKC4uLnBhcmVudERlcGxveWVkTm9uU3RhY2tSZXNvdXJjZXMpO1xuICAgIHJldHVybiBkZXBsb3llZEJhY2tlbmRSZXNvdXJjZXM7XG4gIH07XG59XG4iXX0=