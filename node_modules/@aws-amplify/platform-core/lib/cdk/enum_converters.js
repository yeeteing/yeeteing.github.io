"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogLevelConverter = exports.LogRetentionConverter = void 0;
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const aws_logs_1 = require("aws-cdk-lib/aws-logs");
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
/**
 * Converts LogRetention to CDK types.
 */
class LogRetentionConverter {
    toCDKRetentionDays = (retention) => {
        switch (retention) {
            case undefined:
                return undefined;
            case '1 day':
                return aws_logs_1.RetentionDays.ONE_DAY;
            case '3 days':
                return aws_logs_1.RetentionDays.THREE_DAYS;
            case '5 days':
                return aws_logs_1.RetentionDays.FIVE_DAYS;
            case '1 week':
                return aws_logs_1.RetentionDays.ONE_WEEK;
            case '2 weeks':
                return aws_logs_1.RetentionDays.TWO_WEEKS;
            case '1 month':
                return aws_logs_1.RetentionDays.ONE_MONTH;
            case '2 months':
                return aws_logs_1.RetentionDays.TWO_MONTHS;
            case '3 months':
                return aws_logs_1.RetentionDays.THREE_MONTHS;
            case '4 months':
                return aws_logs_1.RetentionDays.FOUR_MONTHS;
            case '5 months':
                return aws_logs_1.RetentionDays.FIVE_MONTHS;
            case '6 months':
                return aws_logs_1.RetentionDays.SIX_MONTHS;
            case '1 year':
                return aws_logs_1.RetentionDays.ONE_YEAR;
            case '13 months':
                return aws_logs_1.RetentionDays.THIRTEEN_MONTHS;
            case '18 months':
                return aws_logs_1.RetentionDays.EIGHTEEN_MONTHS;
            case '2 years':
                return aws_logs_1.RetentionDays.TWO_YEARS;
            case '3 years':
                return aws_logs_1.RetentionDays.THREE_YEARS;
            case '5 years':
                return aws_logs_1.RetentionDays.FIVE_YEARS;
            case '6 years':
                return aws_logs_1.RetentionDays.SIX_YEARS;
            case '7 years':
                return aws_logs_1.RetentionDays.SEVEN_YEARS;
            case '8 years':
                return aws_logs_1.RetentionDays.EIGHT_YEARS;
            case '9 years':
                return aws_logs_1.RetentionDays.NINE_YEARS;
            case '10 years':
                return aws_logs_1.RetentionDays.TEN_YEARS;
            case 'infinite':
                return aws_logs_1.RetentionDays.INFINITE;
        }
    };
}
exports.LogRetentionConverter = LogRetentionConverter;
/**
 * Converts LogLevel to CDK types.
 */
class LogLevelConverter {
    toCDKLambdaApplicationLogLevel = (logLevel) => {
        switch (logLevel) {
            case undefined: {
                return undefined;
            }
            case 'info': {
                return aws_lambda_1.ApplicationLogLevel.INFO;
            }
            case 'debug': {
                return aws_lambda_1.ApplicationLogLevel.DEBUG;
            }
            case 'warn': {
                return aws_lambda_1.ApplicationLogLevel.WARN;
            }
            case 'error': {
                return aws_lambda_1.ApplicationLogLevel.ERROR;
            }
            case 'fatal': {
                return aws_lambda_1.ApplicationLogLevel.FATAL;
            }
            case 'trace': {
                return aws_lambda_1.ApplicationLogLevel.TRACE;
            }
            default:
                throw new Error(`Invalid Lambda application log level: ${logLevel}`);
        }
    };
    toCDKAppsyncFieldLogLevel = (logLevel) => {
        switch (logLevel) {
            case undefined:
                return undefined;
            case 'none':
                return aws_appsync_1.FieldLogLevel.NONE;
            case 'error':
                return aws_appsync_1.FieldLogLevel.ERROR;
            case 'info':
                return aws_appsync_1.FieldLogLevel.INFO;
            case 'debug':
                return aws_appsync_1.FieldLogLevel.DEBUG;
            case 'all':
                return aws_appsync_1.FieldLogLevel.ALL;
            default:
                throw new Error(`Invalid Appsync field log level: ${logLevel}`);
        }
    };
}
exports.LogLevelConverter = LogLevelConverter;
//# sourceMappingURL=data:application/json;base64,