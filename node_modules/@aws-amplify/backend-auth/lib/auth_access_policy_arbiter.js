/**
 * Middleman between creating bucket policies and attaching those policies to corresponding roles
 */
export class AuthAccessPolicyArbiter {
    accessDefinition;
    getInstanceProps;
    ssmEnvironmentEntries;
    userPoolAccessPolicyFactory;
    /**
     * Instantiate with context from the auth factory
     */
    constructor(accessDefinition, getInstanceProps, ssmEnvironmentEntries, userPoolAccessPolicyFactory) {
        this.accessDefinition = accessDefinition;
        this.getInstanceProps = getInstanceProps;
        this.ssmEnvironmentEntries = ssmEnvironmentEntries;
        this.userPoolAccessPolicyFactory = userPoolAccessPolicyFactory;
    }
    /**
     * Responsible for creating policies corresponding to the definition,
     * then invoking the corresponding ResourceAccessAcceptor to accept the policies
     */
    arbitratePolicies = () => {
        this.accessDefinition.forEach(this.acceptResourceAccess);
    };
    acceptResourceAccess = (accessDefinition) => {
        const accessAcceptor = accessDefinition.getResourceAccessAcceptor(this.getInstanceProps);
        const policy = this.userPoolAccessPolicyFactory.createPolicy(accessDefinition.actions);
        accessAcceptor.acceptResourceAccess(policy, this.ssmEnvironmentEntries);
    };
}
/**
 *
 */
export class AuthAccessPolicyArbiterFactory {
    getInstance = (accessDefinition, getInstanceProps, ssmEnvironmentEntries, userpoolAccessPolicyFactory) => new AuthAccessPolicyArbiter(accessDefinition, getInstanceProps, ssmEnvironmentEntries, userpoolAccessPolicyFactory);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aF9hY2Nlc3NfcG9saWN5X2FyYml0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYXV0aF9hY2Nlc3NfcG9saWN5X2FyYml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0E7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBS2Y7SUFDQTtJQUNBO0lBQ0E7SUFQbkI7O09BRUc7SUFDSCxZQUNtQixnQkFBd0MsRUFDeEMsZ0JBQWtELEVBQ2xELHFCQUE0QyxFQUM1QywyQkFBd0Q7UUFIeEQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUF3QjtRQUN4QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtDO1FBQ2xELDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBdUI7UUFDNUMsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtJQUN4RSxDQUFDO0lBRUo7OztPQUdHO0lBQ0gsaUJBQWlCLEdBQUcsR0FBRyxFQUFFO1FBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDO0lBRUYsb0JBQW9CLEdBQUcsQ0FBQyxnQkFBc0MsRUFBRSxFQUFFO1FBQ2hFLE1BQU0sY0FBYyxHQUFHLGdCQUFnQixDQUFDLHlCQUF5QixDQUMvRCxJQUFJLENBQUMsZ0JBQWdCLENBQ3RCLENBQUM7UUFDRixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUMsWUFBWSxDQUMxRCxnQkFBZ0IsQ0FBQyxPQUFPLENBQ3pCLENBQUM7UUFFRixjQUFjLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzFFLENBQUMsQ0FBQztDQUNIO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sOEJBQThCO0lBQ3pDLFdBQVcsR0FBRyxDQUNaLGdCQUF3QyxFQUN4QyxnQkFBa0QsRUFDbEQscUJBQTRDLEVBQzVDLDJCQUF3RCxFQUN4RCxFQUFFLENBQ0YsSUFBSSx1QkFBdUIsQ0FDekIsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixxQkFBcUIsRUFDckIsMkJBQTJCLENBQzVCLENBQUM7Q0FDTCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzLFxuICBTc21FbnZpcm9ubWVudEVudHJ5LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IEF1dGhBY2Nlc3NEZWZpbml0aW9uIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBVc2VyUG9vbEFjY2Vzc1BvbGljeUZhY3RvcnkgfSBmcm9tICcuL3VzZXJwb29sX2FjY2Vzc19wb2xpY3lfZmFjdG9yeS5qcyc7XG5cbi8qKlxuICogTWlkZGxlbWFuIGJldHdlZW4gY3JlYXRpbmcgYnVja2V0IHBvbGljaWVzIGFuZCBhdHRhY2hpbmcgdGhvc2UgcG9saWNpZXMgdG8gY29ycmVzcG9uZGluZyByb2xlc1xuICovXG5leHBvcnQgY2xhc3MgQXV0aEFjY2Vzc1BvbGljeUFyYml0ZXIge1xuICAvKipcbiAgICogSW5zdGFudGlhdGUgd2l0aCBjb250ZXh0IGZyb20gdGhlIGF1dGggZmFjdG9yeVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBhY2Nlc3NEZWZpbml0aW9uOiBBdXRoQWNjZXNzRGVmaW5pdGlvbltdLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0SW5zdGFuY2VQcm9wczogQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzc21FbnZpcm9ubWVudEVudHJpZXM6IFNzbUVudmlyb25tZW50RW50cnlbXSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHVzZXJQb29sQWNjZXNzUG9saWN5RmFjdG9yeTogVXNlclBvb2xBY2Nlc3NQb2xpY3lGYWN0b3J5LFxuICApIHt9XG5cbiAgLyoqXG4gICAqIFJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyBwb2xpY2llcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBkZWZpbml0aW9uLFxuICAgKiB0aGVuIGludm9raW5nIHRoZSBjb3JyZXNwb25kaW5nIFJlc291cmNlQWNjZXNzQWNjZXB0b3IgdG8gYWNjZXB0IHRoZSBwb2xpY2llc1xuICAgKi9cbiAgYXJiaXRyYXRlUG9saWNpZXMgPSAoKSA9PiB7XG4gICAgdGhpcy5hY2Nlc3NEZWZpbml0aW9uLmZvckVhY2godGhpcy5hY2NlcHRSZXNvdXJjZUFjY2Vzcyk7XG4gIH07XG5cbiAgYWNjZXB0UmVzb3VyY2VBY2Nlc3MgPSAoYWNjZXNzRGVmaW5pdGlvbjogQXV0aEFjY2Vzc0RlZmluaXRpb24pID0+IHtcbiAgICBjb25zdCBhY2Nlc3NBY2NlcHRvciA9IGFjY2Vzc0RlZmluaXRpb24uZ2V0UmVzb3VyY2VBY2Nlc3NBY2NlcHRvcihcbiAgICAgIHRoaXMuZ2V0SW5zdGFuY2VQcm9wcyxcbiAgICApO1xuICAgIGNvbnN0IHBvbGljeSA9IHRoaXMudXNlclBvb2xBY2Nlc3NQb2xpY3lGYWN0b3J5LmNyZWF0ZVBvbGljeShcbiAgICAgIGFjY2Vzc0RlZmluaXRpb24uYWN0aW9ucyxcbiAgICApO1xuXG4gICAgYWNjZXNzQWNjZXB0b3IuYWNjZXB0UmVzb3VyY2VBY2Nlc3MocG9saWN5LCB0aGlzLnNzbUVudmlyb25tZW50RW50cmllcyk7XG4gIH07XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGNsYXNzIEF1dGhBY2Nlc3NQb2xpY3lBcmJpdGVyRmFjdG9yeSB7XG4gIGdldEluc3RhbmNlID0gKFxuICAgIGFjY2Vzc0RlZmluaXRpb246IEF1dGhBY2Nlc3NEZWZpbml0aW9uW10sXG4gICAgZ2V0SW5zdGFuY2VQcm9wczogQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHMsXG4gICAgc3NtRW52aXJvbm1lbnRFbnRyaWVzOiBTc21FbnZpcm9ubWVudEVudHJ5W10sXG4gICAgdXNlcnBvb2xBY2Nlc3NQb2xpY3lGYWN0b3J5OiBVc2VyUG9vbEFjY2Vzc1BvbGljeUZhY3RvcnksXG4gICkgPT5cbiAgICBuZXcgQXV0aEFjY2Vzc1BvbGljeUFyYml0ZXIoXG4gICAgICBhY2Nlc3NEZWZpbml0aW9uLFxuICAgICAgZ2V0SW5zdGFuY2VQcm9wcyxcbiAgICAgIHNzbUVudmlyb25tZW50RW50cmllcyxcbiAgICAgIHVzZXJwb29sQWNjZXNzUG9saWN5RmFjdG9yeSxcbiAgICApO1xufVxuIl19