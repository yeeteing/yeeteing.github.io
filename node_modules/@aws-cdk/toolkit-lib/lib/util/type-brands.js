"use strict";
/**
 * Type branding
 *
 * This allows marking certain types as having gone through particular operations.
 *
 * Branded types can be used anywhere the base type is expected, but the base type
 * cannot be used where a branded type is expected; the values have to go through
 * a type assertion operation to confirm their brand.
 *
 * Usage:
 *
 * ```
 * type ValidatedString = Branded<string, 'PassedMyValidation'>;
 *
 * function validate(x: string): asserts x is ValidatedString {
 *   // ... throw an error if not
 * }
 *
 * function isValid(x: string): x is ValidatedString {
 *   // ... throw an error if not
 * }
 * ```
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBranded = createBranded;
/**
 * Marks a value as being branded a certain way.
 *
 * You should in general avoid calling this, and use validation or
 * asserting functions instead. However, this can be useful to produce
 * values which are branded by construction (really just an elaborate
 * way to write 'as').
 */
/* c8 ignore start */
function createBranded(value) {
    return value;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZS1icmFuZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0eXBlLWJyYW5kcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FzQkc7O0FBa0JILHNDQUVDO0FBWEQ7Ozs7Ozs7R0FPRztBQUNILHFCQUFxQjtBQUNyQixTQUFnQixhQUFhLENBQThCLEtBQTZCO0lBQ3RGLE9BQU8sS0FBVSxDQUFDO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFR5cGUgYnJhbmRpbmdcbiAqXG4gKiBUaGlzIGFsbG93cyBtYXJraW5nIGNlcnRhaW4gdHlwZXMgYXMgaGF2aW5nIGdvbmUgdGhyb3VnaCBwYXJ0aWN1bGFyIG9wZXJhdGlvbnMuXG4gKlxuICogQnJhbmRlZCB0eXBlcyBjYW4gYmUgdXNlZCBhbnl3aGVyZSB0aGUgYmFzZSB0eXBlIGlzIGV4cGVjdGVkLCBidXQgdGhlIGJhc2UgdHlwZVxuICogY2Fubm90IGJlIHVzZWQgd2hlcmUgYSBicmFuZGVkIHR5cGUgaXMgZXhwZWN0ZWQ7IHRoZSB2YWx1ZXMgaGF2ZSB0byBnbyB0aHJvdWdoXG4gKiBhIHR5cGUgYXNzZXJ0aW9uIG9wZXJhdGlvbiB0byBjb25maXJtIHRoZWlyIGJyYW5kLlxuICpcbiAqIFVzYWdlOlxuICpcbiAqIGBgYFxuICogdHlwZSBWYWxpZGF0ZWRTdHJpbmcgPSBCcmFuZGVkPHN0cmluZywgJ1Bhc3NlZE15VmFsaWRhdGlvbic+O1xuICpcbiAqIGZ1bmN0aW9uIHZhbGlkYXRlKHg6IHN0cmluZyk6IGFzc2VydHMgeCBpcyBWYWxpZGF0ZWRTdHJpbmcge1xuICogICAvLyAuLi4gdGhyb3cgYW4gZXJyb3IgaWYgbm90XG4gKiB9XG4gKlxuICogZnVuY3Rpb24gaXNWYWxpZCh4OiBzdHJpbmcpOiB4IGlzIFZhbGlkYXRlZFN0cmluZyB7XG4gKiAgIC8vIC4uLiB0aHJvdyBhbiBlcnJvciBpZiBub3RcbiAqIH1cbiAqIGBgYFxuICovXG5cbi8vIFRoaXMgY29uc3RydWN0IHB1cmVseSBoYXBwZW5zIGF0IHR5cGUgY2hlY2tpbmcgdGltZS4gVGhlcmUgaXMgbm8gcnVuLXRpbWUgaW1wYWN0LlxuLy8gSGVuY2UsIHdlIG5ldmVyIGV2ZW4gaGF2ZSB0byBjb25zdHJ1Y3QgdmFsdWVzIG9mIHRoaXMgdHlwZS5cbmRlY2xhcmUgY29uc3QgX19icmFuZDogdW5pcXVlIHN5bWJvbDtcblxuZXhwb3J0IHR5cGUgQnJhbmQ8Qj4gPSB7IFtfX2JyYW5kXTogQiB9O1xuZXhwb3J0IHR5cGUgQnJhbmRlZDxULCBCPiA9IFQgJiBCcmFuZDxCPjtcblxuLyoqXG4gKiBNYXJrcyBhIHZhbHVlIGFzIGJlaW5nIGJyYW5kZWQgYSBjZXJ0YWluIHdheS5cbiAqXG4gKiBZb3Ugc2hvdWxkIGluIGdlbmVyYWwgYXZvaWQgY2FsbGluZyB0aGlzLCBhbmQgdXNlIHZhbGlkYXRpb24gb3JcbiAqIGFzc2VydGluZyBmdW5jdGlvbnMgaW5zdGVhZC4gSG93ZXZlciwgdGhpcyBjYW4gYmUgdXNlZnVsIHRvIHByb2R1Y2VcbiAqIHZhbHVlcyB3aGljaCBhcmUgYnJhbmRlZCBieSBjb25zdHJ1Y3Rpb24gKHJlYWxseSBqdXN0IGFuIGVsYWJvcmF0ZVxuICogd2F5IHRvIHdyaXRlICdhcycpLlxuICovXG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCcmFuZGVkPEEgZXh0ZW5kcyBCcmFuZGVkPGFueSwgYW55Pj4odmFsdWU6IFR5cGVVbmRlcmx5aW5nQnJhbmQ8QT4pOiBBIHtcbiAgcmV0dXJuIHZhbHVlIGFzIEE7XG59XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuXG50eXBlIFR5cGVVbmRlcmx5aW5nQnJhbmQ8QT4gPSBBIGV4dGVuZHMgQnJhbmRlZDxpbmZlciBULCBhbnk+ID8gVCA6IG5ldmVyO1xuIl19