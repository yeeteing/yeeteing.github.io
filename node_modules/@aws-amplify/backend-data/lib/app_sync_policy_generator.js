import { Stack } from 'aws-cdk-lib';
import { Policy, PolicyStatement } from 'aws-cdk-lib/aws-iam';
/**
 * Generates policies for accessing an AppSync GraphQL API
 */
export class AppSyncPolicyGenerator {
    graphqlApi;
    modelIntrospectionSchemaArn;
    stack;
    policyPrefix = 'GraphqlAccessPolicy';
    policyCount = 1;
    /**
     * Initialize with the GraphqlAPI that the policies will be scoped to
     */
    constructor(graphqlApi, modelIntrospectionSchemaArn) {
        this.graphqlApi = graphqlApi;
        this.modelIntrospectionSchemaArn = modelIntrospectionSchemaArn;
        this.stack = Stack.of(graphqlApi);
    }
    /**
     * Generates a policy that grants GraphQL data-plane access to the provided actions
     *
     * The naming is a bit wonky here because the IAM action is always "appsync:GraphQL".
     * The input "action" maps to the "type" in the resource name part of the ARN which is "Query", "Mutation" or "Subscription"
     */
    generateGraphqlAccessPolicy(actions) {
        const resources = actions
            // convert from actions to GraphQL Type
            .map((action) => actionToTypeMap[action])
            // convert Type to resourceName
            .map((type) => [this.graphqlApi.arn, 'types', type, '*'].join('/'));
        const statements = [
            new PolicyStatement({
                actions: ['appsync:GraphQL'],
                resources,
            }),
        ];
        if (this.modelIntrospectionSchemaArn) {
            statements.push(new PolicyStatement({
                actions: ['s3:GetObject'],
                resources: [this.modelIntrospectionSchemaArn],
            }));
        }
        return new Policy(this.stack, `${this.policyPrefix}${this.policyCount++}`, {
            statements,
        });
    }
}
const actionToTypeMap = {
    query: 'Query',
    mutate: 'Mutation',
    listen: 'Subscription',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX3N5bmNfcG9saWN5X2dlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcHBfc3luY19wb2xpY3lfZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFcEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUk5RDs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFRZDtJQUNBO0lBUkYsS0FBSyxDQUFRO0lBQ2IsWUFBWSxHQUFHLHFCQUFxQixDQUFDO0lBQzlDLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDeEI7O09BRUc7SUFDSCxZQUNtQixVQUF1QixFQUN2QiwyQkFBb0M7UUFEcEMsZUFBVSxHQUFWLFVBQVUsQ0FBYTtRQUN2QixnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQVM7UUFFckQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNILDJCQUEyQixDQUFDLE9BQTJCO1FBQ3JELE1BQU0sU0FBUyxHQUFHLE9BQU87WUFDdkIsdUNBQXVDO2FBQ3RDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3pDLCtCQUErQjthQUM5QixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUV0RSxNQUFNLFVBQVUsR0FBRztZQUNqQixJQUFJLGVBQWUsQ0FBQztnQkFDbEIsT0FBTyxFQUFFLENBQUMsaUJBQWlCLENBQUM7Z0JBQzVCLFNBQVM7YUFDVixDQUFDO1NBQ0gsQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7WUFDckMsVUFBVSxDQUFDLElBQUksQ0FDYixJQUFJLGVBQWUsQ0FBQztnQkFDbEIsT0FBTyxFQUFFLENBQUMsY0FBYyxDQUFDO2dCQUN6QixTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUM7YUFDOUMsQ0FBQyxDQUNILENBQUM7UUFDSixDQUFDO1FBRUQsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsRUFBRTtZQUN6RSxVQUFVO1NBQ1gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBRUQsTUFBTSxlQUFlLEdBQXFDO0lBQ3hELEtBQUssRUFBRSxPQUFPO0lBQ2QsTUFBTSxFQUFFLFVBQVU7SUFDbEIsTUFBTSxFQUFFLGNBQWM7Q0FDdkIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgSUdyYXBocWxBcGkgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtYXBwc3luYyc7XG5pbXBvcnQgeyBQb2xpY3ksIFBvbGljeVN0YXRlbWVudCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuXG5leHBvcnQgdHlwZSBBcHBTeW5jQXBpQWN0aW9uID0gJ3F1ZXJ5JyB8ICdtdXRhdGUnIHwgJ2xpc3Rlbic7XG5cbi8qKlxuICogR2VuZXJhdGVzIHBvbGljaWVzIGZvciBhY2Nlc3NpbmcgYW4gQXBwU3luYyBHcmFwaFFMIEFQSVxuICovXG5leHBvcnQgY2xhc3MgQXBwU3luY1BvbGljeUdlbmVyYXRvciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhY2s6IFN0YWNrO1xuICBwcml2YXRlIHJlYWRvbmx5IHBvbGljeVByZWZpeCA9ICdHcmFwaHFsQWNjZXNzUG9saWN5JztcbiAgcHJpdmF0ZSBwb2xpY3lDb3VudCA9IDE7XG4gIC8qKlxuICAgKiBJbml0aWFsaXplIHdpdGggdGhlIEdyYXBocWxBUEkgdGhhdCB0aGUgcG9saWNpZXMgd2lsbCBiZSBzY29wZWQgdG9cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ3JhcGhxbEFwaTogSUdyYXBocWxBcGksXG4gICAgcHJpdmF0ZSByZWFkb25seSBtb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBcm4/OiBzdHJpbmcsXG4gICkge1xuICAgIHRoaXMuc3RhY2sgPSBTdGFjay5vZihncmFwaHFsQXBpKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgcG9saWN5IHRoYXQgZ3JhbnRzIEdyYXBoUUwgZGF0YS1wbGFuZSBhY2Nlc3MgdG8gdGhlIHByb3ZpZGVkIGFjdGlvbnNcbiAgICpcbiAgICogVGhlIG5hbWluZyBpcyBhIGJpdCB3b25reSBoZXJlIGJlY2F1c2UgdGhlIElBTSBhY3Rpb24gaXMgYWx3YXlzIFwiYXBwc3luYzpHcmFwaFFMXCIuXG4gICAqIFRoZSBpbnB1dCBcImFjdGlvblwiIG1hcHMgdG8gdGhlIFwidHlwZVwiIGluIHRoZSByZXNvdXJjZSBuYW1lIHBhcnQgb2YgdGhlIEFSTiB3aGljaCBpcyBcIlF1ZXJ5XCIsIFwiTXV0YXRpb25cIiBvciBcIlN1YnNjcmlwdGlvblwiXG4gICAqL1xuICBnZW5lcmF0ZUdyYXBocWxBY2Nlc3NQb2xpY3koYWN0aW9uczogQXBwU3luY0FwaUFjdGlvbltdKSB7XG4gICAgY29uc3QgcmVzb3VyY2VzID0gYWN0aW9uc1xuICAgICAgLy8gY29udmVydCBmcm9tIGFjdGlvbnMgdG8gR3JhcGhRTCBUeXBlXG4gICAgICAubWFwKChhY3Rpb24pID0+IGFjdGlvblRvVHlwZU1hcFthY3Rpb25dKVxuICAgICAgLy8gY29udmVydCBUeXBlIHRvIHJlc291cmNlTmFtZVxuICAgICAgLm1hcCgodHlwZSkgPT4gW3RoaXMuZ3JhcGhxbEFwaS5hcm4sICd0eXBlcycsIHR5cGUsICcqJ10uam9pbignLycpKTtcblxuICAgIGNvbnN0IHN0YXRlbWVudHMgPSBbXG4gICAgICBuZXcgUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgYWN0aW9uczogWydhcHBzeW5jOkdyYXBoUUwnXSxcbiAgICAgICAgcmVzb3VyY2VzLFxuICAgICAgfSksXG4gICAgXTtcblxuICAgIGlmICh0aGlzLm1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFybikge1xuICAgICAgc3RhdGVtZW50cy5wdXNoKFxuICAgICAgICBuZXcgUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgICBhY3Rpb25zOiBbJ3MzOkdldE9iamVjdCddLFxuICAgICAgICAgIHJlc291cmNlczogW3RoaXMubW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQXJuXSxcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUG9saWN5KHRoaXMuc3RhY2ssIGAke3RoaXMucG9saWN5UHJlZml4fSR7dGhpcy5wb2xpY3lDb3VudCsrfWAsIHtcbiAgICAgIHN0YXRlbWVudHMsXG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgYWN0aW9uVG9UeXBlTWFwOiBSZWNvcmQ8QXBwU3luY0FwaUFjdGlvbiwgc3RyaW5nPiA9IHtcbiAgcXVlcnk6ICdRdWVyeScsXG4gIG11dGF0ZTogJ011dGF0aW9uJyxcbiAgbGlzdGVuOiAnU3Vic2NyaXB0aW9uJyxcbn07XG4iXX0=