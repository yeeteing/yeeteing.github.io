import { z } from 'zod';
export type TypedConfigurationFile<T> = {
    read: () => Promise<T>;
    write: (data: T) => Promise<void>;
    delete: () => Promise<void>;
};
export type TypedConfigurationFileName = 'notices_metadata.json' | 'notices_acknowledgments.json';
/**
 * Instantiates TypedConfigurationFile
 */
export declare class TypedConfigurationFileFactory {
    private readonly files;
    /**
     * initialized empty map of TypedConfigurationFile;
     */
    constructor();
    /**
     * Returns a TypedConfigurationFile
     */
    getInstance: <T extends z.ZodTypeAny>(fileName: TypedConfigurationFileName, schema: T, defaultValue: z.infer<T>) => TypedConfigurationFile<z.infer<T>>;
}
export declare const typedConfigurationFileFactory: TypedConfigurationFileFactory;
//# sourceMappingURL=typed_configuration_file_factory.d.ts.map