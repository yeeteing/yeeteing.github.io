"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleConversationTurnEvent = exports.ConversationTurnExecutor = void 0;
const conversation_turn_response_sender_js_1 = require("./conversation_turn_response_sender.js");
const bedrock_converse_adapter_js_1 = require("./bedrock_converse_adapter.js");
const lazy_1 = require("./lazy");
/**
 * This class is responsible for orchestrating conversation turn execution.
 * The conversation turn consist of:
 * 1. Accepting an event that is coming from conversational route resolvers in AppSync.
 * 2. Interacting with AWS Bedrock to produce response.
 * 3. Send response back to AppSync in a form of mutation.
 */
class ConversationTurnExecutor {
    /**
     * Creates conversation turn executor.
     */
    constructor(event, additionalTools, 
    // We're deferring dependency initialization here so that we can capture all validation errors.
    responseSender = new lazy_1.Lazy(() => new conversation_turn_response_sender_js_1.ConversationTurnResponseSender(event)), bedrockConverseAdapter = new lazy_1.Lazy(() => new bedrock_converse_adapter_js_1.BedrockConverseAdapter(event, additionalTools)), logger = console) {
        this.event = event;
        this.responseSender = responseSender;
        this.bedrockConverseAdapter = bedrockConverseAdapter;
        this.logger = logger;
        this.execute = async () => {
            try {
                this.logger.log(`Handling conversation turn event, currentMessageId=${this.event.currentMessageId}, conversationId=${this.event.conversationId}`);
                this.logger.debug('Event received:', this.event);
                if (this.event.streamResponse) {
                    const chunks = this.bedrockConverseAdapter.value.askBedrockStreaming();
                    for await (const chunk of chunks) {
                        await this.responseSender.value.sendResponseChunk(chunk);
                    }
                }
                else {
                    const assistantResponse = await this.bedrockConverseAdapter.value.askBedrock();
                    await this.responseSender.value.sendResponse(assistantResponse);
                }
                this.logger.log(`Conversation turn event handled successfully, currentMessageId=${this.event.currentMessageId}, conversationId=${this.event.conversationId}`);
            }
            catch (e) {
                this.logger.error(`Failed to handle conversation turn event, currentMessageId=${this.event.currentMessageId}, conversationId=${this.event.conversationId}`, e);
                await this.tryForwardError(e);
                // Propagate error to mark lambda execution as failed in metrics.
                throw e;
            }
        };
        this.tryForwardError = async (e) => {
            try {
                let errorType = 'UnknownError';
                let message;
                if (e instanceof Error) {
                    errorType = e.name;
                    message = e.message;
                }
                else {
                    message = JSON.stringify(e);
                }
                await this.responseSender.value.sendErrors([{ errorType, message }]);
            }
            catch (e) {
                // Best effort, only log the fact that we tried to send error back to AppSync.
                this.logger.warn('Failed to send error mutation', e);
            }
        };
    }
}
exports.ConversationTurnExecutor = ConversationTurnExecutor;
/**
 * This function handles a conversation turn event that is coming from
 * AppSync instance with conversational routes defined and sends response back.
 */
const handleConversationTurnEvent = async (event, 
// This is by design, so that tools with different input types can be added
// to single arrays. Downstream code doesn't use these types.
// eslint-disable-next-line @typescript-eslint/no-explicit-any
props) => {
    var _a;
    await new ConversationTurnExecutor(event, (_a = props === null || props === void 0 ? void 0 : props.tools) !== null && _a !== void 0 ? _a : []).execute();
};
exports.handleConversationTurnEvent = handleConversationTurnEvent;
//# sourceMappingURL=data:application/json;base64,