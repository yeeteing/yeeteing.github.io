import { Database } from '@cdklabs/tskb';
import { IsAugmentedResource, ResourceAugmentation } from './augmentations';
import { DimensionSet, Metric, ResourceHasDimensionSet, ServiceHasDimensionSet, UsesDimensionSet, ResourceHasMetric, ServiceHasMetric } from './metrics';
import { Resource, Service, TypeDefinition, PropertyType, Region, HasResource, RegionHasResource, RegionHasService, UsesType } from './resource';
export declare function emptyDatabase(): Database<{
    resource: import("@cdklabs/tskb").EntityCollection<Resource, {
        cloudFormationType: import("@cdklabs/tskb").EntityIndex<Resource, string>;
    }>;
    region: import("@cdklabs/tskb").EntityCollection<Region, {
        name: import("@cdklabs/tskb").EntityIndex<Region, string>;
    }>;
    service: import("@cdklabs/tskb").EntityCollection<Service, {
        name: import("@cdklabs/tskb").EntityIndex<Service, string>;
        cloudFormationNamespace: import("@cdklabs/tskb").EntityIndex<Service, string>;
    }>;
    typeDefinition: import("@cdklabs/tskb").EntityCollection<TypeDefinition, {}>;
    augmentations: import("@cdklabs/tskb").EntityCollection<ResourceAugmentation, {}>;
    metric: import("@cdklabs/tskb").EntityCollection<Metric, {
        name: import("@cdklabs/tskb").EntityIndex<Metric, string>;
        namespace: import("@cdklabs/tskb").EntityIndex<Metric, string>;
        dedupKey: import("@cdklabs/tskb").EntityIndex<Metric, string>;
    }>;
    dimensionSet: import("@cdklabs/tskb").EntityCollection<DimensionSet, {
        dedupKey: import("@cdklabs/tskb").EntityIndex<DimensionSet, string>;
    }>;
}, {
    hasResource: import("@cdklabs/tskb").RelationshipCollection<HasResource>;
    regionHasResource: import("@cdklabs/tskb").RelationshipCollection<RegionHasResource>;
    regionHasService: import("@cdklabs/tskb").RelationshipCollection<RegionHasService>;
    usesType: import("@cdklabs/tskb").RelationshipCollection<UsesType>;
    isAugmented: import("@cdklabs/tskb").RelationshipCollection<IsAugmentedResource>;
    usesDimensionSet: import("@cdklabs/tskb").RelationshipCollection<UsesDimensionSet>;
    resourceHasMetric: import("@cdklabs/tskb").RelationshipCollection<ResourceHasMetric>;
    serviceHasMetric: import("@cdklabs/tskb").RelationshipCollection<ServiceHasMetric>;
    resourceHasDimensionSet: import("@cdklabs/tskb").RelationshipCollection<ResourceHasDimensionSet>;
    serviceHasDimensionSet: import("@cdklabs/tskb").RelationshipCollection<ServiceHasDimensionSet>;
}>;
export declare function loadDatabase(pathToDb: string): Promise<Database<{
    resource: import("@cdklabs/tskb").EntityCollection<Resource, {
        cloudFormationType: import("@cdklabs/tskb").EntityIndex<Resource, string>;
    }>;
    region: import("@cdklabs/tskb").EntityCollection<Region, {
        name: import("@cdklabs/tskb").EntityIndex<Region, string>;
    }>;
    service: import("@cdklabs/tskb").EntityCollection<Service, {
        name: import("@cdklabs/tskb").EntityIndex<Service, string>;
        cloudFormationNamespace: import("@cdklabs/tskb").EntityIndex<Service, string>;
    }>;
    typeDefinition: import("@cdklabs/tskb").EntityCollection<TypeDefinition, {}>;
    augmentations: import("@cdklabs/tskb").EntityCollection<ResourceAugmentation, {}>;
    metric: import("@cdklabs/tskb").EntityCollection<Metric, {
        name: import("@cdklabs/tskb").EntityIndex<Metric, string>;
        namespace: import("@cdklabs/tskb").EntityIndex<Metric, string>;
        dedupKey: import("@cdklabs/tskb").EntityIndex<Metric, string>;
    }>;
    dimensionSet: import("@cdklabs/tskb").EntityCollection<DimensionSet, {
        dedupKey: import("@cdklabs/tskb").EntityIndex<DimensionSet, string>;
    }>;
}, {
    hasResource: import("@cdklabs/tskb").RelationshipCollection<HasResource>;
    regionHasResource: import("@cdklabs/tskb").RelationshipCollection<RegionHasResource>;
    regionHasService: import("@cdklabs/tskb").RelationshipCollection<RegionHasService>;
    usesType: import("@cdklabs/tskb").RelationshipCollection<UsesType>;
    isAugmented: import("@cdklabs/tskb").RelationshipCollection<IsAugmentedResource>;
    usesDimensionSet: import("@cdklabs/tskb").RelationshipCollection<UsesDimensionSet>;
    resourceHasMetric: import("@cdklabs/tskb").RelationshipCollection<ResourceHasMetric>;
    serviceHasMetric: import("@cdklabs/tskb").RelationshipCollection<ServiceHasMetric>;
    resourceHasDimensionSet: import("@cdklabs/tskb").RelationshipCollection<ResourceHasDimensionSet>;
    serviceHasDimensionSet: import("@cdklabs/tskb").RelationshipCollection<ServiceHasDimensionSet>;
}>>;
export type SpecDatabase = ReturnType<typeof emptyDatabase>;
/**
 * Helpers for working with a SpecDatabase
 */
export declare class RichSpecDatabase {
    private readonly db;
    constructor(db: SpecDatabase);
    /**
     * Find all resources of a given type
     */
    resourceByType(cfnType: string, operation?: string): Resource;
    /**
     * All type definitions used by a certain resource
     */
    resourceTypeDefs(cfnType: string): readonly TypeDefinition[];
    /**
     * Find a type definition from a given property type
     */
    tryFindDef(type: PropertyType): TypeDefinition | undefined;
}
