import semver from 'semver';
import { hideBin } from 'yargs/helpers';
/**
 * Evaluates notice predicates.
 */
export class NoticePredicatesEvaluator {
    packageManagerController;
    _process;
    dependencies;
    /**
     * Creates notice predicates evaluator.
     */
    constructor(packageManagerController, _process = process) {
        this.packageManagerController = packageManagerController;
        this._process = _process;
    }
    evaluate = async (notice, opts) => {
        for (const predicate of notice.predicates) {
            switch (predicate.type) {
                case 'nodeVersion':
                    if (!this.evaluateNodeVersion(predicate.versionRange)) {
                        return false;
                    }
                    break;
                case 'osFamily':
                    if (!this.evaluateOsFamily(predicate.osFamily)) {
                        return false;
                    }
                    break;
                case 'backendComponent':
                    // TODO out of scope for now due to complexity.
                    // Detecting backend components could be accomplished by:
                    // 1. Inspecting outputs file. (Not ideal, file is available only after successful deployment).
                    // 2. Inspecting cdk.out assembly (Does not require deployment, but relies on assembly format).
                    // 3. Have synthesis leave additional file into .amplify that we can read. (We control everything).
                    // 4. Have in memory ability to record information about verticals (Similar to 3 but requires integration with Toolkit to go first to spike it).
                    break;
                case 'command':
                    if (!this.evaluateCommand(predicate.command)) {
                        return false;
                    }
                    break;
                case 'errorMessage':
                    if (!this.evaluateErrorMessage(predicate.errorMessage, opts?.error)) {
                        return false;
                    }
                    break;
                case 'packageVersion':
                    if (!(await this.evaluatePackageVersion(predicate.packageName, predicate.versionRange))) {
                        return false;
                    }
                    break;
            }
        }
        return true;
    };
    evaluateCommand = (expectedCommand) => {
        const command = hideBin(this._process.argv)[0];
        return command === expectedCommand;
    };
    evaluateOsFamily = (expectedOsFamily) => {
        switch (expectedOsFamily) {
            case 'windows':
                return this._process.platform === 'win32';
            case 'macos':
                return this._process.platform === 'darwin';
            case 'linux':
                return this._process.platform === 'linux';
        }
    };
    evaluateErrorMessage = (expectedErrorMessage, actualError) => {
        if (!actualError) {
            return false;
        }
        return actualError.message.includes(expectedErrorMessage);
    };
    evaluateNodeVersion = (versionRange) => {
        return semver.satisfies(this._process.version, versionRange);
    };
    evaluatePackageVersion = async (packageName, versionRange) => {
        const dependencies = await this.tryGetDependencies();
        if (dependencies) {
            const matchingPackage = dependencies.find((dependency) => dependency.name === packageName &&
                semver.satisfies(dependency.version, versionRange));
            return matchingPackage !== undefined;
        }
        return false;
    };
    tryGetDependencies = async () => {
        if (!this.dependencies) {
            this.dependencies =
                await this.packageManagerController.tryGetDependencies();
        }
        return this.dependencies;
    };
}
//# sourceMappingURL=data:application/json;base64,