"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.liftUndefined = exports.liftResult = exports.locateFailure = exports.chain = exports.using = exports.tryCatch = exports.assertSuccess = exports.errorFrom = exports.errorMessage = exports.unpackOr = exports.unpack = exports.isSuccess = exports.isFailure = exports.failure = void 0;
// Ensures you must use `fail()` to construct an instance of type Failure
const errorSym = Symbol('error');
function mkLocate(prefix) {
    const ret = (error) => failure(`${prefix}: ${error}`);
    ret.in = (prefix2) => mkLocate(`${prefix}: ${prefix2}`);
    ret.locate = locateFailure(prefix);
    return ret;
}
function failure(error) {
    return { [errorSym]: error };
}
exports.failure = failure;
failure.in = (prefix) => mkLocate(prefix);
failure.locate = (x) => x;
function isFailure(x) {
    return !!x && typeof x === 'object' && x[errorSym];
}
exports.isFailure = isFailure;
function isSuccess(x) {
    return !isFailure(x);
}
exports.isSuccess = isSuccess;
function unpack(x) {
    if (isFailure(x)) {
        throw new Error(`unpack: ${x[errorSym]}`);
    }
    return x;
}
exports.unpack = unpack;
function unpackOr(x, def) {
    return (isFailure(x) ? def : x);
}
exports.unpackOr = unpackOr;
function errorMessage(x) {
    return x[errorSym];
}
exports.errorMessage = errorMessage;
function errorFrom(x) {
    return new Error(errorMessage(x));
}
exports.errorFrom = errorFrom;
function assertSuccess(x) {
    if (isFailure(x)) {
        throw errorFrom(x);
    }
}
exports.assertSuccess = assertSuccess;
function tryCatch(failOrBlock, maybeBlock) {
    const block = (maybeBlock !== null && maybeBlock !== void 0 ? maybeBlock : failOrBlock);
    const f = (maybeBlock ? failOrBlock : failure);
    try {
        return block();
    }
    catch (e) {
        return f(`Error: ${e.message}\n${e.stack}`);
    }
}
exports.tryCatch = tryCatch;
function using(value, block) {
    if (isFailure(value)) {
        return value;
    }
    return block(value);
}
exports.using = using;
function chain(value, ...fns) {
    for (const fn of fns) {
        if (isFailure(value)) {
            return value;
        }
        value = fn(value);
    }
    return value;
}
exports.chain = chain;
/* eslint-enable prettier/prettier */
/**
 * Make a function that will prepend a prefix to error messages
 *
 * This is one way to be specific about the location where errors originate, by prefixing
 * errors as the call stack unwinds.
 *
 * A different method is to pass in a modified failure function using `failure.in(...)`,
 * to build the error message as the call stack deepens.
 */
function locateFailure(prefix) {
    return (x) => (isFailure(x) ? failure(`${prefix}: ${x[errorSym]}`) : x);
}
exports.locateFailure = locateFailure;
function liftResult(xs) {
    const failures = Array.isArray(xs) ? xs.filter(isFailure) : Object.values(xs).filter(isFailure);
    if (failures.length > 0) {
        return failure(failures.map(errorMessage).join(', '));
    }
    return xs;
}
exports.liftResult = liftResult;
function liftUndefined(valueOrFunction) {
    if (typeof valueOrFunction === 'function') {
        return (...args) => {
            const value = valueOrFunction(...args);
            return value !== undefined ? value : failure('value is undefined');
        };
    }
    return valueOrFunction !== undefined ? valueOrFunction : failure('value is undefined');
}
exports.liftUndefined = liftUndefined;
//# sourceMappingURL=data:application/json;base64,