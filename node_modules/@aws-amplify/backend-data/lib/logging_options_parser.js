import { LogLevelConverter, LogRetentionConverter, } from '@aws-amplify/platform-core/cdk';
const DEFAULT_EXCLUDE_VERBOSE_CONTENT = true;
const DEFAULT_LEVEL = 'none';
const DEFAULT_RETENTION = '1 week';
/**
 * Converts logging options to CDK.
 */
export const convertLoggingOptionsToCDK = (loggingOptions) => {
    if (!loggingOptions) {
        return undefined;
    }
    // Determine if we should apply default configuration
    const shouldApplyDefaultLogging = loggingOptions === true ||
        (typeof loggingOptions === 'object' &&
            Object.keys(loggingOptions).length === 0);
    // Extract fields from the user's loggingOptions (if it's an object)
    const config = typeof loggingOptions === 'object' ? loggingOptions : {};
    const excludeVerboseContent = shouldApplyDefaultLogging
        ? DEFAULT_EXCLUDE_VERBOSE_CONTENT
        : (config.excludeVerboseContent ?? DEFAULT_EXCLUDE_VERBOSE_CONTENT);
    // For level and retention, we rely on converters. If config is empty or logging is true, use defaults.
    const dataLogLevel = shouldApplyDefaultLogging
        ? DEFAULT_LEVEL
        : (config.fieldLogLevel ?? DEFAULT_LEVEL);
    const logRetention = shouldApplyDefaultLogging
        ? DEFAULT_RETENTION
        : (config.retention ?? DEFAULT_RETENTION);
    const fieldLogLevel = new LogLevelConverter().toCDKAppsyncFieldLogLevel(dataLogLevel);
    const retention = new LogRetentionConverter().toCDKRetentionDays(logRetention);
    return {
        excludeVerboseContent,
        fieldLogLevel,
        retention,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2luZ19vcHRpb25zX3BhcnNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sb2dnaW5nX29wdGlvbnNfcGFyc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIscUJBQXFCLEdBQ3RCLE1BQU0sZ0NBQWdDLENBQUM7QUFXeEMsTUFBTSwrQkFBK0IsR0FBWSxJQUFJLENBQUM7QUFDdEQsTUFBTSxhQUFhLEdBQWlCLE1BQU0sQ0FBQztBQUMzQyxNQUFNLGlCQUFpQixHQUFpQixRQUFRLENBQUM7QUFFakQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwwQkFBMEIsR0FBRyxDQUN4QyxjQUE4QyxFQUNmLEVBQUU7SUFDakMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3BCLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxxREFBcUQ7SUFDckQsTUFBTSx5QkFBeUIsR0FDN0IsY0FBYyxLQUFLLElBQUk7UUFDdkIsQ0FBQyxPQUFPLGNBQWMsS0FBSyxRQUFRO1lBQ2pDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRTlDLG9FQUFvRTtJQUNwRSxNQUFNLE1BQU0sR0FDVixPQUFPLGNBQWMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBRTNELE1BQU0scUJBQXFCLEdBQUcseUJBQXlCO1FBQ3JELENBQUMsQ0FBQywrQkFBK0I7UUFDakMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLHFCQUFxQixJQUFJLCtCQUErQixDQUFDLENBQUM7SUFFdEUsdUdBQXVHO0lBQ3ZHLE1BQU0sWUFBWSxHQUFHLHlCQUF5QjtRQUM1QyxDQUFDLENBQUMsYUFBYTtRQUNmLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUksYUFBYSxDQUFDLENBQUM7SUFFNUMsTUFBTSxZQUFZLEdBQUcseUJBQXlCO1FBQzVDLENBQUMsQ0FBQyxpQkFBaUI7UUFDbkIsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxpQkFBaUIsQ0FBQyxDQUFDO0lBRTVDLE1BQU0sYUFBYSxHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQyx5QkFBeUIsQ0FDckUsWUFBWSxDQUNaLENBQUM7SUFDSCxNQUFNLFNBQVMsR0FBRyxJQUFJLHFCQUFxQixFQUFFLENBQUMsa0JBQWtCLENBQzlELFlBQVksQ0FDWixDQUFDO0lBRUgsT0FBTztRQUNMLHFCQUFxQjtRQUNyQixhQUFhO1FBQ2IsU0FBUztLQUNWLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEYXRhTG9nTGV2ZWwsIERhdGFMb2dnaW5nT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHtcbiAgTG9nTGV2ZWxDb252ZXJ0ZXIsXG4gIExvZ1JldGVudGlvbkNvbnZlcnRlcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUvY2RrJztcbmltcG9ydCB7IFJldGVudGlvbkRheXMgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbG9ncyc7XG5pbXBvcnQgeyBGaWVsZExvZ0xldmVsIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWFwcHN5bmMnO1xuaW1wb3J0IHsgTG9nUmV0ZW50aW9uIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5cbmV4cG9ydCB0eXBlIENES0xvZ2dpbmdPcHRpb25zID0ge1xuICBleGNsdWRlVmVyYm9zZUNvbnRlbnQ6IGJvb2xlYW47XG4gIGZpZWxkTG9nTGV2ZWw6IEZpZWxkTG9nTGV2ZWw7XG4gIHJldGVudGlvbjogUmV0ZW50aW9uRGF5cztcbn07XG5cbmNvbnN0IERFRkFVTFRfRVhDTFVERV9WRVJCT1NFX0NPTlRFTlQ6IGJvb2xlYW4gPSB0cnVlO1xuY29uc3QgREVGQVVMVF9MRVZFTDogRGF0YUxvZ0xldmVsID0gJ25vbmUnO1xuY29uc3QgREVGQVVMVF9SRVRFTlRJT046IExvZ1JldGVudGlvbiA9ICcxIHdlZWsnO1xuXG4vKipcbiAqIENvbnZlcnRzIGxvZ2dpbmcgb3B0aW9ucyB0byBDREsuXG4gKi9cbmV4cG9ydCBjb25zdCBjb252ZXJ0TG9nZ2luZ09wdGlvbnNUb0NESyA9IChcbiAgbG9nZ2luZ09wdGlvbnM6IERhdGFMb2dnaW5nT3B0aW9ucyB8IHVuZGVmaW5lZCxcbik6IENES0xvZ2dpbmdPcHRpb25zIHwgdW5kZWZpbmVkID0+IHtcbiAgaWYgKCFsb2dnaW5nT3B0aW9ucykge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBEZXRlcm1pbmUgaWYgd2Ugc2hvdWxkIGFwcGx5IGRlZmF1bHQgY29uZmlndXJhdGlvblxuICBjb25zdCBzaG91bGRBcHBseURlZmF1bHRMb2dnaW5nID1cbiAgICBsb2dnaW5nT3B0aW9ucyA9PT0gdHJ1ZSB8fFxuICAgICh0eXBlb2YgbG9nZ2luZ09wdGlvbnMgPT09ICdvYmplY3QnICYmXG4gICAgICBPYmplY3Qua2V5cyhsb2dnaW5nT3B0aW9ucykubGVuZ3RoID09PSAwKTtcblxuICAvLyBFeHRyYWN0IGZpZWxkcyBmcm9tIHRoZSB1c2VyJ3MgbG9nZ2luZ09wdGlvbnMgKGlmIGl0J3MgYW4gb2JqZWN0KVxuICBjb25zdCBjb25maWc6IERhdGFMb2dnaW5nT3B0aW9ucyA9XG4gICAgdHlwZW9mIGxvZ2dpbmdPcHRpb25zID09PSAnb2JqZWN0JyA/IGxvZ2dpbmdPcHRpb25zIDoge307XG5cbiAgY29uc3QgZXhjbHVkZVZlcmJvc2VDb250ZW50ID0gc2hvdWxkQXBwbHlEZWZhdWx0TG9nZ2luZ1xuICAgID8gREVGQVVMVF9FWENMVURFX1ZFUkJPU0VfQ09OVEVOVFxuICAgIDogKGNvbmZpZy5leGNsdWRlVmVyYm9zZUNvbnRlbnQgPz8gREVGQVVMVF9FWENMVURFX1ZFUkJPU0VfQ09OVEVOVCk7XG5cbiAgLy8gRm9yIGxldmVsIGFuZCByZXRlbnRpb24sIHdlIHJlbHkgb24gY29udmVydGVycy4gSWYgY29uZmlnIGlzIGVtcHR5IG9yIGxvZ2dpbmcgaXMgdHJ1ZSwgdXNlIGRlZmF1bHRzLlxuICBjb25zdCBkYXRhTG9nTGV2ZWwgPSBzaG91bGRBcHBseURlZmF1bHRMb2dnaW5nXG4gICAgPyBERUZBVUxUX0xFVkVMXG4gICAgOiAoY29uZmlnLmZpZWxkTG9nTGV2ZWwgPz8gREVGQVVMVF9MRVZFTCk7XG5cbiAgY29uc3QgbG9nUmV0ZW50aW9uID0gc2hvdWxkQXBwbHlEZWZhdWx0TG9nZ2luZ1xuICAgID8gREVGQVVMVF9SRVRFTlRJT05cbiAgICA6IChjb25maWcucmV0ZW50aW9uID8/IERFRkFVTFRfUkVURU5USU9OKTtcblxuICBjb25zdCBmaWVsZExvZ0xldmVsID0gbmV3IExvZ0xldmVsQ29udmVydGVyKCkudG9DREtBcHBzeW5jRmllbGRMb2dMZXZlbChcbiAgICBkYXRhTG9nTGV2ZWwsXG4gICkhO1xuICBjb25zdCByZXRlbnRpb24gPSBuZXcgTG9nUmV0ZW50aW9uQ29udmVydGVyKCkudG9DREtSZXRlbnRpb25EYXlzKFxuICAgIGxvZ1JldGVudGlvbixcbiAgKSE7XG5cbiAgcmV0dXJuIHtcbiAgICBleGNsdWRlVmVyYm9zZUNvbnRlbnQsXG4gICAgZmllbGRMb2dMZXZlbCxcbiAgICByZXRlbnRpb24sXG4gIH07XG59O1xuIl19