// This is a terrible, horrible, no good, very bad hack to invoke the SSM parameter resolution code into the lambda function
// If we need to put anything else here, and I mean ANYTHING, then we need a different strategy
// we can't type check this file because we can't import the internalAmplifyFunctionResolveSsmParams symbol without creating a duplicate symbol in the bundled lambda code
// eslint-disable-next-line @typescript-eslint/ban-ts-comment, spellcheck/spell-checker
// @ts-nocheck
await internalAmplifyFunctionResolveSsmParams();
const SSM_PARAMETER_REFRESH_MS = 1000 * 60;
setInterval(
// eslint-disable-next-line @typescript-eslint/no-misused-promises
async () => {
    try {
        await internalAmplifyFunctionResolveSsmParams();
    }
    catch (error) {
        try {
            // Attempt to log error
            console.debug(error);
            // eslint-disable-next-line @aws-amplify/amplify-backend-rules/no-empty-catch
        }
        catch {
            // Do nothing if logging fails
        }
    }
}, SSM_PARAMETER_REFRESH_MS);
export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW52b2tlX3NzbV9zaGltLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xhbWJkYS1zaGltcy9pbnZva2Vfc3NtX3NoaW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNEhBQTRIO0FBQzVILCtGQUErRjtBQUUvRiwwS0FBMEs7QUFDMUssdUZBQXVGO0FBQ3ZGLGNBQWM7QUFDZCxNQUFNLHVDQUF1QyxFQUFFLENBQUM7QUFFaEQsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBRTNDLFdBQVc7QUFDVCxrRUFBa0U7QUFDbEUsS0FBSyxJQUFJLEVBQUU7SUFDVCxJQUFJLENBQUM7UUFDSCxNQUFNLHVDQUF1QyxFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUM7WUFDSCx1QkFBdUI7WUFDdkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQiw2RUFBNkU7UUFDL0UsQ0FBQztRQUFDLE1BQU0sQ0FBQztZQUNQLDhCQUE4QjtRQUNoQyxDQUFDO0lBQ0gsQ0FBQztBQUNILENBQUMsRUFDRCx3QkFBd0IsQ0FDekIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaXMgYSB0ZXJyaWJsZSwgaG9ycmlibGUsIG5vIGdvb2QsIHZlcnkgYmFkIGhhY2sgdG8gaW52b2tlIHRoZSBTU00gcGFyYW1ldGVyIHJlc29sdXRpb24gY29kZSBpbnRvIHRoZSBsYW1iZGEgZnVuY3Rpb25cbi8vIElmIHdlIG5lZWQgdG8gcHV0IGFueXRoaW5nIGVsc2UgaGVyZSwgYW5kIEkgbWVhbiBBTllUSElORywgdGhlbiB3ZSBuZWVkIGEgZGlmZmVyZW50IHN0cmF0ZWd5XG5cbi8vIHdlIGNhbid0IHR5cGUgY2hlY2sgdGhpcyBmaWxlIGJlY2F1c2Ugd2UgY2FuJ3QgaW1wb3J0IHRoZSBpbnRlcm5hbEFtcGxpZnlGdW5jdGlvblJlc29sdmVTc21QYXJhbXMgc3ltYm9sIHdpdGhvdXQgY3JlYXRpbmcgYSBkdXBsaWNhdGUgc3ltYm9sIGluIHRoZSBidW5kbGVkIGxhbWJkYSBjb2RlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50LCBzcGVsbGNoZWNrL3NwZWxsLWNoZWNrZXJcbi8vIEB0cy1ub2NoZWNrXG5hd2FpdCBpbnRlcm5hbEFtcGxpZnlGdW5jdGlvblJlc29sdmVTc21QYXJhbXMoKTtcblxuY29uc3QgU1NNX1BBUkFNRVRFUl9SRUZSRVNIX01TID0gMTAwMCAqIDYwO1xuXG5zZXRJbnRlcnZhbChcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1taXN1c2VkLXByb21pc2VzXG4gIGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgaW50ZXJuYWxBbXBsaWZ5RnVuY3Rpb25SZXNvbHZlU3NtUGFyYW1zKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEF0dGVtcHQgdG8gbG9nIGVycm9yXG4gICAgICAgIGNvbnNvbGUuZGVidWcoZXJyb3IpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGF3cy1hbXBsaWZ5L2FtcGxpZnktYmFja2VuZC1ydWxlcy9uby1lbXB0eS1jYXRjaFxuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIC8vIERvIG5vdGhpbmcgaWYgbG9nZ2luZyBmYWlsc1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgU1NNX1BBUkFNRVRFUl9SRUZSRVNIX01TLFxuKTtcbiJdfQ==