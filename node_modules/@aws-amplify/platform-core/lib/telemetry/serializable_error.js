"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerializableError = void 0;
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const os_1 = require("os");
/**
 * Wrapper around Error for serialization for usage metrics
 */
class SerializableError {
    name;
    message;
    stack;
    // breakdown of filePathRegex:
    // (file:/+)? -> matches optional file url prefix
    // homedir()/process.cwd() -> users home directory or current working directory, replacing \ with /
    // [\\w.\\-_@\\\\/]+ -> matches nested directories and file name
    filePathRegex = new RegExp(`(file:/+)?(${(0, os_1.homedir)().replaceAll('\\', '/')}|${process.cwd().replaceAll('\\', '/')})[\\w.\\-_@\\\\/]+`, 'g');
    arnRegex = /arn:[a-z0-9][-.a-z0-9]{0,62}:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}/g;
    stackRegex = /amplify-[a-zA-Z0-9-]+/g;
    /**
     * constructor for SerializableError
     */
    constructor(error) {
        this.name =
            'code' in error && error.code
                ? this.sanitize(error.code)
                : error.name;
        this.message = this.anonymizePaths(this.sanitize(error.message));
        this.stack = error.stack
            ? this.anonymizePaths(this.sanitize(error.stack))
            : '';
    }
    anonymizePaths = (str) => {
        let result = str;
        const matches = [...result.matchAll(this.filePathRegex)];
        for (const match of matches) {
            result = result.replace(match[0], this.processPaths([match[0]])[0]);
        }
        return result;
    };
    processPaths = (paths) => {
        return paths.map((tracePath) => {
            let result = tracePath;
            if (this.isURLFilePath(result)) {
                result = (0, url_1.fileURLToPath)(result);
            }
            if (path_1.default.isAbsolute(result)) {
                return path_1.default.relative(process.cwd(), result);
            }
            return result;
        });
    };
    removeARN = (str) => {
        return str?.replace(this.arnRegex, '<escaped ARN>') ?? '';
    };
    removeStack = (str) => {
        return str?.replace(this.stackRegex, '<escaped stack>') ?? '';
    };
    sanitize = (str) => {
        let result = str;
        result = this.removeARN(result);
        result = this.removeStack(result);
        return result.replaceAll(/["❌]/g, '');
    };
    isURLFilePath = (path) => {
        try {
            new URL(path);
            return path.startsWith('file:');
        }
        catch {
            return false;
        }
    };
}
exports.SerializableError = SerializableError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXphYmxlX2Vycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RlbGVtZXRyeS9zZXJpYWxpemFibGVfZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLDZCQUFvQztBQUNwQywyQkFBNkI7QUFFN0I7O0dBRUc7QUFDSCxNQUFhLGlCQUFpQjtJQUM1QixJQUFJLENBQVM7SUFDYixPQUFPLENBQVM7SUFDaEIsS0FBSyxDQUFTO0lBRWQsOEJBQThCO0lBQzlCLGlEQUFpRDtJQUNqRCxtR0FBbUc7SUFDbkcsZ0VBQWdFO0lBQ3hELGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FDaEMsY0FBYyxJQUFBLFlBQU8sR0FBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLG9CQUFvQixFQUN4RyxHQUFHLENBQ0osQ0FBQztJQUNNLFFBQVEsR0FDZCxvSkFBb0osQ0FBQztJQUMvSSxVQUFVLEdBQUcsd0JBQXdCLENBQUM7SUFDOUM7O09BRUc7SUFDSCxZQUFZLEtBQVk7UUFDdEIsSUFBSSxDQUFDLElBQUk7WUFDUCxNQUFNLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJO2dCQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBYyxDQUFDO2dCQUNyQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLO1lBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2pELENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDVCxDQUFDO0lBRU8sY0FBYyxHQUFHLENBQUMsR0FBVyxFQUFVLEVBQUU7UUFDL0MsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLE1BQU0sT0FBTyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ3pELEtBQUssTUFBTSxLQUFLLElBQUksT0FBTyxFQUFFLENBQUM7WUFDNUIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEUsQ0FBQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztJQUVNLFlBQVksR0FBRyxDQUFDLEtBQWUsRUFBWSxFQUFFO1FBQ25ELE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQzdCLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQztZQUN2QixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztnQkFDL0IsTUFBTSxHQUFHLElBQUEsbUJBQWEsRUFBQyxNQUFNLENBQUMsQ0FBQztZQUNqQyxDQUFDO1lBQ0QsSUFBSSxjQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7Z0JBQzVCLE9BQU8sY0FBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDOUMsQ0FBQztZQUVELE9BQU8sTUFBTSxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0lBRU0sU0FBUyxHQUFHLENBQUMsR0FBWSxFQUFVLEVBQUU7UUFDM0MsT0FBTyxHQUFHLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVELENBQUMsQ0FBQztJQUVNLFdBQVcsR0FBRyxDQUFDLEdBQVksRUFBVSxFQUFFO1FBQzdDLE9BQU8sR0FBRyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2hFLENBQUMsQ0FBQztJQUVNLFFBQVEsR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFO1FBQ2pDLElBQUksTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUNqQixNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsQyxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQztJQUVNLGFBQWEsR0FBRyxDQUFDLElBQVksRUFBVyxFQUFFO1FBQ2hELElBQUksQ0FBQztZQUNILElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2QsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xDLENBQUM7UUFBQyxNQUFNLENBQUM7WUFDUCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7SUFDSCxDQUFDLENBQUM7Q0FDSDtBQTVFRCw4Q0E0RUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICd1cmwnO1xuaW1wb3J0IHsgaG9tZWRpciB9IGZyb20gJ29zJztcblxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCBFcnJvciBmb3Igc2VyaWFsaXphdGlvbiBmb3IgdXNhZ2UgbWV0cmljc1xuICovXG5leHBvcnQgY2xhc3MgU2VyaWFsaXphYmxlRXJyb3Ige1xuICBuYW1lOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgc3RhY2s6IHN0cmluZztcblxuICAvLyBicmVha2Rvd24gb2YgZmlsZVBhdGhSZWdleDpcbiAgLy8gKGZpbGU6LyspPyAtPiBtYXRjaGVzIG9wdGlvbmFsIGZpbGUgdXJsIHByZWZpeFxuICAvLyBob21lZGlyKCkvcHJvY2Vzcy5jd2QoKSAtPiB1c2VycyBob21lIGRpcmVjdG9yeSBvciBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LCByZXBsYWNpbmcgXFwgd2l0aCAvXG4gIC8vIFtcXFxcdy5cXFxcLV9AXFxcXFxcXFwvXSsgLT4gbWF0Y2hlcyBuZXN0ZWQgZGlyZWN0b3JpZXMgYW5kIGZpbGUgbmFtZVxuICBwcml2YXRlIGZpbGVQYXRoUmVnZXggPSBuZXcgUmVnRXhwKFxuICAgIGAoZmlsZTovKyk/KCR7aG9tZWRpcigpLnJlcGxhY2VBbGwoJ1xcXFwnLCAnLycpfXwke3Byb2Nlc3MuY3dkKCkucmVwbGFjZUFsbCgnXFxcXCcsICcvJyl9KVtcXFxcdy5cXFxcLV9AXFxcXFxcXFwvXStgLFxuICAgICdnJyxcbiAgKTtcbiAgcHJpdmF0ZSBhcm5SZWdleCA9XG4gICAgL2FybjpbYS16MC05XVstLmEtejAtOV17MCw2Mn06W0EtWmEtejAtOV1bQS1aYS16MC05Xy8uLV17MCw2Mn06W0EtWmEtejAtOV8vLi1dezAsNjN9OltBLVphLXowLTlfLy4tXXswLDYzfTpbQS1aYS16MC05XVtBLVphLXowLTk6Xy8rPSxALi1dezAsMTAyM30vZztcbiAgcHJpdmF0ZSBzdGFja1JlZ2V4ID0gL2FtcGxpZnktW2EtekEtWjAtOS1dKy9nO1xuICAvKipcbiAgICogY29uc3RydWN0b3IgZm9yIFNlcmlhbGl6YWJsZUVycm9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlcnJvcjogRXJyb3IpIHtcbiAgICB0aGlzLm5hbWUgPVxuICAgICAgJ2NvZGUnIGluIGVycm9yICYmIGVycm9yLmNvZGVcbiAgICAgICAgPyB0aGlzLnNhbml0aXplKGVycm9yLmNvZGUgYXMgc3RyaW5nKVxuICAgICAgICA6IGVycm9yLm5hbWU7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy5hbm9ueW1pemVQYXRocyh0aGlzLnNhbml0aXplKGVycm9yLm1lc3NhZ2UpKTtcbiAgICB0aGlzLnN0YWNrID0gZXJyb3Iuc3RhY2tcbiAgICAgID8gdGhpcy5hbm9ueW1pemVQYXRocyh0aGlzLnNhbml0aXplKGVycm9yLnN0YWNrKSlcbiAgICAgIDogJyc7XG4gIH1cblxuICBwcml2YXRlIGFub255bWl6ZVBhdGhzID0gKHN0cjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICBsZXQgcmVzdWx0ID0gc3RyO1xuICAgIGNvbnN0IG1hdGNoZXMgPSBbLi4ucmVzdWx0Lm1hdGNoQWxsKHRoaXMuZmlsZVBhdGhSZWdleCldO1xuICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UobWF0Y2hbMF0sIHRoaXMucHJvY2Vzc1BhdGhzKFttYXRjaFswXV0pWzBdKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBwcml2YXRlIHByb2Nlc3NQYXRocyA9IChwYXRoczogc3RyaW5nW10pOiBzdHJpbmdbXSA9PiB7XG4gICAgcmV0dXJuIHBhdGhzLm1hcCgodHJhY2VQYXRoKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0ID0gdHJhY2VQYXRoO1xuICAgICAgaWYgKHRoaXMuaXNVUkxGaWxlUGF0aChyZXN1bHQpKSB7XG4gICAgICAgIHJlc3VsdCA9IGZpbGVVUkxUb1BhdGgocmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXRoLmlzQWJzb2x1dGUocmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gcGF0aC5yZWxhdGl2ZShwcm9jZXNzLmN3ZCgpLCByZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICB9O1xuXG4gIHByaXZhdGUgcmVtb3ZlQVJOID0gKHN0cj86IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIHN0cj8ucmVwbGFjZSh0aGlzLmFyblJlZ2V4LCAnPGVzY2FwZWQgQVJOPicpID8/ICcnO1xuICB9O1xuXG4gIHByaXZhdGUgcmVtb3ZlU3RhY2sgPSAoc3RyPzogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gc3RyPy5yZXBsYWNlKHRoaXMuc3RhY2tSZWdleCwgJzxlc2NhcGVkIHN0YWNrPicpID8/ICcnO1xuICB9O1xuXG4gIHByaXZhdGUgc2FuaXRpemUgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgICBsZXQgcmVzdWx0ID0gc3RyO1xuICAgIHJlc3VsdCA9IHRoaXMucmVtb3ZlQVJOKHJlc3VsdCk7XG4gICAgcmVzdWx0ID0gdGhpcy5yZW1vdmVTdGFjayhyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQucmVwbGFjZUFsbCgvW1wi4p2MXS9nLCAnJyk7XG4gIH07XG5cbiAgcHJpdmF0ZSBpc1VSTEZpbGVQYXRoID0gKHBhdGg6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBuZXcgVVJMKHBhdGgpO1xuICAgICAgcmV0dXJuIHBhdGguc3RhcnRzV2l0aCgnZmlsZTonKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iXX0=