import { AmplifyFormRenderer, ModuleKind, ReactIndexStudioTemplateRenderer, ReactUtilsStudioTemplateRenderer, ScriptKind, ScriptTarget, getDeclarationFilename, } from '@aws-amplify/codegen-ui-react';
/**
 * Generates GraphQL-compatible forms in React by directly leveraging @aws-amplify/codegen-ui-react
 */
export class LocalGraphqlFormGenerator {
    schemaFetcher;
    renderOptions;
    resultBuilder;
    static defaultConfig = {
        module: ModuleKind.ES2020,
        target: ScriptTarget.ES2020,
        script: ScriptKind.JSX,
        renderTypeDeclarations: true,
    };
    /**
     * Instantiates a LocalGraphqlFormGenerator for a provided schema
     */
    constructor(schemaFetcher, renderOptions, resultBuilder) {
        this.schemaFetcher = schemaFetcher;
        this.renderOptions = renderOptions;
        this.resultBuilder = resultBuilder;
    }
    /**
     * Gets the react render config
     */
    get config() {
        return {
            module: ModuleKind.ES2020,
            target: ScriptTarget.ES2020,
            script: ScriptKind.JSX,
            includeUseClientDirective: true,
            renderTypeDeclarations: true,
            apiConfiguration: {
                dataApi: 'GraphQL',
                fragmentsFilePath: this.renderGraphqlPath('fragments'),
                mutationsFilePath: this.renderGraphqlPath('mutations'),
                queriesFilePath: this.renderGraphqlPath('queries'),
                subscriptionsFilePath: this.renderGraphqlPath('subscriptions'),
                typesFilePath: this.renderGraphqlPath('types'),
            },
            dependencies: {
                // Tell the renderer to generate amplify js v6 compatible code
                'aws-amplify': '^6.0.0',
            },
        };
    }
    generateIndexFile = (schemas) => {
        const { componentText, fileName } = this.createIndexFile(schemas);
        return {
            schemaName: 'AmplifyStudioIndexFile',
            componentText,
            fileName,
            declaration: undefined,
            error: undefined,
        };
    };
    generateForms = async (options) => {
        const dataSchema = await this.schemaFetcher();
        const filteredModels = this.getFilteredModels(dataSchema, options?.models);
        const filteredSchema = this.transformModelListToMap(filteredModels);
        const utilFile = this.generateUtilFile();
        const baseForms = this.generateBaseForms(filteredSchema);
        const indexFile = this.generateIndexFile(baseForms.map(({ name }) => ({
            name,
        })));
        dataSchema.models = Object.entries(dataSchema.models).reduce((prev, [key, value]) => {
            prev[key] = value;
            return prev;
        }, {});
        const forms = baseForms.reduce((prev, formSchema) => {
            const results = this.codegenForm(dataSchema, formSchema);
            results.forEach((result) => {
                prev[result.fileName] = result.componentText;
            });
            return prev;
        }, {});
        forms[utilFile.fileName] = utilFile.componentText;
        forms[indexFile.fileName] = indexFile.componentText;
        return this.resultBuilder(forms);
    };
    /**
     * reduces the dataSchema to a map of models
     */
    getModelMapForDataSchema = (dataSchema) => {
        return Object.entries(dataSchema.models).reduce((prev, [name, model]) => {
            if (!model.isJoinTable) {
                prev[name] = new Set(['create', 'update']);
            }
            return prev;
        }, {});
    };
    getSchema = (name, type) => ({
        name: `${name}${type === 'create' ? 'CreateForm' : 'UpdateForm'}`,
        formActionType: type,
        dataType: { dataSourceType: 'DataStore', dataTypeName: name },
        fields: {},
        sectionalElements: {},
        style: {},
        cta: {},
    });
    generateBaseForms = (modelMap) => {
        const schemas = [];
        Object.entries(modelMap).forEach(([name, set]) => {
            set.forEach((type) => schemas.push(this.getSchema(name, type)));
        });
        return schemas;
    };
    renderGraphqlPath = (submodule) => {
        const graphqlPath = `${this.renderOptions.graphqlDir}/${submodule}`;
        // if the path does not start with a leading ./ or ../, assume that the graphql folder is in the same directory relative to the ui, and prepend a `./`
        if (graphqlPath.startsWith('.')) {
            return graphqlPath;
        }
        return `./${graphqlPath}`;
    };
    createUiBuilderForm = (schema, dataSchema, formFeatureFlags) => {
        const renderer = new AmplifyFormRenderer(schema, dataSchema, this.config, formFeatureFlags);
        const { componentText, declaration } = renderer.renderComponentInternal();
        const files = [
            {
                componentText,
                fileName: renderer.fileName,
            },
        ];
        if (declaration) {
            files.push({
                componentText: declaration,
                fileName: getDeclarationFilename(renderer.fileName),
            });
        }
        return files;
    };
    filterModelsByName = (filteredModelNames, schemaModel) => {
        const lowerCaseModelKeys = new Set(Object.keys(schemaModel).map((k) => k.toLowerCase()));
        const modelEntries = Object.entries(schemaModel);
        return filteredModelNames.reduce((prev, model) => {
            if (lowerCaseModelKeys?.has(model.toLowerCase())) {
                const entry = modelEntries.find(([key]) => key.toLowerCase() === model.toLowerCase());
                if (!entry) {
                    // eslint-disable-next-line @aws-amplify/amplify-backend-rules/prefer-amplify-errors
                    throw new Error(`Could not find specified model ${model}`);
                }
                prev.push(entry);
                return prev;
            }
            // eslint-disable-next-line @aws-amplify/amplify-backend-rules/prefer-amplify-errors
            throw new Error(`Could not find specified model ${model}`);
        }, []);
    };
    codegenForm = (dataSchema, formSchema) => {
        return this.createUiBuilderForm(formSchema, dataSchema, {});
    };
    getFilteredModels = (dataSchema, filteredModelNames) => {
        const modelMap = this.getModelMapForDataSchema(dataSchema);
        const filteredModels = [];
        if (!filteredModelNames || !filteredModelNames?.length) {
            filteredModels.push(...Object.entries(modelMap));
        }
        else {
            filteredModels.push(...this.filterModelsByName(filteredModelNames, modelMap));
        }
        return filteredModels;
    };
    transformModelListToMap = (models) => {
        return models.reduce((prev, [key, value]) => ({ ...prev, [key]: value }), {});
    };
    createUtilFile = (utils) => {
        const renderer = new ReactUtilsStudioTemplateRenderer(utils, this.config);
        const { componentText } = renderer.renderComponentInternal();
        return {
            componentText,
            fileName: renderer.fileName,
        };
    };
    /**
     * Return utils file text
     */
    generateUtilFile = () => {
        const utils = [
            'validation',
            'formatter',
            'fetchByPath',
            'processFile',
        ];
        const { componentText, fileName } = this.createUtilFile(utils);
        return {
            schemaName: 'AmplifyStudioUtilFile',
            componentText,
            fileName,
            declaration: undefined,
            error: undefined,
        };
    };
    createIndexFile = (schemas) => {
        const renderer = new ReactIndexStudioTemplateRenderer(schemas, LocalGraphqlFormGenerator.defaultConfig);
        const { componentText } = renderer.renderComponentInternal();
        return {
            componentText,
            fileName: renderer.fileName,
        };
    };
}
//# sourceMappingURL=data:application/json;base64,