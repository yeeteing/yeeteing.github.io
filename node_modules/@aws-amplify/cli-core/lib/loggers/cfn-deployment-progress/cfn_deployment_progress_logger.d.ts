import { StackEvent } from '@aws-sdk/client-cloudformation';
import { RewritableBlock } from './rewritable_block.js';
/**
 * Collects events from CDK Toolkit about cfn deployment and structures them
 * nicely for printing.
 *
 * It will continuously re-update the cfn deployment progress and show only the resources
 * that are currently being updated, in addition to a progress bar which
 * shows how far along the deployment is.
 *
 * Resources that have failed will always be shown, resources that failed deployment because
 * they have been canceled are not included.
 */
export declare class CfnDeploymentProgressLogger {
    private resourceNameCache;
    /**
     * A list of resource IDs which are currently being processed
     */
    private resourcesInProgress;
    /**
     * Previous completion state observed by logical ID
     *
     * We use this to detect that if we see a DELETE_COMPLETE after a
     * CREATE_COMPLETE, it's actually a rollback and we should DECREASE
     * resourcesDone instead of increase it
     */
    private resourcesPrevCompleteState;
    /**
     * Count of resources that have reported a _COMPLETE status
     */
    private resourcesDone;
    /**
     * Total number of resources (inclusive of all nested stacks and their resources)
     */
    private readonly resourcesTotal?;
    private rollingBack;
    private readonly failures;
    private block;
    private rootStackDisplay;
    private timeStampWidth;
    private resourceTypeColumnWidth;
    private statusWidth;
    private resourceNameIndentation;
    private readonly getBlockWidth;
    /**
     * Instantiate the CFN deployment progress builder
     */
    constructor(props: PrinterProps);
    /**
     * Add a new CDK event corresponding to CFN deployment progress
     */
    addActivity(cfnEvent: CfnDeploymentStackEvent): void;
    /**
     * Formats the current progress accumulated and pass it to a rewritable block for display
     */
    print(): Promise<void>;
    /**
     * Extract nested stack names
     */
    private normalizeCDKConstructPath;
    /**
     * Extract the failure reason from stack events
     */
    private failureReason;
    /**
     * If we have total number of resources, format the progress bar and return
     */
    private progressBar;
    /**
     * Format the failure reason to be on the next line
     */
    private failureReasonOnNextLine;
    private isFailureStatus;
    private getFormattedLine;
    private getFormattedResourceDisplayName;
    /**
     * For a typical nested stack, CFN generate update events as follows
     *
     * When querying for Root Stack
     * RootStack events (*)
     * ∟ NestedStack events
     *
     * When querying for Nested Stack
     * NestedStack events (*)
     * ∟ Resource events
     *
     * For the * marked resources, cdk doesn't include metadata, so we don't have
     * a way to show friendly names. This method tries to identify these stacks
     * and make them show up in Root stack hierarchy
     */
    private getFriendlyNameFromNestedStackName;
    private colorFromStatusActivity;
    private shorten;
    private padRight;
    private padLeft;
}
export type CfnDeploymentStackEvent = {
    deployment?: string;
    event: StackEvent;
    metadata?: {
        entry: {
            [key: string]: string;
        };
        constructPath: string;
    };
    progress?: {
        total: number;
        completed: number;
        formatted: string;
    };
};
type PrinterProps = {
    /**
     * Total resources to deploy
     */
    readonly resourcesTotal?: number;
    /**
     * Rewritable block in which to render the CFN progress.
     */
    readonly rewritableBlock: RewritableBlock;
    /**
     * width of the block in which to render the CFN progress. It's a function since windows height and width are dynamic
     */
    readonly getBlockWidth: () => number;
};
export {};
//# sourceMappingURL=cfn_deployment_progress_logger.d.ts.map