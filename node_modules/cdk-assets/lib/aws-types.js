"use strict";
/**
 * This file contains a copy of the input and output types from the SDK v3
 * clients. Instead of exposing the SDK types in the public interface, we
 * expose these, shielding consumers from breaking changes in a possible
 * migration to an SDK v4.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptionType = exports.ImageTagMutability = exports.FindingSeverity = exports.ScanStatus = exports.TagStatus = exports.StorageClass = exports.ObjectLockLegalHoldStatus = exports.ObjectLockMode = exports.ObjectCannedACL = exports.ObjectStorageClass = exports.ChecksumAlgorithmIn = exports.RequestCharged = exports.OptionalObjectAttributes = exports.RequestPayer = exports.EncodingType = exports.BucketLocationConstraint = exports.ServerSideEncryption = void 0;
exports.ServerSideEncryption = {
    AES256: 'AES256',
    aws_kms: 'aws:kms',
    aws_kms_dsse: 'aws:kms:dsse',
};
exports.BucketLocationConstraint = {
    EU: 'EU',
    af_south_1: 'af-south-1',
    ap_east_1: 'ap-east-1',
    ap_northeast_1: 'ap-northeast-1',
    ap_northeast_2: 'ap-northeast-2',
    ap_northeast_3: 'ap-northeast-3',
    ap_south_1: 'ap-south-1',
    ap_south_2: 'ap-south-2',
    ap_southeast_1: 'ap-southeast-1',
    ap_southeast_2: 'ap-southeast-2',
    ap_southeast_3: 'ap-southeast-3',
    ap_southeast_4: 'ap-southeast-4',
    ap_southeast_5: 'ap-southeast-5',
    ca_central_1: 'ca-central-1',
    cn_north_1: 'cn-north-1',
    cn_northwest_1: 'cn-northwest-1',
    eu_central_1: 'eu-central-1',
    eu_central_2: 'eu-central-2',
    eu_north_1: 'eu-north-1',
    eu_south_1: 'eu-south-1',
    eu_south_2: 'eu-south-2',
    eu_west_1: 'eu-west-1',
    eu_west_2: 'eu-west-2',
    eu_west_3: 'eu-west-3',
    il_central_1: 'il-central-1',
    me_south_1: 'me-south-1',
    me_central_1: 'me-central-1',
    sa_east_1: 'sa-east-1',
    us_east_2: 'us-east-2',
    us_gov_east_1: 'us-gov-east-1',
    us_gov_west_1: 'us-gov-west-1',
    us_west_1: 'us-west-1',
    us_west_2: 'us-west-2',
};
exports.EncodingType = {
    url: 'url',
};
exports.RequestPayer = {
    requester: 'requester',
};
exports.OptionalObjectAttributes = {
    RESTORE_STATUS: 'RestoreStatus',
};
exports.RequestCharged = {
    requester: 'requester',
};
exports.ChecksumAlgorithmIn = {
    CRC32: 'CRC32',
    CRC32C: 'CRC32C',
    SHA1: 'SHA1',
    SHA256: 'SHA256',
};
exports.ObjectStorageClass = {
    DEEP_ARCHIVE: 'DEEP_ARCHIVE',
    EXPRESS_ONEZONE: 'EXPRESS_ONEZONE',
    GLACIER: 'GLACIER',
    GLACIER_IR: 'GLACIER_IR',
    INTELLIGENT_TIERING: 'INTELLIGENT_TIERING',
    ONEZONE_IA: 'ONEZONE_IA',
    OUTPOSTS: 'OUTPOSTS',
    REDUCED_REDUNDANCY: 'REDUCED_REDUNDANCY',
    SNOW: 'SNOW',
    STANDARD: 'STANDARD',
    STANDARD_IA: 'STANDARD_IA',
};
exports.ObjectCannedACL = {
    authenticated_read: 'authenticated-read',
    aws_exec_read: 'aws-exec-read',
    bucket_owner_full_control: 'bucket-owner-full-control',
    bucket_owner_read: 'bucket-owner-read',
    private: 'private',
    public_read: 'public-read',
    public_read_write: 'public-read-write',
};
exports.ObjectLockMode = {
    COMPLIANCE: 'COMPLIANCE',
    GOVERNANCE: 'GOVERNANCE',
};
exports.ObjectLockLegalHoldStatus = {
    OFF: 'OFF',
    ON: 'ON',
};
exports.StorageClass = {
    DEEP_ARCHIVE: 'DEEP_ARCHIVE',
    EXPRESS_ONEZONE: 'EXPRESS_ONEZONE',
    GLACIER: 'GLACIER',
    GLACIER_IR: 'GLACIER_IR',
    INTELLIGENT_TIERING: 'INTELLIGENT_TIERING',
    ONEZONE_IA: 'ONEZONE_IA',
    OUTPOSTS: 'OUTPOSTS',
    REDUCED_REDUNDANCY: 'REDUCED_REDUNDANCY',
    SNOW: 'SNOW',
    STANDARD: 'STANDARD',
    STANDARD_IA: 'STANDARD_IA',
};
exports.TagStatus = {
    ANY: 'ANY',
    TAGGED: 'TAGGED',
    UNTAGGED: 'UNTAGGED',
};
exports.ScanStatus = {
    ACTIVE: 'ACTIVE',
    COMPLETE: 'COMPLETE',
    FAILED: 'FAILED',
    FINDINGS_UNAVAILABLE: 'FINDINGS_UNAVAILABLE',
    IN_PROGRESS: 'IN_PROGRESS',
    PENDING: 'PENDING',
    SCAN_ELIGIBILITY_EXPIRED: 'SCAN_ELIGIBILITY_EXPIRED',
    UNSUPPORTED_IMAGE: 'UNSUPPORTED_IMAGE',
    LIMIT_EXCEEDED: 'LIMIT_EXCEEDED',
};
exports.FindingSeverity = {
    CRITICAL: 'CRITICAL',
    HIGH: 'HIGH',
    INFORMATIONAL: 'INFORMATIONAL',
    LOW: 'LOW',
    MEDIUM: 'MEDIUM',
    UNDEFINED: 'UNDEFINED',
};
exports.ImageTagMutability = {
    IMMUTABLE: 'IMMUTABLE',
    MUTABLE: 'MUTABLE',
};
exports.EncryptionType = {
    AES256: 'AES256',
    KMS: 'KMS',
    KMS_DSSE: 'KMS_DSSE',
};
//# sourceMappingURL=data:application/json;base64,