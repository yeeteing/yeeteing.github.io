import { fromNodeProviderChain } from '@aws-sdk/credential-providers';
import { loadConfig } from '@smithy/node-config-provider';
import { NODE_REGION_CONFIG_OPTIONS } from '@aws-sdk/region-config-resolver';
import { AmplifyUserError } from '@aws-amplify/platform-core';
import { format } from '@aws-amplify/cli-core';
/**
 * Contains middleware functions.
 */
export class CommandMiddleware {
    printer;
    /**
     * Creates command middleware.
     */
    constructor(printer) {
        this.printer = printer;
    }
    /**
     * Ensure AWS credentials and region of the input profile (or 'default' if undefined) are available in the provider chain.
     * If the input profile is defined, the environment variable AWS_PROFILE will be set accordingly.
     */
    ensureAwsCredentialAndRegion = async (argv) => {
        /**
         * The AWS CDK respects older CLI v1 variable names that are no longer supported in the
         * latest AWS SDK. Developers that use the older variables and switch between Amplify
         * and CDK tools will experience region mismatch failures when using Amplify tools. Variable
         * names known to cause such failures are mapped here for a better developer experience.
         */
        this.mapEnvironmentVariables('AWS_DEFAULT_REGION', 'AWS_REGION');
        this.mapEnvironmentVariables('AWS_DEFAULT_PROFILE', 'AWS_PROFILE');
        if (argv.profile) {
            process.env.AWS_PROFILE = argv.profile;
        }
        const profileSetupInstruction = `To configure a new Amplify profile, use ${format.normalizeAmpxCommand('configure profile')}.`;
        // Check credentials.
        try {
            await fromNodeProviderChain({
                ignoreCache: true,
            })();
        }
        catch (err) {
            const errorMessage = argv.profile
                ? `Failed to load AWS credentials for profile '${argv.profile}'`
                : 'Failed to load default AWS credentials';
            throw new AmplifyUserError('InvalidCredentialError', {
                message: errorMessage,
                resolution: profileSetupInstruction,
            }, err);
        }
        // Check region.
        let region = undefined;
        try {
            region = await loadConfig(NODE_REGION_CONFIG_OPTIONS, {
                ignoreCache: true,
            })();
        }
        catch (err) {
            const errorMessage = argv.profile
                ? `Failed to load AWS region for profile '${argv.profile}'`
                : 'Failed to load default AWS region';
            throw new AmplifyUserError('InvalidCredentialError', {
                message: errorMessage,
                resolution: profileSetupInstruction,
            }, err);
        }
        if (!region.trim()) {
            throw new AmplifyUserError('InvalidCredentialError', {
                message: 'The AWS region is blank',
                resolution: 'Ensure that a valid AWS region is provided in profile configuration or AWS_REGION environment variable.',
            });
        }
    };
    /**
     * Maps one environment variable name to the other
     */
    mapEnvironmentVariables(legacyName, preferredName) {
        if (!process.env[legacyName]) {
            return;
        }
        if (process.env[preferredName]) {
            this.printer.log(`Both the legacy '${legacyName}' and preferred '${preferredName}' environment variables detected. Using '${preferredName}'`);
            return;
        }
        this.printer.log(`Legacy environment variable '${legacyName}' detected. Mapping to '${preferredName}'`);
        process.env[preferredName] = process.env[legacyName];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1hbmRfbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUQsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDOUQsT0FBTyxFQUFXLE1BQU0sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXhEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGlCQUFpQjtJQUlDO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsT0FBZ0I7UUFBaEIsWUFBTyxHQUFQLE9BQU8sQ0FBUztJQUFHLENBQUM7SUFFakQ7OztPQUdHO0lBQ0gsNEJBQTRCLEdBQUcsS0FBSyxFQUdsQyxJQUEyQixFQUMzQixFQUFFO1FBQ0Y7Ozs7O1dBS0c7UUFDSCxJQUFJLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLHFCQUFxQixFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRW5FLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDekMsQ0FBQztRQUVELE1BQU0sdUJBQXVCLEdBQUcsMkNBQTJDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FDcEcsbUJBQW1CLENBQ3BCLEdBQUcsQ0FBQztRQUVMLHFCQUFxQjtRQUNyQixJQUFJLENBQUM7WUFDSCxNQUFNLHFCQUFxQixDQUFDO2dCQUMxQixXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLEVBQUUsQ0FBQztRQUNQLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU87Z0JBQy9CLENBQUMsQ0FBQywrQ0FBK0MsSUFBSSxDQUFDLE9BQU8sR0FBRztnQkFDaEUsQ0FBQyxDQUFDLHdDQUF3QyxDQUFDO1lBQzdDLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsd0JBQXdCLEVBQ3hCO2dCQUNFLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixVQUFVLEVBQUUsdUJBQXVCO2FBQ3BDLEVBQ0QsR0FBWSxDQUNiLENBQUM7UUFDSixDQUFDO1FBRUQsZ0JBQWdCO1FBQ2hCLElBQUksTUFBTSxHQUF1QixTQUFTLENBQUM7UUFDM0MsSUFBSSxDQUFDO1lBQ0gsTUFBTSxHQUFHLE1BQU0sVUFBVSxDQUFDLDBCQUEwQixFQUFFO2dCQUNwRCxXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLEVBQUUsQ0FBQztRQUNQLENBQUM7UUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1lBQ2IsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU87Z0JBQy9CLENBQUMsQ0FBQywwQ0FBMEMsSUFBSSxDQUFDLE9BQU8sR0FBRztnQkFDM0QsQ0FBQyxDQUFDLG1DQUFtQyxDQUFDO1lBQ3hDLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsd0JBQXdCLEVBQ3hCO2dCQUNFLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixVQUFVLEVBQUUsdUJBQXVCO2FBQ3BDLEVBQ0QsR0FBWSxDQUNiLENBQUM7UUFDSixDQUFDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDO1lBQ25CLE1BQU0sSUFBSSxnQkFBZ0IsQ0FBQyx3QkFBd0IsRUFBRTtnQkFDbkQsT0FBTyxFQUFFLHlCQUF5QjtnQkFDbEMsVUFBVSxFQUNSLHlHQUF5RzthQUM1RyxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSyx1QkFBdUIsQ0FDN0IsVUFBa0IsRUFDbEIsYUFBcUI7UUFFckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQztZQUM3QixPQUFPO1FBQ1QsQ0FBQztRQUNELElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1lBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUNkLG9CQUFvQixVQUFVLG9CQUFvQixhQUFhLDRDQUE0QyxhQUFhLEdBQUcsQ0FDNUgsQ0FBQztZQUNGLE9BQU87UUFDVCxDQUFDO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQ2QsZ0NBQWdDLFVBQVUsMkJBQTJCLGFBQWEsR0FBRyxDQUN0RixDQUFDO1FBQ0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3VtZW50c0NhbWVsQ2FzZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IGZyb21Ob2RlUHJvdmlkZXJDaGFpbiB9IGZyb20gJ0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXJzJztcbmltcG9ydCB7IGxvYWRDb25maWcgfSBmcm9tICdAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyJztcbmltcG9ydCB7IE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TIH0gZnJvbSAnQGF3cy1zZGsvcmVnaW9uLWNvbmZpZy1yZXNvbHZlcic7XG5pbXBvcnQgeyBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgUHJpbnRlciwgZm9ybWF0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcblxuLyoqXG4gKiBDb250YWlucyBtaWRkbGV3YXJlIGZ1bmN0aW9ucy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbW1hbmRNaWRkbGV3YXJlIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgY29tbWFuZCBtaWRkbGV3YXJlLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwcmludGVyOiBQcmludGVyKSB7fVxuXG4gIC8qKlxuICAgKiBFbnN1cmUgQVdTIGNyZWRlbnRpYWxzIGFuZCByZWdpb24gb2YgdGhlIGlucHV0IHByb2ZpbGUgKG9yICdkZWZhdWx0JyBpZiB1bmRlZmluZWQpIGFyZSBhdmFpbGFibGUgaW4gdGhlIHByb3ZpZGVyIGNoYWluLlxuICAgKiBJZiB0aGUgaW5wdXQgcHJvZmlsZSBpcyBkZWZpbmVkLCB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGUgQVdTX1BST0ZJTEUgd2lsbCBiZSBzZXQgYWNjb3JkaW5nbHkuXG4gICAqL1xuICBlbnN1cmVBd3NDcmVkZW50aWFsQW5kUmVnaW9uID0gYXN5bmMgPFxuICAgIFQgZXh0ZW5kcyB7IHByb2ZpbGU6IHN0cmluZyB8IHVuZGVmaW5lZCB9LFxuICA+KFxuICAgIGFyZ3Y6IEFyZ3VtZW50c0NhbWVsQ2FzZTxUPixcbiAgKSA9PiB7XG4gICAgLyoqXG4gICAgICogVGhlIEFXUyBDREsgcmVzcGVjdHMgb2xkZXIgQ0xJIHYxIHZhcmlhYmxlIG5hbWVzIHRoYXQgYXJlIG5vIGxvbmdlciBzdXBwb3J0ZWQgaW4gdGhlXG4gICAgICogbGF0ZXN0IEFXUyBTREsuIERldmVsb3BlcnMgdGhhdCB1c2UgdGhlIG9sZGVyIHZhcmlhYmxlcyBhbmQgc3dpdGNoIGJldHdlZW4gQW1wbGlmeVxuICAgICAqIGFuZCBDREsgdG9vbHMgd2lsbCBleHBlcmllbmNlIHJlZ2lvbiBtaXNtYXRjaCBmYWlsdXJlcyB3aGVuIHVzaW5nIEFtcGxpZnkgdG9vbHMuIFZhcmlhYmxlXG4gICAgICogbmFtZXMga25vd24gdG8gY2F1c2Ugc3VjaCBmYWlsdXJlcyBhcmUgbWFwcGVkIGhlcmUgZm9yIGEgYmV0dGVyIGRldmVsb3BlciBleHBlcmllbmNlLlxuICAgICAqL1xuICAgIHRoaXMubWFwRW52aXJvbm1lbnRWYXJpYWJsZXMoJ0FXU19ERUZBVUxUX1JFR0lPTicsICdBV1NfUkVHSU9OJyk7XG4gICAgdGhpcy5tYXBFbnZpcm9ubWVudFZhcmlhYmxlcygnQVdTX0RFRkFVTFRfUFJPRklMRScsICdBV1NfUFJPRklMRScpO1xuXG4gICAgaWYgKGFyZ3YucHJvZmlsZSkge1xuICAgICAgcHJvY2Vzcy5lbnYuQVdTX1BST0ZJTEUgPSBhcmd2LnByb2ZpbGU7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvZmlsZVNldHVwSW5zdHJ1Y3Rpb24gPSBgVG8gY29uZmlndXJlIGEgbmV3IEFtcGxpZnkgcHJvZmlsZSwgdXNlICR7Zm9ybWF0Lm5vcm1hbGl6ZUFtcHhDb21tYW5kKFxuICAgICAgJ2NvbmZpZ3VyZSBwcm9maWxlJyxcbiAgICApfS5gO1xuXG4gICAgLy8gQ2hlY2sgY3JlZGVudGlhbHMuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGZyb21Ob2RlUHJvdmlkZXJDaGFpbih7XG4gICAgICAgIGlnbm9yZUNhY2hlOiB0cnVlLFxuICAgICAgfSkoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGFyZ3YucHJvZmlsZVxuICAgICAgICA/IGBGYWlsZWQgdG8gbG9hZCBBV1MgY3JlZGVudGlhbHMgZm9yIHByb2ZpbGUgJyR7YXJndi5wcm9maWxlfSdgXG4gICAgICAgIDogJ0ZhaWxlZCB0byBsb2FkIGRlZmF1bHQgQVdTIGNyZWRlbnRpYWxzJztcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnSW52YWxpZENyZWRlbnRpYWxFcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgcmVzb2x1dGlvbjogcHJvZmlsZVNldHVwSW5zdHJ1Y3Rpb24sXG4gICAgICAgIH0sXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgcmVnaW9uLlxuICAgIGxldCByZWdpb246IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICB0cnkge1xuICAgICAgcmVnaW9uID0gYXdhaXQgbG9hZENvbmZpZyhOT0RFX1JFR0lPTl9DT05GSUdfT1BUSU9OUywge1xuICAgICAgICBpZ25vcmVDYWNoZTogdHJ1ZSxcbiAgICAgIH0pKCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBhcmd2LnByb2ZpbGVcbiAgICAgICAgPyBgRmFpbGVkIHRvIGxvYWQgQVdTIHJlZ2lvbiBmb3IgcHJvZmlsZSAnJHthcmd2LnByb2ZpbGV9J2BcbiAgICAgICAgOiAnRmFpbGVkIHRvIGxvYWQgZGVmYXVsdCBBV1MgcmVnaW9uJztcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAnSW52YWxpZENyZWRlbnRpYWxFcnJvcicsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiBlcnJvck1lc3NhZ2UsXG4gICAgICAgICAgcmVzb2x1dGlvbjogcHJvZmlsZVNldHVwSW5zdHJ1Y3Rpb24sXG4gICAgICAgIH0sXG4gICAgICAgIGVyciBhcyBFcnJvcixcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghcmVnaW9uLnRyaW0oKSkge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoJ0ludmFsaWRDcmVkZW50aWFsRXJyb3InLCB7XG4gICAgICAgIG1lc3NhZ2U6ICdUaGUgQVdTIHJlZ2lvbiBpcyBibGFuaycsXG4gICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgJ0Vuc3VyZSB0aGF0IGEgdmFsaWQgQVdTIHJlZ2lvbiBpcyBwcm92aWRlZCBpbiBwcm9maWxlIGNvbmZpZ3VyYXRpb24gb3IgQVdTX1JFR0lPTiBlbnZpcm9ubWVudCB2YXJpYWJsZS4nLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBNYXBzIG9uZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBuYW1lIHRvIHRoZSBvdGhlclxuICAgKi9cbiAgcHJpdmF0ZSBtYXBFbnZpcm9ubWVudFZhcmlhYmxlcyhcbiAgICBsZWdhY3lOYW1lOiBzdHJpbmcsXG4gICAgcHJlZmVycmVkTmFtZTogc3RyaW5nLFxuICApOiB2b2lkIHtcbiAgICBpZiAoIXByb2Nlc3MuZW52W2xlZ2FjeU5hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudltwcmVmZXJyZWROYW1lXSkge1xuICAgICAgdGhpcy5wcmludGVyLmxvZyhcbiAgICAgICAgYEJvdGggdGhlIGxlZ2FjeSAnJHtsZWdhY3lOYW1lfScgYW5kIHByZWZlcnJlZCAnJHtwcmVmZXJyZWROYW1lfScgZW52aXJvbm1lbnQgdmFyaWFibGVzIGRldGVjdGVkLiBVc2luZyAnJHtwcmVmZXJyZWROYW1lfSdgLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wcmludGVyLmxvZyhcbiAgICAgIGBMZWdhY3kgZW52aXJvbm1lbnQgdmFyaWFibGUgJyR7bGVnYWN5TmFtZX0nIGRldGVjdGVkLiBNYXBwaW5nIHRvICcke3ByZWZlcnJlZE5hbWV9J2AsXG4gICAgKTtcbiAgICBwcm9jZXNzLmVudltwcmVmZXJyZWROYW1lXSA9IHByb2Nlc3MuZW52W2xlZ2FjeU5hbWVdO1xuICB9XG59XG4iXX0=