import { createLocalGraphqlFormGenerator } from '@aws-amplify/form-generator';
import { createGraphqlDocumentGenerator } from '@aws-amplify/model-generator';
import { printer } from '@aws-amplify/cli-core';
/**
 * Creates a handler for FormGeneration
 */
export class FormGenerationHandler {
    formGenParams;
    /**
     * Instantiates the handler
     */
    constructor(formGenParams) {
        this.formGenParams = formGenParams;
    }
    generate = async (params) => {
        const { backendIdentifier, modelsOutDir, uiOutDir, apiUrl, modelsFilter } = params;
        const { awsClientProvider } = this.formGenParams;
        const graphqlClientGenerator = createGraphqlDocumentGenerator({
            backendIdentifier,
            awsClientProvider,
        });
        const modelsResult = await graphqlClientGenerator.generateModels({
            targetFormat: 'typescript',
        });
        const { filesWritten: modelsFilesWritten } = await modelsResult.writeToDirectory(modelsOutDir);
        this.logMessages(modelsFilesWritten);
        const localFormGenerator = createLocalGraphqlFormGenerator({
            introspectionSchemaUrl: apiUrl,
            graphqlModelDirectoryPath: './graphql',
        });
        const result = await localFormGenerator.generateForms({
            models: modelsFilter,
        });
        const { filesWritten: uiFilesWritten } = await result.writeToDirectory(uiOutDir);
        this.logMessages(uiFilesWritten);
    };
    logMessages = (filesWritten) => {
        filesWritten.forEach((file) => {
            printer.log(`File written: ${file}`);
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9nZW5lcmF0aW9uX2hhbmRsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZm9ybS1nZW5lcmF0aW9uL2Zvcm1fZ2VuZXJhdGlvbl9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQzlFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTlFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQWtCaEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8scUJBQXFCO0lBSUg7SUFIN0I7O09BRUc7SUFDSCxZQUE2QixhQUE0QztRQUE1QyxrQkFBYSxHQUFiLGFBQWEsQ0FBK0I7SUFBRyxDQUFDO0lBQzdFLFFBQVEsR0FBRyxLQUFLLEVBQUUsTUFBNEIsRUFBRSxFQUFFO1FBQ2hELE1BQU0sRUFBRSxpQkFBaUIsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsR0FDdkUsTUFBTSxDQUFDO1FBQ1QsTUFBTSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUNqRCxNQUFNLHNCQUFzQixHQUFHLDhCQUE4QixDQUFDO1lBQzVELGlCQUFpQjtZQUNqQixpQkFBaUI7U0FDbEIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxZQUFZLEdBQUcsTUFBTSxzQkFBc0IsQ0FBQyxjQUFjLENBQUM7WUFDL0QsWUFBWSxFQUFFLFlBQVk7U0FDM0IsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxHQUN4QyxNQUFNLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFckMsTUFBTSxrQkFBa0IsR0FBRywrQkFBK0IsQ0FBQztZQUN6RCxzQkFBc0IsRUFBRSxNQUFNO1lBQzlCLHlCQUF5QixFQUFFLFdBQVc7U0FDdkMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxrQkFBa0IsQ0FBQyxhQUFhLENBQUM7WUFDcEQsTUFBTSxFQUFFLFlBQVk7U0FDckIsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsR0FDcEMsTUFBTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUM7SUFFTSxXQUFXLEdBQUcsQ0FBQyxZQUFzQixFQUFFLEVBQUU7UUFDL0MsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUxvY2FsR3JhcGhxbEZvcm1HZW5lcmF0b3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvZm9ybS1nZW5lcmF0b3InO1xuaW1wb3J0IHsgY3JlYXRlR3JhcGhxbERvY3VtZW50R2VuZXJhdG9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L21vZGVsLWdlbmVyYXRvcic7XG5pbXBvcnQgeyBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IHByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgQVdTQ2xpZW50UHJvdmlkZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IEFtcGxpZnlDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtYW1wbGlmeSc7XG5pbXBvcnQgeyBDbG91ZEZvcm1hdGlvbkNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvbic7XG5cbnR5cGUgRm9ybUdlbmVyYXRpb25QYXJhbXMgPSB7XG4gIG1vZGVsc091dERpcjogc3RyaW5nO1xuICB1aU91dERpcjogc3RyaW5nO1xuICBhcGlVcmw6IHN0cmluZztcbiAgYmFja2VuZElkZW50aWZpZXI6IERlcGxveWVkQmFja2VuZElkZW50aWZpZXI7XG4gIG1vZGVsc0ZpbHRlcj86IHN0cmluZ1tdO1xufTtcbnR5cGUgRm9ybUdlbmVyYXRpb25JbnN0YW5jZU9wdGlvbnMgPSB7XG4gIGF3c0NsaWVudFByb3ZpZGVyOiBBV1NDbGllbnRQcm92aWRlcjx7XG4gICAgZ2V0QW1wbGlmeUNsaWVudDogQW1wbGlmeUNsaWVudDtcbiAgICBnZXRDbG91ZEZvcm1hdGlvbkNsaWVudDogQ2xvdWRGb3JtYXRpb25DbGllbnQ7XG4gIH0+O1xufTtcbi8qKlxuICogQ3JlYXRlcyBhIGhhbmRsZXIgZm9yIEZvcm1HZW5lcmF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBGb3JtR2VuZXJhdGlvbkhhbmRsZXIge1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIHRoZSBoYW5kbGVyXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGZvcm1HZW5QYXJhbXM6IEZvcm1HZW5lcmF0aW9uSW5zdGFuY2VPcHRpb25zKSB7fVxuICBnZW5lcmF0ZSA9IGFzeW5jIChwYXJhbXM6IEZvcm1HZW5lcmF0aW9uUGFyYW1zKSA9PiB7XG4gICAgY29uc3QgeyBiYWNrZW5kSWRlbnRpZmllciwgbW9kZWxzT3V0RGlyLCB1aU91dERpciwgYXBpVXJsLCBtb2RlbHNGaWx0ZXIgfSA9XG4gICAgICBwYXJhbXM7XG4gICAgY29uc3QgeyBhd3NDbGllbnRQcm92aWRlciB9ID0gdGhpcy5mb3JtR2VuUGFyYW1zO1xuICAgIGNvbnN0IGdyYXBocWxDbGllbnRHZW5lcmF0b3IgPSBjcmVhdGVHcmFwaHFsRG9jdW1lbnRHZW5lcmF0b3Ioe1xuICAgICAgYmFja2VuZElkZW50aWZpZXIsXG4gICAgICBhd3NDbGllbnRQcm92aWRlcixcbiAgICB9KTtcbiAgICBjb25zdCBtb2RlbHNSZXN1bHQgPSBhd2FpdCBncmFwaHFsQ2xpZW50R2VuZXJhdG9yLmdlbmVyYXRlTW9kZWxzKHtcbiAgICAgIHRhcmdldEZvcm1hdDogJ3R5cGVzY3JpcHQnLFxuICAgIH0pO1xuICAgIGNvbnN0IHsgZmlsZXNXcml0dGVuOiBtb2RlbHNGaWxlc1dyaXR0ZW4gfSA9XG4gICAgICBhd2FpdCBtb2RlbHNSZXN1bHQud3JpdGVUb0RpcmVjdG9yeShtb2RlbHNPdXREaXIpO1xuICAgIHRoaXMubG9nTWVzc2FnZXMobW9kZWxzRmlsZXNXcml0dGVuKTtcblxuICAgIGNvbnN0IGxvY2FsRm9ybUdlbmVyYXRvciA9IGNyZWF0ZUxvY2FsR3JhcGhxbEZvcm1HZW5lcmF0b3Ioe1xuICAgICAgaW50cm9zcGVjdGlvblNjaGVtYVVybDogYXBpVXJsLFxuICAgICAgZ3JhcGhxbE1vZGVsRGlyZWN0b3J5UGF0aDogJy4vZ3JhcGhxbCcsXG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbG9jYWxGb3JtR2VuZXJhdG9yLmdlbmVyYXRlRm9ybXMoe1xuICAgICAgbW9kZWxzOiBtb2RlbHNGaWx0ZXIsXG4gICAgfSk7XG4gICAgY29uc3QgeyBmaWxlc1dyaXR0ZW46IHVpRmlsZXNXcml0dGVuIH0gPVxuICAgICAgYXdhaXQgcmVzdWx0LndyaXRlVG9EaXJlY3RvcnkodWlPdXREaXIpO1xuICAgIHRoaXMubG9nTWVzc2FnZXModWlGaWxlc1dyaXR0ZW4pO1xuICB9O1xuXG4gIHByaXZhdGUgbG9nTWVzc2FnZXMgPSAoZmlsZXNXcml0dGVuOiBzdHJpbmdbXSkgPT4ge1xuICAgIGZpbGVzV3JpdHRlbi5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICBwcmludGVyLmxvZyhgRmlsZSB3cml0dGVuOiAke2ZpbGV9YCk7XG4gICAgfSk7XG4gIH07XG59XG4iXX0=