import { LogLevel, NoticesManifestValidator, noticesManifestSchema, printer, } from '@aws-amplify/cli-core';
import { noticesMetadataFileInstance } from './notices_files.js';
import { AmplifyFault } from '@aws-amplify/platform-core';
/**
 * Notices manifest fetcher.
 */
export class NoticesManifestFetcher {
    noticesMetadataFile;
    noticeManifestValidator;
    noticesManifestUrl;
    cacheTTLMs;
    _fetch;
    _printer;
    // In memory cache
    cachedManifest = { notices: [] };
    refreshedAt = undefined;
    /**
     * Creates new notices manifest fetcher.
     */
    constructor(noticesMetadataFile = noticesMetadataFileInstance, noticeManifestValidator = new NoticesManifestValidator({
        checkLinksWithGitHubApi: false,
    }), noticesManifestUrl = process.env
        .AMPLIFY_BACKEND_NOTICES_ENDPOINT ||
        'https://notices.cli.amplify.aws/notices.json', cacheTTLMs = 60 * 60 * 1000, // one hour
    _fetch = fetch, _printer = printer) {
        this.noticesMetadataFile = noticesMetadataFile;
        this.noticeManifestValidator = noticeManifestValidator;
        this.noticesManifestUrl = noticesManifestUrl;
        this.cacheTTLMs = cacheTTLMs;
        this._fetch = _fetch;
        this._printer = _printer;
    }
    fetchNoticesManifest = async () => {
        if (this.isStale()) {
            await this.tryLoadManifestFromDisk();
        }
        if (this.isStale()) {
            await this.loadManifestFromWebsiteAndCache();
        }
        return this.cachedManifest;
    };
    isStale = () => {
        if (!this.refreshedAt) {
            return true;
        }
        return Date.now() - this.refreshedAt > this.cacheTTLMs;
    };
    loadManifestFromWebsiteAndCache = async () => {
        const response = await this._fetch(this.noticesManifestUrl);
        if (!response.ok) {
            throw new AmplifyFault('NoticeManifestFetchFault', {
                message: `Attempt to fetch notices manifest failed, url=${this.noticesManifestUrl}, statusCode=${response.status}`,
            });
        }
        const noticesManifest = noticesManifestSchema.parse(await response.json());
        await this.noticeManifestValidator.validate(noticesManifest);
        this.cachedManifest = noticesManifest;
        this.refreshedAt = Date.now();
        const metadata = await this.noticesMetadataFile.read();
        metadata.manifestCache = {
            noticesManifest: noticesManifest,
            refreshedAt: this.refreshedAt,
        };
        await this.noticesMetadataFile.write(metadata);
    };
    tryLoadManifestFromDisk = async () => {
        try {
            const metadata = await this.noticesMetadataFile.read();
            await this.noticeManifestValidator.validate(metadata.manifestCache.noticesManifest);
            this.cachedManifest = metadata.manifestCache.noticesManifest;
            this.refreshedAt = metadata.manifestCache.refreshedAt;
        }
        catch (e) {
            this._printer.log('Unable to read cached notices manifest', LogLevel.DEBUG);
            if (e instanceof Error) {
                this._printer.log(e.message, LogLevel.DEBUG);
            }
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWNlc19tYW5pZmVzdF9mZXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGljZXMvbm90aWNlc19tYW5pZmVzdF9mZXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxRQUFRLEVBRVIsd0JBQXdCLEVBQ3hCLHFCQUFxQixFQUNyQixPQUFPLEdBQ1IsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNqRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFMUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sc0JBQXNCO0lBU2Q7SUFDQTtJQUdBO0lBR0E7SUFDQTtJQUNBO0lBakJuQixrQkFBa0I7SUFDVixjQUFjLEdBQW9CLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxDQUFDO0lBQ2xELFdBQVcsR0FBdUIsU0FBUyxDQUFDO0lBRXBEOztPQUVHO0lBQ0gsWUFDbUIsc0JBQXNCLDJCQUEyQixFQUNqRCwwQkFBMEIsSUFBSSx3QkFBd0IsQ0FBQztRQUN0RSx1QkFBdUIsRUFBRSxLQUFLO0tBQy9CLENBQUMsRUFDZSxxQkFBcUIsT0FBTyxDQUFDLEdBQUc7U0FDOUMsZ0NBQWdDO1FBQ2pDLDhDQUE4QyxFQUMvQixhQUFhLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxFQUFFLFdBQVc7SUFDeEMsU0FBUyxLQUFLLEVBQ2QsV0FBVyxPQUFPO1FBVGxCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBOEI7UUFDakQsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUV0QztRQUNlLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FFYTtRQUMvQixlQUFVLEdBQVYsVUFBVSxDQUFpQjtRQUMzQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUNsQyxDQUFDO0lBRUosb0JBQW9CLEdBQUcsS0FBSyxJQUE4QixFQUFFO1FBQzFELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7WUFDbkIsTUFBTSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUN2QyxDQUFDO1FBQ0QsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztZQUNuQixNQUFNLElBQUksQ0FBQywrQkFBK0IsRUFBRSxDQUFDO1FBQy9DLENBQUM7UUFDRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQyxDQUFDO0lBRU0sT0FBTyxHQUFHLEdBQVksRUFBRTtRQUM5QixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3RCLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQUNELE9BQU8sSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6RCxDQUFDLENBQUM7SUFFTSwrQkFBK0IsR0FBRyxLQUFLLElBQW1CLEVBQUU7UUFDbEUsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUM7WUFDakIsTUFBTSxJQUFJLFlBQVksQ0FBQywwQkFBMEIsRUFBRTtnQkFDakQsT0FBTyxFQUFFLGlEQUFpRCxJQUFJLENBQUMsa0JBQWtCLGdCQUFnQixRQUFRLENBQUMsTUFBTSxFQUFFO2FBQ25ILENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxNQUFNLGVBQWUsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMzRSxNQUFNLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7UUFFN0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxlQUFlLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFOUIsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkQsUUFBUSxDQUFDLGFBQWEsR0FBRztZQUN2QixlQUFlLEVBQUUsZUFBZTtZQUNoQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7U0FDOUIsQ0FBQztRQUNGLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqRCxDQUFDLENBQUM7SUFFTSx1QkFBdUIsR0FBRyxLQUFLLElBQW1CLEVBQUU7UUFDMUQsSUFBSSxDQUFDO1lBQ0gsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDdkQsTUFBTSxJQUFJLENBQUMsdUJBQXVCLENBQUMsUUFBUSxDQUN6QyxRQUFRLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FDdkMsQ0FBQztZQUNGLElBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUM7WUFDN0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztRQUN4RCxDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNYLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUNmLHdDQUF3QyxFQUN4QyxRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7WUFDRixJQUFJLENBQUMsWUFBWSxLQUFLLEVBQUUsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIExvZ0xldmVsLFxuICBOb3RpY2VzTWFuaWZlc3QsXG4gIE5vdGljZXNNYW5pZmVzdFZhbGlkYXRvcixcbiAgbm90aWNlc01hbmlmZXN0U2NoZW1hLFxuICBwcmludGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgbm90aWNlc01ldGFkYXRhRmlsZUluc3RhbmNlIH0gZnJvbSAnLi9ub3RpY2VzX2ZpbGVzLmpzJztcbmltcG9ydCB7IEFtcGxpZnlGYXVsdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcblxuLyoqXG4gKiBOb3RpY2VzIG1hbmlmZXN0IGZldGNoZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb3RpY2VzTWFuaWZlc3RGZXRjaGVyIHtcbiAgLy8gSW4gbWVtb3J5IGNhY2hlXG4gIHByaXZhdGUgY2FjaGVkTWFuaWZlc3Q6IE5vdGljZXNNYW5pZmVzdCA9IHsgbm90aWNlczogW10gfTtcbiAgcHJpdmF0ZSByZWZyZXNoZWRBdDogbnVtYmVyIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG5ldyBub3RpY2VzIG1hbmlmZXN0IGZldGNoZXIuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5vdGljZXNNZXRhZGF0YUZpbGUgPSBub3RpY2VzTWV0YWRhdGFGaWxlSW5zdGFuY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBub3RpY2VNYW5pZmVzdFZhbGlkYXRvciA9IG5ldyBOb3RpY2VzTWFuaWZlc3RWYWxpZGF0b3Ioe1xuICAgICAgY2hlY2tMaW5rc1dpdGhHaXRIdWJBcGk6IGZhbHNlLFxuICAgIH0pLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbm90aWNlc01hbmlmZXN0VXJsID0gcHJvY2Vzcy5lbnZcbiAgICAgIC5BTVBMSUZZX0JBQ0tFTkRfTk9USUNFU19FTkRQT0lOVCB8fFxuICAgICAgJ2h0dHBzOi8vbm90aWNlcy5jbGkuYW1wbGlmeS5hd3Mvbm90aWNlcy5qc29uJyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhY2hlVFRMTXMgPSA2MCAqIDYwICogMTAwMCwgLy8gb25lIGhvdXJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9mZXRjaCA9IGZldGNoLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3ByaW50ZXIgPSBwcmludGVyLFxuICApIHt9XG5cbiAgZmV0Y2hOb3RpY2VzTWFuaWZlc3QgPSBhc3luYyAoKTogUHJvbWlzZTxOb3RpY2VzTWFuaWZlc3Q+ID0+IHtcbiAgICBpZiAodGhpcy5pc1N0YWxlKCkpIHtcbiAgICAgIGF3YWl0IHRoaXMudHJ5TG9hZE1hbmlmZXN0RnJvbURpc2soKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNTdGFsZSgpKSB7XG4gICAgICBhd2FpdCB0aGlzLmxvYWRNYW5pZmVzdEZyb21XZWJzaXRlQW5kQ2FjaGUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FjaGVkTWFuaWZlc3Q7XG4gIH07XG5cbiAgcHJpdmF0ZSBpc1N0YWxlID0gKCk6IGJvb2xlYW4gPT4ge1xuICAgIGlmICghdGhpcy5yZWZyZXNoZWRBdCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBEYXRlLm5vdygpIC0gdGhpcy5yZWZyZXNoZWRBdCA+IHRoaXMuY2FjaGVUVExNcztcbiAgfTtcblxuICBwcml2YXRlIGxvYWRNYW5pZmVzdEZyb21XZWJzaXRlQW5kQ2FjaGUgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLl9mZXRjaCh0aGlzLm5vdGljZXNNYW5pZmVzdFVybCk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEFtcGxpZnlGYXVsdCgnTm90aWNlTWFuaWZlc3RGZXRjaEZhdWx0Jywge1xuICAgICAgICBtZXNzYWdlOiBgQXR0ZW1wdCB0byBmZXRjaCBub3RpY2VzIG1hbmlmZXN0IGZhaWxlZCwgdXJsPSR7dGhpcy5ub3RpY2VzTWFuaWZlc3RVcmx9LCBzdGF0dXNDb2RlPSR7cmVzcG9uc2Uuc3RhdHVzfWAsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBub3RpY2VzTWFuaWZlc3QgPSBub3RpY2VzTWFuaWZlc3RTY2hlbWEucGFyc2UoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcbiAgICBhd2FpdCB0aGlzLm5vdGljZU1hbmlmZXN0VmFsaWRhdG9yLnZhbGlkYXRlKG5vdGljZXNNYW5pZmVzdCk7XG5cbiAgICB0aGlzLmNhY2hlZE1hbmlmZXN0ID0gbm90aWNlc01hbmlmZXN0O1xuICAgIHRoaXMucmVmcmVzaGVkQXQgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCB0aGlzLm5vdGljZXNNZXRhZGF0YUZpbGUucmVhZCgpO1xuICAgIG1ldGFkYXRhLm1hbmlmZXN0Q2FjaGUgPSB7XG4gICAgICBub3RpY2VzTWFuaWZlc3Q6IG5vdGljZXNNYW5pZmVzdCxcbiAgICAgIHJlZnJlc2hlZEF0OiB0aGlzLnJlZnJlc2hlZEF0LFxuICAgIH07XG4gICAgYXdhaXQgdGhpcy5ub3RpY2VzTWV0YWRhdGFGaWxlLndyaXRlKG1ldGFkYXRhKTtcbiAgfTtcblxuICBwcml2YXRlIHRyeUxvYWRNYW5pZmVzdEZyb21EaXNrID0gYXN5bmMgKCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBtZXRhZGF0YSA9IGF3YWl0IHRoaXMubm90aWNlc01ldGFkYXRhRmlsZS5yZWFkKCk7XG4gICAgICBhd2FpdCB0aGlzLm5vdGljZU1hbmlmZXN0VmFsaWRhdG9yLnZhbGlkYXRlKFxuICAgICAgICBtZXRhZGF0YS5tYW5pZmVzdENhY2hlLm5vdGljZXNNYW5pZmVzdCxcbiAgICAgICk7XG4gICAgICB0aGlzLmNhY2hlZE1hbmlmZXN0ID0gbWV0YWRhdGEubWFuaWZlc3RDYWNoZS5ub3RpY2VzTWFuaWZlc3Q7XG4gICAgICB0aGlzLnJlZnJlc2hlZEF0ID0gbWV0YWRhdGEubWFuaWZlc3RDYWNoZS5yZWZyZXNoZWRBdDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aGlzLl9wcmludGVyLmxvZyhcbiAgICAgICAgJ1VuYWJsZSB0byByZWFkIGNhY2hlZCBub3RpY2VzIG1hbmlmZXN0JyxcbiAgICAgICAgTG9nTGV2ZWwuREVCVUcsXG4gICAgICApO1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aGlzLl9wcmludGVyLmxvZyhlLm1lc3NhZ2UsIExvZ0xldmVsLkRFQlVHKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iXX0=