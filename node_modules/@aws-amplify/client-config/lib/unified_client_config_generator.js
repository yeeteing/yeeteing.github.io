import { unifiedBackendOutputSchema } from '@aws-amplify/backend-output-schemas';
import { AmplifyUserError, ObjectAccumulator, ObjectAccumulatorPropertyAlreadyExistsError, ObjectAccumulatorVersionMismatchError, } from '@aws-amplify/platform-core';
import { BackendOutputClientError, BackendOutputClientErrorType, } from '@aws-amplify/deployed-backend-client';
/**
 * Right now this is mostly a stub. This will become a translation layer between backend output and frontend config
 *
 * There may be multiple implementations of this for different frontends
 */
export class UnifiedClientConfigGenerator {
    fetchOutput;
    clientConfigContributors;
    /**
     * Provide a reference to how this config generator should retrieve backend output
     */
    constructor(fetchOutput, clientConfigContributors) {
        this.fetchOutput = fetchOutput;
        this.clientConfigContributors = clientConfigContributors;
    }
    /**
     * Fetch all backend output, invoke each ClientConfigContributor on the result and merge into a single config object
     */
    generateClientConfig = async () => {
        let output;
        try {
            output = await this.fetchOutput();
        }
        catch (error) {
            if (BackendOutputClientError.isBackendOutputClientError(error)) {
                switch (error.code) {
                    case BackendOutputClientErrorType.DEPLOYMENT_IN_PROGRESS:
                        throw new AmplifyUserError('DeploymentInProgressError', {
                            message: 'Deployment is currently in progress.',
                            resolution: 'Re-run this command once the deployment completes.',
                        }, error);
                    case BackendOutputClientErrorType.NO_STACK_FOUND:
                        throw new AmplifyUserError('StackDoesNotExistError', {
                            message: 'Stack does not exist.',
                            resolution: 'Ensure the CloudFormation stack ID or Amplify App ID and branch specified are correct and exists, then re-run this command.',
                        }, error);
                    case BackendOutputClientErrorType.METADATA_RETRIEVAL_ERROR:
                        throw new AmplifyUserError('NonAmplifyStackError', {
                            message: 'Stack was not created with Amplify.',
                            resolution: 'Ensure the CloudFormation stack ID references a main stack created with Amplify, then re-run this command.',
                        }, error);
                    case BackendOutputClientErrorType.NO_OUTPUTS_FOUND:
                        throw new AmplifyUserError('AmplifyOutputsNotFoundError', {
                            message: 'Amplify outputs not found in stack metadata',
                            resolution: `Ensure the CloudFormation stack ID or Amplify App ID and branch specified are correct and exists.
        If this is a new sandbox or branch deployment, wait for the deployment to be successfully finished and try again.`,
                        }, error);
                    case BackendOutputClientErrorType.CREDENTIALS_ERROR:
                        throw new AmplifyUserError('CredentialsError', {
                            message: 'Unable to get backend outputs due to invalid credentials.',
                            resolution: 'Ensure your AWS credentials are correctly set and refreshed.',
                        }, error);
                    case BackendOutputClientErrorType.ACCESS_DENIED:
                        throw new AmplifyUserError('AccessDeniedError', {
                            message: 'Unable to get backend outputs due to insufficient permissions.',
                            resolution: 'Ensure you have permissions to call cloudformation:GetTemplateSummary.',
                        }, error);
                }
            }
            throw error;
        }
        const backendOutput = unifiedBackendOutputSchema.parse(output);
        const accumulator = new ObjectAccumulator({});
        for (const contributor of this.clientConfigContributors) {
            const clientConfigContribution = await contributor.contribute(backendOutput);
            try {
                // Partial to DeepPartialAmplifyGeneratedConfigs is always a safe case since it's up-casting
                accumulator.accumulate(clientConfigContribution);
            }
            catch (error) {
                if (error instanceof ObjectAccumulatorPropertyAlreadyExistsError) {
                    throw new AmplifyUserError('OutputEntryAlreadyExistsError', {
                        message: `Duplicated entry with key ${error.key} detected in deployment outputs`,
                        resolution: "Check if 'backend.addOutput' is called multiple times with overlapping inputs or" +
                            " if 'backend.addOutput' is called with values overlapping Amplify managed keys",
                    }, error);
                }
                if (error instanceof ObjectAccumulatorVersionMismatchError) {
                    throw new AmplifyUserError('VersionMismatchError', {
                        message: `Conflicting versions of client configuration found. `,
                        resolution: "Ensure that the version specified in 'backend.addOutput' is consistent" +
                            ' and is same as the one used for generating the client config',
                    }, error);
                }
                throw error;
            }
        }
        return accumulator.getAccumulatedObject();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pZmllZF9jbGllbnRfY29uZmlnX2dlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91bmlmaWVkX2NsaWVudF9jb25maWdfZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBSWpGLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLDJDQUEyQyxFQUMzQyxxQ0FBcUMsR0FDdEMsTUFBTSw0QkFBNEIsQ0FBQztBQUNwQyxPQUFPLEVBQ0wsd0JBQXdCLEVBQ3hCLDRCQUE0QixHQUM3QixNQUFNLHNDQUFzQyxDQUFDO0FBRTlDOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sNEJBQTRCO0lBS3BCO0lBQ0E7SUFMbkI7O09BRUc7SUFDSCxZQUNtQixXQUF5QyxFQUN6Qyx3QkFBbUQ7UUFEbkQsZ0JBQVcsR0FBWCxXQUFXLENBQThCO1FBQ3pDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMkI7SUFDbkUsQ0FBQztJQUVKOztPQUVHO0lBQ0gsb0JBQW9CLEdBQUcsS0FBSyxJQUEyQixFQUFFO1FBQ3ZELElBQUksTUFBTSxDQUFDO1FBQ1gsSUFBSSxDQUFDO1lBQ0gsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BDLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsSUFBSSx3QkFBd0IsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUMvRCxRQUFRLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDbkIsS0FBSyw0QkFBNEIsQ0FBQyxzQkFBc0I7d0JBQ3RELE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsMkJBQTJCLEVBQzNCOzRCQUNFLE9BQU8sRUFBRSxzQ0FBc0M7NEJBQy9DLFVBQVUsRUFDUixvREFBb0Q7eUJBQ3ZELEVBQ0QsS0FBSyxDQUNOLENBQUM7b0JBQ0osS0FBSyw0QkFBNEIsQ0FBQyxjQUFjO3dCQUM5QyxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLHdCQUF3QixFQUN4Qjs0QkFDRSxPQUFPLEVBQUUsdUJBQXVCOzRCQUNoQyxVQUFVLEVBQ1IsNkhBQTZIO3lCQUNoSSxFQUNELEtBQUssQ0FDTixDQUFDO29CQUNKLEtBQUssNEJBQTRCLENBQUMsd0JBQXdCO3dCQUN4RCxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLHNCQUFzQixFQUN0Qjs0QkFDRSxPQUFPLEVBQUUscUNBQXFDOzRCQUM5QyxVQUFVLEVBQ1IsNEdBQTRHO3lCQUMvRyxFQUNELEtBQUssQ0FDTixDQUFDO29CQUNKLEtBQUssNEJBQTRCLENBQUMsZ0JBQWdCO3dCQUNoRCxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLDZCQUE2QixFQUM3Qjs0QkFDRSxPQUFPLEVBQUUsNkNBQTZDOzRCQUN0RCxVQUFVLEVBQUU7MEhBQzhGO3lCQUMzRyxFQUNELEtBQUssQ0FDTixDQUFDO29CQUNKLEtBQUssNEJBQTRCLENBQUMsaUJBQWlCO3dCQUNqRCxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLGtCQUFrQixFQUNsQjs0QkFDRSxPQUFPLEVBQ0wsMkRBQTJEOzRCQUM3RCxVQUFVLEVBQ1IsOERBQThEO3lCQUNqRSxFQUNELEtBQUssQ0FDTixDQUFDO29CQUNKLEtBQUssNEJBQTRCLENBQUMsYUFBYTt3QkFDN0MsTUFBTSxJQUFJLGdCQUFnQixDQUN4QixtQkFBbUIsRUFDbkI7NEJBQ0UsT0FBTyxFQUNMLGdFQUFnRTs0QkFDbEUsVUFBVSxFQUNSLHdFQUF3RTt5QkFDM0UsRUFDRCxLQUFLLENBQ04sQ0FBQztnQkFDTixDQUFDO1lBQ0gsQ0FBQztZQUNELE1BQU0sS0FBSyxDQUFDO1FBQ2QsQ0FBQztRQUNELE1BQU0sYUFBYSxHQUFHLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUvRCxNQUFNLFdBQVcsR0FBRyxJQUFJLGlCQUFpQixDQUFlLEVBQUUsQ0FBQyxDQUFDO1FBRTVELEtBQUssTUFBTSxXQUFXLElBQUksSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7WUFDeEQsTUFBTSx3QkFBd0IsR0FDNUIsTUFBTSxXQUFXLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQztnQkFDSCw0RkFBNEY7Z0JBQzVGLFdBQVcsQ0FBQyxVQUFVLENBQ3BCLHdCQUE0RSxDQUM3RSxDQUFDO1lBQ0osQ0FBQztZQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7Z0JBQ2YsSUFBSSxLQUFLLFlBQVksMkNBQTJDLEVBQUUsQ0FBQztvQkFDakUsTUFBTSxJQUFJLGdCQUFnQixDQUN4QiwrQkFBK0IsRUFDL0I7d0JBQ0UsT0FBTyxFQUFFLDZCQUE2QixLQUFLLENBQUMsR0FBRyxpQ0FBaUM7d0JBQ2hGLFVBQVUsRUFDUixrRkFBa0Y7NEJBQ2xGLGdGQUFnRjtxQkFDbkYsRUFDRCxLQUFLLENBQ04sQ0FBQztnQkFDSixDQUFDO2dCQUNELElBQUksS0FBSyxZQUFZLHFDQUFxQyxFQUFFLENBQUM7b0JBQzNELE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsc0JBQXNCLEVBQ3RCO3dCQUNFLE9BQU8sRUFBRSxzREFBc0Q7d0JBQy9ELFVBQVUsRUFDUix3RUFBd0U7NEJBQ3hFLCtEQUErRDtxQkFDbEUsRUFDRCxLQUFLLENBQ04sQ0FBQztnQkFDSixDQUFDO2dCQUNELE1BQU0sS0FBSyxDQUFDO1lBQ2QsQ0FBQztRQUNILENBQUM7UUFDRCxPQUFxQixXQUFXLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUMxRCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJhY2tlbmRPdXRwdXQsXG4gIERlZXBQYXJ0aWFsQW1wbGlmeUdlbmVyYXRlZENvbmZpZ3MsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgdW5pZmllZEJhY2tlbmRPdXRwdXRTY2hlbWEgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc2NoZW1hcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWcgfSBmcm9tICcuL2NsaWVudC1jb25maWctdHlwZXMvY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdDb250cmlidXRvciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy10eXBlcy9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvciB9IGZyb20gJy4vY2xpZW50X2NvbmZpZ19nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHtcbiAgQW1wbGlmeVVzZXJFcnJvcixcbiAgT2JqZWN0QWNjdW11bGF0b3IsXG4gIE9iamVjdEFjY3VtdWxhdG9yUHJvcGVydHlBbHJlYWR5RXhpc3RzRXJyb3IsXG4gIE9iamVjdEFjY3VtdWxhdG9yVmVyc2lvbk1pc21hdGNoRXJyb3IsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7XG4gIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvcixcbiAgQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JztcblxuLyoqXG4gKiBSaWdodCBub3cgdGhpcyBpcyBtb3N0bHkgYSBzdHViLiBUaGlzIHdpbGwgYmVjb21lIGEgdHJhbnNsYXRpb24gbGF5ZXIgYmV0d2VlbiBiYWNrZW5kIG91dHB1dCBhbmQgZnJvbnRlbmQgY29uZmlnXG4gKlxuICogVGhlcmUgbWF5IGJlIG11bHRpcGxlIGltcGxlbWVudGF0aW9ucyBvZiB0aGlzIGZvciBkaWZmZXJlbnQgZnJvbnRlbmRzXG4gKi9cbmV4cG9ydCBjbGFzcyBVbmlmaWVkQ2xpZW50Q29uZmlnR2VuZXJhdG9yIGltcGxlbWVudHMgQ2xpZW50Q29uZmlnR2VuZXJhdG9yIHtcbiAgLyoqXG4gICAqIFByb3ZpZGUgYSByZWZlcmVuY2UgdG8gaG93IHRoaXMgY29uZmlnIGdlbmVyYXRvciBzaG91bGQgcmV0cmlldmUgYmFja2VuZCBvdXRwdXRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmV0Y2hPdXRwdXQ6ICgpID0+IFByb21pc2U8QmFja2VuZE91dHB1dD4sXG4gICAgcHJpdmF0ZSByZWFkb25seSBjbGllbnRDb25maWdDb250cmlidXRvcnM6IENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yW10sXG4gICkge31cblxuICAvKipcbiAgICogRmV0Y2ggYWxsIGJhY2tlbmQgb3V0cHV0LCBpbnZva2UgZWFjaCBDbGllbnRDb25maWdDb250cmlidXRvciBvbiB0aGUgcmVzdWx0IGFuZCBtZXJnZSBpbnRvIGEgc2luZ2xlIGNvbmZpZyBvYmplY3RcbiAgICovXG4gIGdlbmVyYXRlQ2xpZW50Q29uZmlnID0gYXN5bmMgKCk6IFByb21pc2U8Q2xpZW50Q29uZmlnPiA9PiB7XG4gICAgbGV0IG91dHB1dDtcbiAgICB0cnkge1xuICAgICAgb3V0cHV0ID0gYXdhaXQgdGhpcy5mZXRjaE91dHB1dCgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoQmFja2VuZE91dHB1dENsaWVudEVycm9yLmlzQmFja2VuZE91dHB1dENsaWVudEVycm9yKGVycm9yKSkge1xuICAgICAgICBzd2l0Y2ggKGVycm9yLmNvZGUpIHtcbiAgICAgICAgICBjYXNlIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuREVQTE9ZTUVOVF9JTl9QUk9HUkVTUzpcbiAgICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICAgICAnRGVwbG95bWVudEluUHJvZ3Jlc3NFcnJvcicsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnRGVwbG95bWVudCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuJyxcbiAgICAgICAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgICAgICAgJ1JlLXJ1biB0aGlzIGNvbW1hbmQgb25jZSB0aGUgZGVwbG95bWVudCBjb21wbGV0ZXMuJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNhc2UgQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZS5OT19TVEFDS19GT1VORDpcbiAgICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICAgICAnU3RhY2tEb2VzTm90RXhpc3RFcnJvcicsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU3RhY2sgZG9lcyBub3QgZXhpc3QuJyxcbiAgICAgICAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgICAgICAgJ0Vuc3VyZSB0aGUgQ2xvdWRGb3JtYXRpb24gc3RhY2sgSUQgb3IgQW1wbGlmeSBBcHAgSUQgYW5kIGJyYW5jaCBzcGVjaWZpZWQgYXJlIGNvcnJlY3QgYW5kIGV4aXN0cywgdGhlbiByZS1ydW4gdGhpcyBjb21tYW5kLicsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBjYXNlIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuTUVUQURBVEFfUkVUUklFVkFMX0VSUk9SOlxuICAgICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgICAgICdOb25BbXBsaWZ5U3RhY2tFcnJvcicsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnU3RhY2sgd2FzIG5vdCBjcmVhdGVkIHdpdGggQW1wbGlmeS4nLFxuICAgICAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgICAgICAnRW5zdXJlIHRoZSBDbG91ZEZvcm1hdGlvbiBzdGFjayBJRCByZWZlcmVuY2VzIGEgbWFpbiBzdGFjayBjcmVhdGVkIHdpdGggQW1wbGlmeSwgdGhlbiByZS1ydW4gdGhpcyBjb21tYW5kLicsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBjYXNlIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuTk9fT1VUUFVUU19GT1VORDpcbiAgICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICAgICAnQW1wbGlmeU91dHB1dHNOb3RGb3VuZEVycm9yJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdBbXBsaWZ5IG91dHB1dHMgbm90IGZvdW5kIGluIHN0YWNrIG1ldGFkYXRhJyxcbiAgICAgICAgICAgICAgICByZXNvbHV0aW9uOiBgRW5zdXJlIHRoZSBDbG91ZEZvcm1hdGlvbiBzdGFjayBJRCBvciBBbXBsaWZ5IEFwcCBJRCBhbmQgYnJhbmNoIHNwZWNpZmllZCBhcmUgY29ycmVjdCBhbmQgZXhpc3RzLlxuICAgICAgICBJZiB0aGlzIGlzIGEgbmV3IHNhbmRib3ggb3IgYnJhbmNoIGRlcGxveW1lbnQsIHdhaXQgZm9yIHRoZSBkZXBsb3ltZW50IHRvIGJlIHN1Y2Nlc3NmdWxseSBmaW5pc2hlZCBhbmQgdHJ5IGFnYWluLmAsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICBjYXNlIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuQ1JFREVOVElBTFNfRVJST1I6XG4gICAgICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgICAgICAgJ0NyZWRlbnRpYWxzRXJyb3InLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgICAgICdVbmFibGUgdG8gZ2V0IGJhY2tlbmQgb3V0cHV0cyBkdWUgdG8gaW52YWxpZCBjcmVkZW50aWFscy4nLFxuICAgICAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgICAgICAnRW5zdXJlIHlvdXIgQVdTIGNyZWRlbnRpYWxzIGFyZSBjb3JyZWN0bHkgc2V0IGFuZCByZWZyZXNoZWQuJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGNhc2UgQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZS5BQ0NFU1NfREVOSUVEOlxuICAgICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgICAgICdBY2Nlc3NEZW5pZWRFcnJvcicsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBnZXQgYmFja2VuZCBvdXRwdXRzIGR1ZSB0byBpbnN1ZmZpY2llbnQgcGVybWlzc2lvbnMuJyxcbiAgICAgICAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgICAgICAgJ0Vuc3VyZSB5b3UgaGF2ZSBwZXJtaXNzaW9ucyB0byBjYWxsIGNsb3VkZm9ybWF0aW9uOkdldFRlbXBsYXRlU3VtbWFyeS4nLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgICBjb25zdCBiYWNrZW5kT3V0cHV0ID0gdW5pZmllZEJhY2tlbmRPdXRwdXRTY2hlbWEucGFyc2Uob3V0cHV0KTtcblxuICAgIGNvbnN0IGFjY3VtdWxhdG9yID0gbmV3IE9iamVjdEFjY3VtdWxhdG9yPENsaWVudENvbmZpZz4oe30pO1xuXG4gICAgZm9yIChjb25zdCBjb250cmlidXRvciBvZiB0aGlzLmNsaWVudENvbmZpZ0NvbnRyaWJ1dG9ycykge1xuICAgICAgY29uc3QgY2xpZW50Q29uZmlnQ29udHJpYnV0aW9uID1cbiAgICAgICAgYXdhaXQgY29udHJpYnV0b3IuY29udHJpYnV0ZShiYWNrZW5kT3V0cHV0KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFBhcnRpYWwgdG8gRGVlcFBhcnRpYWxBbXBsaWZ5R2VuZXJhdGVkQ29uZmlncyBpcyBhbHdheXMgYSBzYWZlIGNhc2Ugc2luY2UgaXQncyB1cC1jYXN0aW5nXG4gICAgICAgIGFjY3VtdWxhdG9yLmFjY3VtdWxhdGUoXG4gICAgICAgICAgY2xpZW50Q29uZmlnQ29udHJpYnV0aW9uIGFzIERlZXBQYXJ0aWFsQW1wbGlmeUdlbmVyYXRlZENvbmZpZ3M8Q2xpZW50Q29uZmlnPixcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIE9iamVjdEFjY3VtdWxhdG9yUHJvcGVydHlBbHJlYWR5RXhpc3RzRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgICAgICdPdXRwdXRFbnRyeUFscmVhZHlFeGlzdHNFcnJvcicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGBEdXBsaWNhdGVkIGVudHJ5IHdpdGgga2V5ICR7ZXJyb3Iua2V5fSBkZXRlY3RlZCBpbiBkZXBsb3ltZW50IG91dHB1dHNgLFxuICAgICAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgICAgIFwiQ2hlY2sgaWYgJ2JhY2tlbmQuYWRkT3V0cHV0JyBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBvdmVybGFwcGluZyBpbnB1dHMgb3JcIiArXG4gICAgICAgICAgICAgICAgXCIgaWYgJ2JhY2tlbmQuYWRkT3V0cHV0JyBpcyBjYWxsZWQgd2l0aCB2YWx1ZXMgb3ZlcmxhcHBpbmcgQW1wbGlmeSBtYW5hZ2VkIGtleXNcIixcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIE9iamVjdEFjY3VtdWxhdG9yVmVyc2lvbk1pc21hdGNoRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgICAgICdWZXJzaW9uTWlzbWF0Y2hFcnJvcicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGBDb25mbGljdGluZyB2ZXJzaW9ucyBvZiBjbGllbnQgY29uZmlndXJhdGlvbiBmb3VuZC4gYCxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICAgICBcIkVuc3VyZSB0aGF0IHRoZSB2ZXJzaW9uIHNwZWNpZmllZCBpbiAnYmFja2VuZC5hZGRPdXRwdXQnIGlzIGNvbnNpc3RlbnRcIiArXG4gICAgICAgICAgICAgICAgJyBhbmQgaXMgc2FtZSBhcyB0aGUgb25lIHVzZWQgZm9yIGdlbmVyYXRpbmcgdGhlIGNsaWVudCBjb25maWcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiA8Q2xpZW50Q29uZmlnPmFjY3VtdWxhdG9yLmdldEFjY3VtdWxhdGVkT2JqZWN0KCk7XG4gIH07XG59XG4iXX0=