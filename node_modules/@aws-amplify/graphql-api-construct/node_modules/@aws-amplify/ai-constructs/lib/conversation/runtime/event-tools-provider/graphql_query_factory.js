"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQlQueryFactory = void 0;
/**
 * A factory that creates GraphQl queries from tool configuration.
 */
class GraphQlQueryFactory {
    constructor() {
        this.createQuery = (toolDefinition) => {
            const { graphqlRequestInputDescriptor } = toolDefinition;
            const { selectionSet, queryName } = graphqlRequestInputDescriptor;
            const [topLevelQueryArgs, queryArgs] = this.createQueryArgs(toolDefinition);
            const fieldSelection = selectionSet.length > 0 ? ` { ${selectionSet} }` : '';
            const query = `
    query ToolQuery${topLevelQueryArgs} {
      ${queryName}${queryArgs}${fieldSelection}
    }
  `;
            return query;
        };
        this.createQueryArgs = (toolDefinition) => {
            const { inputSchema } = toolDefinition;
            if (!(inputSchema === null || inputSchema === void 0 ? void 0 : inputSchema.json)) {
                return ['', ''];
            }
            const { properties } = inputSchema.json;
            // The conversation resolver should not pass an empty object as input,
            // but we're defensively checking for it here anyway because if `properties: {}`
            // is passed, it will generate invalid GraphQL. e.g.
            // Valid:
            // query ToolQuery {
            //   exampleQuery
            // }
            //
            // Invalid:
            // query ToolQuery {
            //   exampleQuery()
            // }
            if (!properties || Object.keys(properties).length === 0) {
                return ['', ''];
            }
            const { propertyTypes } = toolDefinition.graphqlRequestInputDescriptor;
            const propertyNames = Object.keys(properties);
            const topLevelQueryArgs = propertyNames
                .map((name) => `$${name}: ${propertyTypes[name]}`)
                .join(', ');
            const queryArgs = propertyNames
                .map((name) => `${name}: $${name}`)
                .join(', ');
            return [`(${topLevelQueryArgs})`, `(${queryArgs})`];
        };
    }
}
exports.GraphQlQueryFactory = GraphQlQueryFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF9xdWVyeV9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbnZlcnNhdGlvbi9ydW50aW1lL2V2ZW50LXRvb2xzLXByb3ZpZGVyL2dyYXBocWxfcXVlcnlfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQTs7R0FFRztBQUNILE1BQWEsbUJBQW1CO0lBQWhDO1FBQ0UsZ0JBQVcsR0FBRyxDQUNaLGNBQXNELEVBQzlDLEVBQUU7WUFDVixNQUFNLEVBQUUsNkJBQTZCLEVBQUUsR0FBRyxjQUFjLENBQUM7WUFDekQsTUFBTSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsR0FBRyw2QkFBNkIsQ0FBQztZQUNsRSxNQUFNLENBQUMsaUJBQWlCLEVBQUUsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM1RSxNQUFNLGNBQWMsR0FDbEIsWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN4RCxNQUFNLEtBQUssR0FBRztxQkFDRyxpQkFBaUI7UUFDOUIsU0FBUyxHQUFHLFNBQVMsR0FBRyxjQUFjOztHQUUzQyxDQUFDO1lBRUEsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLENBQUM7UUFFTSxvQkFBZSxHQUFHLENBQ3hCLGNBQXNELEVBQ3BDLEVBQUU7WUFDcEIsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLGNBQWMsQ0FBQztZQUN2QyxJQUFJLENBQUMsQ0FBQSxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUUsSUFBSSxDQUFBLEVBQUUsQ0FBQztnQkFDdkIsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsQixDQUFDO1lBRUQsTUFBTSxFQUFFLFVBQVUsRUFBRSxHQUFHLFdBQVcsQ0FBQyxJQUF1QixDQUFDO1lBRTNELHNFQUFzRTtZQUN0RSxnRkFBZ0Y7WUFDaEYsb0RBQW9EO1lBQ3BELFNBQVM7WUFDVCxvQkFBb0I7WUFDcEIsaUJBQWlCO1lBQ2pCLElBQUk7WUFDSixFQUFFO1lBQ0YsV0FBVztZQUNYLG9CQUFvQjtZQUNwQixtQkFBbUI7WUFDbkIsSUFBSTtZQUNKLElBQUksQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ3hELE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbEIsQ0FBQztZQUNELE1BQU0sRUFBRSxhQUFhLEVBQUUsR0FBRyxjQUFjLENBQUMsNkJBQTZCLENBQUM7WUFDdkUsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUU5QyxNQUFNLGlCQUFpQixHQUFHLGFBQWE7aUJBQ3BDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxJQUFJLEtBQUssYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7aUJBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVkLE1BQU0sU0FBUyxHQUFHLGFBQWE7aUJBQzVCLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLE1BQU0sSUFBSSxFQUFFLENBQUM7aUJBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVkLE9BQU8sQ0FBQyxJQUFJLGlCQUFpQixHQUFHLEVBQUUsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQztJQUNKLENBQUM7Q0FBQTtBQXhERCxrREF3REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb252ZXJzYXRpb25UdXJuRXZlbnRUb29sQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG50eXBlIElucHV0U2NoZW1hSnNvbiA9IHtcbiAgcHJvcGVydGllczogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gIHJlcXVpcmVkOiBzdHJpbmdbXTtcbn07XG5cbi8qKlxuICogQSBmYWN0b3J5IHRoYXQgY3JlYXRlcyBHcmFwaFFsIHF1ZXJpZXMgZnJvbSB0b29sIGNvbmZpZ3VyYXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBHcmFwaFFsUXVlcnlGYWN0b3J5IHtcbiAgY3JlYXRlUXVlcnkgPSAoXG4gICAgdG9vbERlZmluaXRpb246IENvbnZlcnNhdGlvblR1cm5FdmVudFRvb2xDb25maWd1cmF0aW9uLFxuICApOiBzdHJpbmcgPT4ge1xuICAgIGNvbnN0IHsgZ3JhcGhxbFJlcXVlc3RJbnB1dERlc2NyaXB0b3IgfSA9IHRvb2xEZWZpbml0aW9uO1xuICAgIGNvbnN0IHsgc2VsZWN0aW9uU2V0LCBxdWVyeU5hbWUgfSA9IGdyYXBocWxSZXF1ZXN0SW5wdXREZXNjcmlwdG9yO1xuICAgIGNvbnN0IFt0b3BMZXZlbFF1ZXJ5QXJncywgcXVlcnlBcmdzXSA9IHRoaXMuY3JlYXRlUXVlcnlBcmdzKHRvb2xEZWZpbml0aW9uKTtcbiAgICBjb25zdCBmaWVsZFNlbGVjdGlvbiA9XG4gICAgICBzZWxlY3Rpb25TZXQubGVuZ3RoID4gMCA/IGAgeyAke3NlbGVjdGlvblNldH0gfWAgOiAnJztcbiAgICBjb25zdCBxdWVyeSA9IGBcbiAgICBxdWVyeSBUb29sUXVlcnkke3RvcExldmVsUXVlcnlBcmdzfSB7XG4gICAgICAke3F1ZXJ5TmFtZX0ke3F1ZXJ5QXJnc30ke2ZpZWxkU2VsZWN0aW9ufVxuICAgIH1cbiAgYDtcblxuICAgIHJldHVybiBxdWVyeTtcbiAgfTtcblxuICBwcml2YXRlIGNyZWF0ZVF1ZXJ5QXJncyA9IChcbiAgICB0b29sRGVmaW5pdGlvbjogQ29udmVyc2F0aW9uVHVybkV2ZW50VG9vbENvbmZpZ3VyYXRpb24sXG4gICk6IFtzdHJpbmcsIHN0cmluZ10gPT4ge1xuICAgIGNvbnN0IHsgaW5wdXRTY2hlbWEgfSA9IHRvb2xEZWZpbml0aW9uO1xuICAgIGlmICghaW5wdXRTY2hlbWE/Lmpzb24pIHtcbiAgICAgIHJldHVybiBbJycsICcnXTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHByb3BlcnRpZXMgfSA9IGlucHV0U2NoZW1hLmpzb24gYXMgSW5wdXRTY2hlbWFKc29uO1xuXG4gICAgLy8gVGhlIGNvbnZlcnNhdGlvbiByZXNvbHZlciBzaG91bGQgbm90IHBhc3MgYW4gZW1wdHkgb2JqZWN0IGFzIGlucHV0LFxuICAgIC8vIGJ1dCB3ZSdyZSBkZWZlbnNpdmVseSBjaGVja2luZyBmb3IgaXQgaGVyZSBhbnl3YXkgYmVjYXVzZSBpZiBgcHJvcGVydGllczoge31gXG4gICAgLy8gaXMgcGFzc2VkLCBpdCB3aWxsIGdlbmVyYXRlIGludmFsaWQgR3JhcGhRTC4gZS5nLlxuICAgIC8vIFZhbGlkOlxuICAgIC8vIHF1ZXJ5IFRvb2xRdWVyeSB7XG4gICAgLy8gICBleGFtcGxlUXVlcnlcbiAgICAvLyB9XG4gICAgLy9cbiAgICAvLyBJbnZhbGlkOlxuICAgIC8vIHF1ZXJ5IFRvb2xRdWVyeSB7XG4gICAgLy8gICBleGFtcGxlUXVlcnkoKVxuICAgIC8vIH1cbiAgICBpZiAoIXByb3BlcnRpZXMgfHwgT2JqZWN0LmtleXMocHJvcGVydGllcykubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gWycnLCAnJ107XG4gICAgfVxuICAgIGNvbnN0IHsgcHJvcGVydHlUeXBlcyB9ID0gdG9vbERlZmluaXRpb24uZ3JhcGhxbFJlcXVlc3RJbnB1dERlc2NyaXB0b3I7XG4gICAgY29uc3QgcHJvcGVydHlOYW1lcyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xuXG4gICAgY29uc3QgdG9wTGV2ZWxRdWVyeUFyZ3MgPSBwcm9wZXJ0eU5hbWVzXG4gICAgICAubWFwKChuYW1lKSA9PiBgJCR7bmFtZX06ICR7cHJvcGVydHlUeXBlc1tuYW1lXX1gKVxuICAgICAgLmpvaW4oJywgJyk7XG5cbiAgICBjb25zdCBxdWVyeUFyZ3MgPSBwcm9wZXJ0eU5hbWVzXG4gICAgICAubWFwKChuYW1lKSA9PiBgJHtuYW1lfTogJCR7bmFtZX1gKVxuICAgICAgLmpvaW4oJywgJyk7XG5cbiAgICByZXR1cm4gW2AoJHt0b3BMZXZlbFF1ZXJ5QXJnc30pYCwgYCgke3F1ZXJ5QXJnc30pYF07XG4gIH07XG59XG4iXX0=