import { AmplifyError } from '@aws-amplify/platform-core';
import { format, printer } from '@aws-amplify/cli-core';
/**
 * Coordinates creation of sandbox event handlers
 */
export class SandboxEventHandlerFactory {
    getBackendIdentifier;
    getUsageDataEmitter;
    noticesRenderer;
    /**
     * Creates a SandboxEventHandlerFactory
     */
    constructor(getBackendIdentifier, getUsageDataEmitter, noticesRenderer) {
        this.getBackendIdentifier = getBackendIdentifier;
        this.getUsageDataEmitter = getUsageDataEmitter;
        this.noticesRenderer = noticesRenderer;
    }
    getSandboxEventHandlers = ({ sandboxIdentifier: sandboxIdentifier, clientConfigLifecycleHandler, }) => {
        return {
            successfulDeployment: [
                async (...args) => {
                    const backendIdentifier = await this.getBackendIdentifier(sandboxIdentifier);
                    const usageDataEmitter = await this.getUsageDataEmitter();
                    try {
                        await clientConfigLifecycleHandler.generateClientConfigFile(backendIdentifier);
                        if (args && args[0]) {
                            const deployResult = args[0];
                            if (deployResult && deployResult.deploymentTimes) {
                                await usageDataEmitter.emitSuccess(deployResult.deploymentTimes, { command: 'Sandbox' });
                            }
                        }
                    }
                    catch (error) {
                        // Don't crash sandbox if config cannot be generated, but print the error message
                        printer.print(`${format.error('Amplify outputs could not be generated.')} ${format.error(error)}`);
                    }
                    await this.noticesRenderer.tryFindAndPrintApplicableNotices({
                        event: 'postDeployment',
                    });
                },
            ],
            successfulDeletion: [
                async () => {
                    await clientConfigLifecycleHandler.deleteClientConfigFile();
                },
            ],
            failedDeployment: [
                async (...args) => {
                    const usageDataEmitter = await this.getUsageDataEmitter();
                    if (args.length == 0 || !args[0]) {
                        return;
                    }
                    const deployError = args[0];
                    if (deployError && AmplifyError.isAmplifyError(deployError)) {
                        await this.noticesRenderer.tryFindAndPrintApplicableNotices({
                            event: 'postDeployment',
                            error: deployError,
                        });
                        await usageDataEmitter.emitFailure(deployError, {
                            command: 'Sandbox',
                        });
                    }
                    else {
                        const amplifyError = AmplifyError.fromError(deployError);
                        await this.noticesRenderer.tryFindAndPrintApplicableNotices({
                            event: 'postDeployment',
                            error: amplifyError,
                        });
                        await usageDataEmitter.emitFailure(amplifyError, {
                            command: 'Sandbox',
                        });
                    }
                },
            ],
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9ldmVudF9oYW5kbGVyX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2V2ZW50X2hhbmRsZXJfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsWUFBWSxFQUFvQixNQUFNLDRCQUE0QixDQUFDO0FBRTVFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBS2xCO0lBR0E7SUFDQTtJQVJuQjs7T0FFRztJQUNILFlBQ21CLG9CQUVjLEVBQ2QsbUJBQW9ELEVBQ3BELGVBQWdDO1FBSmhDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FFTjtRQUNkLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBaUM7UUFDcEQsb0JBQWUsR0FBZixlQUFlLENBQWlCO0lBQ2hELENBQUM7SUFFSix1QkFBdUIsR0FBK0IsQ0FBQyxFQUNyRCxpQkFBaUIsRUFBRSxpQkFBaUIsRUFDcEMsNEJBQTRCLEdBQzdCLEVBQUUsRUFBRTtRQUNILE9BQU87WUFDTCxvQkFBb0IsRUFBRTtnQkFDcEIsS0FBSyxFQUFFLEdBQUcsSUFBZSxFQUFFLEVBQUU7b0JBQzNCLE1BQU0saUJBQWlCLEdBQ3JCLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLENBQUM7b0JBQ3JELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztvQkFDMUQsSUFBSSxDQUFDO3dCQUNILE1BQU0sNEJBQTRCLENBQUMsd0JBQXdCLENBQ3pELGlCQUFpQixDQUNsQixDQUFDO3dCQUNGLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDOzRCQUNwQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFpQixDQUFDOzRCQUM3QyxJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsZUFBZSxFQUFFLENBQUM7Z0NBQ2pELE1BQU0sZ0JBQWdCLENBQUMsV0FBVyxDQUNoQyxZQUFZLENBQUMsZUFBZSxFQUM1QixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsQ0FDdkIsQ0FBQzs0QkFDSixDQUFDO3dCQUNILENBQUM7b0JBQ0gsQ0FBQztvQkFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO3dCQUNmLGlGQUFpRjt3QkFDakYsT0FBTyxDQUFDLEtBQUssQ0FDWCxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQ2IseUNBQXlDLENBQzFDLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUMzQixDQUFDO29CQUNKLENBQUM7b0JBQ0QsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLGdDQUFnQyxDQUFDO3dCQUMxRCxLQUFLLEVBQUUsZ0JBQWdCO3FCQUN4QixDQUFDLENBQUM7Z0JBQ0wsQ0FBQzthQUNGO1lBQ0Qsa0JBQWtCLEVBQUU7Z0JBQ2xCLEtBQUssSUFBSSxFQUFFO29CQUNULE1BQU0sNEJBQTRCLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztnQkFDOUQsQ0FBQzthQUNGO1lBQ0QsZ0JBQWdCLEVBQUU7Z0JBQ2hCLEtBQUssRUFBRSxHQUFHLElBQWUsRUFBRSxFQUFFO29CQUMzQixNQUFNLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7b0JBQzFELElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzt3QkFDakMsT0FBTztvQkFDVCxDQUFDO29CQUNELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUIsSUFBSSxXQUFXLElBQUksWUFBWSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDO3dCQUM1RCxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsZ0NBQWdDLENBQUM7NEJBQzFELEtBQUssRUFBRSxnQkFBZ0I7NEJBQ3ZCLEtBQUssRUFBRSxXQUFXO3lCQUNuQixDQUFDLENBQUM7d0JBQ0gsTUFBTSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFOzRCQUM5QyxPQUFPLEVBQUUsU0FBUzt5QkFDbkIsQ0FBQyxDQUFDO29CQUNMLENBQUM7eUJBQU0sQ0FBQzt3QkFDTixNQUFNLFlBQVksR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDO3dCQUN6RCxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsZ0NBQWdDLENBQUM7NEJBQzFELEtBQUssRUFBRSxnQkFBZ0I7NEJBQ3ZCLEtBQUssRUFBRSxZQUFZO3lCQUNwQixDQUFDLENBQUM7d0JBQ0gsTUFBTSxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFOzRCQUMvQyxPQUFPLEVBQUUsU0FBUzt5QkFDbkIsQ0FBQyxDQUFDO29CQUNMLENBQUM7Z0JBQ0gsQ0FBQzthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2FuZGJveEV2ZW50SGFuZGxlckNyZWF0b3IgfSBmcm9tICcuL3NhbmRib3hfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQW1wbGlmeUVycm9yLCBVc2FnZURhdGFFbWl0dGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgRGVwbG95UmVzdWx0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtZGVwbG95ZXInO1xuaW1wb3J0IHsgZm9ybWF0LCBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IE5vdGljZXNSZW5kZXJlciB9IGZyb20gJy4uLy4uL25vdGljZXMvbm90aWNlc19yZW5kZXJlci5qcyc7XG5cbi8qKlxuICogQ29vcmRpbmF0ZXMgY3JlYXRpb24gb2Ygc2FuZGJveCBldmVudCBoYW5kbGVyc1xuICovXG5leHBvcnQgY2xhc3MgU2FuZGJveEV2ZW50SGFuZGxlckZhY3Rvcnkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIFNhbmRib3hFdmVudEhhbmRsZXJGYWN0b3J5XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGdldEJhY2tlbmRJZGVudGlmaWVyOiAoXG4gICAgICBzYW5kYm94SWRlbnRpZmllcj86IHN0cmluZyxcbiAgICApID0+IFByb21pc2U8QmFja2VuZElkZW50aWZpZXI+LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0VXNhZ2VEYXRhRW1pdHRlcjogKCkgPT4gUHJvbWlzZTxVc2FnZURhdGFFbWl0dGVyPixcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5vdGljZXNSZW5kZXJlcjogTm90aWNlc1JlbmRlcmVyLFxuICApIHt9XG5cbiAgZ2V0U2FuZGJveEV2ZW50SGFuZGxlcnM6IFNhbmRib3hFdmVudEhhbmRsZXJDcmVhdG9yID0gKHtcbiAgICBzYW5kYm94SWRlbnRpZmllcjogc2FuZGJveElkZW50aWZpZXIsXG4gICAgY2xpZW50Q29uZmlnTGlmZWN5Y2xlSGFuZGxlcixcbiAgfSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzZnVsRGVwbG95bWVudDogW1xuICAgICAgICBhc3luYyAoLi4uYXJnczogdW5rbm93bltdKSA9PiB7XG4gICAgICAgICAgY29uc3QgYmFja2VuZElkZW50aWZpZXIgPVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXRCYWNrZW5kSWRlbnRpZmllcihzYW5kYm94SWRlbnRpZmllcik7XG4gICAgICAgICAgY29uc3QgdXNhZ2VEYXRhRW1pdHRlciA9IGF3YWl0IHRoaXMuZ2V0VXNhZ2VEYXRhRW1pdHRlcigpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBjbGllbnRDb25maWdMaWZlY3ljbGVIYW5kbGVyLmdlbmVyYXRlQ2xpZW50Q29uZmlnRmlsZShcbiAgICAgICAgICAgICAgYmFja2VuZElkZW50aWZpZXIsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGFyZ3MgJiYgYXJnc1swXSkge1xuICAgICAgICAgICAgICBjb25zdCBkZXBsb3lSZXN1bHQgPSBhcmdzWzBdIGFzIERlcGxveVJlc3VsdDtcbiAgICAgICAgICAgICAgaWYgKGRlcGxveVJlc3VsdCAmJiBkZXBsb3lSZXN1bHQuZGVwbG95bWVudFRpbWVzKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdXNhZ2VEYXRhRW1pdHRlci5lbWl0U3VjY2VzcyhcbiAgICAgICAgICAgICAgICAgIGRlcGxveVJlc3VsdC5kZXBsb3ltZW50VGltZXMsXG4gICAgICAgICAgICAgICAgICB7IGNvbW1hbmQ6ICdTYW5kYm94JyB9LFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gRG9uJ3QgY3Jhc2ggc2FuZGJveCBpZiBjb25maWcgY2Fubm90IGJlIGdlbmVyYXRlZCwgYnV0IHByaW50IHRoZSBlcnJvciBtZXNzYWdlXG4gICAgICAgICAgICBwcmludGVyLnByaW50KFxuICAgICAgICAgICAgICBgJHtmb3JtYXQuZXJyb3IoXG4gICAgICAgICAgICAgICAgJ0FtcGxpZnkgb3V0cHV0cyBjb3VsZCBub3QgYmUgZ2VuZXJhdGVkLicsXG4gICAgICAgICAgICAgICl9ICR7Zm9ybWF0LmVycm9yKGVycm9yKX1gLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYXdhaXQgdGhpcy5ub3RpY2VzUmVuZGVyZXIudHJ5RmluZEFuZFByaW50QXBwbGljYWJsZU5vdGljZXMoe1xuICAgICAgICAgICAgZXZlbnQ6ICdwb3N0RGVwbG95bWVudCcsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgc3VjY2Vzc2Z1bERlbGV0aW9uOiBbXG4gICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBhd2FpdCBjbGllbnRDb25maWdMaWZlY3ljbGVIYW5kbGVyLmRlbGV0ZUNsaWVudENvbmZpZ0ZpbGUoKTtcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBmYWlsZWREZXBsb3ltZW50OiBbXG4gICAgICAgIGFzeW5jICguLi5hcmdzOiB1bmtub3duW10pID0+IHtcbiAgICAgICAgICBjb25zdCB1c2FnZURhdGFFbWl0dGVyID0gYXdhaXQgdGhpcy5nZXRVc2FnZURhdGFFbWl0dGVyKCk7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09IDAgfHwgIWFyZ3NbMF0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZGVwbG95RXJyb3IgPSBhcmdzWzBdO1xuICAgICAgICAgIGlmIChkZXBsb3lFcnJvciAmJiBBbXBsaWZ5RXJyb3IuaXNBbXBsaWZ5RXJyb3IoZGVwbG95RXJyb3IpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm5vdGljZXNSZW5kZXJlci50cnlGaW5kQW5kUHJpbnRBcHBsaWNhYmxlTm90aWNlcyh7XG4gICAgICAgICAgICAgIGV2ZW50OiAncG9zdERlcGxveW1lbnQnLFxuICAgICAgICAgICAgICBlcnJvcjogZGVwbG95RXJyb3IsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF3YWl0IHVzYWdlRGF0YUVtaXR0ZXIuZW1pdEZhaWx1cmUoZGVwbG95RXJyb3IsIHtcbiAgICAgICAgICAgICAgY29tbWFuZDogJ1NhbmRib3gnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGFtcGxpZnlFcnJvciA9IEFtcGxpZnlFcnJvci5mcm9tRXJyb3IoZGVwbG95RXJyb3IpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5ub3RpY2VzUmVuZGVyZXIudHJ5RmluZEFuZFByaW50QXBwbGljYWJsZU5vdGljZXMoe1xuICAgICAgICAgICAgICBldmVudDogJ3Bvc3REZXBsb3ltZW50JyxcbiAgICAgICAgICAgICAgZXJyb3I6IGFtcGxpZnlFcnJvcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXdhaXQgdXNhZ2VEYXRhRW1pdHRlci5lbWl0RmFpbHVyZShhbXBsaWZ5RXJyb3IsIHtcbiAgICAgICAgICAgICAgY29tbWFuZDogJ1NhbmRib3gnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9O1xufVxuIl19