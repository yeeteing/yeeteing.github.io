import { BackendIdentifierConversions } from '@aws-amplify/platform-core';
/**
 * Translates args to BackendIdentifier.
 * Throws if translation can't be made (this should never happen if command validation works correctly).
 */
export class AppBackendIdentifierResolver {
    namespaceResolver;
    /**
     * Instantiates BackendIdentifierResolver
     */
    constructor(namespaceResolver) {
        this.namespaceResolver = namespaceResolver;
    }
    resolveDeployedBackendIdentifier = async (args) => {
        if (args.stack) {
            return { stackName: args.stack };
        }
        else if (args.appId && args.branch) {
            return {
                namespace: args.appId,
                name: args.branch,
                type: 'branch',
            };
        }
        else if (args.branch) {
            return {
                appName: await this.namespaceResolver.resolve(),
                branchName: args.branch,
            };
        }
        return undefined;
    };
    resolveBackendIdentifier = async (args) => {
        if (args.stack) {
            return BackendIdentifierConversions.fromStackName(args.stack);
        }
        else if (args.appId && args.branch) {
            return {
                namespace: args.appId,
                name: args.branch,
                type: 'branch',
            };
        }
        else if (args.branch) {
            return {
                namespace: await this.namespaceResolver.resolve(),
                name: args.branch,
                type: 'branch',
            };
        }
        return undefined;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9pZGVudGlmaWVyX3Jlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2JhY2tlbmQtaWRlbnRpZmllci9iYWNrZW5kX2lkZW50aWZpZXJfcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFpQjFFOzs7R0FHRztBQUNILE1BQU0sT0FBTyw0QkFBNEI7SUFJVjtJQUg3Qjs7T0FFRztJQUNILFlBQTZCLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0lBQUcsQ0FBQztJQUNyRSxnQ0FBZ0MsR0FBRyxLQUFLLEVBQ3RDLElBQWlDLEVBQ2UsRUFBRTtRQUNsRCxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNmLE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ25DLENBQUM7YUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3JDLE9BQU87Z0JBQ0wsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLO2dCQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU07Z0JBQ2pCLElBQUksRUFBRSxRQUFRO2FBQ2YsQ0FBQztRQUNKLENBQUM7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN2QixPQUFPO2dCQUNMLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7Z0JBQy9DLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTTthQUN4QixDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUMsQ0FBQztJQUNGLHdCQUF3QixHQUFHLEtBQUssRUFDOUIsSUFBaUMsRUFDTyxFQUFFO1FBQzFDLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ2YsT0FBTyw0QkFBNEIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hFLENBQUM7YUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3JDLE9BQU87Z0JBQ0wsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLO2dCQUNyQixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU07Z0JBQ2pCLElBQUksRUFBRSxRQUFRO2FBQ2YsQ0FBQztRQUNKLENBQUM7YUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN2QixPQUFPO2dCQUNMLFNBQVMsRUFBRSxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUU7Z0JBQ2pELElBQUksRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDakIsSUFBSSxFQUFFLFFBQVE7YUFDZixDQUFDO1FBQ0osQ0FBQztRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9kZXBsb3llZC1iYWNrZW5kLWNsaWVudCc7XG5pbXBvcnQgeyBOYW1lc3BhY2VSZXNvbHZlciB9IGZyb20gJy4vbG9jYWxfbmFtZXNwYWNlX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllckNvbnZlcnNpb25zIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG5leHBvcnQgdHlwZSBCYWNrZW5kSWRlbnRpZmllclBhcmFtZXRlcnMgPSB7XG4gIHN0YWNrPzogc3RyaW5nO1xuICBhcHBJZD86IHN0cmluZztcbiAgYnJhbmNoPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlciA9IHtcbiAgcmVzb2x2ZURlcGxveWVkQmFja2VuZElkZW50aWZpZXI6IChcbiAgICBhcmdzOiBCYWNrZW5kSWRlbnRpZmllclBhcmFtZXRlcnMsXG4gICkgPT4gUHJvbWlzZTxEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyIHwgdW5kZWZpbmVkPjtcbiAgcmVzb2x2ZUJhY2tlbmRJZGVudGlmaWVyOiAoXG4gICAgYXJnczogQmFja2VuZElkZW50aWZpZXJQYXJhbWV0ZXJzLFxuICApID0+IFByb21pc2U8QmFja2VuZElkZW50aWZpZXIgfCB1bmRlZmluZWQ+O1xufTtcblxuLyoqXG4gKiBUcmFuc2xhdGVzIGFyZ3MgdG8gQmFja2VuZElkZW50aWZpZXIuXG4gKiBUaHJvd3MgaWYgdHJhbnNsYXRpb24gY2FuJ3QgYmUgbWFkZSAodGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuIGlmIGNvbW1hbmQgdmFsaWRhdGlvbiB3b3JrcyBjb3JyZWN0bHkpLlxuICovXG5leHBvcnQgY2xhc3MgQXBwQmFja2VuZElkZW50aWZpZXJSZXNvbHZlciBpbXBsZW1lbnRzIEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXIge1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgbmFtZXNwYWNlUmVzb2x2ZXI6IE5hbWVzcGFjZVJlc29sdmVyKSB7fVxuICByZXNvbHZlRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllciA9IGFzeW5jIChcbiAgICBhcmdzOiBCYWNrZW5kSWRlbnRpZmllclBhcmFtZXRlcnMsXG4gICk6IFByb21pc2U8RGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllciB8IHVuZGVmaW5lZD4gPT4ge1xuICAgIGlmIChhcmdzLnN0YWNrKSB7XG4gICAgICByZXR1cm4geyBzdGFja05hbWU6IGFyZ3Muc3RhY2sgfTtcbiAgICB9IGVsc2UgaWYgKGFyZ3MuYXBwSWQgJiYgYXJncy5icmFuY2gpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWVzcGFjZTogYXJncy5hcHBJZCxcbiAgICAgICAgbmFtZTogYXJncy5icmFuY2gsXG4gICAgICAgIHR5cGU6ICdicmFuY2gnLFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFyZ3MuYnJhbmNoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhcHBOYW1lOiBhd2FpdCB0aGlzLm5hbWVzcGFjZVJlc29sdmVyLnJlc29sdmUoKSxcbiAgICAgICAgYnJhbmNoTmFtZTogYXJncy5icmFuY2gsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuICByZXNvbHZlQmFja2VuZElkZW50aWZpZXIgPSBhc3luYyAoXG4gICAgYXJnczogQmFja2VuZElkZW50aWZpZXJQYXJhbWV0ZXJzLFxuICApOiBQcm9taXNlPEJhY2tlbmRJZGVudGlmaWVyIHwgdW5kZWZpbmVkPiA9PiB7XG4gICAgaWYgKGFyZ3Muc3RhY2spIHtcbiAgICAgIHJldHVybiBCYWNrZW5kSWRlbnRpZmllckNvbnZlcnNpb25zLmZyb21TdGFja05hbWUoYXJncy5zdGFjayk7XG4gICAgfSBlbHNlIGlmIChhcmdzLmFwcElkICYmIGFyZ3MuYnJhbmNoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lc3BhY2U6IGFyZ3MuYXBwSWQsXG4gICAgICAgIG5hbWU6IGFyZ3MuYnJhbmNoLFxuICAgICAgICB0eXBlOiAnYnJhbmNoJyxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChhcmdzLmJyYW5jaCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZXNwYWNlOiBhd2FpdCB0aGlzLm5hbWVzcGFjZVJlc29sdmVyLnJlc29sdmUoKSxcbiAgICAgICAgbmFtZTogYXJncy5icmFuY2gsXG4gICAgICAgIHR5cGU6ICdicmFuY2gnLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xufVxuIl19