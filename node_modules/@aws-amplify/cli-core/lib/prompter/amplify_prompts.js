import { confirm, input, password } from '@inquirer/prompts';
/**
 * Wrapper for prompter library
 * Because @inquirer/prompts library set the methods as non-configurable, we cannot mock the methods directly.
 * see details: https://github.com/orgs/nodejs/discussions/47959
 */
export class AmplifyPrompter {
    /**
     * A confirm style prompt. Styles question as `y/N`
     * @param options for displaying the prompt
     * @param options.message display for the prompt
     * @param options.defaultValue if user submits without typing anything. Defaults false
     * @returns the boolean answer
     */
    static yesOrNo = async (options) => {
        const response = await confirm({
            message: options.message,
            transformer: (value) => (value ? 'y' : 'N'),
            default: options.defaultValue ?? false,
        });
        return response;
    };
    /**
     * A secret prompt.
     */
    static secretValue = async (promptMessage = 'Enter secret value') => {
        return await password({
            message: promptMessage,
            validate: (val) => val && val.length > 0 ? true : 'Cannot be empty',
        });
    };
    /**
     * An input style prompt.
     * @param options for displaying the prompt
     * @param options.message display for the prompt
     * @param options.defaultValue if user submits without typing anything. Default: "."
     * @param options.required if the user input is required, incompatible with options.defaultValue
     * @returns Promise<string> the user input
     */
    static input = async (options) => {
        if (options.required) {
            return input({
                message: options.message,
                validate: (val) => val && val.length > 0 ? true : 'Cannot be empty',
            });
        }
        return input({
            message: options.message,
            default: options.defaultValue ?? '',
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1wbGlmeV9wcm9tcHRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Byb21wdGVyL2FtcGxpZnlfcHJvbXB0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3RDs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFDMUI7Ozs7OztPQU1HO0lBQ0gsTUFBTSxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsT0FHdkIsRUFBb0IsRUFBRTtRQUNyQixNQUFNLFFBQVEsR0FBRyxNQUFNLE9BQU8sQ0FBQztZQUM3QixPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU87WUFDeEIsV0FBVyxFQUFFLENBQUMsS0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDcEQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxZQUFZLElBQUksS0FBSztTQUN2QyxDQUFDLENBQUM7UUFDSCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE1BQU0sQ0FBQyxXQUFXLEdBQUcsS0FBSyxFQUN4QixhQUFhLEdBQUcsb0JBQW9CLEVBQ25CLEVBQUU7UUFDbkIsT0FBTyxNQUFNLFFBQVEsQ0FBQztZQUNwQixPQUFPLEVBQUUsYUFBYTtZQUN0QixRQUFRLEVBQUUsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUN4QixHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsaUJBQWlCO1NBQ25ELENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGOzs7Ozs7O09BT0c7SUFDSCxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssRUFDbEIsT0FVSyxFQUNZLEVBQUU7UUFDbkIsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDckIsT0FBTyxLQUFLLENBQUM7Z0JBQ1gsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO2dCQUN4QixRQUFRLEVBQUUsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUN4QixHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsaUJBQWlCO2FBQ25ELENBQUMsQ0FBQztRQUNMLENBQUM7UUFDRCxPQUFPLEtBQUssQ0FBQztZQUNYLE9BQU8sRUFBRSxPQUFPLENBQUMsT0FBTztZQUN4QixPQUFPLEVBQUUsT0FBTyxDQUFDLFlBQVksSUFBSSxFQUFFO1NBQ3BDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbmZpcm0sIGlucHV0LCBwYXNzd29yZCB9IGZyb20gJ0BpbnF1aXJlci9wcm9tcHRzJztcblxuLyoqXG4gKiBXcmFwcGVyIGZvciBwcm9tcHRlciBsaWJyYXJ5XG4gKiBCZWNhdXNlIEBpbnF1aXJlci9wcm9tcHRzIGxpYnJhcnkgc2V0IHRoZSBtZXRob2RzIGFzIG5vbi1jb25maWd1cmFibGUsIHdlIGNhbm5vdCBtb2NrIHRoZSBtZXRob2RzIGRpcmVjdGx5LlxuICogc2VlIGRldGFpbHM6IGh0dHBzOi8vZ2l0aHViLmNvbS9vcmdzL25vZGVqcy9kaXNjdXNzaW9ucy80Nzk1OVxuICovXG5leHBvcnQgY2xhc3MgQW1wbGlmeVByb21wdGVyIHtcbiAgLyoqXG4gICAqIEEgY29uZmlybSBzdHlsZSBwcm9tcHQuIFN0eWxlcyBxdWVzdGlvbiBhcyBgeS9OYFxuICAgKiBAcGFyYW0gb3B0aW9ucyBmb3IgZGlzcGxheWluZyB0aGUgcHJvbXB0XG4gICAqIEBwYXJhbSBvcHRpb25zLm1lc3NhZ2UgZGlzcGxheSBmb3IgdGhlIHByb21wdFxuICAgKiBAcGFyYW0gb3B0aW9ucy5kZWZhdWx0VmFsdWUgaWYgdXNlciBzdWJtaXRzIHdpdGhvdXQgdHlwaW5nIGFueXRoaW5nLiBEZWZhdWx0cyBmYWxzZVxuICAgKiBAcmV0dXJucyB0aGUgYm9vbGVhbiBhbnN3ZXJcbiAgICovXG4gIHN0YXRpYyB5ZXNPck5vID0gYXN5bmMgKG9wdGlvbnM6IHtcbiAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgZGVmYXVsdFZhbHVlPzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8Ym9vbGVhbj4gPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY29uZmlybSh7XG4gICAgICBtZXNzYWdlOiBvcHRpb25zLm1lc3NhZ2UsXG4gICAgICB0cmFuc2Zvcm1lcjogKHZhbHVlOiBib29sZWFuKSA9PiAodmFsdWUgPyAneScgOiAnTicpLFxuICAgICAgZGVmYXVsdDogb3B0aW9ucy5kZWZhdWx0VmFsdWUgPz8gZmFsc2UsXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBIHNlY3JldCBwcm9tcHQuXG4gICAqL1xuICBzdGF0aWMgc2VjcmV0VmFsdWUgPSBhc3luYyAoXG4gICAgcHJvbXB0TWVzc2FnZSA9ICdFbnRlciBzZWNyZXQgdmFsdWUnLFxuICApOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIHJldHVybiBhd2FpdCBwYXNzd29yZCh7XG4gICAgICBtZXNzYWdlOiBwcm9tcHRNZXNzYWdlLFxuICAgICAgdmFsaWRhdGU6ICh2YWw6IHN0cmluZykgPT5cbiAgICAgICAgdmFsICYmIHZhbC5sZW5ndGggPiAwID8gdHJ1ZSA6ICdDYW5ub3QgYmUgZW1wdHknLFxuICAgIH0pO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBbiBpbnB1dCBzdHlsZSBwcm9tcHQuXG4gICAqIEBwYXJhbSBvcHRpb25zIGZvciBkaXNwbGF5aW5nIHRoZSBwcm9tcHRcbiAgICogQHBhcmFtIG9wdGlvbnMubWVzc2FnZSBkaXNwbGF5IGZvciB0aGUgcHJvbXB0XG4gICAqIEBwYXJhbSBvcHRpb25zLmRlZmF1bHRWYWx1ZSBpZiB1c2VyIHN1Ym1pdHMgd2l0aG91dCB0eXBpbmcgYW55dGhpbmcuIERlZmF1bHQ6IFwiLlwiXG4gICAqIEBwYXJhbSBvcHRpb25zLnJlcXVpcmVkIGlmIHRoZSB1c2VyIGlucHV0IGlzIHJlcXVpcmVkLCBpbmNvbXBhdGlibGUgd2l0aCBvcHRpb25zLmRlZmF1bHRWYWx1ZVxuICAgKiBAcmV0dXJucyBQcm9taXNlPHN0cmluZz4gdGhlIHVzZXIgaW5wdXRcbiAgICovXG4gIHN0YXRpYyBpbnB1dCA9IGFzeW5jIChcbiAgICBvcHRpb25zOlxuICAgICAgfCB7XG4gICAgICAgICAgbWVzc2FnZTogc3RyaW5nO1xuICAgICAgICAgIHJlcXVpcmVkPzogbmV2ZXI7XG4gICAgICAgICAgZGVmYXVsdFZhbHVlPzogc3RyaW5nO1xuICAgICAgICB9XG4gICAgICB8IHtcbiAgICAgICAgICBtZXNzYWdlOiBzdHJpbmc7XG4gICAgICAgICAgcmVxdWlyZWQ6IHRydWU7XG4gICAgICAgICAgZGVmYXVsdFZhbHVlPzogbmV2ZXI7XG4gICAgICAgIH0sXG4gICk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgaWYgKG9wdGlvbnMucmVxdWlyZWQpIHtcbiAgICAgIHJldHVybiBpbnB1dCh7XG4gICAgICAgIG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgICAgdmFsaWRhdGU6ICh2YWw6IHN0cmluZykgPT5cbiAgICAgICAgICB2YWwgJiYgdmFsLmxlbmd0aCA+IDAgPyB0cnVlIDogJ0Nhbm5vdCBiZSBlbXB0eScsXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGlucHV0KHtcbiAgICAgIG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZSxcbiAgICAgIGRlZmF1bHQ6IG9wdGlvbnMuZGVmYXVsdFZhbHVlID8/ICcnLFxuICAgIH0pO1xuICB9O1xufVxuIl19