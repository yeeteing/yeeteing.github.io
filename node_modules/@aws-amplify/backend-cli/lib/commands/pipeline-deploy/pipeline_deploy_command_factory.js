import { BackendDeployerFactory } from '@aws-amplify/backend-deployer';
import { AmplifyIOEventsBridgeSingletonFactory, PackageManagerControllerFactory, format, } from '@aws-amplify/cli-core';
import { PipelineDeployCommand, } from './pipeline_deploy_command.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { S3Client } from '@aws-sdk/client-s3';
import { AmplifyClient } from '@aws-sdk/client-amplify';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { SDKProfileResolverProvider } from '../../sdk_profile_resolver_provider.js';
/**
 * Creates pipeline deploy command
 */
export const createPipelineDeployCommand = () => {
    const s3Client = new S3Client();
    const amplifyClient = new AmplifyClient();
    const cloudFormationClient = new CloudFormationClient();
    const awsClientProvider = {
        getS3Client: () => s3Client,
        getAmplifyClient: () => amplifyClient,
        getCloudFormationClient: () => cloudFormationClient,
    };
    const clientConfigGenerator = new ClientConfigGeneratorAdapter(awsClientProvider);
    const packageManagerControllerFactory = new PackageManagerControllerFactory();
    const cdkEventsBridgeIoHost = new AmplifyIOEventsBridgeSingletonFactory().getInstance();
    const backendDeployerFactory = new BackendDeployerFactory(packageManagerControllerFactory.getPackageManagerController(), format, cdkEventsBridgeIoHost, new SDKProfileResolverProvider().resolve);
    const backendDeployer = backendDeployerFactory.getInstance();
    return new PipelineDeployCommand(clientConfigGenerator, backendDeployer);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmVfZGVwbG95X2NvbW1hbmRfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9waXBlbGluZS1kZXBsb3kvcGlwZWxpbmVfZGVwbG95X2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2RSxPQUFPLEVBQ0wscUNBQXFDLEVBQ3JDLCtCQUErQixFQUMvQixNQUFNLEdBQ1AsTUFBTSx1QkFBdUIsQ0FBQztBQUUvQixPQUFPLEVBQ0wscUJBQXFCLEdBRXRCLE1BQU0sOEJBQThCLENBQUM7QUFDdEMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDdEcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUVwRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLEdBR3pDLEVBQUU7SUFDRixNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO0lBQ2hDLE1BQU0sYUFBYSxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7SUFDMUMsTUFBTSxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7SUFFeEQsTUFBTSxpQkFBaUIsR0FBRztRQUN4QixXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsUUFBUTtRQUMzQixnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxhQUFhO1FBQ3JDLHVCQUF1QixFQUFFLEdBQUcsRUFBRSxDQUFDLG9CQUFvQjtLQUNwRCxDQUFDO0lBQ0YsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLDRCQUE0QixDQUM1RCxpQkFBaUIsQ0FDbEIsQ0FBQztJQUNGLE1BQU0sK0JBQStCLEdBQUcsSUFBSSwrQkFBK0IsRUFBRSxDQUFDO0lBQzlFLE1BQU0scUJBQXFCLEdBQ3pCLElBQUkscUNBQXFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUU1RCxNQUFNLHNCQUFzQixHQUFHLElBQUksc0JBQXNCLENBQ3ZELCtCQUErQixDQUFDLDJCQUEyQixFQUFFLEVBQzdELE1BQU0sRUFDTixxQkFBcUIsRUFDckIsSUFBSSwwQkFBMEIsRUFBRSxDQUFDLE9BQU8sQ0FDekMsQ0FBQztJQUNGLE1BQU0sZUFBZSxHQUFHLHNCQUFzQixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdELE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxxQkFBcUIsRUFBRSxlQUFlLENBQUMsQ0FBQztBQUMzRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgQmFja2VuZERlcGxveWVyRmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLWRlcGxveWVyJztcbmltcG9ydCB7XG4gIEFtcGxpZnlJT0V2ZW50c0JyaWRnZVNpbmdsZXRvbkZhY3RvcnksXG4gIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnksXG4gIGZvcm1hdCxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcblxuaW1wb3J0IHtcbiAgUGlwZWxpbmVEZXBsb3lDb21tYW5kLFxuICBQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zLFxufSBmcm9tICcuL3BpcGVsaW5lX2RlcGxveV9jb21tYW5kLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIgfSBmcm9tICcuLi8uLi9jbGllbnQtY29uZmlnL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yX2FkYXB0ZXIuanMnO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IFNES1Byb2ZpbGVSZXNvbHZlclByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vc2RrX3Byb2ZpbGVfcmVzb2x2ZXJfcHJvdmlkZXIuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgcGlwZWxpbmUgZGVwbG95IGNvbW1hbmRcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVBpcGVsaW5lRGVwbG95Q29tbWFuZCA9ICgpOiBDb21tYW5kTW9kdWxlPFxuICBvYmplY3QsXG4gIFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnNcbj4gPT4ge1xuICBjb25zdCBzM0NsaWVudCA9IG5ldyBTM0NsaWVudCgpO1xuICBjb25zdCBhbXBsaWZ5Q2xpZW50ID0gbmV3IEFtcGxpZnlDbGllbnQoKTtcbiAgY29uc3QgY2xvdWRGb3JtYXRpb25DbGllbnQgPSBuZXcgQ2xvdWRGb3JtYXRpb25DbGllbnQoKTtcblxuICBjb25zdCBhd3NDbGllbnRQcm92aWRlciA9IHtcbiAgICBnZXRTM0NsaWVudDogKCkgPT4gczNDbGllbnQsXG4gICAgZ2V0QW1wbGlmeUNsaWVudDogKCkgPT4gYW1wbGlmeUNsaWVudCxcbiAgICBnZXRDbG91ZEZvcm1hdGlvbkNsaWVudDogKCkgPT4gY2xvdWRGb3JtYXRpb25DbGllbnQsXG4gIH07XG4gIGNvbnN0IGNsaWVudENvbmZpZ0dlbmVyYXRvciA9IG5ldyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyKFxuICAgIGF3c0NsaWVudFByb3ZpZGVyLFxuICApO1xuICBjb25zdCBwYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5ID0gbmV3IFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkoKTtcbiAgY29uc3QgY2RrRXZlbnRzQnJpZGdlSW9Ib3N0ID1cbiAgICBuZXcgQW1wbGlmeUlPRXZlbnRzQnJpZGdlU2luZ2xldG9uRmFjdG9yeSgpLmdldEluc3RhbmNlKCk7XG5cbiAgY29uc3QgYmFja2VuZERlcGxveWVyRmFjdG9yeSA9IG5ldyBCYWNrZW5kRGVwbG95ZXJGYWN0b3J5KFxuICAgIHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkuZ2V0UGFja2FnZU1hbmFnZXJDb250cm9sbGVyKCksXG4gICAgZm9ybWF0LFxuICAgIGNka0V2ZW50c0JyaWRnZUlvSG9zdCxcbiAgICBuZXcgU0RLUHJvZmlsZVJlc29sdmVyUHJvdmlkZXIoKS5yZXNvbHZlLFxuICApO1xuICBjb25zdCBiYWNrZW5kRGVwbG95ZXIgPSBiYWNrZW5kRGVwbG95ZXJGYWN0b3J5LmdldEluc3RhbmNlKCk7XG4gIHJldHVybiBuZXcgUGlwZWxpbmVEZXBsb3lDb21tYW5kKGNsaWVudENvbmZpZ0dlbmVyYXRvciwgYmFja2VuZERlcGxveWVyKTtcbn07XG4iXX0=