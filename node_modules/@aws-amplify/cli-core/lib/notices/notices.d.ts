import z from 'zod';
export declare const noticeSchema: z.ZodObject<{
    id: z.ZodString;
    title: z.ZodString;
    details: z.ZodString;
    link: z.ZodOptional<z.ZodString>;
    predicates: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        type: z.ZodLiteral<"packageVersion">;
        packageName: z.ZodString;
        versionRange: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "packageVersion";
        packageName: string;
        versionRange: string;
    }, {
        type: "packageVersion";
        packageName: string;
        versionRange: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"nodeVersion">;
        versionRange: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "nodeVersion";
        versionRange: string;
    }, {
        type: "nodeVersion";
        versionRange: string;
    }>, z.ZodObject<{
        type: z.ZodLiteral<"osFamily">;
        osFamily: z.ZodEnum<["windows", "macos", "linux"]>;
    }, "strip", z.ZodTypeAny, {
        type: "osFamily";
        osFamily: "linux" | "windows" | "macos";
    }, {
        type: "osFamily";
        osFamily: "linux" | "windows" | "macos";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"backendComponent">;
        backendComponent: z.ZodEnum<["data", "auth", "function", "storage", "ai"]>;
    }, "strip", z.ZodTypeAny, {
        type: "backendComponent";
        backendComponent: "function" | "data" | "auth" | "storage" | "ai";
    }, {
        type: "backendComponent";
        backendComponent: "function" | "data" | "auth" | "storage" | "ai";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"command">;
        command: z.ZodEnum<["sandbox", "pipeline-deploy", "generate", "configure"]>;
    }, "strip", z.ZodTypeAny, {
        command: "sandbox" | "pipeline-deploy" | "generate" | "configure";
        type: "command";
    }, {
        command: "sandbox" | "pipeline-deploy" | "generate" | "configure";
        type: "command";
    }>, z.ZodObject<{
        type: z.ZodLiteral<"errorMessage">;
        errorMessage: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: "errorMessage";
        errorMessage: string;
    }, {
        type: "errorMessage";
        errorMessage: string;
    }>]>, "many">;
    frequency: z.ZodOptional<z.ZodEnum<["command", "deployment", "once", "daily"]>>;
    validFrom: z.ZodOptional<z.ZodNumber>;
    validTo: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    details: string;
    id: string;
    title: string;
    predicates: ({
        type: "packageVersion";
        packageName: string;
        versionRange: string;
    } | {
        type: "nodeVersion";
        versionRange: string;
    } | {
        type: "osFamily";
        osFamily: "linux" | "windows" | "macos";
    } | {
        type: "backendComponent";
        backendComponent: "function" | "data" | "auth" | "storage" | "ai";
    } | {
        command: "sandbox" | "pipeline-deploy" | "generate" | "configure";
        type: "command";
    } | {
        type: "errorMessage";
        errorMessage: string;
    })[];
    link?: string | undefined;
    frequency?: "once" | "command" | "deployment" | "daily" | undefined;
    validFrom?: number | undefined;
    validTo?: number | undefined;
}, {
    details: string;
    id: string;
    title: string;
    predicates: ({
        type: "packageVersion";
        packageName: string;
        versionRange: string;
    } | {
        type: "nodeVersion";
        versionRange: string;
    } | {
        type: "osFamily";
        osFamily: "linux" | "windows" | "macos";
    } | {
        type: "backendComponent";
        backendComponent: "function" | "data" | "auth" | "storage" | "ai";
    } | {
        command: "sandbox" | "pipeline-deploy" | "generate" | "configure";
        type: "command";
    } | {
        type: "errorMessage";
        errorMessage: string;
    })[];
    link?: string | undefined;
    frequency?: "once" | "command" | "deployment" | "daily" | undefined;
    validFrom?: number | undefined;
    validTo?: number | undefined;
}>;
export type Notice = z.infer<typeof noticeSchema>;
export declare const noticesManifestSchema: z.ZodObject<{
    notices: z.ZodArray<z.ZodObject<{
        id: z.ZodString;
        title: z.ZodString;
        details: z.ZodString;
        link: z.ZodOptional<z.ZodString>;
        predicates: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
            type: z.ZodLiteral<"packageVersion">;
            packageName: z.ZodString;
            versionRange: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "packageVersion";
            packageName: string;
            versionRange: string;
        }, {
            type: "packageVersion";
            packageName: string;
            versionRange: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"nodeVersion">;
            versionRange: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "nodeVersion";
            versionRange: string;
        }, {
            type: "nodeVersion";
            versionRange: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"osFamily">;
            osFamily: z.ZodEnum<["windows", "macos", "linux"]>;
        }, "strip", z.ZodTypeAny, {
            type: "osFamily";
            osFamily: "linux" | "windows" | "macos";
        }, {
            type: "osFamily";
            osFamily: "linux" | "windows" | "macos";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"backendComponent">;
            backendComponent: z.ZodEnum<["data", "auth", "function", "storage", "ai"]>;
        }, "strip", z.ZodTypeAny, {
            type: "backendComponent";
            backendComponent: "function" | "data" | "auth" | "storage" | "ai";
        }, {
            type: "backendComponent";
            backendComponent: "function" | "data" | "auth" | "storage" | "ai";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"command">;
            command: z.ZodEnum<["sandbox", "pipeline-deploy", "generate", "configure"]>;
        }, "strip", z.ZodTypeAny, {
            command: "sandbox" | "pipeline-deploy" | "generate" | "configure";
            type: "command";
        }, {
            command: "sandbox" | "pipeline-deploy" | "generate" | "configure";
            type: "command";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"errorMessage">;
            errorMessage: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "errorMessage";
            errorMessage: string;
        }, {
            type: "errorMessage";
            errorMessage: string;
        }>]>, "many">;
        frequency: z.ZodOptional<z.ZodEnum<["command", "deployment", "once", "daily"]>>;
        validFrom: z.ZodOptional<z.ZodNumber>;
        validTo: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        details: string;
        id: string;
        title: string;
        predicates: ({
            type: "packageVersion";
            packageName: string;
            versionRange: string;
        } | {
            type: "nodeVersion";
            versionRange: string;
        } | {
            type: "osFamily";
            osFamily: "linux" | "windows" | "macos";
        } | {
            type: "backendComponent";
            backendComponent: "function" | "data" | "auth" | "storage" | "ai";
        } | {
            command: "sandbox" | "pipeline-deploy" | "generate" | "configure";
            type: "command";
        } | {
            type: "errorMessage";
            errorMessage: string;
        })[];
        link?: string | undefined;
        frequency?: "once" | "command" | "deployment" | "daily" | undefined;
        validFrom?: number | undefined;
        validTo?: number | undefined;
    }, {
        details: string;
        id: string;
        title: string;
        predicates: ({
            type: "packageVersion";
            packageName: string;
            versionRange: string;
        } | {
            type: "nodeVersion";
            versionRange: string;
        } | {
            type: "osFamily";
            osFamily: "linux" | "windows" | "macos";
        } | {
            type: "backendComponent";
            backendComponent: "function" | "data" | "auth" | "storage" | "ai";
        } | {
            command: "sandbox" | "pipeline-deploy" | "generate" | "configure";
            type: "command";
        } | {
            type: "errorMessage";
            errorMessage: string;
        })[];
        link?: string | undefined;
        frequency?: "once" | "command" | "deployment" | "daily" | undefined;
        validFrom?: number | undefined;
        validTo?: number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    notices: {
        details: string;
        id: string;
        title: string;
        predicates: ({
            type: "packageVersion";
            packageName: string;
            versionRange: string;
        } | {
            type: "nodeVersion";
            versionRange: string;
        } | {
            type: "osFamily";
            osFamily: "linux" | "windows" | "macos";
        } | {
            type: "backendComponent";
            backendComponent: "function" | "data" | "auth" | "storage" | "ai";
        } | {
            command: "sandbox" | "pipeline-deploy" | "generate" | "configure";
            type: "command";
        } | {
            type: "errorMessage";
            errorMessage: string;
        })[];
        link?: string | undefined;
        frequency?: "once" | "command" | "deployment" | "daily" | undefined;
        validFrom?: number | undefined;
        validTo?: number | undefined;
    }[];
}, {
    notices: {
        details: string;
        id: string;
        title: string;
        predicates: ({
            type: "packageVersion";
            packageName: string;
            versionRange: string;
        } | {
            type: "nodeVersion";
            versionRange: string;
        } | {
            type: "osFamily";
            osFamily: "linux" | "windows" | "macos";
        } | {
            type: "backendComponent";
            backendComponent: "function" | "data" | "auth" | "storage" | "ai";
        } | {
            command: "sandbox" | "pipeline-deploy" | "generate" | "configure";
            type: "command";
        } | {
            type: "errorMessage";
            errorMessage: string;
        })[];
        link?: string | undefined;
        frequency?: "once" | "command" | "deployment" | "daily" | undefined;
        validFrom?: number | undefined;
        validTo?: number | undefined;
    }[];
}>;
export type NoticesManifest = z.infer<typeof noticesManifestSchema>;
//# sourceMappingURL=notices.d.ts.map