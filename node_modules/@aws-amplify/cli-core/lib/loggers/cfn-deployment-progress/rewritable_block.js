import wrapAnsi from 'wrap-ansi';
import { EOL } from 'os';
/**
 * A class representing re-writable display lines
 */
export class RewritableBlock {
    getBlockWidth;
    getBlockHeight;
    ioHost;
    lastHeight = 0;
    /**
     * Constructor for RewritableBlock
     * @param getBlockWidth A function that returns the width of the block
     * @param getBlockHeight A function that returns the height of the block
     * @param ioHost to send new updates to display
     */
    constructor(getBlockWidth, getBlockHeight, ioHost) {
        this.getBlockWidth = getBlockWidth;
        this.getBlockHeight = getBlockHeight;
        this.ioHost = ioHost;
    }
    /**
     * Display the given lines in this rewritable block. It expands to make room for more lines
     * and compress when not needed. It also takes care of not overflowing the block.
     */
    async displayLines(lines) {
        lines = this.terminalWrap(this.getBlockWidth(), this.expandNewlines(lines));
        lines = lines.slice(0, this.getMaxBlockHeight(this.getBlockHeight(), this.lastHeight, lines));
        const progressUpdate = [];
        for (const line of lines) {
            progressUpdate.push(this.cll() + line + EOL);
        }
        await this.ioHost.notify({
            message: progressUpdate.join(''),
            code: 'AMPLIFY_CFN_PROGRESS_UPDATE',
            time: new Date(),
            action: 'amplify',
            level: 'info',
            data: undefined,
        });
        this.lastHeight = Math.max(this.lastHeight, lines.length);
    }
    /**
     * Clear to the end of line
     */
    cll = () => {
        return '\x1B[K';
    };
    /**
     * Wrap extra long lines while still being in the rewritable block
     */
    terminalWrap = (width, lines) => {
        if (width === undefined) {
            return lines;
        }
        return lines.flatMap((line) => wrapAnsi(line, width - 1, {
            hard: true,
            trim: true,
            wordWrap: false,
        }).split(EOL));
    };
    /**
     * Make sure there are no hidden newlines in the input strings
     */
    expandNewlines = (lines) => {
        return lines.flatMap((line) => line.split(EOL));
    };
    getMaxBlockHeight = (windowHeight, lastHeight, lines) => {
        if (windowHeight === undefined) {
            return Math.max(lines.length, lastHeight);
        }
        return lines.length < windowHeight ? lines.length : windowHeight - 1;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV3cml0YWJsZV9ibG9jay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2dnZXJzL2Nmbi1kZXBsb3ltZW50LXByb2dyZXNzL3Jld3JpdGFibGVfYmxvY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxRQUFRLE1BQU0sV0FBVyxDQUFDO0FBRWpDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFFekI7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQVVQO0lBQ0E7SUFDQTtJQVhYLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFdkI7Ozs7O09BS0c7SUFDSCxZQUNtQixhQUEyQixFQUMzQixjQUE0QixFQUM1QixNQUFxQjtRQUZyQixrQkFBYSxHQUFiLGFBQWEsQ0FBYztRQUMzQixtQkFBYyxHQUFkLGNBQWMsQ0FBYztRQUM1QixXQUFNLEdBQU4sTUFBTSxDQUFlO0lBQ3JDLENBQUM7SUFFSjs7O09BR0c7SUFDSCxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQWU7UUFDaEMsS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM1RSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FDakIsQ0FBQyxFQUNELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FDdEUsQ0FBQztRQUVGLE1BQU0sY0FBYyxHQUFhLEVBQUUsQ0FBQztRQUNwQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ3pCLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztRQUMvQyxDQUFDO1FBRUQsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUN2QixPQUFPLEVBQUUsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDaEMsSUFBSSxFQUFFLDZCQUE2QjtZQUNuQyxJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7WUFDaEIsTUFBTSxFQUFFLFNBQVM7WUFDakIsS0FBSyxFQUFFLE1BQU07WUFDYixJQUFJLEVBQUUsU0FBUztTQUNoQixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsR0FBRyxHQUFHLEdBQUcsRUFBRTtRQUNULE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsWUFBWSxHQUFHLENBQUMsS0FBeUIsRUFBRSxLQUFlLEVBQUUsRUFBRTtRQUM1RCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUN4QixPQUFPLEtBQUssQ0FBQztRQUNmLENBQUM7UUFFRCxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUM1QixRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtZQUNWLFFBQVEsRUFBRSxLQUFLO1NBQ2hCLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQ2QsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsY0FBYyxHQUFHLENBQUMsS0FBZSxFQUFZLEVBQUU7UUFDN0MsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQyxDQUFDO0lBRUYsaUJBQWlCLEdBQUcsQ0FDbEIsWUFBZ0MsRUFDaEMsVUFBa0IsRUFDbEIsS0FBZSxFQUNQLEVBQUU7UUFDVixJQUFJLFlBQVksS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUMvQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM1QyxDQUFDO1FBQ0QsT0FBTyxLQUFLLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUN2RSxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB3cmFwQW5zaSBmcm9tICd3cmFwLWFuc2knO1xuaW1wb3J0IHsgQW1wbGlmeUlPSG9zdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgRU9MIH0gZnJvbSAnb3MnO1xuXG4vKipcbiAqIEEgY2xhc3MgcmVwcmVzZW50aW5nIHJlLXdyaXRhYmxlIGRpc3BsYXkgbGluZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFJld3JpdGFibGVCbG9jayB7XG4gIHByaXZhdGUgbGFzdEhlaWdodCA9IDA7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIGZvciBSZXdyaXRhYmxlQmxvY2tcbiAgICogQHBhcmFtIGdldEJsb2NrV2lkdGggQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHdpZHRoIG9mIHRoZSBibG9ja1xuICAgKiBAcGFyYW0gZ2V0QmxvY2tIZWlnaHQgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGhlaWdodCBvZiB0aGUgYmxvY2tcbiAgICogQHBhcmFtIGlvSG9zdCB0byBzZW5kIG5ldyB1cGRhdGVzIHRvIGRpc3BsYXlcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0QmxvY2tXaWR0aDogKCkgPT4gbnVtYmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0QmxvY2tIZWlnaHQ6ICgpID0+IG51bWJlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGlvSG9zdDogQW1wbGlmeUlPSG9zdCxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBEaXNwbGF5IHRoZSBnaXZlbiBsaW5lcyBpbiB0aGlzIHJld3JpdGFibGUgYmxvY2suIEl0IGV4cGFuZHMgdG8gbWFrZSByb29tIGZvciBtb3JlIGxpbmVzXG4gICAqIGFuZCBjb21wcmVzcyB3aGVuIG5vdCBuZWVkZWQuIEl0IGFsc28gdGFrZXMgY2FyZSBvZiBub3Qgb3ZlcmZsb3dpbmcgdGhlIGJsb2NrLlxuICAgKi9cbiAgYXN5bmMgZGlzcGxheUxpbmVzKGxpbmVzOiBzdHJpbmdbXSkge1xuICAgIGxpbmVzID0gdGhpcy50ZXJtaW5hbFdyYXAodGhpcy5nZXRCbG9ja1dpZHRoKCksIHRoaXMuZXhwYW5kTmV3bGluZXMobGluZXMpKTtcbiAgICBsaW5lcyA9IGxpbmVzLnNsaWNlKFxuICAgICAgMCxcbiAgICAgIHRoaXMuZ2V0TWF4QmxvY2tIZWlnaHQodGhpcy5nZXRCbG9ja0hlaWdodCgpLCB0aGlzLmxhc3RIZWlnaHQsIGxpbmVzKSxcbiAgICApO1xuXG4gICAgY29uc3QgcHJvZ3Jlc3NVcGRhdGU6IHN0cmluZ1tdID0gW107XG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICBwcm9ncmVzc1VwZGF0ZS5wdXNoKHRoaXMuY2xsKCkgKyBsaW5lICsgRU9MKTtcbiAgICB9XG5cbiAgICBhd2FpdCB0aGlzLmlvSG9zdC5ub3RpZnkoe1xuICAgICAgbWVzc2FnZTogcHJvZ3Jlc3NVcGRhdGUuam9pbignJyksXG4gICAgICBjb2RlOiAnQU1QTElGWV9DRk5fUFJPR1JFU1NfVVBEQVRFJyxcbiAgICAgIHRpbWU6IG5ldyBEYXRlKCksXG4gICAgICBhY3Rpb246ICdhbXBsaWZ5JyxcbiAgICAgIGxldmVsOiAnaW5mbycsXG4gICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgfSk7XG5cbiAgICB0aGlzLmxhc3RIZWlnaHQgPSBNYXRoLm1heCh0aGlzLmxhc3RIZWlnaHQsIGxpbmVzLmxlbmd0aCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgdG8gdGhlIGVuZCBvZiBsaW5lXG4gICAqL1xuICBjbGwgPSAoKSA9PiB7XG4gICAgcmV0dXJuICdcXHgxQltLJztcbiAgfTtcblxuICAvKipcbiAgICogV3JhcCBleHRyYSBsb25nIGxpbmVzIHdoaWxlIHN0aWxsIGJlaW5nIGluIHRoZSByZXdyaXRhYmxlIGJsb2NrXG4gICAqL1xuICB0ZXJtaW5hbFdyYXAgPSAod2lkdGg6IG51bWJlciB8IHVuZGVmaW5lZCwgbGluZXM6IHN0cmluZ1tdKSA9PiB7XG4gICAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBsaW5lcztcbiAgICB9XG5cbiAgICByZXR1cm4gbGluZXMuZmxhdE1hcCgobGluZSkgPT5cbiAgICAgIHdyYXBBbnNpKGxpbmUsIHdpZHRoIC0gMSwge1xuICAgICAgICBoYXJkOiB0cnVlLFxuICAgICAgICB0cmltOiB0cnVlLFxuICAgICAgICB3b3JkV3JhcDogZmFsc2UsXG4gICAgICB9KS5zcGxpdChFT0wpLFxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1ha2Ugc3VyZSB0aGVyZSBhcmUgbm8gaGlkZGVuIG5ld2xpbmVzIGluIHRoZSBpbnB1dCBzdHJpbmdzXG4gICAqL1xuICBleHBhbmROZXdsaW5lcyA9IChsaW5lczogc3RyaW5nW10pOiBzdHJpbmdbXSA9PiB7XG4gICAgcmV0dXJuIGxpbmVzLmZsYXRNYXAoKGxpbmUpID0+IGxpbmUuc3BsaXQoRU9MKSk7XG4gIH07XG5cbiAgZ2V0TWF4QmxvY2tIZWlnaHQgPSAoXG4gICAgd2luZG93SGVpZ2h0OiBudW1iZXIgfCB1bmRlZmluZWQsXG4gICAgbGFzdEhlaWdodDogbnVtYmVyLFxuICAgIGxpbmVzOiBzdHJpbmdbXSxcbiAgKTogbnVtYmVyID0+IHtcbiAgICBpZiAod2luZG93SGVpZ2h0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heChsaW5lcy5sZW5ndGgsIGxhc3RIZWlnaHQpO1xuICAgIH1cbiAgICByZXR1cm4gbGluZXMubGVuZ3RoIDwgd2luZG93SGVpZ2h0ID8gbGluZXMubGVuZ3RoIDogd2luZG93SGVpZ2h0IC0gMTtcbiAgfTtcbn1cbiJdfQ==