import { LogLevel } from '../printer/printer.js';
import { format } from '../format/format.js';
import { printer as globalPrinter } from '../printer.js';
/**
 * Implements IIoHost interface of AmplifyIOHost
 */
export class AmplifyIOEventsBridge {
    eventHandlers;
    printer;
    /**
     * Constructor for AmplifyIOEventsBridge
     * @param eventHandlers - event handlers to be called when events are received
     * @param eventHandlers.notify - event handler for notify events
     */
    constructor(eventHandlers, printer = globalPrinter) {
        this.eventHandlers = eventHandlers;
        this.printer = printer;
    }
    /**
     * Receive amplify events and fan out notifying anyone interested.
     */
    async notify(msg) {
        if (!this.eventHandlers.notify) {
            return Promise.resolve();
        }
        const promises = this.eventHandlers.notify?.flatMap((handler) => handler(msg));
        (await Promise.allSettled(promises))
            .filter((result) => result.status === 'rejected')
            .forEach((result) => {
            this.printer.log(`Failed to notify message '${msg.message}' with error ${format.error(result.reason)}`, LogLevel.WARN);
        });
    }
    /**
     * Receive amplify events and fan out asking everyone if they have a response for this request
     * Custom event handlers are currently not supported for this event type
     */
    async requestResponse(msg) {
        return Promise.resolve(msg.defaultResponse);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1wbGlmeV9pb19ldmVudHNfYnJpZGdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2xvZ2dlcnMvYW1wbGlmeV9pb19ldmVudHNfYnJpZGdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBRSxRQUFRLEVBQVcsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDN0MsT0FBTyxFQUFFLE9BQU8sSUFBSSxhQUFhLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8scUJBQXFCO0lBT2I7SUFHQTtJQVRuQjs7OztPQUlHO0lBQ0gsWUFDbUIsYUFFaEIsRUFDZ0IsVUFBbUIsYUFBYTtRQUhoQyxrQkFBYSxHQUFiLGFBQWEsQ0FFN0I7UUFDZ0IsWUFBTyxHQUFQLE9BQU8sQ0FBeUI7SUFDaEQsQ0FBQztJQUVKOztPQUVHO0lBQ0gsS0FBSyxDQUFDLE1BQU0sQ0FBSSxHQUFpQztRQUMvQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUMvQixPQUFPLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMzQixDQUFDO1FBQ0QsTUFBTSxRQUFRLEdBQW9CLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FDbEUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FDMUIsQ0FBQztRQUNGLENBQUMsTUFBTSxPQUFPLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ2pDLE1BQU0sQ0FDTCxDQUFDLE1BQU0sRUFBbUMsRUFBRSxDQUMxQyxNQUFNLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FDL0I7YUFDQSxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDZCw2QkFBNkIsR0FBRyxDQUFDLE9BQU8sZ0JBQWdCLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQ3JGLFFBQVEsQ0FBQyxJQUFJLENBQ2QsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxlQUFlLENBQ25CLEdBQW9EO1FBRXBELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQW1wbGlmeUlPSG9zdCxcbiAgQW1wbGlmeUlvSG9zdEV2ZW50TWVzc2FnZSxcbiAgQW1wbGlmeUlvSG9zdEV2ZW50UmVxdWVzdE1lc3NhZ2VJb1JlcXVlc3QsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgTG9nTGV2ZWwsIFByaW50ZXIgfSBmcm9tICcuLi9wcmludGVyL3ByaW50ZXIuanMnO1xuaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnLi4vZm9ybWF0L2Zvcm1hdC5qcyc7XG5pbXBvcnQgeyBwcmludGVyIGFzIGdsb2JhbFByaW50ZXIgfSBmcm9tICcuLi9wcmludGVyLmpzJztcblxuLyoqXG4gKiBJbXBsZW1lbnRzIElJb0hvc3QgaW50ZXJmYWNlIG9mIEFtcGxpZnlJT0hvc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEFtcGxpZnlJT0V2ZW50c0JyaWRnZSBpbXBsZW1lbnRzIEFtcGxpZnlJT0hvc3Qge1xuICAvKipcbiAgICogQ29uc3RydWN0b3IgZm9yIEFtcGxpZnlJT0V2ZW50c0JyaWRnZVxuICAgKiBAcGFyYW0gZXZlbnRIYW5kbGVycyAtIGV2ZW50IGhhbmRsZXJzIHRvIGJlIGNhbGxlZCB3aGVuIGV2ZW50cyBhcmUgcmVjZWl2ZWRcbiAgICogQHBhcmFtIGV2ZW50SGFuZGxlcnMubm90aWZ5IC0gZXZlbnQgaGFuZGxlciBmb3Igbm90aWZ5IGV2ZW50c1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBldmVudEhhbmRsZXJzOiB7XG4gICAgICBub3RpZnk/OiAoPFQ+KG1zZzogQW1wbGlmeUlvSG9zdEV2ZW50TWVzc2FnZTxUPikgPT4gUHJvbWlzZTx2b2lkPilbXTtcbiAgICB9LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJpbnRlcjogUHJpbnRlciA9IGdsb2JhbFByaW50ZXIsXG4gICkge31cblxuICAvKipcbiAgICogUmVjZWl2ZSBhbXBsaWZ5IGV2ZW50cyBhbmQgZmFuIG91dCBub3RpZnlpbmcgYW55b25lIGludGVyZXN0ZWQuXG4gICAqL1xuICBhc3luYyBub3RpZnk8VD4obXNnOiBBbXBsaWZ5SW9Ib3N0RXZlbnRNZXNzYWdlPFQ+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLmV2ZW50SGFuZGxlcnMubm90aWZ5KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGNvbnN0IHByb21pc2VzOiBQcm9taXNlPHZvaWQ+W10gPSB0aGlzLmV2ZW50SGFuZGxlcnMubm90aWZ5Py5mbGF0TWFwKFxuICAgICAgKGhhbmRsZXIpID0+IGhhbmRsZXIobXNnKSxcbiAgICApO1xuICAgIChhd2FpdCBQcm9taXNlLmFsbFNldHRsZWQocHJvbWlzZXMpKVxuICAgICAgLmZpbHRlcihcbiAgICAgICAgKHJlc3VsdCk6IHJlc3VsdCBpcyBQcm9taXNlUmVqZWN0ZWRSZXN1bHQgPT5cbiAgICAgICAgICByZXN1bHQuc3RhdHVzID09PSAncmVqZWN0ZWQnLFxuICAgICAgKVxuICAgICAgLmZvckVhY2goKHJlc3VsdCkgPT4ge1xuICAgICAgICB0aGlzLnByaW50ZXIubG9nKFxuICAgICAgICAgIGBGYWlsZWQgdG8gbm90aWZ5IG1lc3NhZ2UgJyR7bXNnLm1lc3NhZ2V9JyB3aXRoIGVycm9yICR7Zm9ybWF0LmVycm9yKHJlc3VsdC5yZWFzb24pfWAsXG4gICAgICAgICAgTG9nTGV2ZWwuV0FSTixcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlY2VpdmUgYW1wbGlmeSBldmVudHMgYW5kIGZhbiBvdXQgYXNraW5nIGV2ZXJ5b25lIGlmIHRoZXkgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICogQ3VzdG9tIGV2ZW50IGhhbmRsZXJzIGFyZSBjdXJyZW50bHkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBldmVudCB0eXBlXG4gICAqL1xuICBhc3luYyByZXF1ZXN0UmVzcG9uc2U8VCwgVT4oXG4gICAgbXNnOiBBbXBsaWZ5SW9Ib3N0RXZlbnRSZXF1ZXN0TWVzc2FnZUlvUmVxdWVzdDxULCBVPixcbiAgKTogUHJvbWlzZTxVPiB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtc2cuZGVmYXVsdFJlc3BvbnNlKTtcbiAgfVxufVxuIl19