import { execa as _execa } from 'execa';
import { format } from '@aws-amplify/cli-core';
/**
 * Provides information about CDK.
 */
export class CdkInfoProvider {
    execa;
    /**
     * execa to run the cdk command and testing.
     */
    constructor(execa = _execa) {
        this.execa = execa;
    }
    /**
     * Format CDK information.
     * @returns The cdk doctor output.
     */
    async getCdkInfo() {
        const cdkDoctorArgs = [
            'cdk',
            'doctor',
            '--no-notices',
            '--',
            ' --no-color',
        ];
        const output = await this.execa('npx', cdkDoctorArgs, {
            all: true,
        });
        return this.formatCdkInfo(output.all ?? output.stderr);
    }
    /**
     * Format CDK information.
     * @param info - The CDK information to format.
     * @returns The formatted CDK information.
     */
    formatCdkInfo(info) {
        const sensitiveKeys = [
            'AWS_ACCESS_KEY_ID',
            'AWS_SECRET_ACCESS_KEY',
            'AWS_SESSION_TOKEN',
        ];
        const lines = info.split(/\r\n|\r|\n/);
        const formattedLines = lines
            .filter((line) => !sensitiveKeys.some((key) => line.includes(key)))
            .map((line) => {
            //removes emoji from output
            let formattedLine = line.replace(/[^\x20-\x7E]/g, '').trim();
            if (formattedLine.startsWith('AWS_') ||
                formattedLine.startsWith('CDK_')) {
                formattedLine = format.indent(formattedLine);
            }
            else if (formattedLine.startsWith('- ')) {
                formattedLine = format.indent(formattedLine.substring(2));
            }
            return formattedLine;
        });
        return formattedLines
            .filter((line) => !line.startsWith('CDK Version'))
            .join('\n');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrX2luZm9fcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5mby9jZGtfaW5mb19wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsS0FBSyxJQUFJLE1BQU0sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUN4QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFL0M7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUlHO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsUUFBUSxNQUFNO1FBQWQsVUFBSyxHQUFMLEtBQUssQ0FBUztJQUFHLENBQUM7SUFFL0M7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFVBQVU7UUFDZCxNQUFNLGFBQWEsR0FBYTtZQUM5QixLQUFLO1lBQ0wsUUFBUTtZQUNSLGNBQWM7WUFDZCxJQUFJO1lBQ0osYUFBYTtTQUNkLENBQUM7UUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRTtZQUNwRCxHQUFHLEVBQUUsSUFBSTtTQUNWLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGFBQWEsQ0FBQyxJQUFZO1FBQ2hDLE1BQU0sYUFBYSxHQUFHO1lBQ3BCLG1CQUFtQjtZQUNuQix1QkFBdUI7WUFDdkIsbUJBQW1CO1NBQ3BCLENBQUM7UUFFRixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sY0FBYyxHQUFHLEtBQUs7YUFDekIsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNsRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNaLDJCQUEyQjtZQUMzQixJQUFJLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUU3RCxJQUNFLGFBQWEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO2dCQUNoQyxhQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNoQyxDQUFDO2dCQUNELGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQy9DLENBQUM7aUJBQU0sSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7Z0JBQzFDLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1RCxDQUFDO1lBRUQsT0FBTyxhQUFhLENBQUM7UUFDdkIsQ0FBQyxDQUFDLENBQUM7UUFFTCxPQUFPLGNBQWM7YUFDbEIsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWNhIGFzIF9leGVjYSB9IGZyb20gJ2V4ZWNhJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5cbi8qKlxuICogUHJvdmlkZXMgaW5mb3JtYXRpb24gYWJvdXQgQ0RLLlxuICovXG5leHBvcnQgY2xhc3MgQ2RrSW5mb1Byb3ZpZGVyIHtcbiAgLyoqXG4gICAqIGV4ZWNhIHRvIHJ1biB0aGUgY2RrIGNvbW1hbmQgYW5kIHRlc3RpbmcuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGV4ZWNhID0gX2V4ZWNhKSB7fVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgQ0RLIGluZm9ybWF0aW9uLlxuICAgKiBAcmV0dXJucyBUaGUgY2RrIGRvY3RvciBvdXRwdXQuXG4gICAqL1xuICBhc3luYyBnZXRDZGtJbmZvKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc3QgY2RrRG9jdG9yQXJnczogc3RyaW5nW10gPSBbXG4gICAgICAnY2RrJyxcbiAgICAgICdkb2N0b3InLFxuICAgICAgJy0tbm8tbm90aWNlcycsXG4gICAgICAnLS0nLFxuICAgICAgJyAtLW5vLWNvbG9yJyxcbiAgICBdO1xuXG4gICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgdGhpcy5leGVjYSgnbnB4JywgY2RrRG9jdG9yQXJncywge1xuICAgICAgYWxsOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0Q2RrSW5mbyhvdXRwdXQuYWxsID8/IG91dHB1dC5zdGRlcnIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdCBDREsgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSBpbmZvIC0gVGhlIENESyBpbmZvcm1hdGlvbiB0byBmb3JtYXQuXG4gICAqIEByZXR1cm5zIFRoZSBmb3JtYXR0ZWQgQ0RLIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgcHJpdmF0ZSBmb3JtYXRDZGtJbmZvKGluZm86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qgc2Vuc2l0aXZlS2V5cyA9IFtcbiAgICAgICdBV1NfQUNDRVNTX0tFWV9JRCcsXG4gICAgICAnQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZJyxcbiAgICAgICdBV1NfU0VTU0lPTl9UT0tFTicsXG4gICAgXTtcblxuICAgIGNvbnN0IGxpbmVzID0gaW5mby5zcGxpdCgvXFxyXFxufFxccnxcXG4vKTtcbiAgICBjb25zdCBmb3JtYXR0ZWRMaW5lcyA9IGxpbmVzXG4gICAgICAuZmlsdGVyKChsaW5lKSA9PiAhc2Vuc2l0aXZlS2V5cy5zb21lKChrZXkpID0+IGxpbmUuaW5jbHVkZXMoa2V5KSkpXG4gICAgICAubWFwKChsaW5lKSA9PiB7XG4gICAgICAgIC8vcmVtb3ZlcyBlbW9qaSBmcm9tIG91dHB1dFxuICAgICAgICBsZXQgZm9ybWF0dGVkTGluZSA9IGxpbmUucmVwbGFjZSgvW15cXHgyMC1cXHg3RV0vZywgJycpLnRyaW0oKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgZm9ybWF0dGVkTGluZS5zdGFydHNXaXRoKCdBV1NfJykgfHxcbiAgICAgICAgICBmb3JtYXR0ZWRMaW5lLnN0YXJ0c1dpdGgoJ0NES18nKVxuICAgICAgICApIHtcbiAgICAgICAgICBmb3JtYXR0ZWRMaW5lID0gZm9ybWF0LmluZGVudChmb3JtYXR0ZWRMaW5lKTtcbiAgICAgICAgfSBlbHNlIGlmIChmb3JtYXR0ZWRMaW5lLnN0YXJ0c1dpdGgoJy0gJykpIHtcbiAgICAgICAgICBmb3JtYXR0ZWRMaW5lID0gZm9ybWF0LmluZGVudChmb3JtYXR0ZWRMaW5lLnN1YnN0cmluZygyKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkTGluZTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuIGZvcm1hdHRlZExpbmVzXG4gICAgICAuZmlsdGVyKChsaW5lKSA9PiAhbGluZS5zdGFydHNXaXRoKCdDREsgVmVyc2lvbicpKVxuICAgICAgLmpvaW4oJ1xcbicpO1xuICB9XG59XG4iXX0=