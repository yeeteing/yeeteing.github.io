import { BackendOutputClientError, BackendOutputClientErrorType, } from '@aws-amplify/deployed-backend-client';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Common Error handling for BackendOutputClient.getOutput() in model-generator package.
 */
export const getBackendOutputWithErrorHandling = async (backendOutputClient, backendIdentifier) => {
    try {
        return await backendOutputClient.getOutput(backendIdentifier);
    }
    catch (error) {
        if (BackendOutputClientError.isBackendOutputClientError(error)) {
            switch (error.code) {
                case BackendOutputClientErrorType.DEPLOYMENT_IN_PROGRESS:
                    throw new AmplifyUserError('DeploymentInProgressError', {
                        message: 'Deployment is currently in progress.',
                        resolution: 'Re-run this command once the deployment completes.',
                    }, error);
                case BackendOutputClientErrorType.NO_STACK_FOUND:
                    throw new AmplifyUserError('StackDoesNotExistError', {
                        message: 'Stack does not exist.',
                        resolution: 'Ensure the CloudFormation stack ID or Amplify App ID and branch specified are correct and exists, then re-run this command.',
                    }, error);
                case BackendOutputClientErrorType.NO_OUTPUTS_FOUND:
                    throw new AmplifyUserError('AmplifyOutputsNotFoundError', {
                        message: 'Amplify outputs not found in stack metadata',
                        resolution: `Ensure the CloudFormation stack ID or Amplify App ID and branch specified are correct and exists.
      If this is a new sandbox or branch deployment, wait for the deployment to be successfully finished and try again.`,
                    }, error);
                case BackendOutputClientErrorType.CREDENTIALS_ERROR:
                    throw new AmplifyUserError('CredentialsError', {
                        message: 'Unable to get backend outputs due to invalid credentials.',
                        resolution: 'Ensure your AWS credentials are correctly set and refreshed.',
                    }, error);
                case BackendOutputClientErrorType.ACCESS_DENIED:
                    throw new AmplifyUserError('AccessDeniedError', {
                        message: 'Unable to get backend outputs due to insufficient permissions.',
                        resolution: 'Ensure you have permissions to call cloudformation:GetTemplateSummary.',
                    }, error);
                default:
                    throw error;
            }
        }
        throw error;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2JhY2tlbmRfb3V0cHV0X3dpdGhfZXJyb3JfaGFuZGxpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2V0X2JhY2tlbmRfb3V0cHV0X3dpdGhfZXJyb3JfaGFuZGxpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHdCQUF3QixFQUN4Qiw0QkFBNEIsR0FFN0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHLEtBQUssRUFDcEQsbUJBQXdDLEVBQ3hDLGlCQUE0QyxFQUM1QyxFQUFFO0lBQ0YsSUFBSSxDQUFDO1FBQ0gsT0FBTyxNQUFNLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1FBQ2YsSUFBSSx3QkFBd0IsQ0FBQywwQkFBMEIsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQy9ELFFBQVEsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNuQixLQUFLLDRCQUE0QixDQUFDLHNCQUFzQjtvQkFDdEQsTUFBTSxJQUFJLGdCQUFnQixDQUN4QiwyQkFBMkIsRUFDM0I7d0JBQ0UsT0FBTyxFQUFFLHNDQUFzQzt3QkFDL0MsVUFBVSxFQUFFLG9EQUFvRDtxQkFDakUsRUFDRCxLQUFLLENBQ04sQ0FBQztnQkFDSixLQUFLLDRCQUE0QixDQUFDLGNBQWM7b0JBQzlDLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsd0JBQXdCLEVBQ3hCO3dCQUNFLE9BQU8sRUFBRSx1QkFBdUI7d0JBQ2hDLFVBQVUsRUFDUiw2SEFBNkg7cUJBQ2hJLEVBQ0QsS0FBSyxDQUNOLENBQUM7Z0JBQ0osS0FBSyw0QkFBNEIsQ0FBQyxnQkFBZ0I7b0JBQ2hELE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsNkJBQTZCLEVBQzdCO3dCQUNFLE9BQU8sRUFBRSw2Q0FBNkM7d0JBQ3RELFVBQVUsRUFBRTt3SEFDOEY7cUJBQzNHLEVBQ0QsS0FBSyxDQUNOLENBQUM7Z0JBQ0osS0FBSyw0QkFBNEIsQ0FBQyxpQkFBaUI7b0JBQ2pELE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsa0JBQWtCLEVBQ2xCO3dCQUNFLE9BQU8sRUFDTCwyREFBMkQ7d0JBQzdELFVBQVUsRUFDUiw4REFBOEQ7cUJBQ2pFLEVBQ0QsS0FBSyxDQUNOLENBQUM7Z0JBQ0osS0FBSyw0QkFBNEIsQ0FBQyxhQUFhO29CQUM3QyxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLG1CQUFtQixFQUNuQjt3QkFDRSxPQUFPLEVBQ0wsZ0VBQWdFO3dCQUNsRSxVQUFVLEVBQ1Isd0VBQXdFO3FCQUMzRSxFQUNELEtBQUssQ0FDTixDQUFDO2dCQUNKO29CQUNFLE1BQU0sS0FBSyxDQUFDO1lBQ2hCLENBQUM7UUFDSCxDQUFDO1FBQ0QsTUFBTSxLQUFLLENBQUM7SUFDZCxDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQmFja2VuZE91dHB1dENsaWVudCxcbiAgQmFja2VuZE91dHB1dENsaWVudEVycm9yLFxuICBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3JUeXBlLFxuICBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvZGVwbG95ZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgQW1wbGlmeVVzZXJFcnJvciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcblxuLyoqXG4gKiBDb21tb24gRXJyb3IgaGFuZGxpbmcgZm9yIEJhY2tlbmRPdXRwdXRDbGllbnQuZ2V0T3V0cHV0KCkgaW4gbW9kZWwtZ2VuZXJhdG9yIHBhY2thZ2UuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRCYWNrZW5kT3V0cHV0V2l0aEVycm9ySGFuZGxpbmcgPSBhc3luYyAoXG4gIGJhY2tlbmRPdXRwdXRDbGllbnQ6IEJhY2tlbmRPdXRwdXRDbGllbnQsXG4gIGJhY2tlbmRJZGVudGlmaWVyOiBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyLFxuKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGJhY2tlbmRPdXRwdXRDbGllbnQuZ2V0T3V0cHV0KGJhY2tlbmRJZGVudGlmaWVyKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoQmFja2VuZE91dHB1dENsaWVudEVycm9yLmlzQmFja2VuZE91dHB1dENsaWVudEVycm9yKGVycm9yKSkge1xuICAgICAgc3dpdGNoIChlcnJvci5jb2RlKSB7XG4gICAgICAgIGNhc2UgQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZS5ERVBMT1lNRU5UX0lOX1BST0dSRVNTOlxuICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICAgJ0RlcGxveW1lbnRJblByb2dyZXNzRXJyb3InLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlOiAnRGVwbG95bWVudCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuJyxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogJ1JlLXJ1biB0aGlzIGNvbW1hbmQgb25jZSB0aGUgZGVwbG95bWVudCBjb21wbGV0ZXMuJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuTk9fU1RBQ0tfRk9VTkQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgICAnU3RhY2tEb2VzTm90RXhpc3RFcnJvcicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdTdGFjayBkb2VzIG5vdCBleGlzdC4nLFxuICAgICAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgICAgICdFbnN1cmUgdGhlIENsb3VkRm9ybWF0aW9uIHN0YWNrIElEIG9yIEFtcGxpZnkgQXBwIElEIGFuZCBicmFuY2ggc3BlY2lmaWVkIGFyZSBjb3JyZWN0IGFuZCBleGlzdHMsIHRoZW4gcmUtcnVuIHRoaXMgY29tbWFuZC4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICk7XG4gICAgICAgIGNhc2UgQmFja2VuZE91dHB1dENsaWVudEVycm9yVHlwZS5OT19PVVRQVVRTX0ZPVU5EOlxuICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICAgJ0FtcGxpZnlPdXRwdXRzTm90Rm91bmRFcnJvcicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdBbXBsaWZ5IG91dHB1dHMgbm90IGZvdW5kIGluIHN0YWNrIG1ldGFkYXRhJyxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogYEVuc3VyZSB0aGUgQ2xvdWRGb3JtYXRpb24gc3RhY2sgSUQgb3IgQW1wbGlmeSBBcHAgSUQgYW5kIGJyYW5jaCBzcGVjaWZpZWQgYXJlIGNvcnJlY3QgYW5kIGV4aXN0cy5cbiAgICAgIElmIHRoaXMgaXMgYSBuZXcgc2FuZGJveCBvciBicmFuY2ggZGVwbG95bWVudCwgd2FpdCBmb3IgdGhlIGRlcGxveW1lbnQgdG8gYmUgc3VjY2Vzc2Z1bGx5IGZpbmlzaGVkIGFuZCB0cnkgYWdhaW4uYCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICApO1xuICAgICAgICBjYXNlIEJhY2tlbmRPdXRwdXRDbGllbnRFcnJvclR5cGUuQ1JFREVOVElBTFNfRVJST1I6XG4gICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgICAnQ3JlZGVudGlhbHNFcnJvcicsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAgICAgJ1VuYWJsZSB0byBnZXQgYmFja2VuZCBvdXRwdXRzIGR1ZSB0byBpbnZhbGlkIGNyZWRlbnRpYWxzLicsXG4gICAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgICAgJ0Vuc3VyZSB5b3VyIEFXUyBjcmVkZW50aWFscyBhcmUgY29ycmVjdGx5IHNldCBhbmQgcmVmcmVzaGVkLicsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBCYWNrZW5kT3V0cHV0Q2xpZW50RXJyb3JUeXBlLkFDQ0VTU19ERU5JRUQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgICAnQWNjZXNzRGVuaWVkRXJyb3InLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICAgICAgICdVbmFibGUgdG8gZ2V0IGJhY2tlbmQgb3V0cHV0cyBkdWUgdG8gaW5zdWZmaWNpZW50IHBlcm1pc3Npb25zLicsXG4gICAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgICAgJ0Vuc3VyZSB5b3UgaGF2ZSBwZXJtaXNzaW9ucyB0byBjYWxsIGNsb3VkZm9ybWF0aW9uOkdldFRlbXBsYXRlU3VtbWFyeS4nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIl19