"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseStackAssembly = exports.ExtendedStackSelection = void 0;
const chalk = require("chalk");
const minimatch_1 = require("minimatch");
const stack_collection_1 = require("./stack-collection");
const util_1 = require("../../util");
/**
 * When selecting stacks, what other stacks to include because of dependencies
 */
var ExtendedStackSelection;
(function (ExtendedStackSelection) {
    /**
     * Don't select any extra stacks
     */
    ExtendedStackSelection[ExtendedStackSelection["None"] = 0] = "None";
    /**
     * Include stacks that this stack depends on
     */
    ExtendedStackSelection[ExtendedStackSelection["Upstream"] = 1] = "Upstream";
    /**
     * Include stacks that depend on this stack
     */
    ExtendedStackSelection[ExtendedStackSelection["Downstream"] = 2] = "Downstream";
})(ExtendedStackSelection || (exports.ExtendedStackSelection = ExtendedStackSelection = {}));
/**
 * A single Cloud Assembly and the operations we do on it to deploy the artifacts inside
 */
class BaseStackAssembly {
    assembly;
    /**
     * Sanitize a list of stack match patterns
     */
    static sanitizePatterns(patterns) {
        let sanitized = patterns.filter(s => s != null); // filter null/undefined
        sanitized = [...new Set(sanitized)]; // make them unique
        return sanitized;
    }
    /**
     * The directory this CloudAssembly was read from
     */
    directory;
    /**
     * The IoHelper used for messaging
     */
    ioHelper;
    constructor(assembly, ioHelper) {
        this.assembly = assembly;
        this.directory = assembly.directory;
        this.ioHelper = ioHelper;
    }
    /**
     * Select a single stack by its ID
     */
    stackById(stackId) {
        return new stack_collection_1.StackCollection(this, [this.assembly.getStackArtifact(stackId)]);
    }
    async selectMatchingStacks(stacks, patterns, extend = ExtendedStackSelection.None) {
        const matchingPattern = (pattern) => (stack) => (0, minimatch_1.minimatch)(stack.hierarchicalId, pattern);
        const matchedStacks = (0, util_1.flatten)(patterns.map(pattern => stacks.filter(matchingPattern(pattern))));
        return this.extendStacks(matchedStacks, stacks, extend);
    }
    async extendStacks(matched, all, extend = ExtendedStackSelection.None) {
        const allStacks = new Map();
        for (const stack of all) {
            allStacks.set(stack.hierarchicalId, stack);
        }
        const index = indexByHierarchicalId(matched);
        switch (extend) {
            case ExtendedStackSelection.Downstream:
                await includeDownstreamStacks(this.ioHelper, index, allStacks);
                break;
            case ExtendedStackSelection.Upstream:
                await includeUpstreamStacks(this.ioHelper, index, allStacks);
                break;
        }
        // Filter original array because it is in the right order
        const selectedList = all.filter(s => index.has(s.hierarchicalId));
        return new stack_collection_1.StackCollection(this, selectedList);
    }
}
exports.BaseStackAssembly = BaseStackAssembly;
function indexByHierarchicalId(stacks) {
    const result = new Map();
    for (const stack of stacks) {
        result.set(stack.hierarchicalId, stack);
    }
    return result;
}
/**
 * Calculate the transitive closure of stack dependents.
 *
 * Modifies `selectedStacks` in-place.
 */
async function includeDownstreamStacks(ioHelper, selectedStacks, allStacks) {
    const added = new Array();
    let madeProgress;
    do {
        madeProgress = false;
        for (const [id, stack] of allStacks) {
            // Select this stack if it's not selected yet AND it depends on a stack that's in the selected set
            if (!selectedStacks.has(id) && (stack.dependencies || []).some(dep => selectedStacks.has(dep.id))) {
                selectedStacks.set(id, stack);
                added.push(id);
                madeProgress = true;
            }
        }
    } while (madeProgress);
    if (added.length > 0) {
        await ioHelper.defaults.info(`Including depending stacks: ${chalk.bold(added.join(', '))}`);
    }
}
/**
 * Calculate the transitive closure of stack dependencies.
 *
 * Modifies `selectedStacks` in-place.
 */
async function includeUpstreamStacks(ioHelper, selectedStacks, allStacks) {
    const added = new Array();
    let madeProgress = true;
    while (madeProgress) {
        madeProgress = false;
        for (const stack of selectedStacks.values()) {
            // Select an additional stack if it's not selected yet and a dependency of a selected stack (and exists, obviously)
            for (const dependencyId of stack.dependencies.map(x => x.manifest.displayName ?? x.id)) {
                if (!selectedStacks.has(dependencyId) && allStacks.has(dependencyId)) {
                    added.push(dependencyId);
                    selectedStacks.set(dependencyId, allStacks.get(dependencyId));
                    madeProgress = true;
                }
            }
        }
    }
    if (added.length > 0) {
        await ioHelper.defaults.info(`Including dependency stacks: ${chalk.bold(added.join(', '))}`);
    }
}
//# sourceMappingURL=data:application/json;base64,