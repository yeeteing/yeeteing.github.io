import { Arn, Lazy, Stack, Tags } from 'aws-cdk-lib';
import { AmplifyUserError, TagName } from '@aws-amplify/platform-core';
import { AmplifyFunctionBase } from './function_construct_base.js';
import { FunctionResourceAccessAcceptor } from './resource_access_acceptor.js';
import { amplifySsmEnvConfigKey } from './constants.js';
import { Effect, PolicyStatement } from 'aws-cdk-lib/aws-iam';
/**
 * Adapts provided CDK function as Amplify function.
 */
export class ProvidedFunctionFactory {
    functionProvider;
    props;
    generator;
    /**
     * Creates provided function factory.
     */
    constructor(functionProvider, props) {
        this.functionProvider = functionProvider;
        this.props = props;
    }
    /**
     * Creates a function instance.
     */
    getInstance(props) {
        if (!this.generator) {
            this.generator = new ProvidedFunctionGenerator(this.functionProvider, props.outputStorageStrategy, this.props);
        }
        return props.constructContainer.getOrCompute(this.generator);
    }
}
class ProvidedFunctionGenerator {
    functionProvider;
    outputStorageStrategy;
    resourceGroupName;
    constructor(functionProvider, outputStorageStrategy, props) {
        this.functionProvider = functionProvider;
        this.outputStorageStrategy = outputStorageStrategy;
        this.resourceGroupName = props?.resourceGroupName ?? 'function';
    }
    generateContainerEntry = ({ scope, backendSecretResolver, }) => {
        let providedFunction;
        try {
            providedFunction = this.functionProvider(scope);
        }
        catch (e) {
            if (e instanceof Error &&
                (e.message.includes('docker exited with status 1') ||
                    e.message.includes('docker ENOENT'))) {
                throw new AmplifyUserError('CustomFunctionProviderDockerError', {
                    message: 'Failed to instantiate custom function provider',
                    resolution: 'See https://docs.amplify.aws/react/build-a-backend/functions/custom-functions for more details about current limitations and troubleshooting steps.',
                }, e);
            }
            else {
                throw new AmplifyUserError('CustomFunctionProviderError', {
                    message: 'Failed to instantiate custom function provider',
                    resolution: 'Check the definition of your custom function provided in `defineFunction` and refer to the logs for more information. See https://docs.amplify.aws/react/build-a-backend/functions/custom-functions for more details.',
                }, e instanceof Error ? e : undefined);
            }
        }
        return new ProvidedAmplifyFunction(scope, `${providedFunction.node.id}-provided`, this.outputStorageStrategy, providedFunction, backendSecretResolver);
    };
}
class ProvidedAmplifyFunction extends AmplifyFunctionBase {
    backendSecretResolver;
    resources;
    cfnFunction;
    envVars = {};
    ssmEnvVars = {};
    ssmPaths = [];
    constructor(scope, id, outputStorageStrategy, providedFunction, backendSecretResolver) {
        super(scope, id, outputStorageStrategy);
        this.backendSecretResolver = backendSecretResolver;
        this.cfnFunction = providedFunction.node.findChild('Resource');
        Tags.of(this.cfnFunction).add(TagName.FRIENDLY_NAME, providedFunction.node.id);
        const currentEnvVars = this.cfnFunction.environment;
        this.cfnFunction.addPropertyOverride('Environment.Variables', Lazy.any({
            produce: () => {
                if (currentEnvVars &&
                    'variables' in currentEnvVars &&
                    isStringRecord(currentEnvVars.variables)) {
                    return {
                        ...currentEnvVars.variables,
                        ...this.envVars,
                        [amplifySsmEnvConfigKey]: JSON.stringify(this.ssmEnvVars),
                    };
                }
                return {
                    ...this.envVars,
                    [amplifySsmEnvConfigKey]: JSON.stringify(this.ssmEnvVars),
                };
            },
        }));
        providedFunction.node.addValidation({
            validate: () => {
                // only add the ssm access policy if there are ssm paths
                if (this.ssmPaths.length > 0) {
                    const ssmAccessPolicy = new PolicyStatement({
                        effect: Effect.ALLOW,
                        actions: ['ssm:GetParameters'],
                        resources: this.ssmPaths
                            .map((path) => (path.startsWith('/') ? path.slice(1) : path)) // the Arn formatter will add a leading slash between the resource and resourceName
                            .map((path) => Arn.format({
                            service: 'ssm',
                            resource: 'parameter',
                            resourceName: path,
                        }, Stack.of(providedFunction))),
                    });
                    providedFunction.grantPrincipal.addToPrincipalPolicy(ssmAccessPolicy);
                }
                return [];
            },
        });
        this.resources = {
            lambda: providedFunction,
            cfnResources: {
                cfnFunction: this.cfnFunction,
            },
        };
        this.storeOutput();
    }
    addEnvironment = (key, value) => {
        if (key === amplifySsmEnvConfigKey) {
            throw new AmplifyUserError('CustomFunctionProviderReservedEnvironmentVariableError', {
                message: `${amplifySsmEnvConfigKey} is a reserved environment variable name`,
                resolution: 'Please use a non-reserved environment variable name.',
            });
        }
        if (typeof value === 'string') {
            this.envVars[key] = value;
        }
        else {
            this.envVars[key] = '<value will be resolved during runtime>';
            const { branchSecretPath, sharedSecretPath } = this.backendSecretResolver.resolvePath(value);
            this.ssmEnvVars[key] = {
                path: branchSecretPath,
                sharedPath: sharedSecretPath,
            };
            this.ssmPaths.push(branchSecretPath, sharedSecretPath);
        }
    };
    getResourceAccessAcceptor = () => new FunctionResourceAccessAcceptor(this);
}
const isStringRecord = (value) => {
    return (typeof value === 'object' &&
        value !== null &&
        Object.keys(value).every((key) => typeof value[key] === 'string'));
};
//# sourceMappingURL=data:application/json;base64,