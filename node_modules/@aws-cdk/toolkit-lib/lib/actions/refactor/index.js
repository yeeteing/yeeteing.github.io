"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MappingSource = void 0;
const refactoring_1 = require("../../api/refactoring");
/**
 * The source of the resource mappings to be used for refactoring.
 */
class MappingSource {
    /**
     * The mapping will be automatically generated based on a comparison of
     * the deployed stacks and the local stacks.
     *
     * @param exclude - A list of resource locations to exclude from the mapping.
     */
    static auto(exclude = []) {
        const excludeList = new refactoring_1.InMemoryExcludeList(exclude);
        return new MappingSource('auto', [], excludeList);
    }
    /**
     * An explicitly provided list of mappings, which will be used for refactoring.
     */
    static explicit(groups) {
        return new MappingSource('explicit', groups, new refactoring_1.NeverExclude());
    }
    /**
     * An explicitly provided list of mappings, which will be used for refactoring,
     * but in reverse, that is, the source locations will become the destination
     * locations and vice versa.
     */
    static reverse(groups) {
        const reverseGroups = groups.map((group) => ({
            ...group,
            resources: Object.fromEntries(Object.entries(group.resources).map(([src, dst]) => [dst, src])),
        }));
        return MappingSource.explicit(reverseGroups);
    }
    /**
     * @internal
     */
    source;
    /**
     * @internal
     */
    groups;
    /**
     * @internal
     */
    exclude;
    constructor(source, groups, exclude) {
        this.source = source;
        this.groups = groups;
        this.exclude = exclude;
    }
}
exports.MappingSource = MappingSource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSx1REFBMEU7QUFJMUU7O0dBRUc7QUFDSCxNQUFhLGFBQWE7SUFDeEI7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQW9CLEVBQUU7UUFDdkMsTUFBTSxXQUFXLEdBQUcsSUFBSSxpQ0FBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRCxPQUFPLElBQUksYUFBYSxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFzQjtRQUMzQyxPQUFPLElBQUksYUFBYSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSwwQkFBWSxFQUFFLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBc0I7UUFDMUMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztZQUMzQyxHQUFHLEtBQUs7WUFDUixTQUFTLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMvRixDQUFDLENBQUMsQ0FBQztRQUVKLE9BQU8sYUFBYSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7O09BRUc7SUFDYSxNQUFNLENBQWM7SUFFcEM7O09BRUc7SUFDYSxNQUFNLENBQWlCO0lBRXZDOztPQUVHO0lBQ2EsT0FBTyxDQUFjO0lBRXJDLFlBQW9CLE1BQW1CLEVBQUUsTUFBc0IsRUFBRSxPQUFvQjtRQUNuRixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN6QixDQUFDO0NBQ0Y7QUFyREQsc0NBcURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBTdGFja1NlbGVjdG9yIH0gZnJvbSAnLi4vLi4vYXBpL2Nsb3VkLWFzc2VtYmx5JztcbmltcG9ydCB0eXBlIHsgRXhjbHVkZUxpc3QgfSBmcm9tICcuLi8uLi9hcGkvcmVmYWN0b3JpbmcnO1xuaW1wb3J0IHsgSW5NZW1vcnlFeGNsdWRlTGlzdCwgTmV2ZXJFeGNsdWRlIH0gZnJvbSAnLi4vLi4vYXBpL3JlZmFjdG9yaW5nJztcblxudHlwZSBNYXBwaW5nVHlwZSA9ICdhdXRvJyB8ICdleHBsaWNpdCc7XG5cbi8qKlxuICogVGhlIHNvdXJjZSBvZiB0aGUgcmVzb3VyY2UgbWFwcGluZ3MgdG8gYmUgdXNlZCBmb3IgcmVmYWN0b3JpbmcuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXBwaW5nU291cmNlIHtcbiAgLyoqXG4gICAqIFRoZSBtYXBwaW5nIHdpbGwgYmUgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYmFzZWQgb24gYSBjb21wYXJpc29uIG9mXG4gICAqIHRoZSBkZXBsb3llZCBzdGFja3MgYW5kIHRoZSBsb2NhbCBzdGFja3MuXG4gICAqXG4gICAqIEBwYXJhbSBleGNsdWRlIC0gQSBsaXN0IG9mIHJlc291cmNlIGxvY2F0aW9ucyB0byBleGNsdWRlIGZyb20gdGhlIG1hcHBpbmcuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGF1dG8oZXhjbHVkZTogc3RyaW5nW10gPSBbXSk6IE1hcHBpbmdTb3VyY2Uge1xuICAgIGNvbnN0IGV4Y2x1ZGVMaXN0ID0gbmV3IEluTWVtb3J5RXhjbHVkZUxpc3QoZXhjbHVkZSk7XG4gICAgcmV0dXJuIG5ldyBNYXBwaW5nU291cmNlKCdhdXRvJywgW10sIGV4Y2x1ZGVMaXN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBleHBsaWNpdGx5IHByb3ZpZGVkIGxpc3Qgb2YgbWFwcGluZ3MsIHdoaWNoIHdpbGwgYmUgdXNlZCBmb3IgcmVmYWN0b3JpbmcuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGV4cGxpY2l0KGdyb3VwczogTWFwcGluZ0dyb3VwW10pOiBNYXBwaW5nU291cmNlIHtcbiAgICByZXR1cm4gbmV3IE1hcHBpbmdTb3VyY2UoJ2V4cGxpY2l0JywgZ3JvdXBzLCBuZXcgTmV2ZXJFeGNsdWRlKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGV4cGxpY2l0bHkgcHJvdmlkZWQgbGlzdCBvZiBtYXBwaW5ncywgd2hpY2ggd2lsbCBiZSB1c2VkIGZvciByZWZhY3RvcmluZyxcbiAgICogYnV0IGluIHJldmVyc2UsIHRoYXQgaXMsIHRoZSBzb3VyY2UgbG9jYXRpb25zIHdpbGwgYmVjb21lIHRoZSBkZXN0aW5hdGlvblxuICAgKiBsb2NhdGlvbnMgYW5kIHZpY2UgdmVyc2EuXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIHJldmVyc2UoZ3JvdXBzOiBNYXBwaW5nR3JvdXBbXSk6IE1hcHBpbmdTb3VyY2Uge1xuICAgIGNvbnN0IHJldmVyc2VHcm91cHMgPSBncm91cHMubWFwKChncm91cCkgPT4gKHtcbiAgICAgIC4uLmdyb3VwLFxuICAgICAgcmVzb3VyY2VzOiBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoZ3JvdXAucmVzb3VyY2VzKS5tYXAoKFtzcmMsIGRzdF0pID0+IFtkc3QsIHNyY10pKSxcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gTWFwcGluZ1NvdXJjZS5leHBsaWNpdChyZXZlcnNlR3JvdXBzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBzb3VyY2U6IE1hcHBpbmdUeXBlO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBncm91cHM6IE1hcHBpbmdHcm91cFtdO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBleGNsdWRlOiBFeGNsdWRlTGlzdDtcblxuICBwcml2YXRlIGNvbnN0cnVjdG9yKHNvdXJjZTogTWFwcGluZ1R5cGUsIGdyb3VwczogTWFwcGluZ0dyb3VwW10sIGV4Y2x1ZGU6IEV4Y2x1ZGVMaXN0KSB7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5ncm91cHMgPSBncm91cHM7XG4gICAgdGhpcy5leGNsdWRlID0gZXhjbHVkZTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlZmFjdG9yT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIG9ubHkgc2hvdyB0aGUgcHJvcG9zZWQgcmVmYWN0b3IsIHdpdGhvdXQgYXBwbHlpbmcgaXRcbiAgICpcbiAgICogQGRlZmF1bHQgZmFsc2VcbiAgICovXG4gIHJlYWRvbmx5IGRyeVJ1bj86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIENyaXRlcmlhIGZvciBzZWxlY3Rpbmcgc3RhY2tzIHRvIGRlcGxveVxuICAgKlxuICAgKiBAZGVmYXVsdCAtIEFsbCBzdGFja3NcbiAgICovXG4gIHN0YWNrcz86IFN0YWNrU2VsZWN0b3I7XG5cbiAgLyoqXG4gICAqIEhvdyB0aGUgdG9vbGtpdCBzaG91bGQgb2J0YWluIHRoZSBtYXBwaW5nc1xuICAgKi9cbiAgbWFwcGluZ1NvdXJjZT86IE1hcHBpbmdTb3VyY2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWFwcGluZ0dyb3VwIHtcbiAgLyoqXG4gICAqIFRoZSBhY2NvdW50IElEIG9mIHRoZSBlbnZpcm9ubWVudCBpbiB3aGljaCB0aGUgbWFwcGluZyBpcyB2YWxpZC5cbiAgICovXG4gIGFjY291bnQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHJlZ2lvbiBvZiB0aGUgZW52aXJvbm1lbnQgaW4gd2hpY2ggdGhlIG1hcHBpbmcgaXMgdmFsaWQuXG4gICAqL1xuICByZWdpb246IHN0cmluZztcblxuICAvKipcbiAgICogQSBjb2xsZWN0aW9uIG9mIHJlc291cmNlIG1hcHBpbmdzLCB3aGVyZSBlYWNoIGtleSBpcyB0aGUgc291cmNlIGxvY2F0aW9uXG4gICAqIGFuZCB0aGUgdmFsdWUgaXMgdGhlIGRlc3RpbmF0aW9uIGxvY2F0aW9uLiBMb2NhdGlvbnMgbXVzdCBiZSBpbiB0aGUgZm9ybWF0XG4gICAqIGBTdGFja05hbWUuTG9naWNhbElkYC4gVGhlIHNvdXJjZSBtdXN0IHJlZmVyIHRvIGEgbG9jYXRpb24gd2hlcmUgdGhlcmUgaXNcbiAgICogYSByZXNvdXJjZSBjdXJyZW50bHkgZGVwbG95ZWQsIHdoaWxlIHRoZSBkZXN0aW5hdGlvbiBtdXN0IHJlZmVyIHRvIGFcbiAgICogbG9jYXRpb24gdGhhdCBpcyBub3QgYWxyZWFkeSBvY2N1cGllZCBieSBhbnkgcmVzb3VyY2UuXG4gICAqXG4gICAqL1xuICByZXNvdXJjZXM6IHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gIH07XG59XG4iXX0=