"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalConfigurationController = void 0;
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
const get_config_dir_path_1 = require("./get_config_dir_path");
/**
 * Used to interact with config file based on OS.
 */
class LocalConfigurationController {
    configFileName;
    dirPath;
    configFilePath;
    _store;
    /**
     * Initializes paths to project config dir & config file.
     */
    constructor(configFileName = 'config.json') {
        this.configFileName = configFileName;
        this.dirPath = (0, get_config_dir_path_1.getConfigDirPath)();
        this.configFilePath = path_1.default.join(this.dirPath, this.configFileName);
    }
    /**
     * Gets values from cached config by path.
     */
    async get(path) {
        return path.split('.').reduce((acc, current) => {
            return acc?.[current];
        }, await this.store());
    }
    /**
     * Set value by path & update config file to disk.
     */
    async set(path, value) {
        let current = await this.store();
        path.split('.').forEach((key, index, keys) => {
            if (index === keys.length - 1) {
                current[key] = value;
            }
            else {
                if (current[key] == null) {
                    current[key] = {};
                }
                current = current[key];
            }
        });
        await this.write();
    }
    /**
     * Writes config file to disk if found.
     */
    async write() {
        // creates project directory if it doesn't exist.
        await this.mkConfigDir();
        const output = JSON.stringify(this._store ? this._store : {});
        await promises_1.default.writeFile(this.configFilePath, output, 'utf8');
    }
    /**
     * Reset cached config and delete the config file.
     */
    async clear() {
        this._store = {};
        await promises_1.default.rm(this.configFilePath);
    }
    /**
     * Getter for cached config, retrieves config from disk if not cached already.
     * If the store is not cached & config file does not exist, it will create a blank one.
     */
    async store() {
        if (this._store) {
            return this._store;
        }
        // check if file exists & readable.
        let fd;
        try {
            fd = await promises_1.default.open(this.configFilePath, promises_1.default.constants.F_OK, promises_1.default.constants.O_RDWR);
            const fileContent = await promises_1.default.readFile(fd, 'utf-8');
            this._store = JSON.parse(fileContent);
        }
        catch {
            this._store = {};
            await this.write();
        }
        finally {
            await fd?.close();
        }
        return this._store;
    }
    /**
     * Creates project directory to store config if it doesn't exist yet.
     */
    mkConfigDir() {
        return promises_1.default.mkdir(this.dirPath, { recursive: true });
    }
}
exports.LocalConfigurationController = LocalConfigurationController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxfY29uZmlndXJhdGlvbl9jb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbmZpZy9sb2NhbF9jb25maWd1cmF0aW9uX2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLDJEQUE2QjtBQUU3QiwrREFBeUQ7QUFFekQ7O0dBRUc7QUFDSCxNQUFhLDRCQUE0QjtJQVFWO0lBUDdCLE9BQU8sQ0FBUztJQUNoQixjQUFjLENBQVM7SUFDdkIsTUFBTSxDQUEwQjtJQUVoQzs7T0FFRztJQUNILFlBQTZCLGlCQUFpQixhQUFhO1FBQTlCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUN6RCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUEsc0NBQWdCLEdBQUUsQ0FBQztRQUNsQyxJQUFJLENBQUMsY0FBYyxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLEdBQUcsQ0FBSSxJQUFZO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQzNCLENBQUMsR0FBNEIsRUFBRSxPQUFlLEVBQUUsRUFBRTtZQUNoRCxPQUFPLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBNEIsQ0FBQztRQUNuRCxDQUFDLEVBQ0QsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQ2QsQ0FBQztJQUNULENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBWSxFQUFFLEtBQWdDO1FBQ3RELElBQUksT0FBTyxHQUE0QixNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUUxRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDM0MsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUN2QixDQUFDO2lCQUFNLENBQUM7Z0JBQ04sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUM7b0JBQ3pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ3BCLENBQUM7Z0JBQ0QsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQTRCLENBQUM7WUFDcEQsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLEtBQUs7UUFDVCxpREFBaUQ7UUFDakQsTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFekIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5RCxNQUFNLGtCQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxLQUFLO1FBQ1QsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDakIsTUFBTSxrQkFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUVEOzs7T0FHRztJQUNLLEtBQUssQ0FBQyxLQUFLO1FBQ2pCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUNyQixDQUFDO1FBQ0QsbUNBQW1DO1FBQ25DLElBQUksRUFBRSxDQUFDO1FBRVAsSUFBSSxDQUFDO1lBQ0gsRUFBRSxHQUFHLE1BQU0sa0JBQUUsQ0FBQyxJQUFJLENBQ2hCLElBQUksQ0FBQyxjQUFjLEVBQ25CLGtCQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFDakIsa0JBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUNwQixDQUFDO1lBQ0YsTUFBTSxXQUFXLEdBQUcsTUFBTSxrQkFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3hDLENBQUM7UUFBQyxNQUFNLENBQUM7WUFDUCxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztZQUNqQixNQUFNLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNyQixDQUFDO2dCQUFTLENBQUM7WUFDVCxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUNwQixDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNLLFdBQVc7UUFDakIsT0FBTyxrQkFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNGO0FBbEdELG9FQWtHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCB7IENvbmZpZ3VyYXRpb25Db250cm9sbGVyIH0gZnJvbSAnLi9sb2NhbF9jb25maWd1cmF0aW9uX2NvbnRyb2xsZXJfZmFjdG9yeSc7XG5pbXBvcnQgeyBnZXRDb25maWdEaXJQYXRoIH0gZnJvbSAnLi9nZXRfY29uZmlnX2Rpcl9wYXRoJztcblxuLyoqXG4gKiBVc2VkIHRvIGludGVyYWN0IHdpdGggY29uZmlnIGZpbGUgYmFzZWQgb24gT1MuXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2NhbENvbmZpZ3VyYXRpb25Db250cm9sbGVyIGltcGxlbWVudHMgQ29uZmlndXJhdGlvbkNvbnRyb2xsZXIge1xuICBkaXJQYXRoOiBzdHJpbmc7XG4gIGNvbmZpZ0ZpbGVQYXRoOiBzdHJpbmc7XG4gIF9zdG9yZTogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHBhdGhzIHRvIHByb2plY3QgY29uZmlnIGRpciAmIGNvbmZpZyBmaWxlLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb25maWdGaWxlTmFtZSA9ICdjb25maWcuanNvbicpIHtcbiAgICB0aGlzLmRpclBhdGggPSBnZXRDb25maWdEaXJQYXRoKCk7XG4gICAgdGhpcy5jb25maWdGaWxlUGF0aCA9IHBhdGguam9pbih0aGlzLmRpclBhdGgsIHRoaXMuY29uZmlnRmlsZU5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdmFsdWVzIGZyb20gY2FjaGVkIGNvbmZpZyBieSBwYXRoLlxuICAgKi9cbiAgYXN5bmMgZ2V0PFQ+KHBhdGg6IHN0cmluZykge1xuICAgIHJldHVybiBwYXRoLnNwbGl0KCcuJykucmVkdWNlKFxuICAgICAgKGFjYzogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sIGN1cnJlbnQ6IHN0cmluZykgPT4ge1xuICAgICAgICByZXR1cm4gYWNjPy5bY3VycmVudF0gYXMgUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgICB9LFxuICAgICAgYXdhaXQgdGhpcy5zdG9yZSgpLFxuICAgICkgYXMgVDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdmFsdWUgYnkgcGF0aCAmIHVwZGF0ZSBjb25maWcgZmlsZSB0byBkaXNrLlxuICAgKi9cbiAgYXN5bmMgc2V0KHBhdGg6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IGJvb2xlYW4gfCBudW1iZXIpIHtcbiAgICBsZXQgY3VycmVudDogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gPSBhd2FpdCB0aGlzLnN0b3JlKCk7XG5cbiAgICBwYXRoLnNwbGl0KCcuJykuZm9yRWFjaCgoa2V5LCBpbmRleCwga2V5cykgPT4ge1xuICAgICAgaWYgKGluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY3VycmVudFtrZXldID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudFtrZXldID09IG51bGwpIHtcbiAgICAgICAgICBjdXJyZW50W2tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50ID0gY3VycmVudFtrZXldIGFzIFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgYXdhaXQgdGhpcy53cml0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlcyBjb25maWcgZmlsZSB0byBkaXNrIGlmIGZvdW5kLlxuICAgKi9cbiAgYXN5bmMgd3JpdGUoKSB7XG4gICAgLy8gY3JlYXRlcyBwcm9qZWN0IGRpcmVjdG9yeSBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgIGF3YWl0IHRoaXMubWtDb25maWdEaXIoKTtcblxuICAgIGNvbnN0IG91dHB1dCA9IEpTT04uc3RyaW5naWZ5KHRoaXMuX3N0b3JlID8gdGhpcy5fc3RvcmUgOiB7fSk7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKHRoaXMuY29uZmlnRmlsZVBhdGgsIG91dHB1dCwgJ3V0ZjgnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBjYWNoZWQgY29uZmlnIGFuZCBkZWxldGUgdGhlIGNvbmZpZyBmaWxlLlxuICAgKi9cbiAgYXN5bmMgY2xlYXIoKSB7XG4gICAgdGhpcy5fc3RvcmUgPSB7fTtcbiAgICBhd2FpdCBmcy5ybSh0aGlzLmNvbmZpZ0ZpbGVQYXRoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXR0ZXIgZm9yIGNhY2hlZCBjb25maWcsIHJldHJpZXZlcyBjb25maWcgZnJvbSBkaXNrIGlmIG5vdCBjYWNoZWQgYWxyZWFkeS5cbiAgICogSWYgdGhlIHN0b3JlIGlzIG5vdCBjYWNoZWQgJiBjb25maWcgZmlsZSBkb2VzIG5vdCBleGlzdCwgaXQgd2lsbCBjcmVhdGUgYSBibGFuayBvbmUuXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHN0b3JlKCk6IFByb21pc2U8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+IHtcbiAgICBpZiAodGhpcy5fc3RvcmUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdG9yZTtcbiAgICB9XG4gICAgLy8gY2hlY2sgaWYgZmlsZSBleGlzdHMgJiByZWFkYWJsZS5cbiAgICBsZXQgZmQ7XG5cbiAgICB0cnkge1xuICAgICAgZmQgPSBhd2FpdCBmcy5vcGVuKFxuICAgICAgICB0aGlzLmNvbmZpZ0ZpbGVQYXRoLFxuICAgICAgICBmcy5jb25zdGFudHMuRl9PSyxcbiAgICAgICAgZnMuY29uc3RhbnRzLk9fUkRXUixcbiAgICAgICk7XG4gICAgICBjb25zdCBmaWxlQ29udGVudCA9IGF3YWl0IGZzLnJlYWRGaWxlKGZkLCAndXRmLTgnKTtcbiAgICAgIHRoaXMuX3N0b3JlID0gSlNPTi5wYXJzZShmaWxlQ29udGVudCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICB0aGlzLl9zdG9yZSA9IHt9O1xuICAgICAgYXdhaXQgdGhpcy53cml0ZSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBhd2FpdCBmZD8uY2xvc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N0b3JlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgcHJvamVjdCBkaXJlY3RvcnkgdG8gc3RvcmUgY29uZmlnIGlmIGl0IGRvZXNuJ3QgZXhpc3QgeWV0LlxuICAgKi9cbiAgcHJpdmF0ZSBta0NvbmZpZ0RpcigpIHtcbiAgICByZXR1cm4gZnMubWtkaXIodGhpcy5kaXJQYXRoLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgfVxufVxuIl19