import { Construct } from 'constructs';
import { Stack } from 'aws-cdk-lib';
import { functionOutputKey, } from '@aws-amplify/backend-output-schemas';
import { AttributionMetadataStorage } from '@aws-amplify/backend-output-storage';
import { fileURLToPath } from 'node:url';
const functionStackType = 'function-Lambda';
/**
 * A base class for function constructs.
 */
export class AmplifyFunctionBase extends Construct {
    outputStorageStrategy;
    stack;
    /**
     * Creates base function construct.
     */
    constructor(scope, id, outputStorageStrategy) {
        super(scope, id);
        this.outputStorageStrategy = outputStorageStrategy;
        this.stack = Stack.of(scope);
        new AttributionMetadataStorage().storeAttributionMetadata(Stack.of(this), functionStackType, fileURLToPath(new URL('../package.json', import.meta.url)));
    }
    storeOutput = () => {
        this.outputStorageStrategy.appendToBackendOutputList(functionOutputKey, {
            version: '1',
            payload: {
                definedFunctions: this.resources.lambda.functionName,
            },
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVuY3Rpb25fY29uc3RydWN0X2Jhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZnVuY3Rpb25fY29uc3RydWN0X2Jhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQVF2QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFFTCxpQkFBaUIsR0FDbEIsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUNqRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXpDLE1BQU0saUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7QUFFNUM7O0dBRUc7QUFDSCxNQUFNLE9BQWdCLG1CQUNwQixTQUFRLFNBQVM7SUFjRTtJQVhWLEtBQUssQ0FBUTtJQUt0Qjs7T0FFRztJQUNILFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNPLHFCQUFtRTtRQUVwRixLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRkEsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUE4QztRQUlwRixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFN0IsSUFBSSwwQkFBMEIsRUFBRSxDQUFDLHdCQUF3QixDQUN2RCxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNkLGlCQUFpQixFQUNqQixhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzRCxDQUFDO0lBQ0osQ0FBQztJQUVTLFdBQVcsR0FBRyxHQUFTLEVBQUU7UUFDakMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLHlCQUF5QixDQUFDLGlCQUFpQixFQUFFO1lBQ3RFLE9BQU8sRUFBRSxHQUFHO1lBQ1osT0FBTyxFQUFFO2dCQUNQLGdCQUFnQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFlBQVk7YUFDckQ7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHtcbiAgQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbiAgRnVuY3Rpb25SZXNvdXJjZXMsXG4gIFJlc291cmNlQWNjZXNzQWNjZXB0b3IsXG4gIFJlc291cmNlQWNjZXNzQWNjZXB0b3JGYWN0b3J5LFxuICBSZXNvdXJjZVByb3ZpZGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHtcbiAgRnVuY3Rpb25PdXRwdXQsXG4gIGZ1bmN0aW9uT3V0cHV0S2V5LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc2NoZW1hcyc7XG5pbXBvcnQgeyBBdHRyaWJ1dGlvbk1ldGFkYXRhU3RvcmFnZSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zdG9yYWdlJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICdub2RlOnVybCc7XG5cbmNvbnN0IGZ1bmN0aW9uU3RhY2tUeXBlID0gJ2Z1bmN0aW9uLUxhbWJkYSc7XG5cbi8qKlxuICogQSBiYXNlIGNsYXNzIGZvciBmdW5jdGlvbiBjb25zdHJ1Y3RzLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQW1wbGlmeUZ1bmN0aW9uQmFzZVxuICBleHRlbmRzIENvbnN0cnVjdFxuICBpbXBsZW1lbnRzIFJlc291cmNlUHJvdmlkZXI8RnVuY3Rpb25SZXNvdXJjZXM+LCBSZXNvdXJjZUFjY2Vzc0FjY2VwdG9yRmFjdG9yeVxue1xuICByZWFkb25seSBzdGFjazogU3RhY2s7XG4gIGFic3RyYWN0IHJlc291cmNlczogRnVuY3Rpb25SZXNvdXJjZXM7XG5cbiAgYWJzdHJhY3QgZ2V0UmVzb3VyY2VBY2Nlc3NBY2NlcHRvcjogKCkgPT4gUmVzb3VyY2VBY2Nlc3NBY2NlcHRvcjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBiYXNlIGZ1bmN0aW9uIGNvbnN0cnVjdC5cbiAgICovXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k6IEJhY2tlbmRPdXRwdXRTdG9yYWdlU3RyYXRlZ3k8RnVuY3Rpb25PdXRwdXQ+LFxuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgdGhpcy5zdGFjayA9IFN0YWNrLm9mKHNjb3BlKTtcblxuICAgIG5ldyBBdHRyaWJ1dGlvbk1ldGFkYXRhU3RvcmFnZSgpLnN0b3JlQXR0cmlidXRpb25NZXRhZGF0YShcbiAgICAgIFN0YWNrLm9mKHRoaXMpLFxuICAgICAgZnVuY3Rpb25TdGFja1R5cGUsXG4gICAgICBmaWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4uL3BhY2thZ2UuanNvbicsIGltcG9ydC5tZXRhLnVybCkpLFxuICAgICk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3RvcmVPdXRwdXQgPSAoKTogdm9pZCA9PiB7XG4gICAgdGhpcy5vdXRwdXRTdG9yYWdlU3RyYXRlZ3kuYXBwZW5kVG9CYWNrZW5kT3V0cHV0TGlzdChmdW5jdGlvbk91dHB1dEtleSwge1xuICAgICAgdmVyc2lvbjogJzEnLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBkZWZpbmVkRnVuY3Rpb25zOiB0aGlzLnJlc291cmNlcy5sYW1iZGEuZnVuY3Rpb25OYW1lLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==