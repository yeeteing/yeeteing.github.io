import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import { execa as _execa } from 'execa';
import * as _path from 'path';
import { LogLevel } from '../printer/printer.js';
import { format } from '../format/format.js';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_debugger_logger.js';
import { PackageManagerControllerBase } from './package_manager_controller_base.js';
import { YarnModernLockFileReader } from './lock-file-reader/yarn_modern_lock_file_reader.js';
/**
 * YarnModernPackageManagerController is an abstraction around yarn modern (yarn v2+) commands that are needed to initialize a project and install dependencies
 */
export class YarnModernPackageManagerController extends PackageManagerControllerBase {
    cwd;
    printer;
    fsp;
    path;
    execa;
    executeWithDebugLogger;
    existsSync;
    lockFileReader;
    /**
     * constructor
     */
    constructor(cwd, printer, fsp = _fsp, path = _path, execa = _execa, executeWithDebugLogger = _executeWithDebugLogger, existsSync = _existsSync, lockFileReader = new YarnModernLockFileReader()) {
        super(cwd, 'yarn', ['init', '--yes'], 'add', lockFileReader, fsp, path, execa, executeWithDebugLogger, existsSync);
        this.cwd = cwd;
        this.printer = printer;
        this.fsp = fsp;
        this.path = path;
        this.execa = execa;
        this.executeWithDebugLogger = executeWithDebugLogger;
        this.existsSync = existsSync;
        this.lockFileReader = lockFileReader;
    }
    initializeTsConfig = async (targetDir) => {
        await this.addLockFile(targetDir);
        await this.addTypescript(targetDir);
        await super.initializeTsConfig(targetDir);
    };
    /**
     * addLockFile - adds a yarn.lock file to the project root for yarn v2+
     */
    addLockFile = async (targetDir) => {
        try {
            await this.fsp.writeFile(this.path.resolve(targetDir, 'yarn.lock'), '');
        }
        catch (error) {
            if (typeof error === 'string') {
                this.printer.log(format.error(`Error creating ${targetDir}/yarn.lock ${error}}`), LogLevel.ERROR);
            }
            else if (error instanceof Error) {
                this.printer.log(format.error(`Error creating ${targetDir}/yarn.lock ${error.message}}`), LogLevel.ERROR);
            }
        }
    };
    addTypescript = async (targetDir) => {
        await this.executeWithDebugLogger(targetDir, 'yarn', ['add', 'typescript@^5'], this.execa);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybl9tb2Rlcm5fcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFja2FnZS1tYW5hZ2VyLWNvbnRyb2xsZXIveWFybl9tb2Rlcm5fcGFja2FnZV9tYW5hZ2VyX2NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsSUFBSSxXQUFXLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDL0MsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxLQUFLLElBQUksTUFBTSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ3hDLE9BQU8sS0FBSyxLQUFLLE1BQU0sTUFBTSxDQUFDO0FBQzlCLE9BQU8sRUFBRSxRQUFRLEVBQVcsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDN0MsT0FBTyxFQUFFLHNCQUFzQixJQUFJLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdEcsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDcEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFFOUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0NBQW1DLFNBQVEsNEJBQTRCO0lBSzdEO0lBQ0Y7SUFDRTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFYckI7O09BRUc7SUFDSCxZQUNxQixHQUFXLEVBQ2IsT0FBZ0IsRUFDZCxNQUFNLElBQUksRUFDVixPQUFPLEtBQUssRUFDWixRQUFRLE1BQU0sRUFDZCx5QkFBeUIsdUJBQXVCLEVBQ2hELGFBQWEsV0FBVyxFQUN4QixpQkFBaUIsSUFBSSx3QkFBd0IsRUFBRTtRQUVsRSxLQUFLLENBQ0gsR0FBRyxFQUNILE1BQU0sRUFDTixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsRUFDakIsS0FBSyxFQUNMLGNBQWMsRUFDZCxHQUFHLEVBQ0gsSUFBSSxFQUNKLEtBQUssRUFDTCxzQkFBc0IsRUFDdEIsVUFBVSxDQUNYLENBQUM7UUFwQmlCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDYixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2QsUUFBRyxHQUFILEdBQUcsQ0FBTztRQUNWLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixVQUFLLEdBQUwsS0FBSyxDQUFTO1FBQ2QsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUEwQjtRQUNoRCxlQUFVLEdBQVYsVUFBVSxDQUFjO1FBQ3hCLG1CQUFjLEdBQWQsY0FBYyxDQUFpQztJQWNwRSxDQUFDO0lBRUQsa0JBQWtCLEdBQUcsS0FBSyxFQUFFLFNBQWlCLEVBQUUsRUFBRTtRQUMvQyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEMsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sS0FBSyxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzVDLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ssV0FBVyxHQUFHLEtBQUssRUFBRSxTQUFpQixFQUFFLEVBQUU7UUFDaEQsSUFBSSxDQUFDO1lBQ0gsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUUsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDZixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRSxDQUFDO2dCQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FDZCxNQUFNLENBQUMsS0FBSyxDQUFDLGtCQUFrQixTQUFTLGNBQWMsS0FBSyxHQUFHLENBQUMsRUFDL0QsUUFBUSxDQUFDLEtBQUssQ0FDZixDQUFDO1lBQ0osQ0FBQztpQkFBTSxJQUFJLEtBQUssWUFBWSxLQUFLLEVBQUUsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQ2QsTUFBTSxDQUFDLEtBQUssQ0FDVixrQkFBa0IsU0FBUyxjQUFjLEtBQUssQ0FBQyxPQUFPLEdBQUcsQ0FDMUQsRUFDRCxRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7WUFDSixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUMsQ0FBQztJQUVNLGFBQWEsR0FBRyxLQUFLLEVBQUUsU0FBaUIsRUFBRSxFQUFFO1FBQ2xELE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUMvQixTQUFTLEVBQ1QsTUFBTSxFQUNOLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxFQUN4QixJQUFJLENBQUMsS0FBSyxDQUNYLENBQUM7SUFDSixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4aXN0c1N5bmMgYXMgX2V4aXN0c1N5bmMgfSBmcm9tICdmcyc7XG5pbXBvcnQgX2ZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgeyBleGVjYSBhcyBfZXhlY2EgfSBmcm9tICdleGVjYSc7XG5pbXBvcnQgKiBhcyBfcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IExvZ0xldmVsLCBQcmludGVyIH0gZnJvbSAnLi4vcHJpbnRlci9wcmludGVyLmpzJztcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJy4uL2Zvcm1hdC9mb3JtYXQuanMnO1xuaW1wb3J0IHsgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciBhcyBfZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlciB9IGZyb20gJy4vZXhlY3V0ZV93aXRoX2RlYnVnZ2VyX2xvZ2dlci5qcyc7XG5pbXBvcnQgeyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJCYXNlIH0gZnJvbSAnLi9wYWNrYWdlX21hbmFnZXJfY29udHJvbGxlcl9iYXNlLmpzJztcbmltcG9ydCB7IFlhcm5Nb2Rlcm5Mb2NrRmlsZVJlYWRlciB9IGZyb20gJy4vbG9jay1maWxlLXJlYWRlci95YXJuX21vZGVybl9sb2NrX2ZpbGVfcmVhZGVyLmpzJztcblxuLyoqXG4gKiBZYXJuTW9kZXJuUGFja2FnZU1hbmFnZXJDb250cm9sbGVyIGlzIGFuIGFic3RyYWN0aW9uIGFyb3VuZCB5YXJuIG1vZGVybiAoeWFybiB2MispIGNvbW1hbmRzIHRoYXQgYXJlIG5lZWRlZCB0byBpbml0aWFsaXplIGEgcHJvamVjdCBhbmQgaW5zdGFsbCBkZXBlbmRlbmNpZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFlhcm5Nb2Rlcm5QYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgZXh0ZW5kcyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJCYXNlIHtcbiAgLyoqXG4gICAqIGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgY3dkOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcmludGVyOiBQcmludGVyLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBmc3AgPSBfZnNwLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBwYXRoID0gX3BhdGgsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4ZWNhID0gX2V4ZWNhLFxuICAgIHByb3RlY3RlZCByZWFkb25seSBleGVjdXRlV2l0aERlYnVnTG9nZ2VyID0gX2V4ZWN1dGVXaXRoRGVidWdMb2dnZXIsXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGV4aXN0c1N5bmMgPSBfZXhpc3RzU3luYyxcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbG9ja0ZpbGVSZWFkZXIgPSBuZXcgWWFybk1vZGVybkxvY2tGaWxlUmVhZGVyKCksXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgY3dkLFxuICAgICAgJ3lhcm4nLFxuICAgICAgWydpbml0JywgJy0teWVzJ10sXG4gICAgICAnYWRkJyxcbiAgICAgIGxvY2tGaWxlUmVhZGVyLFxuICAgICAgZnNwLFxuICAgICAgcGF0aCxcbiAgICAgIGV4ZWNhLFxuICAgICAgZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlcixcbiAgICAgIGV4aXN0c1N5bmMsXG4gICAgKTtcbiAgfVxuXG4gIGluaXRpYWxpemVUc0NvbmZpZyA9IGFzeW5jICh0YXJnZXREaXI6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IHRoaXMuYWRkTG9ja0ZpbGUodGFyZ2V0RGlyKTtcbiAgICBhd2FpdCB0aGlzLmFkZFR5cGVzY3JpcHQodGFyZ2V0RGlyKTtcbiAgICBhd2FpdCBzdXBlci5pbml0aWFsaXplVHNDb25maWcodGFyZ2V0RGlyKTtcbiAgfTtcblxuICAvKipcbiAgICogYWRkTG9ja0ZpbGUgLSBhZGRzIGEgeWFybi5sb2NrIGZpbGUgdG8gdGhlIHByb2plY3Qgcm9vdCBmb3IgeWFybiB2MitcbiAgICovXG4gIHByaXZhdGUgYWRkTG9ja0ZpbGUgPSBhc3luYyAodGFyZ2V0RGlyOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5mc3Aud3JpdGVGaWxlKHRoaXMucGF0aC5yZXNvbHZlKHRhcmdldERpciwgJ3lhcm4ubG9jaycpLCAnJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICAgICAgZm9ybWF0LmVycm9yKGBFcnJvciBjcmVhdGluZyAke3RhcmdldERpcn0veWFybi5sb2NrICR7ZXJyb3J9fWApLFxuICAgICAgICAgIExvZ0xldmVsLkVSUk9SLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRoaXMucHJpbnRlci5sb2coXG4gICAgICAgICAgZm9ybWF0LmVycm9yKFxuICAgICAgICAgICAgYEVycm9yIGNyZWF0aW5nICR7dGFyZ2V0RGlyfS95YXJuLmxvY2sgJHtlcnJvci5tZXNzYWdlfX1gLFxuICAgICAgICAgICksXG4gICAgICAgICAgTG9nTGV2ZWwuRVJST1IsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgYWRkVHlwZXNjcmlwdCA9IGFzeW5jICh0YXJnZXREaXI6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IHRoaXMuZXhlY3V0ZVdpdGhEZWJ1Z0xvZ2dlcihcbiAgICAgIHRhcmdldERpcixcbiAgICAgICd5YXJuJyxcbiAgICAgIFsnYWRkJywgJ3R5cGVzY3JpcHRAXjUnXSxcbiAgICAgIHRoaXMuZXhlY2EsXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==