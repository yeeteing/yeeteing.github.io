import { AppNameAndBranchMainStackNameResolver, } from './stack-name-resolvers/app_name_and_branch_main_stack_name_resolver.js';
import { PassThroughMainStackNameResolver, } from './stack-name-resolvers/passthrough_main_stack_name_resolver.js';
import { BackendIdentifierMainStackNameResolver } from './stack-name-resolvers/backend_identifier_main_stack_name_resolver.js';
import { StackMetadataBackendOutputRetrievalStrategy } from './stack_metadata_output_retrieval_strategy.js';
/**
 * Asserts that a BackendIdentifier is a BackendIdentifier
 */
export const isBackendIdentifier = (backendIdentifier) => {
    return ('namespace' in backendIdentifier &&
        'name' in backendIdentifier &&
        'type' in backendIdentifier);
};
/**
 * Asserts that a BackendIdentifier is a AppNameAndBranchBackendIdentifier
 */
export const isAppNameAndBranchIdentifier = (backendIdentifier) => {
    return 'appName' in backendIdentifier;
};
/**
 * Asserts that a BackendIdentifier is a StackIdentifier
 */
export const isStackIdentifier = (backendIdentifier) => {
    return 'stackName' in backendIdentifier;
};
/**
 * Constructs an OutputRetrievalStrategy depending on the type of StackIdentifier
 */
export class BackendOutputFetcherFactory {
    cfnClient;
    amplifyClient;
    /**
     * Instantiates the factory
     */
    constructor(cfnClient, amplifyClient) {
        this.cfnClient = cfnClient;
        this.amplifyClient = amplifyClient;
    }
    getStrategy = (backendIdentifier) => {
        if (isStackIdentifier(backendIdentifier)) {
            return new StackMetadataBackendOutputRetrievalStrategy(this.cfnClient, new PassThroughMainStackNameResolver(backendIdentifier));
        }
        else if (isBackendIdentifier(backendIdentifier)) {
            return new StackMetadataBackendOutputRetrievalStrategy(this.cfnClient, new BackendIdentifierMainStackNameResolver(backendIdentifier));
        }
        return new StackMetadataBackendOutputRetrievalStrategy(this.cfnClient, new AppNameAndBranchMainStackNameResolver(this.amplifyClient, backendIdentifier));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9vdXRwdXRfZmV0Y2hlcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2JhY2tlbmRfb3V0cHV0X2ZldGNoZXJfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBRUwscUNBQXFDLEdBQ3RDLE1BQU0sd0VBQXdFLENBQUM7QUFDaEYsT0FBTyxFQUNMLGdDQUFnQyxHQUVqQyxNQUFNLGdFQUFnRSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLHVFQUF1RSxDQUFDO0FBQy9ILE9BQU8sRUFBRSwyQ0FBMkMsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBRzVHOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsQ0FDakMsaUJBQTRDLEVBQ0osRUFBRTtJQUMxQyxPQUFPLENBQ0wsV0FBVyxJQUFJLGlCQUFpQjtRQUNoQyxNQUFNLElBQUksaUJBQWlCO1FBQzNCLE1BQU0sSUFBSSxpQkFBaUIsQ0FDNUIsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUNGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sNEJBQTRCLEdBQUcsQ0FDMUMsaUJBQTRDLEVBQ1ksRUFBRTtJQUMxRCxPQUFPLFNBQVMsSUFBSSxpQkFBaUIsQ0FBQztBQUN4QyxDQUFDLENBQUM7QUFDRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQy9CLGlCQUE0QyxFQUNOLEVBQUU7SUFDeEMsT0FBTyxXQUFXLElBQUksaUJBQWlCLENBQUM7QUFDMUMsQ0FBQyxDQUFDO0FBQ0Y7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMkJBQTJCO0lBSzVCO0lBQ0E7SUFMVjs7T0FFRztJQUNILFlBQ1UsU0FBK0IsRUFDL0IsYUFBNEI7UUFENUIsY0FBUyxHQUFULFNBQVMsQ0FBc0I7UUFDL0Isa0JBQWEsR0FBYixhQUFhLENBQWU7SUFDbkMsQ0FBQztJQUNKLFdBQVcsR0FBRyxDQUFDLGlCQUE0QyxFQUFFLEVBQUU7UUFDN0QsSUFBSSxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLENBQUM7WUFDekMsT0FBTyxJQUFJLDJDQUEyQyxDQUNwRCxJQUFJLENBQUMsU0FBUyxFQUNkLElBQUksZ0NBQWdDLENBQUMsaUJBQWlCLENBQUMsQ0FDeEQsQ0FBQztRQUNKLENBQUM7YUFBTSxJQUFJLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUNsRCxPQUFPLElBQUksMkNBQTJDLENBQ3BELElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxzQ0FBc0MsQ0FBQyxpQkFBaUIsQ0FBQyxDQUM5RCxDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sSUFBSSwyQ0FBMkMsQ0FDcEQsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLHFDQUFxQyxDQUN2QyxJQUFJLENBQUMsYUFBYSxFQUNsQixpQkFBaUIsQ0FDbEIsQ0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBbXBsaWZ5Q2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWFtcGxpZnknO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25DbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb24nO1xuaW1wb3J0IHsgRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJy4vZGVwbG95ZWRfYmFja2VuZF9pZGVudGlmaWVyLmpzJztcbmltcG9ydCB7XG4gIEFwcE5hbWVBbmRCcmFuY2hCYWNrZW5kSWRlbnRpZmllcixcbiAgQXBwTmFtZUFuZEJyYW5jaE1haW5TdGFja05hbWVSZXNvbHZlcixcbn0gZnJvbSAnLi9zdGFjay1uYW1lLXJlc29sdmVycy9hcHBfbmFtZV9hbmRfYnJhbmNoX21haW5fc3RhY2tfbmFtZV9yZXNvbHZlci5qcyc7XG5pbXBvcnQge1xuICBQYXNzVGhyb3VnaE1haW5TdGFja05hbWVSZXNvbHZlcixcbiAgU3RhY2tJZGVudGlmaWVyLFxufSBmcm9tICcuL3N0YWNrLW5hbWUtcmVzb2x2ZXJzL3Bhc3N0aHJvdWdoX21haW5fc3RhY2tfbmFtZV9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllck1haW5TdGFja05hbWVSZXNvbHZlciB9IGZyb20gJy4vc3RhY2stbmFtZS1yZXNvbHZlcnMvYmFja2VuZF9pZGVudGlmaWVyX21haW5fc3RhY2tfbmFtZV9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBTdGFja01ldGFkYXRhQmFja2VuZE91dHB1dFJldHJpZXZhbFN0cmF0ZWd5IH0gZnJvbSAnLi9zdGFja19tZXRhZGF0YV9vdXRwdXRfcmV0cmlldmFsX3N0cmF0ZWd5LmpzJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5cbi8qKlxuICogQXNzZXJ0cyB0aGF0IGEgQmFja2VuZElkZW50aWZpZXIgaXMgYSBCYWNrZW5kSWRlbnRpZmllclxuICovXG5leHBvcnQgY29uc3QgaXNCYWNrZW5kSWRlbnRpZmllciA9IChcbiAgYmFja2VuZElkZW50aWZpZXI6IERlcGxveWVkQmFja2VuZElkZW50aWZpZXIsXG4pOiBiYWNrZW5kSWRlbnRpZmllciBpcyBCYWNrZW5kSWRlbnRpZmllciA9PiB7XG4gIHJldHVybiAoXG4gICAgJ25hbWVzcGFjZScgaW4gYmFja2VuZElkZW50aWZpZXIgJiZcbiAgICAnbmFtZScgaW4gYmFja2VuZElkZW50aWZpZXIgJiZcbiAgICAndHlwZScgaW4gYmFja2VuZElkZW50aWZpZXJcbiAgKTtcbn07XG4vKipcbiAqIEFzc2VydHMgdGhhdCBhIEJhY2tlbmRJZGVudGlmaWVyIGlzIGEgQXBwTmFtZUFuZEJyYW5jaEJhY2tlbmRJZGVudGlmaWVyXG4gKi9cbmV4cG9ydCBjb25zdCBpc0FwcE5hbWVBbmRCcmFuY2hJZGVudGlmaWVyID0gKFxuICBiYWNrZW5kSWRlbnRpZmllcjogRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllcixcbik6IGJhY2tlbmRJZGVudGlmaWVyIGlzIEFwcE5hbWVBbmRCcmFuY2hCYWNrZW5kSWRlbnRpZmllciA9PiB7XG4gIHJldHVybiAnYXBwTmFtZScgaW4gYmFja2VuZElkZW50aWZpZXI7XG59O1xuLyoqXG4gKiBBc3NlcnRzIHRoYXQgYSBCYWNrZW5kSWRlbnRpZmllciBpcyBhIFN0YWNrSWRlbnRpZmllclxuICovXG5leHBvcnQgY29uc3QgaXNTdGFja0lkZW50aWZpZXIgPSAoXG4gIGJhY2tlbmRJZGVudGlmaWVyOiBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyLFxuKTogYmFja2VuZElkZW50aWZpZXIgaXMgU3RhY2tJZGVudGlmaWVyID0+IHtcbiAgcmV0dXJuICdzdGFja05hbWUnIGluIGJhY2tlbmRJZGVudGlmaWVyO1xufTtcbi8qKlxuICogQ29uc3RydWN0cyBhbiBPdXRwdXRSZXRyaWV2YWxTdHJhdGVneSBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2YgU3RhY2tJZGVudGlmaWVyXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZW5kT3V0cHV0RmV0Y2hlckZhY3Rvcnkge1xuICAvKipcbiAgICogSW5zdGFudGlhdGVzIHRoZSBmYWN0b3J5XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNmbkNsaWVudDogQ2xvdWRGb3JtYXRpb25DbGllbnQsXG4gICAgcHJpdmF0ZSBhbXBsaWZ5Q2xpZW50OiBBbXBsaWZ5Q2xpZW50LFxuICApIHt9XG4gIGdldFN0cmF0ZWd5ID0gKGJhY2tlbmRJZGVudGlmaWVyOiBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyKSA9PiB7XG4gICAgaWYgKGlzU3RhY2tJZGVudGlmaWVyKGJhY2tlbmRJZGVudGlmaWVyKSkge1xuICAgICAgcmV0dXJuIG5ldyBTdGFja01ldGFkYXRhQmFja2VuZE91dHB1dFJldHJpZXZhbFN0cmF0ZWd5KFxuICAgICAgICB0aGlzLmNmbkNsaWVudCxcbiAgICAgICAgbmV3IFBhc3NUaHJvdWdoTWFpblN0YWNrTmFtZVJlc29sdmVyKGJhY2tlbmRJZGVudGlmaWVyKSxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChpc0JhY2tlbmRJZGVudGlmaWVyKGJhY2tlbmRJZGVudGlmaWVyKSkge1xuICAgICAgcmV0dXJuIG5ldyBTdGFja01ldGFkYXRhQmFja2VuZE91dHB1dFJldHJpZXZhbFN0cmF0ZWd5KFxuICAgICAgICB0aGlzLmNmbkNsaWVudCxcbiAgICAgICAgbmV3IEJhY2tlbmRJZGVudGlmaWVyTWFpblN0YWNrTmFtZVJlc29sdmVyKGJhY2tlbmRJZGVudGlmaWVyKSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgU3RhY2tNZXRhZGF0YUJhY2tlbmRPdXRwdXRSZXRyaWV2YWxTdHJhdGVneShcbiAgICAgIHRoaXMuY2ZuQ2xpZW50LFxuICAgICAgbmV3IEFwcE5hbWVBbmRCcmFuY2hNYWluU3RhY2tOYW1lUmVzb2x2ZXIoXG4gICAgICAgIHRoaXMuYW1wbGlmeUNsaWVudCxcbiAgICAgICAgYmFja2VuZElkZW50aWZpZXIsXG4gICAgICApLFxuICAgICk7XG4gIH07XG59XG4iXX0=