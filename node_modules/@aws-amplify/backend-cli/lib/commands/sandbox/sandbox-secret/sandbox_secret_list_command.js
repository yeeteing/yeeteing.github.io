import { format, printer } from '@aws-amplify/cli-core';
/**
 * Command to list sandbox secrets.
 */
export class SandboxSecretListCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * List sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'list';
        this.describe = 'List all sandbox secrets';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const sandboxBackendIdentifier = await this.sandboxIdResolver.resolve(args.identifier);
        const secrets = await this.secretClient.listSecrets(sandboxBackendIdentifier);
        if (secrets.length > 0) {
            printer.print(format.list(secrets.map((secret) => secret.name)));
        }
        else {
            printer.print(`No sandbox secrets found. To create a secret use ${format.normalizeAmpxCommand('sandbox secret set <secret-name>')}.`);
        }
        printer.printNewLine();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfbGlzdF9jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1hbmRzL3NhbmRib3gvc2FuZGJveC1zZWNyZXQvc2FuZGJveF9zZWNyZXRfbGlzdF9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFJeEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sd0JBQXdCO0lBa0JoQjtJQUNBO0lBZm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFDbUIsaUJBQTJDLEVBQzNDLFlBQTBCO1FBRDFCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFDM0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFFM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRywwQkFBMEIsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLEdBQUcsS0FBSyxFQUNiLElBQXFELEVBQ3RDLEVBQUU7UUFDakIsTUFBTSx3QkFBd0IsR0FBRyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQ25FLElBQUksQ0FBQyxVQUFVLENBQ2hCLENBQUM7UUFDRixNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUNqRCx3QkFBd0IsQ0FDekIsQ0FBQztRQUVGLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUN2QixPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRSxDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sQ0FBQyxLQUFLLENBQ1gsb0RBQW9ELE1BQU0sQ0FBQyxvQkFBb0IsQ0FDN0Usa0NBQWtDLENBQ25DLEdBQUcsQ0FDTCxDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6QixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3VtZW50c0NhbWVsQ2FzZSwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IFNlY3JldENsaWVudCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLXNlY3JldCc7XG5pbXBvcnQgeyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIgfSBmcm9tICcuLi9zYW5kYm94X2lkX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IGZvcm1hdCwgcHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBBcmd1bWVudHNLZWJhYkNhc2UgfSBmcm9tICcuLi8uLi8uLi9rZWJhYl9jYXNlLmpzJztcbmltcG9ydCB7IFNhbmRib3hDb21tYW5kR2xvYmFsT3B0aW9ucyB9IGZyb20gJy4uL29wdGlvbl90eXBlcy5qcyc7XG5cbi8qKlxuICogQ29tbWFuZCB0byBsaXN0IHNhbmRib3ggc2VjcmV0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFNhbmRib3hTZWNyZXRMaXN0Q29tbWFuZFxuICBpbXBsZW1lbnRzXG4gICAgQ29tbWFuZE1vZHVsZTxvYmplY3QsIEFyZ3VtZW50c0tlYmFiQ2FzZTxTYW5kYm94Q29tbWFuZEdsb2JhbE9wdGlvbnM+Plxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIExpc3Qgc2FuZGJveCBzZWNyZXQgY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuZGJveElkUmVzb2x2ZXI6IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY3JldENsaWVudDogU2VjcmV0Q2xpZW50LFxuICApIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAnbGlzdCc7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdMaXN0IGFsbCBzYW5kYm94IHNlY3JldHMnO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBoYW5kbGVyID0gYXN5bmMgKFxuICAgIGFyZ3M6IEFyZ3VtZW50c0NhbWVsQ2FzZTxTYW5kYm94Q29tbWFuZEdsb2JhbE9wdGlvbnM+LFxuICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBzYW5kYm94QmFja2VuZElkZW50aWZpZXIgPSBhd2FpdCB0aGlzLnNhbmRib3hJZFJlc29sdmVyLnJlc29sdmUoXG4gICAgICBhcmdzLmlkZW50aWZpZXIsXG4gICAgKTtcbiAgICBjb25zdCBzZWNyZXRzID0gYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQubGlzdFNlY3JldHMoXG4gICAgICBzYW5kYm94QmFja2VuZElkZW50aWZpZXIsXG4gICAgKTtcblxuICAgIGlmIChzZWNyZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHByaW50ZXIucHJpbnQoZm9ybWF0Lmxpc3Qoc2VjcmV0cy5tYXAoKHNlY3JldCkgPT4gc2VjcmV0Lm5hbWUpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByaW50ZXIucHJpbnQoXG4gICAgICAgIGBObyBzYW5kYm94IHNlY3JldHMgZm91bmQuIFRvIGNyZWF0ZSBhIHNlY3JldCB1c2UgJHtmb3JtYXQubm9ybWFsaXplQW1weENvbW1hbmQoXG4gICAgICAgICAgJ3NhbmRib3ggc2VjcmV0IHNldCA8c2VjcmV0LW5hbWU+JyxcbiAgICAgICAgKX0uYCxcbiAgICAgICk7XG4gICAgfVxuICAgIHByaW50ZXIucHJpbnROZXdMaW5lKCk7XG4gIH07XG59XG4iXX0=