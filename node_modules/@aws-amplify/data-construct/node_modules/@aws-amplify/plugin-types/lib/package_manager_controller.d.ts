/// <reference types="node" />
import { Readable } from 'node:stream';
export type ExecaOptions = {
    stdin?: 'inherit';
    stdout?: 'pipe';
    stderr?: 'pipe';
    extendEnv?: boolean;
    env?: Record<string, string>;
};
export type ExecaChildProcessResult = {
    exitCode?: number | undefined;
};
export type ExecaChildProcess = {
    stdout: Readable | null;
    stderr: Readable | null;
} & Promise<ExecaChildProcessResult>;
export type Dependency = {
    name: string;
    version: string;
};
export type PackageManagerController = {
    initializeProject: () => Promise<void>;
    initializeTsConfig: (targetDir: string) => Promise<void>;
    installDependencies: (packageNames: string[], type: 'dev' | 'prod') => Promise<void>;
    runWithPackageManager: (args: string[] | undefined, dir: string, options?: ExecaOptions) => ExecaChildProcess;
    getCommand: (args: string[]) => string;
    allowsSignalPropagation: () => boolean;
    tryGetDependencies: () => Promise<Array<Dependency> | undefined>;
};
//# sourceMappingURL=package_manager_controller.d.ts.map