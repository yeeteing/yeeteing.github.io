"use strict";
/**
 * A minimal  of p-limit that does not bring in new dependencies, and is not ESM.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.pLimit = pLimit;
function pLimit(concurrency) {
    const queue = [];
    let activeCount = 0;
    let stopped = false;
    function dispatch() {
        if (activeCount < concurrency && queue.length > 0) {
            const [fac, resolve, reject] = queue.shift();
            activeCount++;
            fac().then((r) => {
                // Start a new job before reporting back on the previous one
                resumeNext();
                resolve(r);
            }, (e) => {
                // Start a new job before reporting back on the previous one
                resumeNext();
                reject(e);
            });
        }
    }
    function resumeNext() {
        activeCount--;
        if (stopped) {
            for (const [_, __, reject] of queue) {
                reject(new Error('Task has been cancelled'));
            }
            queue.splice(0, queue.length);
        }
        dispatch();
    }
    const ret = (promiseFactory) => {
        return new Promise((resolve, reject) => {
            queue.push([promiseFactory, resolve, reject]);
            dispatch();
        });
    };
    Object.defineProperties(ret, {
        dispose: {
            value: () => {
                stopped = true;
            },
        },
    });
    return ret;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicC1saW1pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInAtbGltaXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUlILHdCQWtEQztBQWxERCxTQUFnQixNQUFNLENBQUMsV0FBbUI7SUFDeEMsTUFBTSxLQUFLLEdBQTJFLEVBQUUsQ0FBQztJQUN6RixJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7SUFDcEIsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO0lBRXBCLFNBQVMsUUFBUTtRQUNmLElBQUksV0FBVyxHQUFHLFdBQVcsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUcsQ0FBQztZQUM5QyxXQUFXLEVBQUUsQ0FBQztZQUNkLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FDUixDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNKLDREQUE0RDtnQkFDNUQsVUFBVSxFQUFFLENBQUM7Z0JBQ2IsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQyxFQUNELENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ0osNERBQTREO2dCQUM1RCxVQUFVLEVBQUUsQ0FBQztnQkFDYixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDWixDQUFDLENBQ0YsQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDO0lBRUQsU0FBUyxVQUFVO1FBQ2pCLFdBQVcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUNaLEtBQUssTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksS0FBSyxFQUFFLENBQUM7Z0JBQ3BDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLENBQUM7WUFDL0MsQ0FBQztZQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNoQyxDQUFDO1FBQ0QsUUFBUSxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsTUFBTSxHQUFHLEdBQUcsQ0FBSSxjQUFpQyxFQUFFLEVBQUU7UUFDbkQsT0FBTyxJQUFJLE9BQU8sQ0FBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN4QyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBYyxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzlDLFFBQVEsRUFBRSxDQUFDO1FBQ2IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFDRixNQUFNLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFO1FBQzNCLE9BQU8sRUFBRTtZQUNQLEtBQUssRUFBRSxHQUFHLEVBQUU7Z0JBQ1YsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNqQixDQUFDO1NBQ0Y7S0FDRixDQUFDLENBQUM7SUFFSCxPQUFPLEdBQWEsQ0FBQztBQUN2QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBBIG1pbmltYWwgIG9mIHAtbGltaXQgdGhhdCBkb2VzIG5vdCBicmluZyBpbiBuZXcgZGVwZW5kZW5jaWVzLCBhbmQgaXMgbm90IEVTTS5cbiAqL1xuXG50eXBlIFByb21pc2VGYWN0b3J5PEE+ID0gKCkgPT4gUHJvbWlzZTxBPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBMaW1pdChjb25jdXJyZW5jeTogbnVtYmVyKTogUExpbWl0IHtcbiAgY29uc3QgcXVldWU6IEFycmF5PFtQcm9taXNlRmFjdG9yeTxhbnk+LCAoeDogYW55KSA9PiB2b2lkLCAocmVhc29uPzogYW55KSA9PiB2b2lkXT4gPSBbXTtcbiAgbGV0IGFjdGl2ZUNvdW50ID0gMDtcbiAgbGV0IHN0b3BwZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICBpZiAoYWN0aXZlQ291bnQgPCBjb25jdXJyZW5jeSAmJiBxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBbZmFjLCByZXNvbHZlLCByZWplY3RdID0gcXVldWUuc2hpZnQoKSE7XG4gICAgICBhY3RpdmVDb3VudCsrO1xuICAgICAgZmFjKCkudGhlbihcbiAgICAgICAgKHIpID0+IHtcbiAgICAgICAgICAvLyBTdGFydCBhIG5ldyBqb2IgYmVmb3JlIHJlcG9ydGluZyBiYWNrIG9uIHRoZSBwcmV2aW91cyBvbmVcbiAgICAgICAgICByZXN1bWVOZXh0KCk7XG4gICAgICAgICAgcmVzb2x2ZShyKTtcbiAgICAgICAgfSxcbiAgICAgICAgKGUpID0+IHtcbiAgICAgICAgICAvLyBTdGFydCBhIG5ldyBqb2IgYmVmb3JlIHJlcG9ydGluZyBiYWNrIG9uIHRoZSBwcmV2aW91cyBvbmVcbiAgICAgICAgICByZXN1bWVOZXh0KCk7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9LFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXN1bWVOZXh0KCkge1xuICAgIGFjdGl2ZUNvdW50LS07XG4gICAgaWYgKHN0b3BwZWQpIHtcbiAgICAgIGZvciAoY29uc3QgW18sIF9fLCByZWplY3RdIG9mIHF1ZXVlKSB7XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ1Rhc2sgaGFzIGJlZW4gY2FuY2VsbGVkJykpO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKDAsIHF1ZXVlLmxlbmd0aCk7XG4gICAgfVxuICAgIGRpc3BhdGNoKCk7XG4gIH1cblxuICBjb25zdCByZXQgPSA8QT4ocHJvbWlzZUZhY3Rvcnk6IFByb21pc2VGYWN0b3J5PEE+KSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEE+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHF1ZXVlLnB1c2goW3Byb21pc2VGYWN0b3J5LCByZXNvbHZlLCByZWplY3RdKTtcbiAgICAgIGRpc3BhdGNoKCk7XG4gICAgfSk7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHJldCwge1xuICAgIGRpc3Bvc2U6IHtcbiAgICAgIHZhbHVlOiAoKSA9PiB7XG4gICAgICAgIHN0b3BwZWQgPSB0cnVlO1xuICAgICAgfSxcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gcmV0IGFzIFBMaW1pdDtcbn1cblxuaW50ZXJmYWNlIFBMaW1pdCB7XG4gIGRpc3Bvc2UoKTogdm9pZDtcbiAgPEE+KHByb21pc2VGYWN0b3J5OiBQcm9taXNlRmFjdG9yeTxBPik6IFByb21pc2U8QT47XG59XG4iXX0=