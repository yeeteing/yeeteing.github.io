import semver from 'semver';
import { AmplifyFault } from '@aws-amplify/platform-core';
/**
 * Validates the notices manifest.
 */
export class NoticesManifestValidator {
    props;
    _fetch;
    /**
     * Creates notices manifest validator.
     */
    constructor(props, _fetch = fetch) {
        this.props = props;
        this._fetch = _fetch;
    }
    validate = async (noticesManifest) => {
        const ids = new Set();
        for (const notice of noticesManifest.notices) {
            await this.validateNotice(notice);
            if (ids.has(notice.id)) {
                throw new AmplifyFault('InvalidNoticeManifestFault', {
                    message: `Notice ids must be unique. ${notice.id} is duplicated.`,
                });
            }
            ids.add(notice.id);
        }
    };
    validateNotice = async (notice) => {
        if (notice.link) {
            const gitHubIssueLinkPattern = /^https:\/\/github.com\/aws-amplify\/amplify-backend\/issues\/(?<issueNumber>\d+)$/;
            const matched = notice.link.match(gitHubIssueLinkPattern);
            if (!matched) {
                throw new AmplifyFault('InvalidNoticeManifestFault', {
                    message: `Link must match ${gitHubIssueLinkPattern.source}`,
                });
            }
            if (matched.groups?.issueNumber !== notice.id) {
                throw new AmplifyFault('InvalidNoticeManifestFault', {
                    message: 'Notice id must be equal to GitHub issue number if link is provided',
                });
            }
            if (this.props?.checkLinksWithGitHubApi) {
                const issueNumber = matched.groups.issueNumber;
                const response = await this._fetch(`https://api.github.com/repos/aws-amplify/amplify-backend/issues/${issueNumber}`);
                if (!response.ok) {
                    throw new AmplifyFault('InvalidNoticeManifestFault', {
                        message: 'Notice link must point to valid notice',
                    });
                }
            }
        }
        // Special validations not covered by zod schema.
        for (const predicate of notice.predicates) {
            if (predicate.type === 'packageVersion') {
                if (!semver.validRange(predicate.versionRange)) {
                    throw new AmplifyFault('InvalidNoticeManifestFault', {
                        message: 'Package version predicate must have a valid version range',
                    });
                }
            }
            else if (predicate.type === 'nodeVersion') {
                if (!semver.validRange(predicate.versionRange)) {
                    throw new AmplifyFault('InvalidNoticeManifestFault', {
                        message: 'Node version predicate must have a valid version range',
                    });
                }
            }
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWNlc19tYW5pZmVzdF92YWxpZGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbm90aWNlcy9ub3RpY2VzX21hbmlmZXN0X3ZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLE1BQU0sTUFBTSxRQUFRLENBQUM7QUFDNUIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBTTFEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHdCQUF3QjtJQUtoQjtJQUNBO0lBTG5COztPQUVHO0lBQ0gsWUFDbUIsS0FBcUMsRUFDckMsU0FBUyxLQUFLO1FBRGQsVUFBSyxHQUFMLEtBQUssQ0FBZ0M7UUFDckMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUM5QixDQUFDO0lBRUosUUFBUSxHQUFHLEtBQUssRUFBRSxlQUFnQyxFQUFpQixFQUFFO1FBQ25FLE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFDOUIsS0FBSyxNQUFNLE1BQU0sSUFBSSxlQUFlLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDN0MsTUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2xDLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztnQkFDdkIsTUFBTSxJQUFJLFlBQVksQ0FBQyw0QkFBNEIsRUFBRTtvQkFDbkQsT0FBTyxFQUFFLDhCQUE4QixNQUFNLENBQUMsRUFBRSxpQkFBaUI7aUJBQ2xFLENBQUMsQ0FBQztZQUNMLENBQUM7WUFDRCxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRU0sY0FBYyxHQUFHLEtBQUssRUFBRSxNQUFjLEVBQWlCLEVBQUU7UUFDL0QsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEIsTUFBTSxzQkFBc0IsR0FDMUIsbUZBQW1GLENBQUM7WUFDdEYsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ2IsTUFBTSxJQUFJLFlBQVksQ0FBQyw0QkFBNEIsRUFBRTtvQkFDbkQsT0FBTyxFQUFFLG1CQUFtQixzQkFBc0IsQ0FBQyxNQUFNLEVBQUU7aUJBQzVELENBQUMsQ0FBQztZQUNMLENBQUM7WUFDRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUUsV0FBVyxLQUFLLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQztnQkFDOUMsTUFBTSxJQUFJLFlBQVksQ0FBQyw0QkFBNEIsRUFBRTtvQkFDbkQsT0FBTyxFQUNMLG9FQUFvRTtpQkFDdkUsQ0FBQyxDQUFDO1lBQ0wsQ0FBQztZQUNELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxDQUFDO2dCQUN4QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztnQkFDL0MsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUNoQyxtRUFBbUUsV0FBVyxFQUFFLENBQ2pGLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQztvQkFDakIsTUFBTSxJQUFJLFlBQVksQ0FBQyw0QkFBNEIsRUFBRTt3QkFDbkQsT0FBTyxFQUFFLHdDQUF3QztxQkFDbEQsQ0FBQyxDQUFDO2dCQUNMLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztRQUVELGlEQUFpRDtRQUNqRCxLQUFLLE1BQU0sU0FBUyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUMxQyxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssZ0JBQWdCLEVBQUUsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7b0JBQy9DLE1BQU0sSUFBSSxZQUFZLENBQUMsNEJBQTRCLEVBQUU7d0JBQ25ELE9BQU8sRUFDTCwyREFBMkQ7cUJBQzlELENBQUMsQ0FBQztnQkFDTCxDQUFDO1lBQ0gsQ0FBQztpQkFBTSxJQUFJLFNBQVMsQ0FBQyxJQUFJLEtBQUssYUFBYSxFQUFFLENBQUM7Z0JBQzVDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDO29CQUMvQyxNQUFNLElBQUksWUFBWSxDQUFDLDRCQUE0QixFQUFFO3dCQUNuRCxPQUFPLEVBQUUsd0RBQXdEO3FCQUNsRSxDQUFDLENBQUM7Z0JBQ0wsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb3RpY2UsIE5vdGljZXNNYW5pZmVzdCB9IGZyb20gJy4vbm90aWNlcy5qcyc7XG5pbXBvcnQgc2VtdmVyIGZyb20gJ3NlbXZlcic7XG5pbXBvcnQgeyBBbXBsaWZ5RmF1bHQgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbmV4cG9ydCB0eXBlIE5vdGljZXNNYW5pZmVzdFZhbGlkYXRvclByb3BzID0ge1xuICBjaGVja0xpbmtzV2l0aEdpdEh1YkFwaT86IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgbm90aWNlcyBtYW5pZmVzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vdGljZXNNYW5pZmVzdFZhbGlkYXRvciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIG5vdGljZXMgbWFuaWZlc3QgdmFsaWRhdG9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wcz86IE5vdGljZXNNYW5pZmVzdFZhbGlkYXRvclByb3BzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2ZldGNoID0gZmV0Y2gsXG4gICkge31cblxuICB2YWxpZGF0ZSA9IGFzeW5jIChub3RpY2VzTWFuaWZlc3Q6IE5vdGljZXNNYW5pZmVzdCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IGlkcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgIGZvciAoY29uc3Qgbm90aWNlIG9mIG5vdGljZXNNYW5pZmVzdC5ub3RpY2VzKSB7XG4gICAgICBhd2FpdCB0aGlzLnZhbGlkYXRlTm90aWNlKG5vdGljZSk7XG4gICAgICBpZiAoaWRzLmhhcyhub3RpY2UuaWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ0ludmFsaWROb3RpY2VNYW5pZmVzdEZhdWx0Jywge1xuICAgICAgICAgIG1lc3NhZ2U6IGBOb3RpY2UgaWRzIG11c3QgYmUgdW5pcXVlLiAke25vdGljZS5pZH0gaXMgZHVwbGljYXRlZC5gLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlkcy5hZGQobm90aWNlLmlkKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZU5vdGljZSA9IGFzeW5jIChub3RpY2U6IE5vdGljZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGlmIChub3RpY2UubGluaykge1xuICAgICAgY29uc3QgZ2l0SHViSXNzdWVMaW5rUGF0dGVybiA9XG4gICAgICAgIC9eaHR0cHM6XFwvXFwvZ2l0aHViLmNvbVxcL2F3cy1hbXBsaWZ5XFwvYW1wbGlmeS1iYWNrZW5kXFwvaXNzdWVzXFwvKD88aXNzdWVOdW1iZXI+XFxkKykkLztcbiAgICAgIGNvbnN0IG1hdGNoZWQgPSBub3RpY2UubGluay5tYXRjaChnaXRIdWJJc3N1ZUxpbmtQYXR0ZXJuKTtcbiAgICAgIGlmICghbWF0Y2hlZCkge1xuICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeUZhdWx0KCdJbnZhbGlkTm90aWNlTWFuaWZlc3RGYXVsdCcsIHtcbiAgICAgICAgICBtZXNzYWdlOiBgTGluayBtdXN0IG1hdGNoICR7Z2l0SHViSXNzdWVMaW5rUGF0dGVybi5zb3VyY2V9YCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAobWF0Y2hlZC5ncm91cHM/Lmlzc3VlTnVtYmVyICE9PSBub3RpY2UuaWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlGYXVsdCgnSW52YWxpZE5vdGljZU1hbmlmZXN0RmF1bHQnLCB7XG4gICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICdOb3RpY2UgaWQgbXVzdCBiZSBlcXVhbCB0byBHaXRIdWIgaXNzdWUgbnVtYmVyIGlmIGxpbmsgaXMgcHJvdmlkZWQnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzPy5jaGVja0xpbmtzV2l0aEdpdEh1YkFwaSkge1xuICAgICAgICBjb25zdCBpc3N1ZU51bWJlciA9IG1hdGNoZWQuZ3JvdXBzLmlzc3VlTnVtYmVyO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuX2ZldGNoKFxuICAgICAgICAgIGBodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL2F3cy1hbXBsaWZ5L2FtcGxpZnktYmFja2VuZC9pc3N1ZXMvJHtpc3N1ZU51bWJlcn1gLFxuICAgICAgICApO1xuICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlGYXVsdCgnSW52YWxpZE5vdGljZU1hbmlmZXN0RmF1bHQnLCB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnTm90aWNlIGxpbmsgbXVzdCBwb2ludCB0byB2YWxpZCBub3RpY2UnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU3BlY2lhbCB2YWxpZGF0aW9ucyBub3QgY292ZXJlZCBieSB6b2Qgc2NoZW1hLlxuICAgIGZvciAoY29uc3QgcHJlZGljYXRlIG9mIG5vdGljZS5wcmVkaWNhdGVzKSB7XG4gICAgICBpZiAocHJlZGljYXRlLnR5cGUgPT09ICdwYWNrYWdlVmVyc2lvbicpIHtcbiAgICAgICAgaWYgKCFzZW12ZXIudmFsaWRSYW5nZShwcmVkaWNhdGUudmVyc2lvblJhbmdlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ0ludmFsaWROb3RpY2VNYW5pZmVzdEZhdWx0Jywge1xuICAgICAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAgICAgJ1BhY2thZ2UgdmVyc2lvbiBwcmVkaWNhdGUgbXVzdCBoYXZlIGEgdmFsaWQgdmVyc2lvbiByYW5nZScsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJlZGljYXRlLnR5cGUgPT09ICdub2RlVmVyc2lvbicpIHtcbiAgICAgICAgaWYgKCFzZW12ZXIudmFsaWRSYW5nZShwcmVkaWNhdGUudmVyc2lvblJhbmdlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ0ludmFsaWROb3RpY2VNYW5pZmVzdEZhdWx0Jywge1xuICAgICAgICAgICAgbWVzc2FnZTogJ05vZGUgdmVyc2lvbiBwcmVkaWNhdGUgbXVzdCBoYXZlIGEgdmFsaWQgdmVyc2lvbiByYW5nZScsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iXX0=