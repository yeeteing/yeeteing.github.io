import { createGraphqlModelsGenerator } from '@aws-amplify/model-generator';
import { AmplifyFault } from '@aws-amplify/platform-core';
/**
 * Adapts static getModelIntrospectionSchemaFromS3Uri from @aws-amplify/model-generator call to make it injectable and testable.
 */
export class ModelIntrospectionSchemaAdapter {
    awsClientProvider;
    /**
     * Creates new adapter for getModelIntrospectionSchemaFromS3Uri from @aws-amplify/model-generator.
     */
    constructor(awsClientProvider) {
        this.awsClientProvider = awsClientProvider;
    }
    /**
     * Generates the client configuration for a given backend
     */
    getModelIntrospectionSchemaFromS3Uri = async (modelSchemaS3Uri) => {
        if (!modelSchemaS3Uri) {
            return;
        }
        const generatedModels = await (await createGraphqlModelsGenerator({
            modelSchemaS3Uri,
            awsClientProvider: this.awsClientProvider,
        }).generateModels({ target: 'introspection' })).getResults();
        const generatedModelFiles = Object.values(generatedModels);
        if (generatedModelFiles.length !== 1) {
            throw new AmplifyFault('UnexpectedModelIntrospectionSchemaFault', {
                message: `A single model introspection schema is expected, received ${generatedModelFiles.length} values.`,
            });
        }
        try {
            return JSON.parse(generatedModelFiles[0]);
        }
        catch (e) {
            throw new AmplifyFault('InvalidModelIntrospectionSchemaFault', {
                message: 'Caught exception while converting introspection schema to JSON representation',
            }, e);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWxfaW50cm9zcGVjdGlvbl9zY2hlbWFfYWRhcHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tb2RlbF9pbnRyb3NwZWN0aW9uX3NjaGVtYV9hZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzVFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQU0xRDs7R0FFRztBQUNILE1BQU0sT0FBTywrQkFBK0I7SUFLdkI7SUFKbkI7O09BRUc7SUFDSCxZQUNtQixpQkFJZjtRQUplLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FJaEM7SUFDRCxDQUFDO0lBRUo7O09BRUc7SUFDSCxvQ0FBb0MsR0FBRyxLQUFLLEVBQzFDLGdCQUFvQyxFQUNOLEVBQUU7UUFDaEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDdEIsT0FBTztRQUNULENBQUM7UUFDRCxNQUFNLGVBQWUsR0FBRyxNQUFNLENBQzVCLE1BQU0sNEJBQTRCLENBQUM7WUFDakMsZ0JBQWdCO1lBQ2hCLGlCQUFpQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7U0FDMUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUMvQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2YsTUFBTSxtQkFBbUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzNELElBQUksbUJBQW1CLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3JDLE1BQU0sSUFBSSxZQUFZLENBQUMseUNBQXlDLEVBQUU7Z0JBQ2hFLE9BQU8sRUFBRSw2REFBNkQsbUJBQW1CLENBQUMsTUFBTSxVQUFVO2FBQzNHLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxJQUFJLENBQUM7WUFDSCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QyxDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNYLE1BQU0sSUFBSSxZQUFZLENBQ3BCLHNDQUFzQyxFQUN0QztnQkFDRSxPQUFPLEVBQ0wsK0VBQStFO2FBQ2xGLEVBQ0QsQ0FBVSxDQUNYLENBQUM7UUFDSixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVHcmFwaHFsTW9kZWxzR2VuZXJhdG9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L21vZGVsLWdlbmVyYXRvcic7XG5pbXBvcnQgeyBBbXBsaWZ5RmF1bHQgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBBV1NDbGllbnRQcm92aWRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IFMzQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXMzJztcblxuLyoqXG4gKiBBZGFwdHMgc3RhdGljIGdldE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUZyb21TM1VyaSBmcm9tIEBhd3MtYW1wbGlmeS9tb2RlbC1nZW5lcmF0b3IgY2FsbCB0byBtYWtlIGl0IGluamVjdGFibGUgYW5kIHRlc3RhYmxlLlxuICovXG5leHBvcnQgY2xhc3MgTW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIG5ldyBhZGFwdGVyIGZvciBnZXRNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFGcm9tUzNVcmkgZnJvbSBAYXdzLWFtcGxpZnkvbW9kZWwtZ2VuZXJhdG9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBhd3NDbGllbnRQcm92aWRlcjogQVdTQ2xpZW50UHJvdmlkZXI8e1xuICAgICAgZ2V0UzNDbGllbnQ6IFMzQ2xpZW50O1xuICAgICAgZ2V0QW1wbGlmeUNsaWVudDogQW1wbGlmeUNsaWVudDtcbiAgICAgIGdldENsb3VkRm9ybWF0aW9uQ2xpZW50OiBDbG91ZEZvcm1hdGlvbkNsaWVudDtcbiAgICB9PixcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgdGhlIGNsaWVudCBjb25maWd1cmF0aW9uIGZvciBhIGdpdmVuIGJhY2tlbmRcbiAgICovXG4gIGdldE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUZyb21TM1VyaSA9IGFzeW5jIChcbiAgICBtb2RlbFNjaGVtYVMzVXJpOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICk6IFByb21pc2U8dW5rbm93biB8IHVuZGVmaW5lZD4gPT4ge1xuICAgIGlmICghbW9kZWxTY2hlbWFTM1VyaSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBnZW5lcmF0ZWRNb2RlbHMgPSBhd2FpdCAoXG4gICAgICBhd2FpdCBjcmVhdGVHcmFwaHFsTW9kZWxzR2VuZXJhdG9yKHtcbiAgICAgICAgbW9kZWxTY2hlbWFTM1VyaSxcbiAgICAgICAgYXdzQ2xpZW50UHJvdmlkZXI6IHRoaXMuYXdzQ2xpZW50UHJvdmlkZXIsXG4gICAgICB9KS5nZW5lcmF0ZU1vZGVscyh7IHRhcmdldDogJ2ludHJvc3BlY3Rpb24nIH0pXG4gICAgKS5nZXRSZXN1bHRzKCk7XG4gICAgY29uc3QgZ2VuZXJhdGVkTW9kZWxGaWxlcyA9IE9iamVjdC52YWx1ZXMoZ2VuZXJhdGVkTW9kZWxzKTtcbiAgICBpZiAoZ2VuZXJhdGVkTW9kZWxGaWxlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ1VuZXhwZWN0ZWRNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFGYXVsdCcsIHtcbiAgICAgICAgbWVzc2FnZTogYEEgc2luZ2xlIG1vZGVsIGludHJvc3BlY3Rpb24gc2NoZW1hIGlzIGV4cGVjdGVkLCByZWNlaXZlZCAke2dlbmVyYXRlZE1vZGVsRmlsZXMubGVuZ3RofSB2YWx1ZXMuYCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShnZW5lcmF0ZWRNb2RlbEZpbGVzWzBdKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeUZhdWx0KFxuICAgICAgICAnSW52YWxpZE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUZhdWx0JyxcbiAgICAgICAge1xuICAgICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgICAnQ2F1Z2h0IGV4Y2VwdGlvbiB3aGlsZSBjb252ZXJ0aW5nIGludHJvc3BlY3Rpb24gc2NoZW1hIHRvIEpTT04gcmVwcmVzZW50YXRpb24nLFxuICAgICAgICB9LFxuICAgICAgICBlIGFzIEVycm9yLFxuICAgICAgKTtcbiAgICB9XG4gIH07XG59XG4iXX0=