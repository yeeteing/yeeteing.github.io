"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilePathExtractor = void 0;
const node_url_1 = require("node:url");
/**
 * Regex that pulls out the path from a stack trace line. Works for both unix and windows paths and cjs and esm loaders
 *
 * For ESM loaders in TS files or CJS loaders
 * The line is something like "at SymbolName (/some/path/to/project/root/backend/auth.ts:3:21)"
 * or on Windows "at SymbolName (C:\some\path\to\project\root\backend\auth.ts:3:21)"
 *
 * For ESM loaders in JS files
 * The line is something like "at file:///some/path/to/project/root/backend/auth.ts:14:28"
 * or on Windows " at file:///C:\some\path\to\project\root\backend\auth.ts:3:21"
 *
 * This regex pulls out the file path into the "filepath" named matching group
 * In the above examples that would be "/some/path/to/project/root/backend/auth.ts" or "C:\some\path\to\project\root\backend\auth.ts"
 *
 * Instead of combining both matches with single regex, we create two to keep it simple and manageable.
 *
 */
const extractFilePathFromStackTraceLineRegexes = [
    /\((?<filepath>(\w:)?[^:]*)[:\d]*\)/,
    /at (?<filepath>.*\.\w[^:\d]*)[:\d]*/,
];
/**
 * Extracts a file path from a given stack trace line
 */
class FilePathExtractor {
    stackTraceLine;
    /**
     * Constructor for FilePathExtractor
     */
    constructor(stackTraceLine) {
        this.stackTraceLine = stackTraceLine;
    }
    extract = () => {
        for (const regex of extractFilePathFromStackTraceLineRegexes) {
            const match = this.stackTraceLine.match(regex);
            if (match?.groups?.filepath) {
                return this.standardizePath(match?.groups?.filepath);
            }
        }
        return undefined;
    };
    // The input can be either a file path or a file URL. If it's a file URL, convert it to the path.
    standardizePath = (maybeUrl) => {
        try {
            const url = new URL(maybeUrl);
            if (url.protocol === 'file:') {
                return (0, node_url_1.fileURLToPath)(url);
            }
            return maybeUrl;
        }
        catch {
            return maybeUrl;
        }
    };
}
exports.FilePathExtractor = FilePathExtractor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0cmFjdF9maWxlX3BhdGhfZnJvbV9zdGFja190cmFjZV9saW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2V4dHJhY3RfZmlsZV9wYXRoX2Zyb21fc3RhY2tfdHJhY2VfbGluZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx1Q0FBeUM7QUFFekM7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFDSCxNQUFNLHdDQUF3QyxHQUFHO0lBQy9DLG9DQUFvQztJQUNwQyxxQ0FBcUM7Q0FDdEMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBYSxpQkFBaUI7SUFJQztJQUg3Qjs7T0FFRztJQUNILFlBQTZCLGNBQXNCO1FBQXRCLG1CQUFjLEdBQWQsY0FBYyxDQUFRO0lBQUcsQ0FBQztJQUV2RCxPQUFPLEdBQUcsR0FBRyxFQUFFO1FBQ2IsS0FBSyxNQUFNLEtBQUssSUFBSSx3Q0FBd0MsRUFBRSxDQUFDO1lBQzdELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQy9DLElBQUksS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQztnQkFDNUIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDdkQsQ0FBQztRQUNILENBQUM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDLENBQUM7SUFFRixpR0FBaUc7SUFDekYsZUFBZSxHQUFHLENBQUMsUUFBZ0IsRUFBVSxFQUFFO1FBQ3JELElBQUksQ0FBQztZQUNILE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlCLElBQUksR0FBRyxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUUsQ0FBQztnQkFDN0IsT0FBTyxJQUFBLHdCQUFhLEVBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUIsQ0FBQztZQUNELE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUM7UUFBQyxNQUFNLENBQUM7WUFDUCxPQUFPLFFBQVEsQ0FBQztRQUNsQixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0NBQ0g7QUE1QkQsOENBNEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ25vZGU6dXJsJztcblxuLyoqXG4gKiBSZWdleCB0aGF0IHB1bGxzIG91dCB0aGUgcGF0aCBmcm9tIGEgc3RhY2sgdHJhY2UgbGluZS4gV29ya3MgZm9yIGJvdGggdW5peCBhbmQgd2luZG93cyBwYXRocyBhbmQgY2pzIGFuZCBlc20gbG9hZGVyc1xuICpcbiAqIEZvciBFU00gbG9hZGVycyBpbiBUUyBmaWxlcyBvciBDSlMgbG9hZGVyc1xuICogVGhlIGxpbmUgaXMgc29tZXRoaW5nIGxpa2UgXCJhdCBTeW1ib2xOYW1lICgvc29tZS9wYXRoL3RvL3Byb2plY3Qvcm9vdC9iYWNrZW5kL2F1dGgudHM6MzoyMSlcIlxuICogb3Igb24gV2luZG93cyBcImF0IFN5bWJvbE5hbWUgKEM6XFxzb21lXFxwYXRoXFx0b1xccHJvamVjdFxccm9vdFxcYmFja2VuZFxcYXV0aC50czozOjIxKVwiXG4gKlxuICogRm9yIEVTTSBsb2FkZXJzIGluIEpTIGZpbGVzXG4gKiBUaGUgbGluZSBpcyBzb21ldGhpbmcgbGlrZSBcImF0IGZpbGU6Ly8vc29tZS9wYXRoL3RvL3Byb2plY3Qvcm9vdC9iYWNrZW5kL2F1dGgudHM6MTQ6MjhcIlxuICogb3Igb24gV2luZG93cyBcIiBhdCBmaWxlOi8vL0M6XFxzb21lXFxwYXRoXFx0b1xccHJvamVjdFxccm9vdFxcYmFja2VuZFxcYXV0aC50czozOjIxXCJcbiAqXG4gKiBUaGlzIHJlZ2V4IHB1bGxzIG91dCB0aGUgZmlsZSBwYXRoIGludG8gdGhlIFwiZmlsZXBhdGhcIiBuYW1lZCBtYXRjaGluZyBncm91cFxuICogSW4gdGhlIGFib3ZlIGV4YW1wbGVzIHRoYXQgd291bGQgYmUgXCIvc29tZS9wYXRoL3RvL3Byb2plY3Qvcm9vdC9iYWNrZW5kL2F1dGgudHNcIiBvciBcIkM6XFxzb21lXFxwYXRoXFx0b1xccHJvamVjdFxccm9vdFxcYmFja2VuZFxcYXV0aC50c1wiXG4gKlxuICogSW5zdGVhZCBvZiBjb21iaW5pbmcgYm90aCBtYXRjaGVzIHdpdGggc2luZ2xlIHJlZ2V4LCB3ZSBjcmVhdGUgdHdvIHRvIGtlZXAgaXQgc2ltcGxlIGFuZCBtYW5hZ2VhYmxlLlxuICpcbiAqL1xuY29uc3QgZXh0cmFjdEZpbGVQYXRoRnJvbVN0YWNrVHJhY2VMaW5lUmVnZXhlcyA9IFtcbiAgL1xcKCg/PGZpbGVwYXRoPihcXHc6KT9bXjpdKilbOlxcZF0qXFwpLyxcbiAgL2F0ICg/PGZpbGVwYXRoPi4qXFwuXFx3W146XFxkXSopWzpcXGRdKi8sXG5dO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgZmlsZSBwYXRoIGZyb20gYSBnaXZlbiBzdGFjayB0cmFjZSBsaW5lXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlUGF0aEV4dHJhY3RvciB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBmb3IgRmlsZVBhdGhFeHRyYWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc3RhY2tUcmFjZUxpbmU6IHN0cmluZykge31cblxuICBleHRyYWN0ID0gKCkgPT4ge1xuICAgIGZvciAoY29uc3QgcmVnZXggb2YgZXh0cmFjdEZpbGVQYXRoRnJvbVN0YWNrVHJhY2VMaW5lUmVnZXhlcykge1xuICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLnN0YWNrVHJhY2VMaW5lLm1hdGNoKHJlZ2V4KTtcbiAgICAgIGlmIChtYXRjaD8uZ3JvdXBzPy5maWxlcGF0aCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFuZGFyZGl6ZVBhdGgobWF0Y2g/Lmdyb3Vwcz8uZmlsZXBhdGgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIC8vIFRoZSBpbnB1dCBjYW4gYmUgZWl0aGVyIGEgZmlsZSBwYXRoIG9yIGEgZmlsZSBVUkwuIElmIGl0J3MgYSBmaWxlIFVSTCwgY29udmVydCBpdCB0byB0aGUgcGF0aC5cbiAgcHJpdmF0ZSBzdGFuZGFyZGl6ZVBhdGggPSAobWF5YmVVcmw6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwobWF5YmVVcmwpO1xuICAgICAgaWYgKHVybC5wcm90b2NvbCA9PT0gJ2ZpbGU6Jykge1xuICAgICAgICByZXR1cm4gZmlsZVVSTFRvUGF0aCh1cmwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1heWJlVXJsO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIG1heWJlVXJsO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==