"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.confirm = exports.result = exports.error = exports.warn = exports.info = exports.debug = exports.trace = void 0;
exports.question = question;
/**
 * Produce an IoMessageMaker for the provided level and code info.
 */
function message(level, details) {
    const maker = (text, data) => ({
        time: new Date(),
        level,
        code: details.code,
        message: text,
        data,
    });
    return {
        ...details,
        level,
        msg: maker,
        is: (m) => m.code === details.code,
    };
}
const trace = (details) => message('trace', details);
exports.trace = trace;
const debug = (details) => message('debug', details);
exports.debug = debug;
const info = (details) => message('info', details);
exports.info = info;
const warn = (details) => message('warn', details);
exports.warn = warn;
const error = (details) => message('error', details);
exports.error = error;
const result = (details) => message('result', details);
exports.result = result;
/**
 * Produce an IoRequestMaker for the provided level and request info.
 */
function request(level, details) {
    const maker = (text, data) => ({
        time: new Date(),
        level,
        code: details.code,
        message: text,
        data,
        defaultResponse: details.defaultResponse,
    });
    return {
        ...details,
        level,
        req: maker,
    };
}
/**
 * A request that is a simple yes/no question, with the expectation that 'yes' is the default.
 */
const confirm = (details) => request('info', {
    ...details,
    defaultResponse: true,
});
exports.confirm = confirm;
/**
 * An open ended question with a string answer, typically provided on-demand by a user.
 */
function question(details) {
    const level = 'info';
    const maker = (text, data, defaultResponse) => ({
        time: new Date(),
        level,
        code: details.code,
        message: text,
        data,
        defaultResponse,
    });
    return {
        ...details,
        level,
        req: maker,
    };
}
//# sourceMappingURL=data:application/json;base64,