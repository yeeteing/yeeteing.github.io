"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoResultsFoundError = exports.ContextProviderError = exports.AssemblyError = exports.AuthenticationError = exports.ToolkitError = void 0;
const TOOLKIT_ERROR_SYMBOL = Symbol.for('@aws-cdk/toolkit-lib.ToolkitError');
const AUTHENTICATION_ERROR_SYMBOL = Symbol.for('@aws-cdk/toolkit-lib.AuthenticationError');
const ASSEMBLY_ERROR_SYMBOL = Symbol.for('@aws-cdk/toolkit-lib.AssemblyError');
const CONTEXT_PROVIDER_ERROR_SYMBOL = Symbol.for('@aws-cdk/toolkit-lib.ContextProviderError');
const NO_RESULTS_FOUND_ERROR_SYMBOL = Symbol.for('@aws-cdk/toolkit-lib.NoResultsFoundError');
/**
 * Represents a general toolkit error in the AWS CDK Toolkit.
 */
class ToolkitError extends Error {
    /**
     * Determines if a given error is an instance of ToolkitError.
     */
    static isToolkitError(x) {
        return x !== null && typeof (x) === 'object' && TOOLKIT_ERROR_SYMBOL in x;
    }
    /**
     * Determines if a given error is an instance of AuthenticationError.
     */
    static isAuthenticationError(x) {
        return ToolkitError.isToolkitError(x) && AUTHENTICATION_ERROR_SYMBOL in x;
    }
    /**
     * Determines if a given error is an instance of AssemblyError.
     */
    static isAssemblyError(x) {
        return ToolkitError.isToolkitError(x) && ASSEMBLY_ERROR_SYMBOL in x;
    }
    /**
     * Determines if a given error is an instance of ContextProviderError.
     */
    static isContextProviderError(x) {
        return ToolkitError.isToolkitError(x) && CONTEXT_PROVIDER_ERROR_SYMBOL in x;
    }
    /**
     * A ToolkitError with an original error as cause
     */
    static withCause(message, error) {
        return new ToolkitError(message, 'toolkit', error);
    }
    /**
     * The type of the error, defaults to "toolkit".
     */
    type;
    /**
     * Denotes the source of the error as the toolkit.
     */
    source;
    /**
     * The specific original cause of the error, if available
     */
    cause;
    constructor(message, type = 'toolkit', cause) {
        super(message);
        Object.setPrototypeOf(this, ToolkitError.prototype);
        Object.defineProperty(this, TOOLKIT_ERROR_SYMBOL, { value: true });
        this.name = new.target.name;
        this.type = type;
        this.source = 'toolkit';
        this.cause = cause;
    }
}
exports.ToolkitError = ToolkitError;
/**
 * Represents an authentication-specific error in the AWS CDK Toolkit.
 */
class AuthenticationError extends ToolkitError {
    /**
     * Denotes the source of the error as user.
     */
    source = 'user';
    constructor(message) {
        super(message, 'authentication');
        Object.setPrototypeOf(this, AuthenticationError.prototype);
        Object.defineProperty(this, AUTHENTICATION_ERROR_SYMBOL, { value: true });
    }
}
exports.AuthenticationError = AuthenticationError;
/**
 * Represents an error causes by cloud assembly synthesis
 *
 * This includes errors thrown during app execution, as well as failing annotations.
 */
class AssemblyError extends ToolkitError {
    /**
     * An AssemblyError with an original error as cause
     */
    static withCause(message, error) {
        return new AssemblyError(message, undefined, error);
    }
    /**
     * An AssemblyError with a list of stacks as cause
     */
    static withStacks(message, stacks) {
        return new AssemblyError(message, stacks);
    }
    /**
     * Denotes the source of the error as user.
     */
    source = 'user';
    /**
     * The stacks that caused the error, if available
     *
     * The `messages` property of each `cxapi.CloudFormationStackArtifact` will contain the respective errors.
     * Absence indicates synthesis didn't fully complete.
     */
    stacks;
    constructor(message, stacks, cause) {
        super(message, 'assembly', cause);
        Object.setPrototypeOf(this, AssemblyError.prototype);
        Object.defineProperty(this, ASSEMBLY_ERROR_SYMBOL, { value: true });
        this.stacks = stacks;
    }
}
exports.AssemblyError = AssemblyError;
/**
 * Represents an error originating from a Context Provider
 */
class ContextProviderError extends ToolkitError {
    /**
     * Determines if a given error is an instance of NoResultsFoundError.
     */
    static isNoResultsFoundError(x) {
        return ToolkitError.isContextProviderError(x) && NO_RESULTS_FOUND_ERROR_SYMBOL in x;
    }
    /**
     * A ContextProviderError with an original error as cause
     */
    static withCause(message, error) {
        return new ContextProviderError(message, error);
    }
    /**
     * Denotes the source of the error as user.
     */
    source = 'user';
    constructor(message, cause) {
        super(message, 'context-provider', cause);
        Object.setPrototypeOf(this, ContextProviderError.prototype);
        Object.defineProperty(this, CONTEXT_PROVIDER_ERROR_SYMBOL, { value: true });
    }
}
exports.ContextProviderError = ContextProviderError;
/**
 * A specific context provider lookup failure indicating no results where found for a context query
 */
class NoResultsFoundError extends ContextProviderError {
    constructor(message) {
        super(message);
        Object.setPrototypeOf(this, NoResultsFoundError.prototype);
        Object.defineProperty(this, NO_RESULTS_FOUND_ERROR_SYMBOL, { value: true });
    }
}
exports.NoResultsFoundError = NoResultsFoundError;
//# sourceMappingURL=data:application/json;base64,