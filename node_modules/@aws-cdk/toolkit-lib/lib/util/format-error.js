"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatErrorMessage = formatErrorMessage;
const toolkit_error_1 = require("../toolkit/toolkit-error");
/**
 * Takes in an error and returns a correctly formatted string of its error message.
 * If it is an AggregateError, it will return a string with all the inner errors
 * formatted and separated by a newline.
 *
 * @param error - The error to format
 * @returns A string with the error message(s) of the error
 */
function formatErrorMessage(error) {
    if (error && Array.isArray(error.errors)) {
        const innerMessages = error.errors
            .map((innerError) => (innerError?.message || innerError?.toString()))
            .join('\n');
        return `AggregateError: ${innerMessages}`;
    }
    if (toolkit_error_1.ToolkitError.isToolkitError(error) && error.cause) {
        return `${error.message}\n${formatErrorMessage(error.cause)}`;
    }
    // Fallback for regular Error or other types
    return error?.message || error?.toString() || 'Unknown error';
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LWVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZm9ybWF0LWVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBVUEsZ0RBY0M7QUF4QkQsNERBQXdEO0FBRXhEOzs7Ozs7O0dBT0c7QUFDSCxTQUFnQixrQkFBa0IsQ0FBQyxLQUFVO0lBQzNDLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDekMsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE1BQU07YUFDL0IsR0FBRyxDQUFDLENBQUMsVUFBaUQsRUFBRSxFQUFFLENBQUMsQ0FBQyxVQUFVLEVBQUUsT0FBTyxJQUFJLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQzNHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNkLE9BQU8sbUJBQW1CLGFBQWEsRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFRCxJQUFJLDRCQUFZLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0RCxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sS0FBSyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUNoRSxDQUFDO0lBRUQsNENBQTRDO0lBQzVDLE9BQU8sS0FBSyxFQUFFLE9BQU8sSUFBSSxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksZUFBZSxDQUFDO0FBQ2hFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUb29sa2l0RXJyb3IgfSBmcm9tICcuLi90b29sa2l0L3Rvb2xraXQtZXJyb3InO1xuXG4vKipcbiAqIFRha2VzIGluIGFuIGVycm9yIGFuZCByZXR1cm5zIGEgY29ycmVjdGx5IGZvcm1hdHRlZCBzdHJpbmcgb2YgaXRzIGVycm9yIG1lc3NhZ2UuXG4gKiBJZiBpdCBpcyBhbiBBZ2dyZWdhdGVFcnJvciwgaXQgd2lsbCByZXR1cm4gYSBzdHJpbmcgd2l0aCBhbGwgdGhlIGlubmVyIGVycm9yc1xuICogZm9ybWF0dGVkIGFuZCBzZXBhcmF0ZWQgYnkgYSBuZXdsaW5lLlxuICpcbiAqIEBwYXJhbSBlcnJvciAtIFRoZSBlcnJvciB0byBmb3JtYXRcbiAqIEByZXR1cm5zIEEgc3RyaW5nIHdpdGggdGhlIGVycm9yIG1lc3NhZ2Uocykgb2YgdGhlIGVycm9yXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRFcnJvck1lc3NhZ2UoZXJyb3I6IGFueSk6IHN0cmluZyB7XG4gIGlmIChlcnJvciAmJiBBcnJheS5pc0FycmF5KGVycm9yLmVycm9ycykpIHtcbiAgICBjb25zdCBpbm5lck1lc3NhZ2VzID0gZXJyb3IuZXJyb3JzXG4gICAgICAubWFwKChpbm5lckVycm9yOiB7IG1lc3NhZ2U6IGFueTsgdG9TdHJpbmc6ICgpID0+IGFueSB9KSA9PiAoaW5uZXJFcnJvcj8ubWVzc2FnZSB8fCBpbm5lckVycm9yPy50b1N0cmluZygpKSlcbiAgICAgIC5qb2luKCdcXG4nKTtcbiAgICByZXR1cm4gYEFnZ3JlZ2F0ZUVycm9yOiAke2lubmVyTWVzc2FnZXN9YDtcbiAgfVxuXG4gIGlmIChUb29sa2l0RXJyb3IuaXNUb29sa2l0RXJyb3IoZXJyb3IpICYmIGVycm9yLmNhdXNlKSB7XG4gICAgcmV0dXJuIGAke2Vycm9yLm1lc3NhZ2V9XFxuJHtmb3JtYXRFcnJvck1lc3NhZ2UoZXJyb3IuY2F1c2UpfWA7XG4gIH1cblxuICAvLyBGYWxsYmFjayBmb3IgcmVndWxhciBFcnJvciBvciBvdGhlciB0eXBlc1xuICByZXR1cm4gZXJyb3I/Lm1lc3NhZ2UgfHwgZXJyb3I/LnRvU3RyaW5nKCkgfHwgJ1Vua25vd24gZXJyb3InO1xufVxuIl19