import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';
import { Duration } from 'aws-cdk-lib';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as path from 'path';
import { Runtime as LambdaRuntime } from 'aws-cdk-lib/aws-lambda';
import { Provider } from 'aws-cdk-lib/custom-resources';
import { fileURLToPath } from 'node:url';
import { ParameterPathConversions } from '@aws-amplify/platform-core';
const filename = fileURLToPath(import.meta.url);
const dirname = path.dirname(filename);
const resourcesRoot = path.normalize(path.join(dirname, 'lambda'));
const backendSecretLambdaFilePath = path.join(resourcesRoot, 'backend_secret_fetcher.js');
/**
 * The factory to create secret-fetcher provider.
 */
export class BackendSecretFetcherProviderFactory {
    /**
     * Returns a resource provider if it exists in the input scope. Otherwise,
     * creates a new provider.
     */
    getOrCreateInstance = (scope, providerId, backendIdentifier) => {
        const provider = scope.node.tryFindChild(providerId);
        if (provider) {
            return provider;
        }
        const secretLambda = new NodejsFunction(scope, `${providerId}Lambda`, {
            runtime: LambdaRuntime.NODEJS_20_X,
            timeout: Duration.seconds(10),
            entry: backendSecretLambdaFilePath,
            handler: 'handler',
        });
        const backendParameterPrefix = ParameterPathConversions.toParameterPrefix(backendIdentifier);
        const sharedParameterPrefix = ParameterPathConversions.toParameterPrefix(backendIdentifier.namespace);
        secretLambda.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['ssm:GetParameter'],
            resources: [
                `arn:aws:ssm:*:*:parameter${backendParameterPrefix}/*`,
                `arn:aws:ssm:*:*:parameter${sharedParameterPrefix}/*`,
            ],
        }));
        return new Provider(scope, providerId, {
            onEventHandler: secretLambda,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl9wcm92aWRlcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VuZ2luZS9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX3Byb3ZpZGVyX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUUsT0FBTyxJQUFJLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXpDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXRFLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ25FLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDM0MsYUFBYSxFQUNiLDJCQUEyQixDQUM1QixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW1DO0lBQzlDOzs7T0FHRztJQUNILG1CQUFtQixHQUFHLENBQ3BCLEtBQWdCLEVBQ2hCLFVBQWtCLEVBQ2xCLGlCQUFvQyxFQUNwQyxFQUFFO1FBQ0YsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFhLENBQUM7UUFDakUsSUFBSSxRQUFRLEVBQUUsQ0FBQztZQUNiLE9BQU8sUUFBUSxDQUFDO1FBQ2xCLENBQUM7UUFFRCxNQUFNLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxVQUFVLFFBQVEsRUFBRTtZQUNwRSxPQUFPLEVBQUUsYUFBYSxDQUFDLFdBQVc7WUFDbEMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQzdCLEtBQUssRUFBRSwyQkFBMkI7WUFDbEMsT0FBTyxFQUFFLFNBQVM7U0FDbkIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxzQkFBc0IsR0FDMUIsd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNoRSxNQUFNLHFCQUFxQixHQUFHLHdCQUF3QixDQUFDLGlCQUFpQixDQUN0RSxpQkFBaUIsQ0FBQyxTQUFTLENBQzVCLENBQUM7UUFFRixZQUFZLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUM5QyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7WUFDdEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSztZQUN4QixPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztZQUM3QixTQUFTLEVBQUU7Z0JBQ1QsNEJBQTRCLHNCQUFzQixJQUFJO2dCQUN0RCw0QkFBNEIscUJBQXFCLElBQUk7YUFDdEQ7U0FDRixDQUFDLENBQ0gsQ0FBQztRQUVGLE9BQU8sSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtZQUNyQyxjQUFjLEVBQUUsWUFBWTtTQUM3QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgTm9kZWpzRnVuY3Rpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLW5vZGVqcyc7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBSdW50aW1lIGFzIExhbWJkYVJ1bnRpbWUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnYXdzLWNkay1saWIvY3VzdG9tLXJlc291cmNlcyc7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAnbm9kZTp1cmwnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucyB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcblxuY29uc3QgZmlsZW5hbWUgPSBmaWxlVVJMVG9QYXRoKGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBkaXJuYW1lID0gcGF0aC5kaXJuYW1lKGZpbGVuYW1lKTtcbmNvbnN0IHJlc291cmNlc1Jvb3QgPSBwYXRoLm5vcm1hbGl6ZShwYXRoLmpvaW4oZGlybmFtZSwgJ2xhbWJkYScpKTtcbmNvbnN0IGJhY2tlbmRTZWNyZXRMYW1iZGFGaWxlUGF0aCA9IHBhdGguam9pbihcbiAgcmVzb3VyY2VzUm9vdCxcbiAgJ2JhY2tlbmRfc2VjcmV0X2ZldGNoZXIuanMnLFxuKTtcblxuLyoqXG4gKiBUaGUgZmFjdG9yeSB0byBjcmVhdGUgc2VjcmV0LWZldGNoZXIgcHJvdmlkZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZW5kU2VjcmV0RmV0Y2hlclByb3ZpZGVyRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVzb3VyY2UgcHJvdmlkZXIgaWYgaXQgZXhpc3RzIGluIHRoZSBpbnB1dCBzY29wZS4gT3RoZXJ3aXNlLFxuICAgKiBjcmVhdGVzIGEgbmV3IHByb3ZpZGVyLlxuICAgKi9cbiAgZ2V0T3JDcmVhdGVJbnN0YW5jZSA9IChcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIHByb3ZpZGVySWQ6IHN0cmluZyxcbiAgICBiYWNrZW5kSWRlbnRpZmllcjogQmFja2VuZElkZW50aWZpZXIsXG4gICkgPT4ge1xuICAgIGNvbnN0IHByb3ZpZGVyID0gc2NvcGUubm9kZS50cnlGaW5kQ2hpbGQocHJvdmlkZXJJZCkgYXMgUHJvdmlkZXI7XG4gICAgaWYgKHByb3ZpZGVyKSB7XG4gICAgICByZXR1cm4gcHJvdmlkZXI7XG4gICAgfVxuXG4gICAgY29uc3Qgc2VjcmV0TGFtYmRhID0gbmV3IE5vZGVqc0Z1bmN0aW9uKHNjb3BlLCBgJHtwcm92aWRlcklkfUxhbWJkYWAsIHtcbiAgICAgIHJ1bnRpbWU6IExhbWJkYVJ1bnRpbWUuTk9ERUpTXzIwX1gsXG4gICAgICB0aW1lb3V0OiBEdXJhdGlvbi5zZWNvbmRzKDEwKSxcbiAgICAgIGVudHJ5OiBiYWNrZW5kU2VjcmV0TGFtYmRhRmlsZVBhdGgsXG4gICAgICBoYW5kbGVyOiAnaGFuZGxlcicsXG4gICAgfSk7XG5cbiAgICBjb25zdCBiYWNrZW5kUGFyYW1ldGVyUHJlZml4ID1cbiAgICAgIFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucy50b1BhcmFtZXRlclByZWZpeChiYWNrZW5kSWRlbnRpZmllcik7XG4gICAgY29uc3Qgc2hhcmVkUGFyYW1ldGVyUHJlZml4ID0gUGFyYW1ldGVyUGF0aENvbnZlcnNpb25zLnRvUGFyYW1ldGVyUHJlZml4KFxuICAgICAgYmFja2VuZElkZW50aWZpZXIubmFtZXNwYWNlLFxuICAgICk7XG5cbiAgICBzZWNyZXRMYW1iZGEuZ3JhbnRQcmluY2lwYWwuYWRkVG9QcmluY2lwYWxQb2xpY3koXG4gICAgICBuZXcgaWFtLlBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgIGVmZmVjdDogaWFtLkVmZmVjdC5BTExPVyxcbiAgICAgICAgYWN0aW9uczogWydzc206R2V0UGFyYW1ldGVyJ10sXG4gICAgICAgIHJlc291cmNlczogW1xuICAgICAgICAgIGBhcm46YXdzOnNzbToqOio6cGFyYW1ldGVyJHtiYWNrZW5kUGFyYW1ldGVyUHJlZml4fS8qYCxcbiAgICAgICAgICBgYXJuOmF3czpzc206KjoqOnBhcmFtZXRlciR7c2hhcmVkUGFyYW1ldGVyUHJlZml4fS8qYCxcbiAgICAgICAgXSxcbiAgICAgIH0pLFxuICAgICk7XG5cbiAgICByZXR1cm4gbmV3IFByb3ZpZGVyKHNjb3BlLCBwcm92aWRlcklkLCB7XG4gICAgICBvbkV2ZW50SGFuZGxlcjogc2VjcmV0TGFtYmRhLFxuICAgIH0pO1xuICB9O1xufVxuIl19