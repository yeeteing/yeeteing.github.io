"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendMessagePipelineDefinition = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const name_values_1 = require("../graphql-types/name-values");
const resolver_function_definition_1 = require("./resolver-function-definition");
exports.sendMessagePipelineDefinition = {
    requestSlots: [init(), auth(), verifySessionOwner(), writeMessageToTable()],
    dataSlot: invokeLambda(),
    responseSlots: [],
    field: (config) => ({ typeName: 'Mutation', fieldName: config.field.name.value }),
};
function init() {
    return (0, resolver_function_definition_1.createResolverFunctionDefinition)({
        slotName: 'init',
        fileName: 'init-resolver-fn.template.js',
        generateTemplate: (_, code) => graphql_transformer_core_1.MappingTemplate.inlineTemplateFromString(code),
        substitutions: (_, ctx) => ({
            GRAPHQL_API_ENDPOINT: ctx.api.graphqlUrl,
        }),
    });
}
function auth() {
    return (0, resolver_function_definition_1.createResolverFunctionDefinition)({
        slotName: 'auth',
        fileName: 'auth-resolver-fn.template.js',
        generateTemplate: templateGenerator('auth'),
    });
}
function verifySessionOwner() {
    return (0, resolver_function_definition_1.createResolverFunctionDefinition)({
        slotName: 'verifySessionOwner',
        fileName: 'set-updated-at-conversation-table-fn.template.js',
        generateTemplate: templateGenerator('verify-session-owner'),
        dataSource: (config) => config.dataSources.conversationTableDataSource,
        substitutions: () => ({
            CONVERSATION_ID_PARENT: 'ctx.args',
        }),
    });
}
function writeMessageToTable() {
    return (0, resolver_function_definition_1.createResolverFunctionDefinition)({
        slotName: 'writeMessageToTable',
        fileName: 'write-message-to-table-resolver-fn.template.js',
        generateTemplate: templateGenerator('write-message-to-table'),
        dataSource: (config) => config.dataSources.messageTableDataSource,
        substitutions: (config) => ({
            CONVERSATION_MESSAGE_TYPE_NAME: config.message.model.name.value,
        }),
    });
}
function invokeLambda() {
    return (0, resolver_function_definition_1.createResolverFunctionDefinition)({
        slotName: 'data',
        fileName: 'invoke-lambda-resolver-fn.template.js',
        generateTemplate: templateGenerator('invoke-lambda'),
        dataSource: (config) => config.dataSources.lambdaFunctionDataSource,
        substitutions: invokeLambdaResolverSubstitutions,
    });
}
const packageName = 'amplify-graphql-conversation-transformer';
const packageVersion = require('../../package.json').version;
function invokeLambdaResolverSubstitutions(config) {
    return {
        MODEL_ID: JSON.stringify(config.aiModel),
        SYSTEM_PROMPT: JSON.stringify(config.systemPrompt),
        DATA_TOOLS: JSON.stringify(config.toolSpec),
        SELECTION_SET: streamingSelectionSet,
        INFERENCE_CONFIGURATION: JSON.stringify(config.inferenceConfiguration),
        RESPONSE_MUTATION_NAME: config.assistantResponseMutation.field.name.value,
        RESPONSE_MUTATION_INPUT_TYPE_NAME: config.assistantResponseMutation.input.name.value,
        MESSAGE_MODEL_NAME: config.message.model.name.value,
        GET_QUERY_NAME: (0, name_values_1.getConversationMessageGetQueryName)(config),
        GET_QUERY_INPUT_TYPE_NAME: name_values_1.CONVERSATION_MESSAGE_GET_QUERY_INPUT_TYPE_NAME,
        LIST_QUERY_NAME: (0, name_values_1.getConversationMessageListQueryName)(config),
        LIST_QUERY_INPUT_TYPE_NAME: (0, name_values_1.getConversationMessageListQueryInputTypeName)(config),
        LIST_QUERY_LIMIT: 'undefined',
        STREAMING_RESPONSE_MUTATION_NAME: config.assistantResponseStreamingMutation.field.name.value,
        STREAMING_RESPONSE_MUTATION_INPUT_TYPE_NAME: config.assistantResponseStreamingMutation.input.name.value,
        PACKAGE_METADATA: `'${packageName}#${packageVersion}'`,
    };
}
function fieldName(config) {
    return config.field.name.value;
}
function templateGenerator(slotName) {
    return (0, resolver_function_definition_1.createS3AssetMappingTemplateGenerator)('Mutation', slotName, fieldName);
}
const streamingSelectionSet = `associatedUserMessageId contentBlockDeltaIndex contentBlockDoneAtIndex contentBlockIndex contentBlockText contentBlockToolUse { toolUseId name input } conversationId id stopReason owner errors { errorType message } p`;
//# sourceMappingURL=send-message-pipeline-definition.js.map