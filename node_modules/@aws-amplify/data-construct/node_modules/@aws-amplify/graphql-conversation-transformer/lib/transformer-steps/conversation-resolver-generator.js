"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationResolverGenerator = void 0;
const ai_constructs_1 = require("@aws-amplify/ai-constructs");
const graphql_index_transformer_1 = require("@aws-amplify/graphql-index-transformer");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const cdk = __importStar(require("aws-cdk-lib"));
const graphql_transformer_common_1 = require("graphql-transformer-common");
const pluralize_1 = __importDefault(require("pluralize"));
const name_values_1 = require("../graphql-types/name-values");
const resolvers_1 = require("../resolvers");
const process_tools_1 = require("../tools/process-tools");
class ConversationResolverGenerator {
    constructor(functionNameMap, outputStorageStrategy) {
        this.functionNameMap = functionNameMap;
        this.outputStorageStrategy = outputStorageStrategy;
    }
    generateResolvers(directives, ctx) {
        for (const directive of directives) {
            directive.toolSpec = (0, process_tools_1.processTools)(directive.tools, ctx);
            directive.dataSources = this.generateDataSources(directive, ctx);
            this.setUpConversationTableIndex(ctx, directive);
            this.setupMessageTableIndex(ctx, directive);
            this.generateResolversForDirective(directive, ctx);
            this.addInitSlotToListConversationsPipeline(ctx, directive);
            this.addSlotsToListMessagesPipeline(ctx, directive);
        }
    }
    generateDataSources(directive, ctx) {
        const functionStackName = (0, name_values_1.getFunctionStackName)(directive);
        const functionStack = ctx.stackManager.createStack(functionStackName);
        const { functionDataSourceId, referencedFunction } = this.setupFunctionDataSource(directive, functionStack, (0, name_values_1.upperCaseConversationFieldName)(directive));
        const lambdaFunctionDataSource = this.addLambdaDataSource(ctx, functionDataSourceId, referencedFunction, functionStackName);
        const conversationMessageTableDataSourceName = (0, graphql_transformer_core_1.getModelDataSourceNameForTypeName)(ctx, directive.message.model.name.value);
        const messageTableDataSource = ctx.api.host.getDataSource(conversationMessageTableDataSourceName);
        const conversationTableDataSourceName = (0, graphql_transformer_core_1.getModelDataSourceNameForTypeName)(ctx, directive.conversation.model.name.value);
        const conversationTableDataSource = ctx.api.host.getDataSource(conversationTableDataSourceName);
        return {
            lambdaFunctionDataSource,
            messageTableDataSource,
            conversationTableDataSource,
        };
    }
    generateResolversForDirective(directive, ctx) {
        const parentName = directive.parent.name.value;
        const fieldName = directive.field.name.value;
        const conversationPipelineResolver = (0, resolvers_1.generateResolverPipeline)(resolvers_1.sendMessagePipelineDefinition, directive, ctx);
        ctx.resolvers.addResolver(parentName, fieldName, conversationPipelineResolver);
        const assistantResponsePipelineResolver = (0, resolvers_1.generateResolverPipeline)(resolvers_1.assistantResponsePipelineDefinition, directive, ctx);
        ctx.resolvers.addResolver(parentName, directive.assistantResponseMutation.field.name.value, assistantResponsePipelineResolver);
        const assistantResponseStreamingPipelineResolver = (0, resolvers_1.generateResolverPipeline)(resolvers_1.assistantResponseStreamPipelineDefinition, directive, ctx);
        ctx.resolvers.addResolver(parentName, directive.assistantResponseStreamingMutation.field.name.value, assistantResponseStreamingPipelineResolver);
        const assistantResponseSubscriptionPipelineResolver = (0, resolvers_1.generateResolverPipeline)(resolvers_1.assistantResponseSubscriptionPipelineDefinition, directive, ctx);
        ctx.resolvers.addResolver('Subscription', directive.assistantResponseSubscriptionField.name.value, assistantResponseSubscriptionPipelineResolver);
    }
    setupFunctionDataSource(directive, functionStack, capitalizedFieldName) {
        if (directive.handler) {
            return this.setupExistingFunctionDataSource(directive.handler.functionName);
        }
        else if (directive.functionName) {
            return this.setupExistingFunctionDataSource(directive.functionName);
        }
        else {
            return this.setupDefaultConversationHandler(functionStack, capitalizedFieldName, directive.aiModel);
        }
    }
    setupExistingFunctionDataSource(functionName) {
        const functionDataSourceId = graphql_transformer_common_1.FunctionResourceIDs.FunctionDataSourceID(functionName);
        if (!this.functionNameMap) {
            throw new Error('Function name map is not provided');
        }
        const referencedFunction = this.functionNameMap[functionName];
        if (!referencedFunction) {
            throw new Error(`Function ${functionName} not found in function name map`);
        }
        return { functionDataSourceId, referencedFunction };
    }
    setupDefaultConversationHandler(functionStack, capitalizedFieldName, modelId) {
        const defaultConversationHandler = new ai_constructs_1.conversation.ConversationHandlerFunction(functionStack, `${capitalizedFieldName}DefaultConversationHandler`, {
            models: [
                {
                    modelId,
                },
            ],
            outputStorageStrategy: this.outputStorageStrategy,
        });
        const functionDataSourceId = graphql_transformer_common_1.FunctionResourceIDs.FunctionDataSourceID(`${capitalizedFieldName}DefaultConversationHandler`);
        const referencedFunction = defaultConversationHandler.resources.lambda;
        return { functionDataSourceId, referencedFunction };
    }
    addLambdaDataSource(ctx, functionDataSourceId, referencedFunction, functionStackName) {
        const functionDataSourceScope = ctx.stackManager.getScopeFor(functionDataSourceId, functionStackName);
        return ctx.api.host.addLambdaDataSource(functionDataSourceId, referencedFunction, {}, functionDataSourceScope);
    }
    addSlotsToListMessagesPipeline(ctx, directive) {
        const messageName = directive.message.model.name.value;
        const pluralized = (0, pluralize_1.default)(messageName);
        const listMessagesResolver = ctx.resolvers.getResolver('Query', `list${pluralized}`);
        const initResolverFn = (0, resolvers_1.generateResolverFunction)(resolvers_1.listMessagesInitFunctionDefinition, directive, ctx);
        listMessagesResolver.addJsFunctionToSlot(resolvers_1.listMessagesInitFunctionDefinition.slotName, initResolverFn);
        const postProcessingResolverFn = (0, resolvers_1.generateResolverFunction)(resolvers_1.listMessagesPostProcessingFunctionDefinition, directive, ctx);
        listMessagesResolver.addJsFunctionToSlot(resolvers_1.listMessagesPostProcessingFunctionDefinition.slotName, postProcessingResolverFn);
    }
    addInitSlotToListConversationsPipeline(ctx, directive) {
        const conversationName = directive.conversation.model.name.value;
        const pluralized = (0, pluralize_1.default)(conversationName);
        const listConversationsResolver = ctx.resolvers.getResolver('Query', `list${pluralized}`);
        const initResolverFn = (0, resolvers_1.generateResolverFunction)(resolvers_1.listConversationsInitFunctionDefinition, directive, ctx);
        listConversationsResolver.addJsFunctionToSlot('init', initResolverFn);
    }
    setupMessageTableIndex(ctx, directive) {
        const messageName = directive.message.model.name.value;
        const message = directive.message.model;
        const conversationMessagesTable = (0, graphql_transformer_core_1.getTable)(ctx, message);
        const gsiPartitionKeyName = name_values_1.CONVERSATION_MESSAGES_REFERENCE_FIELD_NAME;
        const gsiPartitionKeyType = 'S';
        const gsiSortKeyName = 'createdAt';
        const gsiSortKeyType = 'S';
        this.addGlobalSecondaryIndex(conversationMessagesTable, ctx, messageName, name_values_1.LIST_MESSAGES_INDEX_NAME, { name: gsiPartitionKeyName, type: gsiPartitionKeyType }, { name: gsiSortKeyName, type: gsiSortKeyType });
    }
    setUpConversationTableIndex(ctx, directive) {
        const conversationName = directive.conversation.model.name.value;
        const conversation = directive.conversation.model;
        const conversationTable = (0, graphql_transformer_core_1.getTable)(ctx, conversation);
        const gsiPartitionKeyName = '__typename';
        const gsiPartitionKeyType = 'S';
        const gsiSortKeyName = 'updatedAt';
        const gsiSortKeyType = 'S';
        this.addGlobalSecondaryIndex(conversationTable, ctx, conversationName, name_values_1.LIST_CONVERSATIONS_INDEX_NAME, { name: gsiPartitionKeyName, type: gsiPartitionKeyType }, { name: gsiSortKeyName, type: gsiSortKeyType });
    }
    addGlobalSecondaryIndex(table, ctx, typeName, indexName, partitionKey, sortKey) {
        table.addGlobalSecondaryIndex({
            indexName,
            projectionType: 'ALL',
            partitionKey,
            sortKey,
            readCapacity: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS),
            writeCapacity: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS),
        });
        const gsi = table.globalSecondaryIndexes.find((g) => g.indexName === indexName);
        const newIndex = {
            indexName,
            keySchema: gsi.keySchema,
            projection: { projectionType: 'ALL' },
            provisionedThroughput: cdk.Fn.conditionIf(graphql_transformer_common_1.ResourceConstants.CONDITIONS.ShouldUsePayPerRequestBilling, cdk.Fn.ref('AWS::NoValue'), {
                ReadCapacityUnits: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableReadIOPS),
                WriteCapacityUnits: cdk.Fn.ref(graphql_transformer_common_1.ResourceConstants.PARAMETERS.DynamoDBModelTableWriteIOPS),
            }),
        };
        (0, graphql_index_transformer_1.overrideIndexAtCfnLevel)(ctx, typeName, table, newIndex);
    }
}
exports.ConversationResolverGenerator = ConversationResolverGenerator;
//# sourceMappingURL=conversation-resolver-generator.js.map