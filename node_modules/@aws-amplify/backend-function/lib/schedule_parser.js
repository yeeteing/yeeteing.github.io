import { Schedule } from 'aws-cdk-lib/aws-events';
import os from 'os';
/**
 * Parses function schedule props in order to create EventBridge rules.
 */
export const convertFunctionSchedulesToRuleSchedules = (lambda, functionSchedules) => {
    const errors = [];
    const ruleSchedules = [];
    const schedules = Array.isArray(functionSchedules)
        ? functionSchedules
        : [functionSchedules];
    schedules.forEach((schedule) => {
        if (isTimeInterval(schedule)) {
            const { value, unit } = parseTimeInterval(schedule);
            if (value && !isPositiveWholeNumber(value)) {
                errors.push('Function schedule rate must be set with a positive whole number');
            }
            else if (value &&
                lambda.timeout &&
                unit === 'm' &&
                value * 60 < lambda.timeout.toSeconds()) {
                const timeout = lambda.timeout.toSeconds();
                errors.push(`Function schedule rate must be greater than the function timeout of ${timeout} ${timeout > 1 ? 'seconds' : 'second'}`);
            }
        }
        else {
            const cronErrors = validateCron(schedule);
            if (cronErrors.length > 0) {
                errors.push(...cronErrors);
            }
        }
        if (errors.length === 0) {
            ruleSchedules.push(Schedule.cron(translateToCronOptions(schedule)));
        }
    });
    if (errors.length > 0) {
        throw new Error(errors.join(os.EOL));
    }
    return ruleSchedules;
};
const isTimeInterval = (schedule) => {
    const parts = schedule.split(' ');
    return (parts[0] === 'every' &&
        ['m', 'h', 'day', 'week', 'month', 'year'].some((a) => parts[1].endsWith(a)) &&
        parts.length === 2);
};
const parseTimeInterval = (timeInterval) => {
    const part = timeInterval.split(' ')[1];
    const value = part.match(/-?\d+\.?\d*/);
    const unit = part.match(/[a-zA-Z]+/);
    return {
        value: value ? Number(value[0]) : undefined,
        unit: unit ? unit[0] : undefined,
    };
};
const isPositiveWholeNumber = (test) => test > 0 && test % 1 === 0;
const validateCron = (cron) => {
    const errors = [];
    const cronParts = cron.split(' ');
    const [minute, hour, dayOfMonth, month, dayOfWeek, year] = cronParts;
    const minuteValidationErrors = validateCronPart('minutes', minute, 0, 59);
    const hourValidationErrors = validateCronPart('hours', hour, 0, 23);
    const dayOfMonthValidationErrors = dayOfMonth === '?'
        ? []
        : validateCronPart('day-of-month', dayOfMonth, 1, 31);
    const monthValidationErrors = validateCronPart('month', month, 1, 12);
    const dayOfWeekValidationErrors = dayOfWeek === '?' ? [] : validateCronPart('day-of-week', dayOfWeek, 1, 7);
    const yearValidationErrors = year
        ? validateCronPart('year', year, 1970, 2199)
        : [];
    errors.push(...minuteValidationErrors, ...hourValidationErrors, ...dayOfMonthValidationErrors, ...monthValidationErrors, ...dayOfWeekValidationErrors, ...yearValidationErrors);
    if (dayOfMonth !== '?' && dayOfWeek !== '?') {
        errors.push('Cron expressions cannot have both day-of-month and day-of-week defined, you must use a ? in one of the fields');
    }
    return errors;
};
const validateCronPart = (cronPart, value, min, max) => {
    const errors = [];
    if (value === '*') {
        return errors;
    }
    const hasStep = value.includes('/');
    const hasRange = value.includes('-');
    const hasList = value.includes(',');
    if (hasList) {
        const listError = validateList(cronPart, value, min, max);
        if (listError) {
            errors.push(listError);
        }
        const listItems = value.split(',');
        listItems.forEach((listItem) => {
            if (listItem.includes('/')) {
                const stepError = validateStepValue(cronPart, listItem, min, max);
                if (stepError) {
                    errors.push(stepError);
                }
            }
            else if (listItem.includes('-')) {
                const rangeError = validateRange(cronPart, listItem, min, max);
                if (rangeError) {
                    errors.push(rangeError);
                }
            }
        });
    }
    else if (hasStep) {
        const stepError = validateStepValue(cronPart, value, min, max);
        if (stepError) {
            errors.push(stepError);
        }
    }
    else if (hasRange) {
        const rangeError = validateRange(cronPart, value, min, max);
        if (rangeError) {
            errors.push(rangeError);
        }
    }
    if (!hasStep &&
        !hasRange &&
        !hasList &&
        !isWholeNumberBetweenInclusive(Number(value), min, max)) {
        errors.push(`Cron field for ${cronPart} must be a whole number between ${min} and ${max}`);
    }
    return errors;
};
const validateStepValue = (cronPart, value, min, max) => {
    const originalBase = value.split('/')[0];
    const [base, step] = value.split('/').map(Number);
    if (originalBase === '*') {
        if (isNaN(step) || step <= 0 || !isPositiveWholeNumber(step)) {
            return `Cron step values for ${cronPart} must be positive whole numbers`;
        }
    }
    else if (isNaN(base) ||
        isNaN(step) ||
        !isWholeNumberBetweenInclusive(base, min, max) ||
        step <= 0) {
        return `Cron step values for ${cronPart} must be whole numbers between ${min} and ${max}`;
    }
    return;
};
const validateRange = (cronPart, value, min, max) => {
    const [start, end] = value.split('-').map(Number);
    if (isNaN(start) ||
        isNaN(end) ||
        !isWholeNumberBetweenInclusive(start, min, max) ||
        !isWholeNumberBetweenInclusive(end, min, max) ||
        start > end) {
        return `Cron range for ${cronPart} must be whole numbers between ${min} and ${max}`;
    }
    return;
};
const validateList = (cronPart, value, min, max) => {
    if (!value
        .split(',')
        .every((v) => isWholeNumberBetweenInclusive(Number(v), min, max))) {
        return `Cron list for ${cronPart} must contain whole numbers between ${min} and ${max}`;
    }
    return;
};
const isWholeNumberBetweenInclusive = (test, min, max) => min <= test && test <= max && test % 1 === 0;
const translateToCronOptions = (schedule) => {
    if (isTimeInterval(schedule)) {
        const { value, unit } = parseTimeInterval(schedule);
        switch (unit) {
            case 'm':
                return { minute: `*/${value}` };
            case 'h':
                return { minute: '0', hour: `*/${value}` };
            case 'day':
                return { minute: '0', hour: '0', day: `*` };
            case 'week':
                return { minute: '0', hour: '0', weekDay: `1` };
            case 'month':
                return { minute: '0', hour: '0', day: '1', month: `*` };
            case 'year':
                return {
                    minute: '0',
                    hour: '0',
                    day: '1',
                    month: '1',
                    year: `*`,
                };
            default:
                // This should never happen with strict types
                throw new Error('Could not determine the schedule rate for the function');
        }
    }
    else {
        const cronArray = schedule.split(' ');
        const result = {
            minute: cronArray[0],
            hour: cronArray[1],
            month: cronArray[3],
            year: cronArray.length === 6 ? cronArray[5] : '*',
        };
        // Branching logic here is because we cannot supply both day and weekDay
        if (cronArray[2] === '?') {
            result.weekDay = cronArray[4];
        }
        else {
            result.day = cronArray[2];
        }
        return result;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGVfcGFyc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NjaGVkdWxlX3BhcnNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFPL0QsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBVXBCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUNBQXVDLEdBQUcsQ0FDckQsTUFBc0IsRUFDdEIsaUJBQXdELEVBQ3hELEVBQUU7SUFDRixNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFDNUIsTUFBTSxhQUFhLEdBQWUsRUFBRSxDQUFDO0lBRXJDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFDaEQsQ0FBQyxDQUFDLGlCQUFpQjtRQUNuQixDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXhCLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUM3QixJQUFJLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQzdCLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFcEQsSUFBSSxLQUFLLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO2dCQUMzQyxNQUFNLENBQUMsSUFBSSxDQUNULGlFQUFpRSxDQUNsRSxDQUFDO1lBQ0osQ0FBQztpQkFBTSxJQUNMLEtBQUs7Z0JBQ0wsTUFBTSxDQUFDLE9BQU87Z0JBQ2QsSUFBSSxLQUFLLEdBQUc7Z0JBQ1osS0FBSyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUN2QyxDQUFDO2dCQUNELE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7Z0JB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QUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLENBQUMsR0FBRyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1QixDQUFDO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENyb25PcHRpb25zLCBTY2hlZHVsZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1ldmVudHMnO1xuaW1wb3J0IHsgTm9kZWpzRnVuY3Rpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLW5vZGVqcyc7XG5pbXBvcnQgdHlwZSB7XG4gIENyb25TY2hlZHVsZSxcbiAgRnVuY3Rpb25TY2hlZHVsZSxcbiAgVGltZUludGVydmFsLFxufSBmcm9tICcuL2ZhY3RvcnkuanMnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcblxudHlwZSBDcm9uUGFydCA9XG4gIHwgJ21pbnV0ZXMnXG4gIHwgJ2hvdXJzJ1xuICB8ICdkYXktb2YtbW9udGgnXG4gIHwgJ21vbnRoJ1xuICB8ICdkYXktb2Ytd2VlaydcbiAgfCAneWVhcic7XG5cbi8qKlxuICogUGFyc2VzIGZ1bmN0aW9uIHNjaGVkdWxlIHByb3BzIGluIG9yZGVyIHRvIGNyZWF0ZSBFdmVudEJyaWRnZSBydWxlcy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnZlcnRGdW5jdGlvblNjaGVkdWxlc1RvUnVsZVNjaGVkdWxlcyA9IChcbiAgbGFtYmRhOiBOb2RlanNGdW5jdGlvbixcbiAgZnVuY3Rpb25TY2hlZHVsZXM6IEZ1bmN0aW9uU2NoZWR1bGUgfCBGdW5jdGlvblNjaGVkdWxlW10sXG4pID0+IHtcbiAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuICBjb25zdCBydWxlU2NoZWR1bGVzOiBTY2hlZHVsZVtdID0gW107XG5cbiAgY29uc3Qgc2NoZWR1bGVzID0gQXJyYXkuaXNBcnJheShmdW5jdGlvblNjaGVkdWxlcylcbiAgICA/IGZ1bmN0aW9uU2NoZWR1bGVzXG4gICAgOiBbZnVuY3Rpb25TY2hlZHVsZXNdO1xuXG4gIHNjaGVkdWxlcy5mb3JFYWNoKChzY2hlZHVsZSkgPT4ge1xuICAgIGlmIChpc1RpbWVJbnRlcnZhbChzY2hlZHVsZSkpIHtcbiAgICAgIGNvbnN0IHsgdmFsdWUsIHVuaXQgfSA9IHBhcnNlVGltZUludGVydmFsKHNjaGVkdWxlKTtcblxuICAgICAgaWYgKHZhbHVlICYmICFpc1Bvc2l0aXZlV2hvbGVOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgIGVycm9ycy5wdXNoKFxuICAgICAgICAgICdGdW5jdGlvbiBzY2hlZHVsZSByYXRlIG11c3QgYmUgc2V0IHdpdGggYSBwb3NpdGl2ZSB3aG9sZSBudW1iZXInLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdmFsdWUgJiZcbiAgICAgICAgbGFtYmRhLnRpbWVvdXQgJiZcbiAgICAgICAgdW5pdCA9PT0gJ20nICYmXG4gICAgICAgIHZhbHVlICogNjAgPCBsYW1iZGEudGltZW91dC50b1NlY29uZHMoKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBsYW1iZGEudGltZW91dC50b1NlY29uZHMoKTtcbiAgICAgICAgZXJyb3JzLnB1c2goXG4gICAgICAgICAgYEZ1bmN0aW9uIHNjaGVkdWxlIHJhdGUgbXVzdCBiZSBncmVhdGVyIHRoYW4gdGhlIGZ1bmN0aW9uIHRpbWVvdXQgb2YgJHt0aW1lb3V0fSAke1xuICAgICAgICAgICAgdGltZW91dCA+IDEgPyAnc2Vjb25kcycgOiAnc2Vjb25kJ1xuICAgICAgICAgIH1gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjcm9uRXJyb3JzID0gdmFsaWRhdGVDcm9uKHNjaGVkdWxlKTtcblxuICAgICAgaWYgKGNyb25FcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBlcnJvcnMucHVzaCguLi5jcm9uRXJyb3JzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcnVsZVNjaGVkdWxlcy5wdXNoKFNjaGVkdWxlLmNyb24odHJhbnNsYXRlVG9Dcm9uT3B0aW9ucyhzY2hlZHVsZSkpKTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMuam9pbihvcy5FT0wpKTtcbiAgfVxuXG4gIHJldHVybiBydWxlU2NoZWR1bGVzO1xufTtcblxuY29uc3QgaXNUaW1lSW50ZXJ2YWwgPSAoXG4gIHNjaGVkdWxlOiBGdW5jdGlvblNjaGVkdWxlLFxuKTogc2NoZWR1bGUgaXMgVGltZUludGVydmFsID0+IHtcbiAgY29uc3QgcGFydHMgPSBzY2hlZHVsZS5zcGxpdCgnICcpO1xuXG4gIHJldHVybiAoXG4gICAgcGFydHNbMF0gPT09ICdldmVyeScgJiZcbiAgICBbJ20nLCAnaCcsICdkYXknLCAnd2VlaycsICdtb250aCcsICd5ZWFyJ10uc29tZSgoYSkgPT5cbiAgICAgIHBhcnRzWzFdLmVuZHNXaXRoKGEpLFxuICAgICkgJiZcbiAgICBwYXJ0cy5sZW5ndGggPT09IDJcbiAgKTtcbn07XG5cbmNvbnN0IHBhcnNlVGltZUludGVydmFsID0gKHRpbWVJbnRlcnZhbDogVGltZUludGVydmFsKSA9PiB7XG4gIGNvbnN0IHBhcnQgPSB0aW1lSW50ZXJ2YWwuc3BsaXQoJyAnKVsxXTtcbiAgY29uc3QgdmFsdWUgPSBwYXJ0Lm1hdGNoKC8tP1xcZCtcXC4/XFxkKi8pO1xuICBjb25zdCB1bml0ID0gcGFydC5tYXRjaCgvW2EtekEtWl0rLyk7XG5cbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogdmFsdWUgPyBOdW1iZXIodmFsdWVbMF0pIDogdW5kZWZpbmVkLFxuICAgIHVuaXQ6IHVuaXQgPyB1bml0WzBdIDogdW5kZWZpbmVkLFxuICB9O1xufTtcblxuY29uc3QgaXNQb3NpdGl2ZVdob2xlTnVtYmVyID0gKHRlc3Q6IG51bWJlcikgPT4gdGVzdCA+IDAgJiYgdGVzdCAlIDEgPT09IDA7XG5cbmNvbnN0IHZhbGlkYXRlQ3JvbiA9IChjcm9uOiBDcm9uU2NoZWR1bGUpID0+IHtcbiAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuICBjb25zdCBjcm9uUGFydHMgPSBjcm9uLnNwbGl0KCcgJyk7XG5cbiAgY29uc3QgW21pbnV0ZSwgaG91ciwgZGF5T2ZNb250aCwgbW9udGgsIGRheU9mV2VlaywgeWVhcl0gPSBjcm9uUGFydHM7XG5cbiAgY29uc3QgbWludXRlVmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRlQ3JvblBhcnQoJ21pbnV0ZXMnLCBtaW51dGUsIDAsIDU5KTtcbiAgY29uc3QgaG91clZhbGlkYXRpb25FcnJvcnMgPSB2YWxpZGF0ZUNyb25QYXJ0KCdob3VycycsIGhvdXIsIDAsIDIzKTtcbiAgY29uc3QgZGF5T2ZNb250aFZhbGlkYXRpb25FcnJvcnMgPVxuICAgIGRheU9mTW9udGggPT09ICc/J1xuICAgICAgPyBbXVxuICAgICAgOiB2YWxpZGF0ZUNyb25QYXJ0KCdkYXktb2YtbW9udGgnLCBkYXlPZk1vbnRoLCAxLCAzMSk7XG4gIGNvbnN0IG1vbnRoVmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRlQ3JvblBhcnQoJ21vbnRoJywgbW9udGgsIDEsIDEyKTtcbiAgY29uc3QgZGF5T2ZXZWVrVmFsaWRhdGlvbkVycm9ycyA9XG4gICAgZGF5T2ZXZWVrID09PSAnPycgPyBbXSA6IHZhbGlkYXRlQ3JvblBhcnQoJ2RheS1vZi13ZWVrJywgZGF5T2ZXZWVrLCAxLCA3KTtcbiAgY29uc3QgeWVhclZhbGlkYXRpb25FcnJvcnMgPSB5ZWFyXG4gICAgPyB2YWxpZGF0ZUNyb25QYXJ0KCd5ZWFyJywgeWVhciwgMTk3MCwgMjE5OSlcbiAgICA6IFtdO1xuXG4gIGVycm9ycy5wdXNoKFxuICAgIC4uLm1pbnV0ZVZhbGlkYXRpb25FcnJvcnMsXG4gICAgLi4uaG91clZhbGlkYXRpb25FcnJvcnMsXG4gICAgLi4uZGF5T2ZNb250aFZhbGlkYXRpb25FcnJvcnMsXG4gICAgLi4ubW9udGhWYWxpZGF0aW9uRXJyb3JzLFxuICAgIC4uLmRheU9mV2Vla1ZhbGlkYXRpb25FcnJvcnMsXG4gICAgLi4ueWVhclZhbGlkYXRpb25FcnJvcnMsXG4gICk7XG5cbiAgaWYgKGRheU9mTW9udGggIT09ICc/JyAmJiBkYXlPZldlZWsgIT09ICc/Jykge1xuICAgIGVycm9ycy5wdXNoKFxuICAgICAgJ0Nyb24gZXhwcmVzc2lvbnMgY2Fubm90IGhhdmUgYm90aCBkYXktb2YtbW9udGggYW5kIGRheS1vZi13ZWVrIGRlZmluZWQsIHlvdSBtdXN0IHVzZSBhID8gaW4gb25lIG9mIHRoZSBmaWVsZHMnLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gZXJyb3JzO1xufTtcblxuY29uc3QgdmFsaWRhdGVDcm9uUGFydCA9IChcbiAgY3JvblBhcnQ6IENyb25QYXJ0LFxuICB2YWx1ZTogc3RyaW5nLFxuICBtaW46IG51bWJlcixcbiAgbWF4OiBudW1iZXIsXG4pID0+IHtcbiAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGlmICh2YWx1ZSA9PT0gJyonKSB7XG4gICAgcmV0dXJuIGVycm9ycztcbiAgfVxuXG4gIGNvbnN0IGhhc1N0ZXAgPSB2YWx1ZS5pbmNsdWRlcygnLycpO1xuICBjb25zdCBoYXNSYW5nZSA9IHZhbHVlLmluY2x1ZGVzKCctJyk7XG4gIGNvbnN0IGhhc0xpc3QgPSB2YWx1ZS5pbmNsdWRlcygnLCcpO1xuXG4gIGlmIChoYXNMaXN0KSB7XG4gICAgY29uc3QgbGlzdEVycm9yID0gdmFsaWRhdGVMaXN0KGNyb25QYXJ0LCB2YWx1ZSwgbWluLCBtYXgpO1xuXG4gICAgaWYgKGxpc3RFcnJvcikge1xuICAgICAgZXJyb3JzLnB1c2gobGlzdEVycm9yKTtcbiAgICB9XG4gICAgY29uc3QgbGlzdEl0ZW1zID0gdmFsdWUuc3BsaXQoJywnKTtcblxuICAgIGxpc3RJdGVtcy5mb3JFYWNoKChsaXN0SXRlbSkgPT4ge1xuICAgICAgaWYgKGxpc3RJdGVtLmluY2x1ZGVzKCcvJykpIHtcbiAgICAgICAgY29uc3Qgc3RlcEVycm9yID0gdmFsaWRhdGVTdGVwVmFsdWUoY3JvblBhcnQsIGxpc3RJdGVtLCBtaW4sIG1heCk7XG5cbiAgICAgICAgaWYgKHN0ZXBFcnJvcikge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHN0ZXBFcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobGlzdEl0ZW0uaW5jbHVkZXMoJy0nKSkge1xuICAgICAgICBjb25zdCByYW5nZUVycm9yID0gdmFsaWRhdGVSYW5nZShjcm9uUGFydCwgbGlzdEl0ZW0sIG1pbiwgbWF4KTtcblxuICAgICAgICBpZiAocmFuZ2VFcnJvcikge1xuICAgICAgICAgIGVycm9ycy5wdXNoKHJhbmdlRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaGFzU3RlcCkge1xuICAgIGNvbnN0IHN0ZXBFcnJvciA9IHZhbGlkYXRlU3RlcFZhbHVlKGNyb25QYXJ0LCB2YWx1ZSwgbWluLCBtYXgpO1xuXG4gICAgaWYgKHN0ZXBFcnJvcikge1xuICAgICAgZXJyb3JzLnB1c2goc3RlcEVycm9yKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaGFzUmFuZ2UpIHtcbiAgICBjb25zdCByYW5nZUVycm9yID0gdmFsaWRhdGVSYW5nZShjcm9uUGFydCwgdmFsdWUsIG1pbiwgbWF4KTtcblxuICAgIGlmIChyYW5nZUVycm9yKSB7XG4gICAgICBlcnJvcnMucHVzaChyYW5nZUVycm9yKTtcbiAgICB9XG4gIH1cblxuICBpZiAoXG4gICAgIWhhc1N0ZXAgJiZcbiAgICAhaGFzUmFuZ2UgJiZcbiAgICAhaGFzTGlzdCAmJlxuICAgICFpc1dob2xlTnVtYmVyQmV0d2VlbkluY2x1c2l2ZShOdW1iZXIodmFsdWUpLCBtaW4sIG1heClcbiAgKSB7XG4gICAgZXJyb3JzLnB1c2goXG4gICAgICBgQ3JvbiBmaWVsZCBmb3IgJHtjcm9uUGFydH0gbXVzdCBiZSBhIHdob2xlIG51bWJlciBiZXR3ZWVuICR7bWlufSBhbmQgJHttYXh9YCxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIGVycm9ycztcbn07XG5cbmNvbnN0IHZhbGlkYXRlU3RlcFZhbHVlID0gKFxuICBjcm9uUGFydDogQ3JvblBhcnQsXG4gIHZhbHVlOiBzdHJpbmcsXG4gIG1pbjogbnVtYmVyLFxuICBtYXg6IG51bWJlcixcbikgPT4ge1xuICBjb25zdCBvcmlnaW5hbEJhc2UgPSB2YWx1ZS5zcGxpdCgnLycpWzBdO1xuICBjb25zdCBbYmFzZSwgc3RlcF0gPSB2YWx1ZS5zcGxpdCgnLycpLm1hcChOdW1iZXIpO1xuXG4gIGlmIChvcmlnaW5hbEJhc2UgPT09ICcqJykge1xuICAgIGlmIChpc05hTihzdGVwKSB8fCBzdGVwIDw9IDAgfHwgIWlzUG9zaXRpdmVXaG9sZU51bWJlcihzdGVwKSkge1xuICAgICAgcmV0dXJuIGBDcm9uIHN0ZXAgdmFsdWVzIGZvciAke2Nyb25QYXJ0fSBtdXN0IGJlIHBvc2l0aXZlIHdob2xlIG51bWJlcnNgO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICBpc05hTihiYXNlKSB8fFxuICAgIGlzTmFOKHN0ZXApIHx8XG4gICAgIWlzV2hvbGVOdW1iZXJCZXR3ZWVuSW5jbHVzaXZlKGJhc2UsIG1pbiwgbWF4KSB8fFxuICAgIHN0ZXAgPD0gMFxuICApIHtcbiAgICByZXR1cm4gYENyb24gc3RlcCB2YWx1ZXMgZm9yICR7Y3JvblBhcnR9IG11c3QgYmUgd2hvbGUgbnVtYmVycyBiZXR3ZWVuICR7bWlufSBhbmQgJHttYXh9YDtcbiAgfVxuXG4gIHJldHVybjtcbn07XG5cbmNvbnN0IHZhbGlkYXRlUmFuZ2UgPSAoXG4gIGNyb25QYXJ0OiBDcm9uUGFydCxcbiAgdmFsdWU6IHN0cmluZyxcbiAgbWluOiBudW1iZXIsXG4gIG1heDogbnVtYmVyLFxuKSA9PiB7XG4gIGNvbnN0IFtzdGFydCwgZW5kXSA9IHZhbHVlLnNwbGl0KCctJykubWFwKE51bWJlcik7XG5cbiAgaWYgKFxuICAgIGlzTmFOKHN0YXJ0KSB8fFxuICAgIGlzTmFOKGVuZCkgfHxcbiAgICAhaXNXaG9sZU51bWJlckJldHdlZW5JbmNsdXNpdmUoc3RhcnQsIG1pbiwgbWF4KSB8fFxuICAgICFpc1dob2xlTnVtYmVyQmV0d2VlbkluY2x1c2l2ZShlbmQsIG1pbiwgbWF4KSB8fFxuICAgIHN0YXJ0ID4gZW5kXG4gICkge1xuICAgIHJldHVybiBgQ3JvbiByYW5nZSBmb3IgJHtjcm9uUGFydH0gbXVzdCBiZSB3aG9sZSBudW1iZXJzIGJldHdlZW4gJHttaW59IGFuZCAke21heH1gO1xuICB9XG5cbiAgcmV0dXJuO1xufTtcblxuY29uc3QgdmFsaWRhdGVMaXN0ID0gKFxuICBjcm9uUGFydDogQ3JvblBhcnQsXG4gIHZhbHVlOiBzdHJpbmcsXG4gIG1pbjogbnVtYmVyLFxuICBtYXg6IG51bWJlcixcbikgPT4ge1xuICBpZiAoXG4gICAgIXZhbHVlXG4gICAgICAuc3BsaXQoJywnKVxuICAgICAgLmV2ZXJ5KCh2KSA9PiBpc1dob2xlTnVtYmVyQmV0d2VlbkluY2x1c2l2ZShOdW1iZXIodiksIG1pbiwgbWF4KSlcbiAgKSB7XG4gICAgcmV0dXJuIGBDcm9uIGxpc3QgZm9yICR7Y3JvblBhcnR9IG11c3QgY29udGFpbiB3aG9sZSBudW1iZXJzIGJldHdlZW4gJHttaW59IGFuZCAke21heH1gO1xuICB9XG5cbiAgcmV0dXJuO1xufTtcblxuY29uc3QgaXNXaG9sZU51bWJlckJldHdlZW5JbmNsdXNpdmUgPSAoXG4gIHRlc3Q6IG51bWJlcixcbiAgbWluOiBudW1iZXIsXG4gIG1heDogbnVtYmVyLFxuKSA9PiBtaW4gPD0gdGVzdCAmJiB0ZXN0IDw9IG1heCAmJiB0ZXN0ICUgMSA9PT0gMDtcblxuY29uc3QgdHJhbnNsYXRlVG9Dcm9uT3B0aW9ucyA9IChzY2hlZHVsZTogRnVuY3Rpb25TY2hlZHVsZSk6IENyb25PcHRpb25zID0+IHtcbiAgaWYgKGlzVGltZUludGVydmFsKHNjaGVkdWxlKSkge1xuICAgIGNvbnN0IHsgdmFsdWUsIHVuaXQgfSA9IHBhcnNlVGltZUludGVydmFsKHNjaGVkdWxlKTtcbiAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgIGNhc2UgJ20nOlxuICAgICAgICByZXR1cm4geyBtaW51dGU6IGAqLyR7dmFsdWV9YCB9O1xuICAgICAgY2FzZSAnaCc6XG4gICAgICAgIHJldHVybiB7IG1pbnV0ZTogJzAnLCBob3VyOiBgKi8ke3ZhbHVlfWAgfTtcbiAgICAgIGNhc2UgJ2RheSc6XG4gICAgICAgIHJldHVybiB7IG1pbnV0ZTogJzAnLCBob3VyOiAnMCcsIGRheTogYCpgIH07XG4gICAgICBjYXNlICd3ZWVrJzpcbiAgICAgICAgcmV0dXJuIHsgbWludXRlOiAnMCcsIGhvdXI6ICcwJywgd2Vla0RheTogYDFgIH07XG4gICAgICBjYXNlICdtb250aCc6XG4gICAgICAgIHJldHVybiB7IG1pbnV0ZTogJzAnLCBob3VyOiAnMCcsIGRheTogJzEnLCBtb250aDogYCpgIH07XG4gICAgICBjYXNlICd5ZWFyJzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtaW51dGU6ICcwJyxcbiAgICAgICAgICBob3VyOiAnMCcsXG4gICAgICAgICAgZGF5OiAnMScsXG4gICAgICAgICAgbW9udGg6ICcxJyxcbiAgICAgICAgICB5ZWFyOiBgKmAsXG4gICAgICAgIH07XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gd2l0aCBzdHJpY3QgdHlwZXNcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdDb3VsZCBub3QgZGV0ZXJtaW5lIHRoZSBzY2hlZHVsZSByYXRlIGZvciB0aGUgZnVuY3Rpb24nLFxuICAgICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjcm9uQXJyYXkgPSBzY2hlZHVsZS5zcGxpdCgnICcpO1xuICAgIGNvbnN0IHJlc3VsdDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgIG1pbnV0ZTogY3JvbkFycmF5WzBdLFxuICAgICAgaG91cjogY3JvbkFycmF5WzFdLFxuICAgICAgbW9udGg6IGNyb25BcnJheVszXSxcbiAgICAgIHllYXI6IGNyb25BcnJheS5sZW5ndGggPT09IDYgPyBjcm9uQXJyYXlbNV0gOiAnKicsXG4gICAgfTtcblxuICAgIC8vIEJyYW5jaGluZyBsb2dpYyBoZXJlIGlzIGJlY2F1c2Ugd2UgY2Fubm90IHN1cHBseSBib3RoIGRheSBhbmQgd2Vla0RheVxuICAgIGlmIChjcm9uQXJyYXlbMl0gPT09ICc/Jykge1xuICAgICAgcmVzdWx0LndlZWtEYXkgPSBjcm9uQXJyYXlbNF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5kYXkgPSBjcm9uQXJyYXlbMl07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcbiJdfQ==