"use strict";
var __addDisposableResource = (this && this.__addDisposableResource) || function (env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
        env.stack.push({ value: value, dispose: dispose, async: async });
    }
    else if (async) {
        env.stack.push({ async: true });
    }
    return value;
};
var __disposeResources = (this && this.__disposeResources) || (function (SuppressedError) {
    return function (env) {
        function fail(e) {
            env.error = env.hasError ? new SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
            env.hasError = true;
        }
        var r, s = 0;
        function next() {
            while (r = env.stack.pop()) {
                try {
                    if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
                    if (r.dispose) {
                        var result = r.dispose.call(r.value);
                        if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
                    }
                    else s |= 1;
                }
                catch (e) {
                    fail(e);
                }
            }
            if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
            if (env.hasError) throw env.error;
        }
        return next();
    };
})(typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
});
Object.defineProperty(exports, "__esModule", { value: true });
exports.Toolkit = void 0;
require("../private/dispose-polyfill");
const path = require("node:path");
const cxapi = require("@aws-cdk/cx-api");
const chalk = require("chalk");
const chokidar = require("chokidar");
const fs = require("fs-extra");
const non_interactive_io_host_1 = require("./non-interactive-io-host");
const private_1 = require("./private");
const toolkit_error_1 = require("./toolkit-error");
const bootstrap_1 = require("../actions/bootstrap");
const deploy_1 = require("../actions/deploy");
const private_2 = require("../actions/deploy/private");
const private_3 = require("../actions/diff/private");
const refactor_1 = require("../actions/refactor");
const private_4 = require("../actions/watch/private");
const aws_auth_1 = require("../api/aws-auth");
const awscli_compatible_1 = require("../api/aws-auth/awscli-compatible");
const private_5 = require("../api/aws-auth/private");
const bootstrap_2 = require("../api/bootstrap");
const cloud_assembly_1 = require("../api/cloud-assembly");
const private_6 = require("../api/cloud-assembly/private");
const source_builder_1 = require("../api/cloud-assembly/source-builder");
const deployments_1 = require("../api/deployments");
const diff_1 = require("../api/diff");
const drift_1 = require("../api/drift");
const drift_formatter_1 = require("../api/drift/drift-formatter");
const private_7 = require("../api/io/private");
const logs_monitor_1 = require("../api/logs-monitor");
const plugin_1 = require("../api/plugin");
const refactoring_1 = require("../api/refactoring");
const context_1 = require("../api/refactoring/context");
const digest_1 = require("../api/refactoring/digest");
const resource_import_1 = require("../api/resource-import");
const private_8 = require("../api/tags/private");
const toolkit_info_1 = require("../api/toolkit-info");
const work_graph_1 = require("../api/work-graph");
const payloads_1 = require("../payloads");
const util_1 = require("../util");
const concurrency_1 = require("../util/concurrency");
const promises_1 = require("../util/promises");
/**
 * The AWS CDK Programmatic Toolkit
 */
class Toolkit extends source_builder_1.CloudAssemblySourceBuilder {
    props;
    /**
     * The toolkit stack name used for bootstrapping resources.
     */
    toolkitStackName;
    /**
     * The IoHost of this Toolkit
     */
    ioHost;
    /**
     * The plugin host for loading and managing plugins
     */
    pluginHost;
    /**
     * Cache of the internal SDK Provider instance
     */
    sdkProviderCache;
    baseCredentials;
    unstableFeatures;
    constructor(props = {}) {
        super();
        this.props = props;
        this.toolkitStackName = props.toolkitStackName ?? toolkit_info_1.DEFAULT_TOOLKIT_STACK_NAME;
        this.pluginHost = props.pluginHost ?? new plugin_1.PluginHost();
        let ioHost = props.ioHost ?? new non_interactive_io_host_1.NonInteractiveIoHost();
        if (props.emojis === false) {
            ioHost = (0, private_7.withoutEmojis)(ioHost);
        }
        if (props.color === false) {
            ioHost = (0, private_7.withoutColor)(ioHost);
        }
        // After removing emojis and color, we might end up with floating whitespace at either end of the message
        // This also removes newlines that we currently emit for CLI backwards compatibility.
        this.ioHost = (0, private_7.withTrimmedWhitespace)(ioHost);
        this.baseCredentials = props.sdkConfig?.baseCredentials ?? aws_auth_1.BaseCredentials.awsCliCompatible();
        this.unstableFeatures = props.unstableFeatures ?? [];
    }
    /**
     * Access to the AWS SDK
     * @internal
     */
    async sdkProvider(action) {
        // @todo this needs to be different instance per action
        if (!this.sdkProviderCache) {
            const ioHelper = (0, private_7.asIoHelper)(this.ioHost, action);
            const clientConfig = {
                requestHandler: (0, awscli_compatible_1.sdkRequestHandler)(this.props.sdkConfig?.httpOptions?.agent),
            };
            const config = await this.baseCredentials.sdkBaseConfig(ioHelper, clientConfig);
            this.sdkProviderCache = new private_5.SdkProvider(config.credentialProvider, config.defaultRegion, {
                ioHelper,
                logger: new private_5.IoHostSdkLogger(ioHelper),
                pluginHost: this.pluginHost,
                requestHandler: clientConfig.requestHandler,
            });
        }
        return this.sdkProviderCache;
    }
    /**
     * Helper to provide the CloudAssemblySourceBuilder with required toolkit services
     * @internal
     */
    async sourceBuilderServices() {
        return {
            ioHelper: (0, private_7.asIoHelper)(this.ioHost, 'assembly'),
            sdkProvider: await this.sdkProvider('assembly'),
            pluginHost: this.pluginHost,
        };
    }
    /**
     * Bootstrap Action
     */
    async bootstrap(environments, options = {}) {
        const startTime = Date.now();
        const results = [];
        const ioHelper = (0, private_7.asIoHelper)(this.ioHost, 'bootstrap');
        const bootstrapEnvironments = await environments.getEnvironments(this.ioHost);
        const source = options.source ?? bootstrap_1.BootstrapSource.default();
        const parameters = options.parameters;
        const bootstrapper = new bootstrap_2.Bootstrapper(source, ioHelper);
        const sdkProvider = await this.sdkProvider('bootstrap');
        const limit = (0, concurrency_1.pLimit)(20);
        // eslint-disable-next-line @cdklabs/promiseall-no-unbounded-parallelism
        await Promise.all(bootstrapEnvironments.map((environment, currentIdx) => limit(async () => {
            const bootstrapSpan = await ioHelper.span(private_7.SPAN.BOOTSTRAP_SINGLE)
                .begin(`${chalk.bold(environment.name)}: bootstrapping...`, {
                total: bootstrapEnvironments.length,
                current: currentIdx + 1,
                environment,
            });
            try {
                const bootstrapResult = await bootstrapper.bootstrapEnvironment(environment, sdkProvider, {
                    ...options,
                    toolkitStackName: this.toolkitStackName,
                    source,
                    parameters: parameters?.parameters,
                    usePreviousParameters: parameters?.keepExistingParameters,
                });
                const message = bootstrapResult.noOp
                    ? ` ✅  ${environment.name} (no changes)`
                    : ` ✅  ${environment.name}`;
                await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I9900.msg(chalk.green('\n' + message), { environment }));
                const envTime = await bootstrapSpan.end();
                const result = {
                    environment,
                    status: bootstrapResult.noOp ? 'no-op' : 'success',
                    duration: envTime.asMs,
                };
                results.push(result);
            }
            catch (e) {
                await ioHelper.notify(private_7.IO.CDK_TOOLKIT_E9900.msg(`\n ❌  ${chalk.bold(environment.name)} failed: ${(0, util_1.formatErrorMessage)(e)}`, { error: e }));
                throw e;
            }
        })));
        return {
            environments: results,
            duration: Date.now() - startTime,
        };
    }
    /**
     * Synth Action
     *
     * The caller assumes ownership of the `CachedCloudAssembly` and is responsible for calling `dispose()` on
     * it after use.
     */
    async synth(cx, options = {}) {
        const ioHelper = (0, private_7.asIoHelper)(this.ioHost, 'synth');
        const selectStacks = options.stacks ?? private_6.ALL_STACKS;
        const synthSpan = await ioHelper.span(private_7.SPAN.SYNTH_ASSEMBLY).begin({ stacks: selectStacks });
        // NOTE: NOT 'await using' because we return ownership to the caller
        const assembly = await (0, private_1.assemblyFromSource)(synthSpan.asHelper, cx);
        const stacks = await assembly.selectStacksV2(selectStacks);
        const autoValidateStacks = options.validateStacks ? [assembly.selectStacksForValidation()] : [];
        await this.validateStacksMetadata(stacks.concat(...autoValidateStacks), synthSpan.asHelper);
        await synthSpan.end();
        // if we have a single stack, print it to STDOUT
        const message = `Successfully synthesized to ${chalk.blue(path.resolve(stacks.assembly.directory))}`;
        const assemblyData = {
            assemblyDirectory: stacks.assembly.directory,
            stacksCount: stacks.stackCount,
            stackIds: stacks.hierarchicalIds,
        };
        if (stacks.stackCount === 1) {
            const firstStack = stacks.firstStack;
            const template = firstStack.template;
            const obscuredTemplate = (0, util_1.obscureTemplate)(template);
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I1901.msg(message, {
                ...assemblyData,
                stack: {
                    stackName: firstStack.stackName,
                    hierarchicalId: firstStack.hierarchicalId,
                    template,
                    stringifiedJson: (0, util_1.serializeStructure)(obscuredTemplate, true),
                    stringifiedYaml: (0, util_1.serializeStructure)(obscuredTemplate, false),
                },
            }));
        }
        else {
            // not outputting template to stdout, let's explain things to the user a little bit...
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I1902.msg(chalk.green(message), assemblyData));
            await ioHelper.defaults.info(`Supply a stack id (${stacks.stackArtifacts.map((s) => chalk.green(s.hierarchicalId)).join(', ')}) to display its template.`);
        }
        return new cloud_assembly_1.CachedCloudAssembly(assembly);
    }
    /**
     * Diff Action
     */
    async diff(cx, options = {}) {
        const env_1 = { stack: [], error: void 0, hasError: false };
        try {
            const ioHelper = (0, private_7.asIoHelper)(this.ioHost, 'diff');
            const selectStacks = options.stacks ?? private_6.ALL_STACKS;
            const synthSpan = await ioHelper.span(private_7.SPAN.SYNTH_ASSEMBLY).begin({ stacks: selectStacks });
            const assembly = __addDisposableResource(env_1, await (0, private_1.assemblyFromSource)(synthSpan.asHelper, cx), true);
            const stacks = await assembly.selectStacksV2(selectStacks);
            await synthSpan.end();
            const diffSpan = await ioHelper.span(private_7.SPAN.DIFF_STACK).begin({ stacks: selectStacks });
            const deployments = await this.deploymentsForAction('diff');
            const strict = !!options.strict;
            const contextLines = options.contextLines || 3;
            let diffs = 0;
            const templateInfos = await (0, private_3.prepareDiff)(diffSpan.asHelper, stacks, deployments, await this.sdkProvider('diff'), options);
            const templateDiffs = {};
            for (const templateInfo of templateInfos) {
                const formatter = new diff_1.DiffFormatter({ templateInfo });
                const stackDiff = formatter.formatStackDiff({ strict, contextLines });
                // Security Diff
                const securityDiff = formatter.formatSecurityDiff();
                const formattedSecurityDiff = securityDiff.permissionChangeType !== payloads_1.PermissionChangeType.NONE ? stackDiff.formattedDiff : undefined;
                // We only warn about BROADENING changes
                if (securityDiff.permissionChangeType == payloads_1.PermissionChangeType.BROADENING) {
                    const warningMessage = 'This deployment will make potentially sensitive changes according to your current security approval level.\nPlease confirm you intend to make the following modifications:\n';
                    await diffSpan.defaults.warn(warningMessage);
                    await diffSpan.defaults.info(securityDiff.formattedDiff);
                }
                // Stack Diff
                diffs += stackDiff.numStacksWithChanges;
                (0, private_3.appendObject)(templateDiffs, formatter.diffs);
                await diffSpan.notify(private_7.IO.CDK_TOOLKIT_I4002.msg(stackDiff.formattedDiff, {
                    stack: templateInfo.newTemplate,
                    diffs: formatter.diffs,
                    numStacksWithChanges: stackDiff.numStacksWithChanges,
                    permissionChanges: securityDiff.permissionChangeType,
                    formattedDiff: {
                        diff: stackDiff.formattedDiff,
                        security: formattedSecurityDiff,
                    },
                }));
            }
            await diffSpan.end(`✨ Number of stacks with differences: ${diffs}`, {
                numStacksWithChanges: diffs,
                diffs: templateDiffs,
            });
            return templateDiffs;
        }
        catch (e_1) {
            env_1.error = e_1;
            env_1.hasError = true;
        }
        finally {
            const result_1 = __disposeResources(env_1);
            if (result_1)
                await result_1;
        }
    }
    /**
     * Drift Action
     */
    async drift(cx, options = {}) {
        const env_2 = { stack: [], error: void 0, hasError: false };
        try {
            const ioHelper = (0, private_7.asIoHelper)(this.ioHost, 'drift');
            const selectStacks = options.stacks ?? private_6.ALL_STACKS;
            const synthSpan = await ioHelper.span(private_7.SPAN.SYNTH_ASSEMBLY).begin({ stacks: selectStacks });
            const assembly = __addDisposableResource(env_2, await (0, private_1.assemblyFromSource)(synthSpan.asHelper, cx), true);
            const stacks = await assembly.selectStacksV2(selectStacks);
            await synthSpan.end();
            const driftSpan = await ioHelper.span(private_7.SPAN.DRIFT_APP).begin({ stacks: selectStacks });
            const allDriftResults = {};
            const unavailableDrifts = [];
            const sdkProvider = await this.sdkProvider('drift');
            for (const stack of stacks.stackArtifacts) {
                const cfn = (await sdkProvider.forEnvironment(stack.environment, plugin_1.Mode.ForReading)).sdk.cloudFormation();
                const driftResults = await (0, drift_1.detectStackDrift)(cfn, driftSpan.asHelper, stack.stackName);
                if (!driftResults.StackResourceDrifts) {
                    const stackName = stack.displayName ?? stack.stackName;
                    unavailableDrifts.push(stackName);
                    await driftSpan.notify(private_7.IO.CDK_TOOLKIT_W4591.msg(`${stackName}: No drift results available`, { stack }));
                    continue;
                }
                const formatter = new drift_formatter_1.DriftFormatter({ stack, resourceDrifts: driftResults.StackResourceDrifts });
                const driftOutput = formatter.formatStackDrift();
                const stackDrift = {
                    numResourcesWithDrift: driftOutput.numResourcesWithDrift,
                    numResourcesUnchecked: driftOutput.numResourcesUnchecked,
                    formattedDrift: {
                        unchanged: driftOutput.unchanged,
                        unchecked: driftOutput.unchecked,
                        modified: driftOutput.modified,
                        deleted: driftOutput.deleted,
                    },
                };
                allDriftResults[formatter.stackName] = stackDrift;
                // header
                await driftSpan.defaults.info(driftOutput.stackHeader);
                // print the different sections at different levels
                if (driftOutput.unchanged) {
                    await driftSpan.defaults.debug(driftOutput.unchanged);
                }
                if (driftOutput.unchecked) {
                    await driftSpan.defaults.debug(driftOutput.unchecked);
                }
                if (driftOutput.modified) {
                    await driftSpan.defaults.info(driftOutput.modified);
                }
                if (driftOutput.deleted) {
                    await driftSpan.defaults.info(driftOutput.deleted);
                }
                // main stack result
                await driftSpan.notify(private_7.IO.CDK_TOOLKIT_I4590.msg(driftOutput.summary, {
                    stack,
                    drift: stackDrift,
                }));
            }
            // print summary
            const totalDrifts = Object.values(allDriftResults).reduce((total, current) => total + (current.numResourcesWithDrift ?? 0), 0);
            const totalUnchecked = Object.values(allDriftResults).reduce((total, current) => total + (current.numResourcesUnchecked ?? 0), 0);
            await driftSpan.end(`\n✨  Number of resources with drift: ${totalDrifts}${totalUnchecked ? ` (${totalUnchecked} unchecked)` : ''}`);
            if (unavailableDrifts.length) {
                await driftSpan.defaults.warn(`\n⚠️  Failed to check drift for ${unavailableDrifts.length} stack(s). Check log for more details.`);
            }
            return allDriftResults;
        }
        catch (e_2) {
            env_2.error = e_2;
            env_2.hasError = true;
        }
        finally {
            const result_2 = __disposeResources(env_2);
            if (result_2)
                await result_2;
        }
    }
    /**
     * List Action
     *
     * List selected stacks and their dependencies
     */
    async list(cx, options = {}) {
        const env_3 = { stack: [], error: void 0, hasError: false };
        try {
            const ioHelper = (0, private_7.asIoHelper)(this.ioHost, 'list');
            const selectStacks = options.stacks ?? private_6.ALL_STACKS;
            const synthSpan = await ioHelper.span(private_7.SPAN.SYNTH_ASSEMBLY).begin({ stacks: selectStacks });
            const assembly = __addDisposableResource(env_3, await (0, private_1.assemblyFromSource)(ioHelper, cx), true);
            const stackCollection = await assembly.selectStacksV2(selectStacks);
            await synthSpan.end();
            const stacks = stackCollection.withDependencies();
            const message = stacks.map(s => s.id).join('\n');
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I2901.msg(message, { stacks }));
            return stacks;
        }
        catch (e_3) {
            env_3.error = e_3;
            env_3.hasError = true;
        }
        finally {
            const result_3 = __disposeResources(env_3);
            if (result_3)
                await result_3;
        }
    }
    /**
     * Deploy Action
     *
     * Deploys the selected stacks into an AWS account
     */
    async deploy(cx, options = {}) {
        const env_4 = { stack: [], error: void 0, hasError: false };
        try {
            const ioHelper = (0, private_7.asIoHelper)(this.ioHost, 'deploy');
            const assembly = __addDisposableResource(env_4, await (0, private_1.assemblyFromSource)(ioHelper, cx), true);
            return await this._deploy(assembly, 'deploy', options);
        }
        catch (e_4) {
            env_4.error = e_4;
            env_4.hasError = true;
        }
        finally {
            const result_4 = __disposeResources(env_4);
            if (result_4)
                await result_4;
        }
    }
    /**
     * Helper to allow deploy being called as part of the watch action.
     */
    async _deploy(assembly, action, options = {}) {
        const ioHelper = (0, private_7.asIoHelper)(this.ioHost, action);
        const selectStacks = options.stacks ?? private_6.ALL_STACKS;
        const synthSpan = await ioHelper.span(private_7.SPAN.SYNTH_ASSEMBLY).begin({ stacks: selectStacks });
        const stackCollection = await assembly.selectStacksV2(selectStacks);
        await this.validateStacksMetadata(stackCollection, ioHelper);
        const synthDuration = await synthSpan.end();
        const ret = {
            stacks: [],
        };
        if (stackCollection.stackCount === 0) {
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_E5001.msg('This app contains no stacks'));
            return ret;
        }
        const deployments = await this.deploymentsForAction('deploy');
        const migrator = new resource_import_1.ResourceMigrator({ deployments, ioHelper });
        await migrator.tryMigrateResources(stackCollection, options);
        const parameterMap = (0, private_2.buildParameterMap)(options.parameters?.parameters);
        if (options.deploymentMethod?.method === 'hotswap') {
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_W5400.msg([
                '⚠️ Hotswap deployments deliberately introduce CloudFormation drift to speed up deployments',
                '⚠️ They should only be used for development - never use them for your production Stacks!',
            ].join('\n')));
        }
        const stacks = stackCollection.stackArtifacts;
        const stackOutputs = {};
        const outputsFile = options.outputsFile;
        const buildAsset = async (assetNode) => {
            const buildAssetSpan = await ioHelper.span(private_7.SPAN.BUILD_ASSET).begin({
                asset: assetNode.asset,
            });
            await deployments.buildSingleAsset(assetNode.assetManifestArtifact, assetNode.assetManifest, assetNode.asset, {
                stack: assetNode.parentStack,
                roleArn: options.roleArn,
                stackName: assetNode.parentStack.stackName,
            });
            await buildAssetSpan.end();
        };
        const publishAsset = async (assetNode) => {
            const publishAssetSpan = await ioHelper.span(private_7.SPAN.PUBLISH_ASSET).begin({
                asset: assetNode.asset,
            });
            await deployments.publishSingleAsset(assetNode.assetManifest, assetNode.asset, {
                stack: assetNode.parentStack,
                roleArn: options.roleArn,
                stackName: assetNode.parentStack.stackName,
                forcePublish: options.forceAssetPublishing,
            });
            await publishAssetSpan.end();
        };
        const deployStack = async (stackNode) => {
            const stack = stackNode.stack;
            if (stackCollection.stackCount !== 1) {
                await ioHelper.defaults.info(chalk.bold(stack.displayName));
            }
            if (!stack.environment) {
                throw new toolkit_error_1.ToolkitError(`Stack ${stack.displayName} does not define an environment, and AWS credentials could not be obtained from standard locations or no region was configured.`);
            }
            // The generated stack has no resources
            if (Object.keys(stack.template.Resources || {}).length === 0) {
                // stack is empty and doesn't exist => do nothing
                const stackExists = await deployments.stackExists({ stack });
                if (!stackExists) {
                    return ioHelper.notify(private_7.IO.CDK_TOOLKIT_W5021.msg(`${chalk.bold(stack.displayName)}: stack has no resources, skipping deployment.`));
                }
                // stack is empty, but exists => delete
                await ioHelper.notify(private_7.IO.CDK_TOOLKIT_W5022.msg(`${chalk.bold(stack.displayName)}: stack has no resources, deleting existing stack.`));
                await this._destroy(assembly, 'deploy', {
                    stacks: { patterns: [stack.hierarchicalId], strategy: cloud_assembly_1.StackSelectionStrategy.PATTERN_MUST_MATCH_SINGLE },
                    roleArn: options.roleArn,
                });
                return;
            }
            const currentTemplate = await deployments.readCurrentTemplate(stack);
            const formatter = new diff_1.DiffFormatter({
                templateInfo: {
                    oldTemplate: currentTemplate,
                    newTemplate: stack,
                },
            });
            const securityDiff = formatter.formatSecurityDiff();
            // Send a request response with the formatted security diff as part of the message,
            // and the template diff as data
            // (IoHost decides whether to print depending on permissionChangeType)
            const deployMotivation = '"--require-approval" is enabled and stack includes security-sensitive updates.';
            const deployQuestion = `${securityDiff.formattedDiff}\n\n${deployMotivation}\nDo you wish to deploy these changes`;
            const deployConfirmed = await ioHelper.requestResponse(private_7.IO.CDK_TOOLKIT_I5060.req(deployQuestion, {
                motivation: deployMotivation,
                concurrency,
                permissionChangeType: securityDiff.permissionChangeType,
                templateDiffs: formatter.diffs,
            }));
            if (!deployConfirmed) {
                throw new toolkit_error_1.ToolkitError('Aborted by user');
            }
            // Following are the same semantics we apply with respect to Notification ARNs (dictated by the SDK)
            //
            //  - undefined  =>  cdk ignores it, as if it wasn't supported (allows external management).
            //  - []:        =>  cdk manages it, and the user wants to wipe it out.
            //  - ['arn-1']  =>  cdk manages it, and the user wants to set it to ['arn-1'].
            const notificationArns = (!!options.notificationArns || !!stack.notificationArns)
                ? (options.notificationArns ?? []).concat(stack.notificationArns ?? [])
                : undefined;
            for (const notificationArn of notificationArns ?? []) {
                if (!(0, util_1.validateSnsTopicArn)(notificationArn)) {
                    throw new toolkit_error_1.ToolkitError(`Notification arn ${notificationArn} is not a valid arn for an SNS topic`);
                }
            }
            const stackIndex = stacks.indexOf(stack) + 1;
            const deploySpan = await ioHelper.span(private_7.SPAN.DEPLOY_STACK)
                .begin(`${chalk.bold(stack.displayName)}: deploying... [${stackIndex}/${stackCollection.stackCount}]`, {
                total: stackCollection.stackCount,
                current: stackIndex,
                stack,
            });
            let tags = options.tags;
            if (!tags || tags.length === 0) {
                tags = (0, private_8.tagsForStack)(stack);
            }
            let deployDuration;
            try {
                let deployResult;
                let rollback = options.rollback;
                let iteration = 0;
                while (!deployResult) {
                    if (++iteration > 2) {
                        throw new toolkit_error_1.ToolkitError('This loop should have stabilized in 2 iterations, but didn\'t. If you are seeing this error, please report it at https://github.com/aws/aws-cdk/issues/new/choose');
                    }
                    const r = await deployments.deployStack({
                        stack,
                        deployName: stack.stackName,
                        roleArn: options.roleArn,
                        toolkitStackName: this.toolkitStackName,
                        reuseAssets: options.reuseAssets,
                        notificationArns,
                        tags,
                        deploymentMethod: options.deploymentMethod,
                        forceDeployment: options.forceDeployment,
                        parameters: Object.assign({}, parameterMap['*'], parameterMap[stack.stackName]),
                        usePreviousParameters: options.parameters?.keepExistingParameters,
                        rollback,
                        extraUserAgent: options.extraUserAgent,
                        assetParallelism: options.assetParallelism,
                    });
                    switch (r.type) {
                        case 'did-deploy-stack':
                            deployResult = r;
                            break;
                        case 'failpaused-need-rollback-first': {
                            const motivation = r.reason === 'replacement'
                                ? `Stack is in a paused fail state (${r.status}) and change includes a replacement which cannot be deployed with "--no-rollback"`
                                : `Stack is in a paused fail state (${r.status}) and command line arguments do not include "--no-rollback"`;
                            const question = `${motivation}. Perform a regular deployment`;
                            const confirmed = await ioHelper.requestResponse(private_7.IO.CDK_TOOLKIT_I5050.req(question, {
                                motivation,
                                concurrency,
                            }));
                            if (!confirmed) {
                                throw new toolkit_error_1.ToolkitError('Aborted by user');
                            }
                            // Perform a rollback
                            await this._rollback(assembly, action, {
                                stacks: {
                                    patterns: [stack.hierarchicalId],
                                    strategy: cloud_assembly_1.StackSelectionStrategy.PATTERN_MUST_MATCH_SINGLE,
                                },
                                orphanFailedResources: options.orphanFailedResourcesDuringRollback,
                            });
                            // Go around through the 'while' loop again but switch rollback to true.
                            rollback = true;
                            break;
                        }
                        case 'replacement-requires-rollback': {
                            const motivation = 'Change includes a replacement which cannot be deployed with "--no-rollback"';
                            const question = `${motivation}. Perform a regular deployment`;
                            const confirmed = await ioHelper.requestResponse(private_7.IO.CDK_TOOLKIT_I5050.req(question, {
                                motivation,
                                concurrency,
                            }));
                            if (!confirmed) {
                                throw new toolkit_error_1.ToolkitError('Aborted by user');
                            }
                            // Go around through the 'while' loop again but switch rollback to true.
                            rollback = true;
                            break;
                        }
                        default:
                            throw new toolkit_error_1.ToolkitError(`Unexpected result type from deployStack: ${JSON.stringify(r)}. If you are seeing this error, please report it at https://github.com/aws/aws-cdk/issues/new/choose`);
                    }
                }
                const message = deployResult.noOp
                    ? ` ✅  ${stack.displayName} (no changes)`
                    : ` ✅  ${stack.displayName}`;
                await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I5900.msg(chalk.green('\n' + message), deployResult));
                deployDuration = await deploySpan.timing(private_7.IO.CDK_TOOLKIT_I5000);
                if (Object.keys(deployResult.outputs).length > 0) {
                    const buffer = ['Outputs:'];
                    stackOutputs[stack.stackName] = deployResult.outputs;
                    for (const name of Object.keys(deployResult.outputs).sort()) {
                        const value = deployResult.outputs[name];
                        buffer.push(`${chalk.cyan(stack.id)}.${chalk.cyan(name)} = ${chalk.underline(chalk.cyan(value))}`);
                    }
                    await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I5901.msg(buffer.join('\n')));
                }
                await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I5901.msg(`Stack ARN:\n${deployResult.stackArn}`));
                ret.stacks.push({
                    stackName: stack.stackName,
                    environment: {
                        account: stack.environment.account,
                        region: stack.environment.region,
                    },
                    stackArn: deployResult.stackArn,
                    outputs: deployResult.outputs,
                    hierarchicalId: stack.hierarchicalId,
                });
            }
            catch (e) {
                // It has to be exactly this string because an integration test tests for
                // "bold(stackname) failed: ResourceNotReady: <error>"
                throw new toolkit_error_1.ToolkitError([`❌  ${chalk.bold(stack.stackName)} failed:`, ...(e.name ? [`${e.name}:`] : []), e.message].join(' '));
            }
            finally {
                if (options.traceLogs) {
                    // deploy calls that originate from watch will come with their own cloudWatchLogMonitor
                    const cloudWatchLogMonitor = options.cloudWatchLogMonitor ?? new logs_monitor_1.CloudWatchLogEventMonitor({ ioHelper });
                    const foundLogGroupsResult = await (0, logs_monitor_1.findCloudWatchLogGroups)(await this.sdkProvider('deploy'), ioHelper, stack);
                    cloudWatchLogMonitor.addLogGroups(foundLogGroupsResult.env, foundLogGroupsResult.sdk, foundLogGroupsResult.logGroupNames);
                    await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I5031.msg(`The following log groups are added: ${foundLogGroupsResult.logGroupNames}`));
                }
                // If an outputs file has been specified, create the file path and write stack outputs to it once.
                // Outputs are written after all stacks have been deployed. If a stack deployment fails,
                // all of the outputs from successfully deployed stacks before the failure will still be written.
                if (outputsFile) {
                    fs.ensureFileSync(outputsFile);
                    await fs.writeJson(outputsFile, stackOutputs, {
                        spaces: 2,
                        encoding: 'utf8',
                    });
                }
            }
            const duration = synthDuration.asMs + (deployDuration?.asMs ?? 0);
            await deploySpan.end(`\n✨  Total time: ${(0, util_1.formatTime)(duration)}s\n`, { duration });
        };
        const assetBuildTime = options.assetBuildTime ?? deploy_1.AssetBuildTime.ALL_BEFORE_DEPLOY;
        const prebuildAssets = assetBuildTime === deploy_1.AssetBuildTime.ALL_BEFORE_DEPLOY;
        const concurrency = options.concurrency || 1;
        const stacksAndTheirAssetManifests = stacks.flatMap((stack) => [
            stack,
            ...stack.dependencies.filter(x => cxapi.AssetManifestArtifact.isAssetManifestArtifact(x)),
        ]);
        const workGraph = new work_graph_1.WorkGraphBuilder(ioHelper, prebuildAssets).build(stacksAndTheirAssetManifests);
        // Unless we are running with '--force', skip already published assets
        if (!options.forceAssetPublishing) {
            await (0, private_2.removePublishedAssetsFromWorkGraph)(workGraph, deployments, options);
        }
        const graphConcurrency = {
            'stack': concurrency,
            'asset-build': 1, // This will be CPU-bound/memory bound, mostly matters for Docker builds
            'asset-publish': (options.assetParallelism ?? true) ? 8 : 1, // This will be I/O-bound, 8 in parallel seems reasonable
        };
        await workGraph.doParallel(graphConcurrency, {
            deployStack,
            buildAsset,
            publishAsset,
        });
        return ret;
    }
    /**
     * Watch Action
     *
     * Continuously observe project files and deploy the selected stacks
     * automatically when changes are detected. Defaults to hotswap deployments.
     *
     * This function returns immediately, starting a watcher in the background.
     */
    async watch(cx, options = {}) {
        const env_5 = { stack: [], error: void 0, hasError: false };
        try {
            const ioHelper = (0, private_7.asIoHelper)(this.ioHost, 'watch');
            const assembly = __addDisposableResource(env_5, await (0, private_1.assemblyFromSource)(ioHelper, cx, false), true);
            const rootDir = options.watchDir ?? process.cwd();
            // For the "include" setting, the behavior is:
            // 1. "watch" setting without an "include" key? We default to observing "**".
            // 2. "watch" setting with an empty "include" key? We default to observing "**".
            // 3. Non-empty "include" key? Just use the "include" key.
            const watchIncludes = options.include ?? [];
            if (watchIncludes.length <= 0) {
                watchIncludes.push('**');
            }
            // For the "exclude" setting, the behavior is to add some default excludes in addition to
            // patterns specified by the user sensible default patterns:
            const watchExcludes = options.exclude ?? [...private_4.WATCH_EXCLUDE_DEFAULTS];
            // 1. The CDK output directory, if it is under the rootDir
            const relativeOutDir = path.relative(rootDir, assembly.directory);
            if (Boolean(relativeOutDir && !relativeOutDir.startsWith('..' + path.sep) && !path.isAbsolute(relativeOutDir))) {
                watchExcludes.push(`${relativeOutDir}/**`);
            }
            // 2. Any file whose name starts with a dot.
            watchExcludes.push('.*', '**/.*');
            // 3. Any directory's content whose name starts with a dot.
            watchExcludes.push('**/.*/**');
            // 4. Any node_modules and its content (even if it's not a JS/TS project, you might be using a local aws-cli package)
            watchExcludes.push('**/node_modules/**');
            // Print some debug information on computed settings
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I5310.msg([
                `root directory used for 'watch' is: ${rootDir}`,
                `'include' patterns for 'watch': ${JSON.stringify(watchIncludes)}`,
                `'exclude' patterns for 'watch': ${JSON.stringify(watchExcludes)}`,
            ].join('\n'), {
                watchDir: rootDir,
                includes: watchIncludes,
                excludes: watchExcludes,
            }));
            let latch = 'pre-ready';
            const cloudWatchLogMonitor = options.traceLogs ? new logs_monitor_1.CloudWatchLogEventMonitor({ ioHelper }) : undefined;
            const deployAndWatch = async () => {
                latch = 'deploying';
                await cloudWatchLogMonitor?.deactivate();
                await this.invokeDeployFromWatch(assembly, options, cloudWatchLogMonitor);
                // If latch is still 'deploying' after the 'await', that's fine,
                // but if it's 'queued', that means we need to deploy again
                while (latch === 'queued') {
                    // TypeScript doesn't realize latch can change between 'awaits',
                    // and thinks the above 'while' condition is always 'false' without the cast
                    latch = 'deploying';
                    await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I5315.msg("Detected file changes during deployment. Invoking 'cdk deploy' again"));
                    await this.invokeDeployFromWatch(assembly, options, cloudWatchLogMonitor);
                }
                latch = 'open';
                await cloudWatchLogMonitor?.activate();
            };
            const watcher = chokidar
                .watch(watchIncludes, {
                ignored: watchExcludes,
                cwd: rootDir,
            })
                .on('ready', async () => {
                latch = 'open';
                await ioHelper.defaults.debug("'watch' received the 'ready' event. From now on, all file changes will trigger a deployment");
                await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I5314.msg("Triggering initial 'cdk deploy'"));
                await deployAndWatch();
            })
                .on('all', async (event, filePath) => {
                const watchEvent = {
                    event,
                    path: filePath,
                };
                if (latch === 'pre-ready') {
                    await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I5311.msg(`'watch' is observing ${event === 'addDir' ? 'directory' : 'the file'} '${filePath}' for changes`, watchEvent));
                }
                else if (latch === 'open') {
                    await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I5312.msg(`Detected change to '${filePath}' (type: ${event}). Triggering 'cdk deploy'`, watchEvent));
                    await deployAndWatch();
                }
                else {
                    // this means latch is either 'deploying' or 'queued'
                    latch = 'queued';
                    await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I5313.msg(`Detected change to '${filePath}' (type: ${event}) while 'cdk deploy' is still running. Will queue for another deployment after this one finishes'`, watchEvent));
                }
            });
            const stoppedPromise = (0, promises_1.promiseWithResolvers)();
            return {
                async dispose() {
                    // stop the logs monitor, if it exists
                    await cloudWatchLogMonitor?.deactivate();
                    // close the watcher itself
                    await watcher.close();
                    // Prevents Node from staying alive. There is no 'end' event that the watcher emits
                    // that we can know it's definitely done, so best we can do is tell it to stop watching,
                    // stop keeping Node alive, and then pretend that's everything we needed to do.
                    watcher.unref();
                    stoppedPromise.resolve();
                    return stoppedPromise.promise;
                },
                async waitForEnd() {
                    return stoppedPromise.promise;
                },
                async [Symbol.asyncDispose]() {
                    return this.dispose();
                },
            };
        }
        catch (e_5) {
            env_5.error = e_5;
            env_5.hasError = true;
        }
        finally {
            const result_5 = __disposeResources(env_5);
            if (result_5)
                await result_5;
        }
    }
    /**
     * Rollback Action
     *
     * Rolls back the selected stacks.
     */
    async rollback(cx, options = {}) {
        const env_6 = { stack: [], error: void 0, hasError: false };
        try {
            const ioHelper = (0, private_7.asIoHelper)(this.ioHost, 'rollback');
            const assembly = __addDisposableResource(env_6, await (0, private_1.assemblyFromSource)(ioHelper, cx), true);
            return await this._rollback(assembly, 'rollback', options);
        }
        catch (e_6) {
            env_6.error = e_6;
            env_6.hasError = true;
        }
        finally {
            const result_6 = __disposeResources(env_6);
            if (result_6)
                await result_6;
        }
    }
    /**
     * Helper to allow rollback being called as part of the deploy or watch action.
     */
    async _rollback(assembly, action, options) {
        const selectStacks = options.stacks ?? private_6.ALL_STACKS;
        const ioHelper = (0, private_7.asIoHelper)(this.ioHost, action);
        const synthSpan = await ioHelper.span(private_7.SPAN.SYNTH_ASSEMBLY).begin({ stacks: selectStacks });
        const stacks = await assembly.selectStacksV2(selectStacks);
        await this.validateStacksMetadata(stacks, ioHelper);
        await synthSpan.end();
        const ret = {
            stacks: [],
        };
        if (stacks.stackCount === 0) {
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_E6001.msg('No stacks selected'));
            return ret;
        }
        let anyRollbackable = false;
        for (const [index, stack] of stacks.stackArtifacts.entries()) {
            const rollbackSpan = await ioHelper.span(private_7.SPAN.ROLLBACK_STACK).begin(`Rolling back ${chalk.bold(stack.displayName)}`, {
                total: stacks.stackCount,
                current: index + 1,
                stack,
            });
            const deployments = await this.deploymentsForAction('rollback');
            try {
                const stackResult = await deployments.rollbackStack({
                    stack,
                    roleArn: options.roleArn,
                    toolkitStackName: this.toolkitStackName,
                    orphanFailedResources: options.orphanFailedResources,
                    validateBootstrapStackVersion: options.validateBootstrapStackVersion,
                    orphanLogicalIds: options.orphanLogicalIds,
                });
                if (!stackResult.notInRollbackableState) {
                    anyRollbackable = true;
                }
                await rollbackSpan.end();
                ret.stacks.push({
                    environment: {
                        account: stack.environment.account,
                        region: stack.environment.region,
                    },
                    stackName: stack.stackName,
                    stackArn: stackResult.stackArn,
                    result: stackResult.notInRollbackableState ? 'already-stable' : 'rolled-back',
                });
            }
            catch (e) {
                await ioHelper.notify(private_7.IO.CDK_TOOLKIT_E6900.msg(`\n ❌  ${chalk.bold(stack.displayName)} failed: ${(0, util_1.formatErrorMessage)(e)}`, { error: e }));
                throw toolkit_error_1.ToolkitError.withCause('Rollback failed (use --force to orphan failing resources)', e);
            }
        }
        if (!anyRollbackable) {
            throw new toolkit_error_1.ToolkitError('No stacks were in a state that could be rolled back');
        }
        return ret;
    }
    /**
     * Refactor Action. Moves resources from one location (stack + logical ID) to another.
     */
    async refactor(cx, options = {}) {
        this.requireUnstableFeature('refactor');
        const ioHelper = (0, private_7.asIoHelper)(this.ioHost, 'refactor');
        const assembly = await (0, private_1.assemblyFromSource)(ioHelper, cx);
        return this._refactor(assembly, ioHelper, options);
    }
    async _refactor(assembly, ioHelper, options = {}) {
        if (!options.dryRun) {
            throw new toolkit_error_1.ToolkitError('Refactor is not available yet. Too see the proposed changes, use the --dry-run flag.');
        }
        const sdkProvider = await this.sdkProvider('refactor');
        const stacks = await assembly.selectStacksV2(private_6.ALL_STACKS);
        const mappingSource = options.mappingSource ?? refactor_1.MappingSource.auto();
        const exclude = mappingSource.exclude.union(new refactoring_1.ManifestExcludeList(assembly.cloudAssembly.manifest));
        const filteredStacks = await assembly.selectStacksV2(options.stacks ?? private_6.ALL_STACKS);
        const refactoringContexts = [];
        for (let { environment, localStacks, deployedStacks } of await groupStacksByEnvironment()) {
            refactoringContexts.push(new context_1.RefactoringContext({
                environment,
                deployedStacks,
                localStacks,
                filteredStacks: filteredStacks.stackArtifacts,
                mappings: await getUserProvidedMappings(environment),
            }));
        }
        const nonAmbiguousContexts = refactoringContexts.filter(c => !c.isAmbiguous);
        if (nonAmbiguousContexts.length > 0) {
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I8900.msg((0, refactoring_1.formatMappingsHeader)(), {}));
        }
        for (const context of nonAmbiguousContexts) {
            const mappings = context.mappings.filter((m) => !exclude.isExcluded(m.destination));
            const typedMappings = mappings.map(m => m.toTypedMapping());
            const environment = context.environment;
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I8900.msg((0, refactoring_1.formatTypedMappings)(environment, typedMappings), {
                typedMappings,
            }));
        }
        const ambiguousContexts = refactoringContexts.filter(c => c.isAmbiguous);
        if (ambiguousContexts.length > 0) {
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I8900.msg((0, refactoring_1.formatAmbiguitySectionHeader)(), {}));
        }
        for (const context of ambiguousContexts) {
            const paths = context.ambiguousPaths;
            const environment = context.environment;
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I8900.msg((0, refactoring_1.formatAmbiguousMappings)(environment, paths), {
                ambiguousPaths: paths,
            }));
        }
        async function groupStacksByEnvironment() {
            const stackGroups = new Map();
            const environments = new Map();
            for (const stack of stacks.stackArtifacts) {
                const environment = await sdkProvider.resolveEnvironment(stack.environment);
                const key = (0, digest_1.hashObject)(environment);
                environments.set(key, environment);
                if (stackGroups.has(key)) {
                    stackGroups.get(key)[1].push(stack);
                }
                else {
                    // The first time we see an environment, we need to fetch all stacks deployed to it.
                    const before = await (0, refactoring_1.getDeployedStacks)(sdkProvider, environment);
                    stackGroups.set(key, [before, [stack]]);
                }
            }
            const result = [];
            for (const [hash, [deployedStacks, localStacks]] of stackGroups) {
                result.push({
                    environment: environments.get(hash),
                    localStacks,
                    deployedStacks,
                });
            }
            return result;
        }
        async function getUserProvidedMappings(environment) {
            return mappingSource.source == 'explicit'
                ? (0, refactoring_1.usePrescribedMappings)(mappingSource.groups.filter(matchesEnvironment), sdkProvider)
                : undefined;
            function matchesEnvironment(g) {
                return g.account === environment.account && g.region === environment.region;
            }
        }
    }
    /**
     * Destroy Action
     *
     * Destroys the selected Stacks.
     */
    async destroy(cx, options = {}) {
        const env_7 = { stack: [], error: void 0, hasError: false };
        try {
            const ioHelper = (0, private_7.asIoHelper)(this.ioHost, 'destroy');
            const assembly = __addDisposableResource(env_7, await (0, private_1.assemblyFromSource)(ioHelper, cx), true);
            return await this._destroy(assembly, 'destroy', options);
        }
        catch (e_7) {
            env_7.error = e_7;
            env_7.hasError = true;
        }
        finally {
            const result_7 = __disposeResources(env_7);
            if (result_7)
                await result_7;
        }
    }
    /**
     * Helper to allow destroy being called as part of the deploy action.
     */
    async _destroy(assembly, action, options) {
        const selectStacks = options.stacks ?? private_6.ALL_STACKS;
        const ioHelper = (0, private_7.asIoHelper)(this.ioHost, action);
        const synthSpan = await ioHelper.span(private_7.SPAN.SYNTH_ASSEMBLY).begin({ stacks: selectStacks });
        // The stacks will have been ordered for deployment, so reverse them for deletion.
        const stacks = (await assembly.selectStacksV2(selectStacks)).reversed();
        await synthSpan.end();
        const ret = {
            stacks: [],
        };
        const motivation = 'Destroying stacks is an irreversible action';
        const question = `Are you sure you want to delete: ${chalk.red(stacks.hierarchicalIds.join(', '))}`;
        const confirmed = await ioHelper.requestResponse(private_7.IO.CDK_TOOLKIT_I7010.req(question, { motivation }));
        if (!confirmed) {
            await ioHelper.notify(private_7.IO.CDK_TOOLKIT_E7010.msg('Aborted by user'));
            return ret;
        }
        const destroySpan = await ioHelper.span(private_7.SPAN.DESTROY_ACTION).begin({
            stacks: stacks.stackArtifacts,
        });
        try {
            for (const [index, stack] of stacks.stackArtifacts.entries()) {
                try {
                    const singleDestroySpan = await ioHelper.span(private_7.SPAN.DESTROY_STACK)
                        .begin(chalk.green(`${chalk.blue(stack.displayName)}: destroying... [${index + 1}/${stacks.stackCount}]`), {
                        total: stacks.stackCount,
                        current: index + 1,
                        stack,
                    });
                    const deployments = await this.deploymentsForAction(action);
                    const result = await deployments.destroyStack({
                        stack,
                        deployName: stack.stackName,
                        roleArn: options.roleArn,
                    });
                    ret.stacks.push({
                        environment: {
                            account: stack.environment.account,
                            region: stack.environment.region,
                        },
                        stackName: stack.stackName,
                        stackArn: result.stackArn,
                        stackExisted: result.stackArn !== undefined,
                    });
                    await ioHelper.notify(private_7.IO.CDK_TOOLKIT_I7900.msg(chalk.green(`\n ✅  ${chalk.blue(stack.displayName)}: ${action}ed`), stack));
                    await singleDestroySpan.end();
                }
                catch (e) {
                    await ioHelper.notify(private_7.IO.CDK_TOOLKIT_E7900.msg(`\n ❌  ${chalk.blue(stack.displayName)}: ${action} failed ${e}`, { error: e }));
                    throw e;
                }
            }
            return ret;
        }
        finally {
            await destroySpan.end();
        }
    }
    /**
     * Validate the stacks for errors and warnings according to the CLI's current settings
     */
    async validateStacksMetadata(stacks, ioHost) {
        const builder = (level) => {
            switch (level) {
                case 'error':
                    return private_7.IO.CDK_ASSEMBLY_E9999;
                case 'warn':
                    return private_7.IO.CDK_ASSEMBLY_W9999;
                default:
                    return private_7.IO.CDK_ASSEMBLY_I9999;
            }
        };
        await stacks.validateMetadata(this.props.assemblyFailureAt, async (level, msg) => ioHost.notify(builder(level).msg(`[${level} at ${msg.id}] ${msg.entry.data}`, msg)));
    }
    /**
     * Create a deployments class
     */
    async deploymentsForAction(action) {
        return new deployments_1.Deployments({
            sdkProvider: await this.sdkProvider(action),
            toolkitStackName: this.toolkitStackName,
            ioHelper: (0, private_7.asIoHelper)(this.ioHost, action),
        });
    }
    async invokeDeployFromWatch(assembly, options, cloudWatchLogMonitor) {
        // watch defaults to hotswap deployment
        const deploymentMethod = options.deploymentMethod ?? { method: 'hotswap' };
        const deployOptions = {
            ...options,
            cloudWatchLogMonitor,
            deploymentMethod,
            extraUserAgent: `cdk-watch/hotswap-${deploymentMethod.method === 'hotswap' ? 'on' : 'off'}`,
        };
        try {
            await this._deploy(assembly, 'watch', deployOptions);
        }
        catch {
            // just continue - deploy will show the error
        }
    }
    requireUnstableFeature(requestedFeature) {
        if (!this.unstableFeatures.includes(requestedFeature)) {
            throw new toolkit_error_1.ToolkitError(`Unstable feature '${requestedFeature}' is not enabled. Please enable it under 'unstableFeatures'`);
        }
    }
}
exports.Toolkit = Toolkit;
//# sourceMappingURL=data:application/json;base64,