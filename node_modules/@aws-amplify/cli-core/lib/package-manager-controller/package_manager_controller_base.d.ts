import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import * as _path from 'path';
import { Dependency, ExecaChildProcess, ExecaOptions, type PackageManagerController } from '@aws-amplify/plugin-types';
import { LockFileReader } from './lock-file-reader/types.js';
/**
 * PackageManagerController is an abstraction around package manager commands that are needed to initialize a project and install dependencies
 */
export declare abstract class PackageManagerControllerBase implements PackageManagerController {
    protected readonly cwd: string;
    protected readonly executable: string;
    protected readonly initDefault: string[];
    protected readonly installCommand: string;
    protected readonly lockFileReader: LockFileReader;
    protected readonly fsp: typeof _fsp;
    protected readonly path: _path.PlatformPath;
    protected readonly execa: import("execa").ExecaMethod<{}>;
    protected readonly executeWithDebugLogger: (cwd: string, executable: string, args?: Readonly<string[]>, execa?: import("execa").ExecaMethod<{}>, options?: ExecaOptions) => ReturnType<import("execa").ExecaMethod>;
    protected readonly existsSync: typeof _existsSync;
    protected readonly binaryRunner: string;
    /**
     * constructor - sets the project root
     */
    constructor(cwd: string, executable: string, initDefault: string[], installCommand: string, lockFileReader: LockFileReader, fsp?: typeof _fsp, path?: _path.PlatformPath, execa?: import("execa").ExecaMethod<{}>, executeWithDebugLogger?: (cwd: string, executable: string, args?: Readonly<string[]>, execa?: import("execa").ExecaMethod<{}>, options?: ExecaOptions) => ReturnType<import("execa").ExecaMethod>, existsSync?: typeof _existsSync);
    /**
     * installDependencies - installs dependencies in the project root
     */
    installDependencies(packageNames: string[], type: 'dev' | 'prod'): Promise<void>;
    /**
     * initializeProject - initializes a project in the project root by checking the package.json file
     */
    initializeProject: () => Promise<void>;
    /**
     * initializeTsConfig - initializes a tsconfig.json file in the project root
     *
     * When changing this method, double check if a corresponding change is needed in the integration test setup in `setup_dir_as_esm_module.ts`.
     */
    initializeTsConfig(targetDir: string): Promise<void>;
    /**
     * runWithPackageManager - Factory function that runs a command with the specified package manager's binary runner
     */
    runWithPackageManager(args: string[] | undefined, dir: string, options?: ExecaOptions): ExecaChildProcess;
    getCommand: (args: string[]) => string;
    /**
     * allowsSignalPropagation - Determines if the package manager allows the process
     * signals such as SIGINT to be propagated to the underlying node process.
     * @deprecated
     */
    allowsSignalPropagation: () => boolean;
    /**
     * tryGetDependencies - Tries to retrieve dependency versions from the lock file in the project root
     */
    tryGetDependencies: () => Promise<Array<Dependency> | undefined>;
    /**
     * Check if a package.json file exists in projectRoot
     */
    private packageJsonExists;
}
//# sourceMappingURL=package_manager_controller_base.d.ts.map