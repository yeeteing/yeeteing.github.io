"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountIdFetcher = void 0;
const client_sts_1 = require("@aws-sdk/client-sts");
const uuid_1 = require("uuid");
const NO_ACCOUNT_ID = 'NO_ACCOUNT_ID';
// eslint-disable-next-line spellcheck/spell-checker
const AMPLIFY_CLI_UUID_NAMESPACE = '283cae3e-c611-4659-9044-6796e5d696ec'; // A random v4 UUID
/**
 * Retrieves the account ID of the user
 */
class AccountIdFetcher {
    stsClient;
    accountId;
    /**
     * constructor for AccountIdFetcher
     */
    constructor(stsClient = new client_sts_1.STSClient()) {
        this.stsClient = stsClient;
    }
    fetch = async () => {
        if (this.accountId) {
            return this.accountId;
        }
        try {
            const stsResponse = await this.stsClient.send(new client_sts_1.GetCallerIdentityCommand({}));
            if (stsResponse && stsResponse.Account) {
                const accountIdBucket = stsResponse.Account.slice(0, -2);
                this.accountId = (0, uuid_1.v5)(accountIdBucket, AMPLIFY_CLI_UUID_NAMESPACE);
                return this.accountId;
            }
            // We failed to get the account Id. Most likely the user doesn't have credentials
            return NO_ACCOUNT_ID;
        }
        catch {
            // We failed to get the account Id. Most likely the user doesn't have credentials
            return NO_ACCOUNT_ID;
        }
    };
}
exports.AccountIdFetcher = AccountIdFetcher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF9pZF9mZXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzYWdlLWRhdGEvYWNjb3VudF9pZF9mZXRjaGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9EQUEwRTtBQUMxRSwrQkFBb0M7QUFFcEMsTUFBTSxhQUFhLEdBQUcsZUFBZSxDQUFDO0FBRXRDLG9EQUFvRDtBQUNwRCxNQUFNLDBCQUEwQixHQUFHLHNDQUFzQyxDQUFDLENBQUMsbUJBQW1CO0FBRTlGOztHQUVHO0FBQ0gsTUFBYSxnQkFBZ0I7SUFLRTtJQUpyQixTQUFTLENBQXFCO0lBQ3RDOztPQUVHO0lBQ0gsWUFBNkIsWUFBWSxJQUFJLHNCQUFTLEVBQUU7UUFBM0IsY0FBUyxHQUFULFNBQVMsQ0FBa0I7SUFBRyxDQUFDO0lBQzVELEtBQUssR0FBRyxLQUFLLElBQUksRUFBRTtRQUNqQixJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNuQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDeEIsQ0FBQztRQUNELElBQUksQ0FBQztZQUNILE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQzNDLElBQUkscUNBQXdCLENBQUMsRUFBRSxDQUFDLENBQ2pDLENBQUM7WUFDRixJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ3ZDLE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUEsU0FBTSxFQUFDLGVBQWUsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO2dCQUNyRSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDeEIsQ0FBQztZQUNELGlGQUFpRjtZQUNqRixPQUFPLGFBQWEsQ0FBQztRQUN2QixDQUFDO1FBQUMsTUFBTSxDQUFDO1lBQ1AsaUZBQWlGO1lBQ2pGLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLENBQUM7SUFDSCxDQUFDLENBQUM7Q0FDSDtBQTFCRCw0Q0EwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZXRDYWxsZXJJZGVudGl0eUNvbW1hbmQsIFNUU0NsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zdHMnO1xuaW1wb3J0IHsgdjUgYXMgdXVpZFY1IH0gZnJvbSAndXVpZCc7XG5cbmNvbnN0IE5PX0FDQ09VTlRfSUQgPSAnTk9fQUNDT1VOVF9JRCc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBzcGVsbGNoZWNrL3NwZWxsLWNoZWNrZXJcbmNvbnN0IEFNUExJRllfQ0xJX1VVSURfTkFNRVNQQUNFID0gJzI4M2NhZTNlLWM2MTEtNDY1OS05MDQ0LTY3OTZlNWQ2OTZlYyc7IC8vIEEgcmFuZG9tIHY0IFVVSURcblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGFjY291bnQgSUQgb2YgdGhlIHVzZXJcbiAqL1xuZXhwb3J0IGNsYXNzIEFjY291bnRJZEZldGNoZXIge1xuICBwcml2YXRlIGFjY291bnRJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogY29uc3RydWN0b3IgZm9yIEFjY291bnRJZEZldGNoZXJcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc3RzQ2xpZW50ID0gbmV3IFNUU0NsaWVudCgpKSB7fVxuICBmZXRjaCA9IGFzeW5jICgpID0+IHtcbiAgICBpZiAodGhpcy5hY2NvdW50SWQpIHtcbiAgICAgIHJldHVybiB0aGlzLmFjY291bnRJZDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0c1Jlc3BvbnNlID0gYXdhaXQgdGhpcy5zdHNDbGllbnQuc2VuZChcbiAgICAgICAgbmV3IEdldENhbGxlcklkZW50aXR5Q29tbWFuZCh7fSksXG4gICAgICApO1xuICAgICAgaWYgKHN0c1Jlc3BvbnNlICYmIHN0c1Jlc3BvbnNlLkFjY291bnQpIHtcbiAgICAgICAgY29uc3QgYWNjb3VudElkQnVja2V0ID0gc3RzUmVzcG9uc2UuQWNjb3VudC5zbGljZSgwLCAtMik7XG4gICAgICAgIHRoaXMuYWNjb3VudElkID0gdXVpZFY1KGFjY291bnRJZEJ1Y2tldCwgQU1QTElGWV9DTElfVVVJRF9OQU1FU1BBQ0UpO1xuICAgICAgICByZXR1cm4gdGhpcy5hY2NvdW50SWQ7XG4gICAgICB9XG4gICAgICAvLyBXZSBmYWlsZWQgdG8gZ2V0IHRoZSBhY2NvdW50IElkLiBNb3N0IGxpa2VseSB0aGUgdXNlciBkb2Vzbid0IGhhdmUgY3JlZGVudGlhbHNcbiAgICAgIHJldHVybiBOT19BQ0NPVU5UX0lEO1xuICAgIH0gY2F0Y2gge1xuICAgICAgLy8gV2UgZmFpbGVkIHRvIGdldCB0aGUgYWNjb3VudCBJZC4gTW9zdCBsaWtlbHkgdGhlIHVzZXIgZG9lc24ndCBoYXZlIGNyZWRlbnRpYWxzXG4gICAgICByZXR1cm4gTk9fQUNDT1VOVF9JRDtcbiAgICB9XG4gIH07XG59XG4iXX0=