"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultTelemetryPayloadExporter = void 0;
const core_1 = require("@opentelemetry/core");
const https_1 = __importDefault(require("https"));
const is_ci_1 = __importDefault(require("is-ci"));
const os_1 = __importDefault(require("os"));
const uuid_1 = require("uuid");
const get_telemetry_url_1 = require("./get_telemetry_url");
const telemetry_payload_1 = require("./telemetry_payload");
const constants_1 = require("./constants");
const get_local_project_id_1 = require("./get_local_project_id");
const account_id_fetcher_1 = require("./account_id_fetcher");
const region_fetcher_1 = require("./region_fetcher");
const translate_error_to_telemetry_error_details_1 = require("./translate_error_to_telemetry_error_details");
const errors_1 = require("../errors");
/**
 * Maps data from span to payload and sends the payload
 */
class DefaultTelemetryPayloadExporter {
    dependencies;
    payloadVersion;
    sessionId;
    url;
    accountIdFetcher;
    regionFetcher;
    isShutdown = false;
    spanQueue = [];
    dependenciesToReport;
    /**
     * Constructor for DefaultTelemetryPayloadExporter
     */
    constructor(dependencies, payloadVersion = constants_1.latestPayloadVersion, sessionId = (0, uuid_1.v4)(), url = (0, get_telemetry_url_1.getUrl)(), accountIdFetcher = new account_id_fetcher_1.AccountIdFetcher(), regionFetcher = new region_fetcher_1.RegionFetcher()) {
        this.dependencies = dependencies;
        this.payloadVersion = payloadVersion;
        this.sessionId = sessionId;
        this.url = url;
        this.accountIdFetcher = accountIdFetcher;
        this.regionFetcher = regionFetcher;
        const targetDependencies = [
            '@aws-amplify/ai-constructs',
            '@aws-amplify/auth-construct',
            '@aws-amplify/backend',
            '@aws-amplify/backend-ai',
            '@aws-amplify/backend-auth',
            '@aws-amplify/backend-cli',
            '@aws-amplify/backend-data',
            '@aws-amplify/backend-deployer',
            '@aws-amplify/backend-function',
            '@aws-amplify/backend-output-schemas',
            '@aws-amplify/backend-output-storage',
            '@aws-amplify/backend-secret',
            '@aws-amplify/backend-storage',
            '@aws-amplify/cli-core',
            '@aws-amplify/client-config',
            '@aws-amplify/deployed-backend-client',
            '@aws-amplify/form-generator',
            '@aws-amplify/model-generator',
            '@aws-amplify/platform-core',
            '@aws-amplify/plugin-types',
            '@aws-amplify/sandbox',
            '@aws-amplify/schema-generator',
            '@aws-amplify/seed',
            'aws-amplify',
            'aws-cdk',
            'aws-cdk-lib',
        ];
        this.dependenciesToReport = this.dependencies?.filter((dependency) => targetDependencies.includes(dependency.name));
    }
    export = async (spans, resultCallback) => {
        if (this.isShutdown) {
            resultCallback({ code: core_1.ExportResultCode.FAILED });
            return;
        }
        try {
            this.spanQueue.push(...spans);
            await this.sendSpans();
            resultCallback({ code: core_1.ExportResultCode.SUCCESS });
        }
        catch {
            resultCallback({ code: core_1.ExportResultCode.FAILED });
        }
    };
    shutdown = async () => {
        await this.sendSpans();
    };
    forceFlush = async () => {
        await this.sendSpans();
    };
    sendSpans = async () => {
        for (const span of this.spanQueue) {
            try {
                const payload = await this.getTelemetryPayload(span);
                if (payload) {
                    await this.send(payload);
                }
                // eslint-disable-next-line @aws-amplify/amplify-backend-rules/no-empty-catch
            }
            catch {
                // Don't propogate errors related to not being able to send telemetry
            }
            this.spanQueue.shift();
        }
    };
    getTelemetryPayload = async (span) => {
        try {
            let payload;
            const basePayload = {
                identifiers: {
                    payloadVersion: this.payloadVersion,
                    sessionUuid: this.sessionId,
                    eventId: (0, uuid_1.v4)(),
                    timestamp: new Date().toISOString(),
                    localProjectId: await (0, get_local_project_id_1.getLocalProjectId)(),
                    accountId: await this.accountIdFetcher.fetch(),
                    awsRegion: await this.regionFetcher.fetch(),
                },
                environment: {
                    os: {
                        platform: os_1.default.platform(),
                        release: os_1.default.release(),
                    },
                    shell: os_1.default.userInfo().shell ?? '',
                    npmUserAgent: process.env.npm_config_user_agent ?? '',
                    ci: is_ci_1.default,
                    memory: {
                        total: os_1.default.totalmem(),
                        free: os_1.default.freemem(),
                    },
                },
                project: {
                    dependencies: this.dependenciesToReport,
                },
            };
            if (Object.keys(span.attributes).length >= constants_1.telemetrySpanAttributeCountLimit) {
                payload = {
                    ...basePayload, // to undo Partial typing on basePayload to ensure payload completeness
                    event: {
                        state: 'FAILED',
                        command: {
                            path: [],
                            parameters: [],
                        },
                    },
                    latency: { total: 0 },
                    error: (0, translate_error_to_telemetry_error_details_1.translateErrorToTelemetryErrorDetails)(new errors_1.AmplifyFault('TelemetrySpanAttributeCountLimitFault', {
                        message: `Telemetry span attribute count has hit the limit of ${constants_1.telemetrySpanAttributeCountLimit}`,
                    })),
                };
            }
            else {
                const unflattened = this.unflattenSpanAttributes(span.attributes);
                payload = {
                    ...basePayload, // to undo Partial typing on basePayload to ensure payload completeness
                    event: unflattened.event,
                    latency: unflattened.latency,
                    error: unflattened.error,
                };
            }
            const parsedPayload = telemetry_payload_1.telemetryPayloadSchema.parse(payload);
            return parsedPayload;
        }
        catch {
            // Don't propogate errors related to not being able to get telemetry payload
            return;
        }
    };
    // Unflattens dot notation span attributes into telemetry payload
    unflattenSpanAttributes = (attributes) => {
        // Using any here is safe because we parse the result with telemetry schema
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const result = {};
        for (const [flatKey, value] of Object.entries(attributes)) {
            const keys = flatKey.split('.');
            let current = result;
            // Navigate through the nested structure
            for (let i = 0; i < keys.length - 1; i++) {
                const key = keys[i];
                // Create nested object if it doesn't exist
                if (!(key in current)) {
                    current[key] = {};
                }
                current = current[key];
            }
            // Set the value at the final key
            const lastKey = keys[keys.length - 1];
            current[lastKey] = value;
        }
        return result;
    };
    send = (data) => {
        return new Promise((resolve) => {
            const payload = JSON.stringify(data);
            const req = https_1.default.request({
                hostname: this.url.hostname,
                port: this.url.port,
                path: this.url.path,
                method: 'POST',
                headers: {
                    'content-type': 'application/json',
                    'content-length': payload.length,
                },
            });
            req.on('error', () => {
                /* noop */
            });
            req.setTimeout(2000, () => {
                // 2 seconds
                resolve();
            });
            req.write(payload);
            req.end(() => {
                resolve();
            });
        });
    };
}
exports.DefaultTelemetryPayloadExporter = DefaultTelemetryPayloadExporter;
//# sourceMappingURL=data:application/json;base64,