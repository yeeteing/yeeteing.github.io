"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withoutColor = withoutColor;
exports.withoutEmojis = withoutEmojis;
exports.withTrimmedWhitespace = withTrimmedWhitespace;
/**
 * An IoHost wrapper that strips out ANSI colors and styles from the message before
 * sending the message to the given IoHost
 */
function withoutColor(ioHost) {
    return {
        notify: async (msg) => {
            await ioHost.notify({
                ...msg,
                message: stripColor(msg.message),
            });
        },
        requestResponse: async (msg) => {
            return ioHost.requestResponse({
                ...msg,
                message: stripColor(msg.message),
            });
        },
    };
}
function stripColor(msg) {
    return msg.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
}
/**
 * An IoHost wrapper that strips out emojis from the message before
 * sending the message to the given IoHost
 */
function withoutEmojis(ioHost) {
    return {
        notify: async (msg) => {
            await ioHost.notify({
                ...msg,
                message: stripEmojis(msg.message),
            });
        },
        requestResponse: async (msg) => {
            return ioHost.requestResponse({
                ...msg,
                message: stripEmojis(msg.message),
            });
        },
    };
}
function stripEmojis(msg) {
    // https://www.unicode.org/reports/tr51/#def_emoji_presentation
    return msg.replace(/\p{Emoji_Presentation}/gu, '');
}
/**
 * An IoHost wrapper that trims whitespace at the beginning and end of messages.
 * This is required, since after removing emojis and ANSI colors,
 * we might end up with floating whitespace at either end.
 */
function withTrimmedWhitespace(ioHost) {
    return {
        notify: async (msg) => {
            await ioHost.notify({
                ...msg,
                message: msg.message.trim(),
            });
        },
        requestResponse: async (msg) => {
            return ioHost.requestResponse({
                ...msg,
                message: msg.message.trim(),
            });
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW8taG9zdC13cmFwcGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImlvLWhvc3Qtd3JhcHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFNQSxvQ0FlQztBQVVELHNDQWVDO0FBWUQsc0RBZUM7QUF2RUQ7OztHQUdHO0FBQ0gsU0FBZ0IsWUFBWSxDQUFDLE1BQWU7SUFDMUMsT0FBTztRQUNMLE1BQU0sRUFBRSxLQUFLLEVBQUssR0FBaUIsRUFBRSxFQUFFO1lBQ3JDLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDbEIsR0FBRyxHQUFHO2dCQUNOLE9BQU8sRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQzthQUNqQyxDQUFDLENBQUM7UUFDTCxDQUFDO1FBQ0QsZUFBZSxFQUFFLEtBQUssRUFBUSxHQUFvQixFQUFFLEVBQUU7WUFDcEQsT0FBTyxNQUFNLENBQUMsZUFBZSxDQUFDO2dCQUM1QixHQUFHLEdBQUc7Z0JBQ04sT0FBTyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO2FBQ2pDLENBQUMsQ0FBQztRQUNMLENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsVUFBVSxDQUFDLEdBQVc7SUFDN0IsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLDZFQUE2RSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3hHLENBQUM7QUFFRDs7O0dBR0c7QUFDSCxTQUFnQixhQUFhLENBQUMsTUFBZTtJQUMzQyxPQUFPO1FBQ0wsTUFBTSxFQUFFLEtBQUssRUFBSyxHQUFpQixFQUFFLEVBQUU7WUFDckMsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUNsQixHQUFHLEdBQUc7Z0JBQ04sT0FBTyxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDO2FBQ2xDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFDRCxlQUFlLEVBQUUsS0FBSyxFQUFRLEdBQW9CLEVBQUUsRUFBRTtZQUNwRCxPQUFPLE1BQU0sQ0FBQyxlQUFlLENBQUM7Z0JBQzVCLEdBQUcsR0FBRztnQkFDTixPQUFPLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUM7YUFDbEMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsR0FBVztJQUM5QiwrREFBK0Q7SUFDL0QsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLDBCQUEwQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3JELENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsU0FBZ0IscUJBQXFCLENBQUMsTUFBZTtJQUNuRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLEtBQUssRUFBSyxHQUFpQixFQUFFLEVBQUU7WUFDckMsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDO2dCQUNsQixHQUFHLEdBQUc7Z0JBQ04sT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFO2FBQzVCLENBQUMsQ0FBQztRQUNMLENBQUM7UUFDRCxlQUFlLEVBQUUsS0FBSyxFQUFRLEdBQW9CLEVBQUUsRUFBRTtZQUNwRCxPQUFPLE1BQU0sQ0FBQyxlQUFlLENBQUM7Z0JBQzVCLEdBQUcsR0FBRztnQkFDTixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUU7YUFDNUIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBJb01lc3NhZ2UsIElvUmVxdWVzdCwgSUlvSG9zdCB9IGZyb20gJy4uLyc7XG5cbi8qKlxuICogQW4gSW9Ib3N0IHdyYXBwZXIgdGhhdCBzdHJpcHMgb3V0IEFOU0kgY29sb3JzIGFuZCBzdHlsZXMgZnJvbSB0aGUgbWVzc2FnZSBiZWZvcmVcbiAqIHNlbmRpbmcgdGhlIG1lc3NhZ2UgdG8gdGhlIGdpdmVuIElvSG9zdFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aG91dENvbG9yKGlvSG9zdDogSUlvSG9zdCk6IElJb0hvc3Qge1xuICByZXR1cm4ge1xuICAgIG5vdGlmeTogYXN5bmMgPFQ+KG1zZzogSW9NZXNzYWdlPFQ+KSA9PiB7XG4gICAgICBhd2FpdCBpb0hvc3Qubm90aWZ5KHtcbiAgICAgICAgLi4ubXNnLFxuICAgICAgICBtZXNzYWdlOiBzdHJpcENvbG9yKG1zZy5tZXNzYWdlKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVxdWVzdFJlc3BvbnNlOiBhc3luYyA8VCwgVT4obXNnOiBJb1JlcXVlc3Q8VCwgVT4pID0+IHtcbiAgICAgIHJldHVybiBpb0hvc3QucmVxdWVzdFJlc3BvbnNlKHtcbiAgICAgICAgLi4ubXNnLFxuICAgICAgICBtZXNzYWdlOiBzdHJpcENvbG9yKG1zZy5tZXNzYWdlKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmlwQ29sb3IobXNnOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gbXNnLnJlcGxhY2UoL1tcXHUwMDFiXFx1MDA5Yl1bWygpIzs/XSooPzpbMC05XXsxLDR9KD86O1swLTldezAsNH0pKik/WzAtOUEtT1JaY2YtbnFyeT0+PF0vZywgJycpO1xufVxuXG4vKipcbiAqIEFuIElvSG9zdCB3cmFwcGVyIHRoYXQgc3RyaXBzIG91dCBlbW9qaXMgZnJvbSB0aGUgbWVzc2FnZSBiZWZvcmVcbiAqIHNlbmRpbmcgdGhlIG1lc3NhZ2UgdG8gdGhlIGdpdmVuIElvSG9zdFxuICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aG91dEVtb2ppcyhpb0hvc3Q6IElJb0hvc3QpOiBJSW9Ib3N0IHtcbiAgcmV0dXJuIHtcbiAgICBub3RpZnk6IGFzeW5jIDxUPihtc2c6IElvTWVzc2FnZTxUPikgPT4ge1xuICAgICAgYXdhaXQgaW9Ib3N0Lm5vdGlmeSh7XG4gICAgICAgIC4uLm1zZyxcbiAgICAgICAgbWVzc2FnZTogc3RyaXBFbW9qaXMobXNnLm1lc3NhZ2UpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICByZXF1ZXN0UmVzcG9uc2U6IGFzeW5jIDxULCBVPihtc2c6IElvUmVxdWVzdDxULCBVPikgPT4ge1xuICAgICAgcmV0dXJuIGlvSG9zdC5yZXF1ZXN0UmVzcG9uc2Uoe1xuICAgICAgICAuLi5tc2csXG4gICAgICAgIG1lc3NhZ2U6IHN0cmlwRW1vamlzKG1zZy5tZXNzYWdlKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmlwRW1vamlzKG1zZzogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8gaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjUxLyNkZWZfZW1vamlfcHJlc2VudGF0aW9uXG4gIHJldHVybiBtc2cucmVwbGFjZSgvXFxwe0Vtb2ppX1ByZXNlbnRhdGlvbn0vZ3UsICcnKTtcbn1cblxuLyoqXG4gKiBBbiBJb0hvc3Qgd3JhcHBlciB0aGF0IHRyaW1zIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIG1lc3NhZ2VzLlxuICogVGhpcyBpcyByZXF1aXJlZCwgc2luY2UgYWZ0ZXIgcmVtb3ZpbmcgZW1vamlzIGFuZCBBTlNJIGNvbG9ycyxcbiAqIHdlIG1pZ2h0IGVuZCB1cCB3aXRoIGZsb2F0aW5nIHdoaXRlc3BhY2UgYXQgZWl0aGVyIGVuZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhUcmltbWVkV2hpdGVzcGFjZShpb0hvc3Q6IElJb0hvc3QpOiBJSW9Ib3N0IHtcbiAgcmV0dXJuIHtcbiAgICBub3RpZnk6IGFzeW5jIDxUPihtc2c6IElvTWVzc2FnZTxUPikgPT4ge1xuICAgICAgYXdhaXQgaW9Ib3N0Lm5vdGlmeSh7XG4gICAgICAgIC4uLm1zZyxcbiAgICAgICAgbWVzc2FnZTogbXNnLm1lc3NhZ2UudHJpbSgpLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICByZXF1ZXN0UmVzcG9uc2U6IGFzeW5jIDxULCBVPihtc2c6IElvUmVxdWVzdDxULCBVPikgPT4ge1xuICAgICAgcmV0dXJuIGlvSG9zdC5yZXF1ZXN0UmVzcG9uc2Uoe1xuICAgICAgICAuLi5tc2csXG4gICAgICAgIG1lc3NhZ2U6IG1zZy5tZXNzYWdlLnRyaW0oKSxcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59XG4iXX0=