import debounce from 'debounce-promise';
import { LogLevel } from '@aws-amplify/cli-core';
/**
 * Execute CDK commands.
 */
export class AmplifySandboxExecutor {
    backendDeployer;
    secretClient;
    printer;
    /**
     * Function that invokes the callback with debounce.
     * Debounce is needed in case multiple duplicate events are received.
     */
    invoke = debounce(async (callback) => await callback(), 100);
    /**
     * Creates an AmplifySandboxExecutor instance
     */
    constructor(backendDeployer, secretClient, printer) {
        this.backendDeployer = backendDeployer;
        this.secretClient = secretClient;
        this.printer = printer;
    }
    /**
     * Deploys sandbox
     */
    deploy = async (backendId, validateAppSourcesProvider) => {
        this.printer.log('[Sandbox] Executing command `deploy`', LogLevel.DEBUG);
        const secretLastUpdated = await this.getSecretLastUpdated(backendId);
        return this.invoke(() => {
            // it's important to get information here so that information
            // doesn't get lost while debouncing
            const validateAppSources = validateAppSourcesProvider();
            return this.backendDeployer.deploy(backendId, {
                secretLastUpdated,
                validateAppSources,
            });
        });
    };
    /**
     * Destroy sandbox. Do not swallow errors
     */
    destroy = (backendId) => {
        this.printer.log('[Sandbox] Executing command `destroy`', LogLevel.DEBUG);
        return this.invoke(() => this.backendDeployer.destroy(backendId));
    };
    getSecretLastUpdated = async (backendId) => {
        const secrets = await this.secretClient.listSecrets(backendId);
        let latestTimestamp = -1;
        let secretLastUpdate;
        secrets.forEach((secret) => {
            if (!secret.lastUpdated) {
                return;
            }
            const curTimeStamp = secret.lastUpdated.getTime();
            if (curTimeStamp > 0 && curTimeStamp > latestTimestamp) {
                latestTimestamp = curTimeStamp;
                secretLastUpdate = secret.lastUpdated;
            }
        });
        return secretLastUpdate;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zYW5kYm94X2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLGtCQUFrQixDQUFDO0FBUXhDLE9BQU8sRUFBRSxRQUFRLEVBQVcsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRDs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBc0I7SUFnQmQ7SUFDQTtJQUNBO0lBakJuQjs7O09BR0c7SUFDSyxNQUFNLEdBQUcsUUFBUSxDQUN2QixLQUFLLEVBQ0gsUUFBcUQsRUFDZCxFQUFFLENBQUMsTUFBTSxRQUFRLEVBQUUsRUFDNUQsR0FBRyxDQUNKLENBQUM7SUFFRjs7T0FFRztJQUNILFlBQ21CLGVBQWdDLEVBQ2hDLFlBQTBCLEVBQzFCLE9BQWdCO1FBRmhCLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixZQUFPLEdBQVAsT0FBTyxDQUFTO0lBQ2hDLENBQUM7SUFFSjs7T0FFRztJQUNILE1BQU0sR0FBRyxLQUFLLEVBQ1osU0FBNEIsRUFDNUIsMEJBQXlDLEVBQ2xCLEVBQUU7UUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pFLE1BQU0saUJBQWlCLEdBQUcsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFckUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRTtZQUN0Qiw2REFBNkQ7WUFDN0Qsb0NBQW9DO1lBQ3BDLE1BQU0sa0JBQWtCLEdBQUcsMEJBQTBCLEVBQUUsQ0FBQztZQUN4RCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDNUMsaUJBQWlCO2dCQUNqQixrQkFBa0I7YUFDbkIsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLFNBQTRCLEVBQTBCLEVBQUU7UUFDakUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUNBQXVDLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUMsQ0FBQztJQUVNLG9CQUFvQixHQUFHLEtBQUssRUFDbEMsU0FBNEIsRUFDRCxFQUFFO1FBQzdCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0QsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekIsSUFBSSxnQkFBa0MsQ0FBQztRQUV2QyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztnQkFDeEIsT0FBTztZQUNULENBQUM7WUFDRCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2xELElBQUksWUFBWSxHQUFHLENBQUMsSUFBSSxZQUFZLEdBQUcsZUFBZSxFQUFFLENBQUM7Z0JBQ3ZELGVBQWUsR0FBRyxZQUFZLENBQUM7Z0JBQy9CLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7WUFDeEMsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxnQkFBZ0IsQ0FBQztJQUMxQixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJvdW5jZSBmcm9tICdkZWJvdW5jZS1wcm9taXNlJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQge1xuICBCYWNrZW5kRGVwbG95ZXIsXG4gIERlcGxveVJlc3VsdCxcbiAgRGVzdHJveVJlc3VsdCxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtZGVwbG95ZXInO1xuaW1wb3J0IHsgU2VjcmV0Q2xpZW50IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IExvZ0xldmVsLCBQcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcblxuLyoqXG4gKiBFeGVjdXRlIENESyBjb21tYW5kcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFtcGxpZnlTYW5kYm94RXhlY3V0b3Ige1xuICAvKipcbiAgICogRnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBjYWxsYmFjayB3aXRoIGRlYm91bmNlLlxuICAgKiBEZWJvdW5jZSBpcyBuZWVkZWQgaW4gY2FzZSBtdWx0aXBsZSBkdXBsaWNhdGUgZXZlbnRzIGFyZSByZWNlaXZlZC5cbiAgICovXG4gIHByaXZhdGUgaW52b2tlID0gZGVib3VuY2UoXG4gICAgYXN5bmMgKFxuICAgICAgY2FsbGJhY2s6ICgpID0+IFByb21pc2U8RGVwbG95UmVzdWx0IHwgRGVzdHJveVJlc3VsdD4sXG4gICAgKTogUHJvbWlzZTxEZXBsb3lSZXN1bHQgfCBEZXN0cm95UmVzdWx0PiA9PiBhd2FpdCBjYWxsYmFjaygpLFxuICAgIDEwMCxcbiAgKTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBBbXBsaWZ5U2FuZGJveEV4ZWN1dG9yIGluc3RhbmNlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhY2tlbmREZXBsb3llcjogQmFja2VuZERlcGxveWVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0Q2xpZW50OiBTZWNyZXRDbGllbnQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcmludGVyOiBQcmludGVyLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIERlcGxveXMgc2FuZGJveFxuICAgKi9cbiAgZGVwbG95ID0gYXN5bmMgKFxuICAgIGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIsXG4gICAgdmFsaWRhdGVBcHBTb3VyY2VzUHJvdmlkZXI6ICgpID0+IGJvb2xlYW4sXG4gICk6IFByb21pc2U8RGVwbG95UmVzdWx0PiA9PiB7XG4gICAgdGhpcy5wcmludGVyLmxvZygnW1NhbmRib3hdIEV4ZWN1dGluZyBjb21tYW5kIGBkZXBsb3lgJywgTG9nTGV2ZWwuREVCVUcpO1xuICAgIGNvbnN0IHNlY3JldExhc3RVcGRhdGVkID0gYXdhaXQgdGhpcy5nZXRTZWNyZXRMYXN0VXBkYXRlZChiYWNrZW5kSWQpO1xuXG4gICAgcmV0dXJuIHRoaXMuaW52b2tlKCgpID0+IHtcbiAgICAgIC8vIGl0J3MgaW1wb3J0YW50IHRvIGdldCBpbmZvcm1hdGlvbiBoZXJlIHNvIHRoYXQgaW5mb3JtYXRpb25cbiAgICAgIC8vIGRvZXNuJ3QgZ2V0IGxvc3Qgd2hpbGUgZGVib3VuY2luZ1xuICAgICAgY29uc3QgdmFsaWRhdGVBcHBTb3VyY2VzID0gdmFsaWRhdGVBcHBTb3VyY2VzUHJvdmlkZXIoKTtcbiAgICAgIHJldHVybiB0aGlzLmJhY2tlbmREZXBsb3llci5kZXBsb3koYmFja2VuZElkLCB7XG4gICAgICAgIHNlY3JldExhc3RVcGRhdGVkLFxuICAgICAgICB2YWxpZGF0ZUFwcFNvdXJjZXMsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogRGVzdHJveSBzYW5kYm94LiBEbyBub3Qgc3dhbGxvdyBlcnJvcnNcbiAgICovXG4gIGRlc3Ryb3kgPSAoYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllcik6IFByb21pc2U8RGVzdHJveVJlc3VsdD4gPT4ge1xuICAgIHRoaXMucHJpbnRlci5sb2coJ1tTYW5kYm94XSBFeGVjdXRpbmcgY29tbWFuZCBgZGVzdHJveWAnLCBMb2dMZXZlbC5ERUJVRyk7XG4gICAgcmV0dXJuIHRoaXMuaW52b2tlKCgpID0+IHRoaXMuYmFja2VuZERlcGxveWVyLmRlc3Ryb3koYmFja2VuZElkKSk7XG4gIH07XG5cbiAgcHJpdmF0ZSBnZXRTZWNyZXRMYXN0VXBkYXRlZCA9IGFzeW5jIChcbiAgICBiYWNrZW5kSWQ6IEJhY2tlbmRJZGVudGlmaWVyLFxuICApOiBQcm9taXNlPERhdGUgfCB1bmRlZmluZWQ+ID0+IHtcbiAgICBjb25zdCBzZWNyZXRzID0gYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQubGlzdFNlY3JldHMoYmFja2VuZElkKTtcbiAgICBsZXQgbGF0ZXN0VGltZXN0YW1wID0gLTE7XG4gICAgbGV0IHNlY3JldExhc3RVcGRhdGU6IERhdGUgfCB1bmRlZmluZWQ7XG5cbiAgICBzZWNyZXRzLmZvckVhY2goKHNlY3JldCkgPT4ge1xuICAgICAgaWYgKCFzZWNyZXQubGFzdFVwZGF0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY3VyVGltZVN0YW1wID0gc2VjcmV0Lmxhc3RVcGRhdGVkLmdldFRpbWUoKTtcbiAgICAgIGlmIChjdXJUaW1lU3RhbXAgPiAwICYmIGN1clRpbWVTdGFtcCA+IGxhdGVzdFRpbWVzdGFtcCkge1xuICAgICAgICBsYXRlc3RUaW1lc3RhbXAgPSBjdXJUaW1lU3RhbXA7XG4gICAgICAgIHNlY3JldExhc3RVcGRhdGUgPSBzZWNyZXQubGFzdFVwZGF0ZWQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VjcmV0TGFzdFVwZGF0ZTtcbiAgfTtcbn1cbiJdfQ==