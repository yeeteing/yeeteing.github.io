import { ClientConfigWriter } from './client-config-writer/client_config_writer.js';
import { ClientConfigVersionOption, } from './client-config-types/client_config.js';
import { getClientConfigPath } from './paths/index.js';
import { ClientConfigMobileConverter } from './client-config-writer/client_config_to_mobile_legacy_converter.js';
import { fileURLToPath } from 'node:url';
import * as fsp from 'fs/promises';
import { ClientConfigFormatterLegacy } from './client-config-writer/client_config_formatter_legacy.js';
import { ClientConfigFormatterDefault } from './client-config-writer/client_config_formatter_default.js';
import { getClientConfigFileName } from './paths/get_client_config_name.js';
/**
 * Main entry point for writing provided client config to a file
 */
export const writeClientConfigToFile = async (clientConfig, version, outDir, format) => {
    const packageJson = await readPackageJson();
    const isLegacyConfig = version === ClientConfigVersionOption.V0;
    const clientConfigWriter = new ClientConfigWriter(getClientConfigPath, getClientConfigFileName, isLegacyConfig
        ? new ClientConfigFormatterLegacy(new ClientConfigMobileConverter(packageJson.name, packageJson.version))
        : new ClientConfigFormatterDefault());
    return await clientConfigWriter.writeClientConfig(clientConfig, version, outDir, format);
};
const readPackageJson = async () => {
    const packageJsonPath = fileURLToPath(new URL('../package.json', import.meta.url));
    return JSON.parse(await fsp.readFile(packageJsonPath, 'utf-8'));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JpdGVfY2xpZW50X2NvbmZpZ190b19maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dyaXRlX2NsaWVudF9jb25maWdfdG9fZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNwRixPQUFPLEVBSUwseUJBQXlCLEdBRTFCLE1BQU0sd0NBQXdDLENBQUM7QUFDaEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDdkQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sb0VBQW9FLENBQUM7QUFDakgsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6QyxPQUFPLEtBQUssR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUN2RyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUN6RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUU1RTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEtBQUssRUFDMUMsWUFBMEIsRUFDMUIsT0FBNEIsRUFDNUIsTUFBZSxFQUNmLE1BQTJCLEVBQ2dCLEVBQUU7SUFDN0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxlQUFlLEVBQUUsQ0FBQztJQUU1QyxNQUFNLGNBQWMsR0FBRyxPQUFPLEtBQUsseUJBQXlCLENBQUMsRUFBRSxDQUFDO0lBRWhFLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxrQkFBa0IsQ0FDL0MsbUJBQW1CLEVBQ25CLHVCQUF1QixFQUN2QixjQUFjO1FBQ1osQ0FBQyxDQUFDLElBQUksMkJBQTJCLENBQzdCLElBQUksMkJBQTJCLENBQzdCLFdBQVcsQ0FBQyxJQUFJLEVBQ2hCLFdBQVcsQ0FBQyxPQUFPLENBQ3BCLENBQ0Y7UUFDSCxDQUFDLENBQUMsSUFBSSw0QkFBNEIsRUFBRSxDQUN2QyxDQUFDO0lBRUYsT0FBTyxNQUFNLGtCQUFrQixDQUFDLGlCQUFpQixDQUMvQyxZQUFZLEVBQ1osT0FBTyxFQUNQLE1BQU0sRUFDTixNQUFNLENBQ1AsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sZUFBZSxHQUFHLEtBQUssSUFHMUIsRUFBRTtJQUNILE1BQU0sZUFBZSxHQUFHLGFBQWEsQ0FDbkMsSUFBSSxHQUFHLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FDNUMsQ0FBQztJQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDbEUsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpZW50Q29uZmlnV3JpdGVyIH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLXdyaXRlci9jbGllbnRfY29uZmlnX3dyaXRlci5qcyc7XG5pbXBvcnQge1xuICBDbGllbnRDb25maWcsXG4gIENsaWVudENvbmZpZ0Zvcm1hdCxcbiAgQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgQ2xpZW50Q29uZmlnVmVyc2lvbk9wdGlvbixcbiAgR2VuZXJhdGVDbGllbnRDb25maWdUb0ZpbGVSZXN1bHQsXG59IGZyb20gJy4vY2xpZW50LWNvbmZpZy10eXBlcy9jbGllbnRfY29uZmlnLmpzJztcbmltcG9ydCB7IGdldENsaWVudENvbmZpZ1BhdGggfSBmcm9tICcuL3BhdGhzL2luZGV4LmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ01vYmlsZUNvbnZlcnRlciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ190b19tb2JpbGVfbGVnYWN5X2NvbnZlcnRlci5qcyc7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAnbm9kZTp1cmwnO1xuaW1wb3J0ICogYXMgZnNwIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0Zvcm1hdHRlckxlZ2FjeSB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ19mb3JtYXR0ZXJfbGVnYWN5LmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0Zvcm1hdHRlckRlZmF1bHQgfSBmcm9tICcuL2NsaWVudC1jb25maWctd3JpdGVyL2NsaWVudF9jb25maWdfZm9ybWF0dGVyX2RlZmF1bHQuanMnO1xuaW1wb3J0IHsgZ2V0Q2xpZW50Q29uZmlnRmlsZU5hbWUgfSBmcm9tICcuL3BhdGhzL2dldF9jbGllbnRfY29uZmlnX25hbWUuanMnO1xuXG4vKipcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIHdyaXRpbmcgcHJvdmlkZWQgY2xpZW50IGNvbmZpZyB0byBhIGZpbGVcbiAqL1xuZXhwb3J0IGNvbnN0IHdyaXRlQ2xpZW50Q29uZmlnVG9GaWxlID0gYXN5bmMgKFxuICBjbGllbnRDb25maWc6IENsaWVudENvbmZpZyxcbiAgdmVyc2lvbjogQ2xpZW50Q29uZmlnVmVyc2lvbixcbiAgb3V0RGlyPzogc3RyaW5nLFxuICBmb3JtYXQ/OiBDbGllbnRDb25maWdGb3JtYXQsXG4pOiBQcm9taXNlPEdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlUmVzdWx0PiA9PiB7XG4gIGNvbnN0IHBhY2thZ2VKc29uID0gYXdhaXQgcmVhZFBhY2thZ2VKc29uKCk7XG5cbiAgY29uc3QgaXNMZWdhY3lDb25maWcgPSB2ZXJzaW9uID09PSBDbGllbnRDb25maWdWZXJzaW9uT3B0aW9uLlYwO1xuXG4gIGNvbnN0IGNsaWVudENvbmZpZ1dyaXRlciA9IG5ldyBDbGllbnRDb25maWdXcml0ZXIoXG4gICAgZ2V0Q2xpZW50Q29uZmlnUGF0aCxcbiAgICBnZXRDbGllbnRDb25maWdGaWxlTmFtZSxcbiAgICBpc0xlZ2FjeUNvbmZpZ1xuICAgICAgPyBuZXcgQ2xpZW50Q29uZmlnRm9ybWF0dGVyTGVnYWN5KFxuICAgICAgICAgIG5ldyBDbGllbnRDb25maWdNb2JpbGVDb252ZXJ0ZXIoXG4gICAgICAgICAgICBwYWNrYWdlSnNvbi5uYW1lLFxuICAgICAgICAgICAgcGFja2FnZUpzb24udmVyc2lvbixcbiAgICAgICAgICApLFxuICAgICAgICApXG4gICAgICA6IG5ldyBDbGllbnRDb25maWdGb3JtYXR0ZXJEZWZhdWx0KCksXG4gICk7XG5cbiAgcmV0dXJuIGF3YWl0IGNsaWVudENvbmZpZ1dyaXRlci53cml0ZUNsaWVudENvbmZpZyhcbiAgICBjbGllbnRDb25maWcsXG4gICAgdmVyc2lvbixcbiAgICBvdXREaXIsXG4gICAgZm9ybWF0LFxuICApO1xufTtcblxuY29uc3QgcmVhZFBhY2thZ2VKc29uID0gYXN5bmMgKCk6IFByb21pc2U8e1xuICBuYW1lOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbn0+ID0+IHtcbiAgY29uc3QgcGFja2FnZUpzb25QYXRoID0gZmlsZVVSTFRvUGF0aChcbiAgICBuZXcgVVJMKCcuLi9wYWNrYWdlLmpzb24nLCBpbXBvcnQubWV0YS51cmwpLFxuICApO1xuICByZXR1cm4gSlNPTi5wYXJzZShhd2FpdCBmc3AucmVhZEZpbGUocGFja2FnZUpzb25QYXRoLCAndXRmLTgnKSk7XG59O1xuIl19