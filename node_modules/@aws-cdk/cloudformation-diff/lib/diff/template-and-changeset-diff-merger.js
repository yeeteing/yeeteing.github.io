"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateAndChangeSetDiffMerger = void 0;
const types = require("../diff/types");
/**
 * The purpose of this class is to include differences from the ChangeSet to differences in the TemplateDiff.
 */
class TemplateAndChangeSetDiffMerger {
    static determineChangeSetReplacementMode(propertyChange) {
        if (propertyChange.Target?.RequiresRecreation === undefined) {
            // We can't determine if the resource will be replaced or not. That's what conditionally means.
            return 'Conditionally';
        }
        if (propertyChange.Target.RequiresRecreation === 'Always') {
            switch (propertyChange.Evaluation) {
                case 'Static':
                    return 'Always';
                case 'Dynamic':
                    // If Evaluation is 'Dynamic', then this may cause replacement, or it may not.
                    // see 'Replacement': https://docs.aws.amazon.com/AWSCloudFormation/latest/APIReference/API_ResourceChange.html
                    return 'Conditionally';
            }
        }
        return propertyChange.Target.RequiresRecreation;
    }
    constructor(props) {
        this.changeSet = props.changeSet;
        this.changeSetResources = props.changeSetResources ?? this.convertDescribeChangeSetOutputToChangeSetResources(this.changeSet);
    }
    /**
     * Read resources from the changeSet, extracting information into ChangeSetResources.
     */
    convertDescribeChangeSetOutputToChangeSetResources(changeSet) {
        const changeSetResources = {};
        for (const resourceChange of changeSet.Changes ?? []) {
            if (resourceChange.ResourceChange?.LogicalResourceId === undefined) {
                continue; // Being defensive, here.
            }
            const propertyReplacementModes = {};
            for (const propertyChange of resourceChange.ResourceChange.Details ?? []) { // Details is only included if resourceChange.Action === 'Modify'
                if (propertyChange.Target?.Attribute === 'Properties' && propertyChange.Target.Name) {
                    propertyReplacementModes[propertyChange.Target.Name] = {
                        replacementMode: TemplateAndChangeSetDiffMerger.determineChangeSetReplacementMode(propertyChange),
                    };
                }
            }
            changeSetResources[resourceChange.ResourceChange.LogicalResourceId] = {
                resourceWasReplaced: resourceChange.ResourceChange.Replacement === 'True',
                resourceType: resourceChange.ResourceChange.ResourceType ?? TemplateAndChangeSetDiffMerger.UNKNOWN_RESOURCE_TYPE, // DescribeChangeSet doesn't promise to have the ResourceType...
                propertyReplacementModes: propertyReplacementModes,
            };
        }
        return changeSetResources;
    }
    /**
     * This is writing over the "ChangeImpact" that was computed from the template difference, and instead using the ChangeImpact that is included from the ChangeSet.
     * Using the ChangeSet ChangeImpact is more accurate. The ChangeImpact tells us what the consequence is of changing the field. If changing the field causes resource
     * replacement (e.g., changing the name of an IAM role requires deleting and replacing the role), then ChangeImpact is "Always".
     */
    overrideDiffResourceChangeImpactWithChangeSetChangeImpact(logicalId, change) {
        // resourceType getter throws an error if resourceTypeChanged
        if ((change.resourceTypeChanged === true) || change.resourceType?.includes('AWS::Serverless')) {
            // CFN applies the SAM transform before creating the changeset, so the changeset contains no information about SAM resources
            return;
        }
        change.forEachDifference((type, name, value) => {
            if (type === 'Property') {
                if (!this.changeSetResources[logicalId]) {
                    value.changeImpact = types.ResourceImpact.NO_CHANGE;
                    value.isDifferent = false;
                    return;
                }
                const changingPropertyCausesResourceReplacement = (this.changeSetResources[logicalId].propertyReplacementModes ?? {})[name]?.replacementMode;
                switch (changingPropertyCausesResourceReplacement) {
                    case 'Always':
                        value.changeImpact = types.ResourceImpact.WILL_REPLACE;
                        break;
                    case 'Never':
                        value.changeImpact = types.ResourceImpact.WILL_UPDATE;
                        break;
                    case 'Conditionally':
                        value.changeImpact = types.ResourceImpact.MAY_REPLACE;
                        break;
                    case undefined:
                        value.changeImpact = types.ResourceImpact.NO_CHANGE;
                        value.isDifferent = false;
                        break;
                    // otherwise, defer to the changeImpact from the template diff
                }
            }
            else if (type === 'Other') {
                switch (name) {
                    case 'Metadata':
                        // we want to ignore metadata changes in the diff, so compare newValue against newValue.
                        change.setOtherChange('Metadata', new types.Difference(value.newValue, value.newValue));
                        break;
                }
            }
        });
    }
    addImportInformationFromChangeset(resourceDiffs) {
        const imports = this.findResourceImports();
        resourceDiffs.forEachDifference((logicalId, change) => {
            if (imports.includes(logicalId)) {
                change.isImport = true;
            }
        });
    }
    findResourceImports() {
        const importedResourceLogicalIds = [];
        for (const resourceChange of this.changeSet?.Changes ?? []) {
            if (resourceChange.ResourceChange?.Action === 'Import') {
                importedResourceLogicalIds.push(resourceChange.ResourceChange.LogicalResourceId);
            }
        }
        return importedResourceLogicalIds;
    }
}
exports.TemplateAndChangeSetDiffMerger = TemplateAndChangeSetDiffMerger;
// If we somehow cannot find the resourceType, then we'll mark it as UNKNOWN, so that can be seen in the diff.
TemplateAndChangeSetDiffMerger.UNKNOWN_RESOURCE_TYPE = 'UNKNOWN_RESOURCE_TYPE';
//# sourceMappingURL=data:application/json;base64,