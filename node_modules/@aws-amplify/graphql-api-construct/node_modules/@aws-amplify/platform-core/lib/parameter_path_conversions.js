"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ParameterPathConversions = void 0;
const backend_identifier_conversions_js_1 = require("./backend_identifier_conversions.js");
const errors_1 = require("./errors");
const SHARED_SECRET = 'shared';
const RESOURCE_REFERENCE = 'resource_reference';
/**
 * Provides static methods for converting BackendIdentifier to parameter path strings
 */
class ParameterPathConversions {
    /**
     * Convert a BackendIdentifier to a parameter prefix.
     */
    // It's fine to ignore the rule here because the anti-static rule is to ban the static function which should use constructor
    // eslint-disable-next-line no-restricted-syntax
    static toParameterPrefix(backendId) {
        if (typeof backendId === 'object') {
            return getBackendParameterPrefix(backendId);
        }
        return getSharedParameterPrefix(backendId);
    }
    /**
     * Convert a BackendIdentifier to a parameter full path.
     */
    // It's fine to ignore the rule here because the anti-static rule is to ban the static function which should use constructor
    // eslint-disable-next-line no-restricted-syntax
    static toParameterFullPath(backendId, parameterName) {
        if (typeof backendId === 'object') {
            return getBackendParameterFullPath(backendId, parameterName);
        }
        return getSharedParameterFullPath(backendId, parameterName);
    }
    /**
     * Generate an SSM path for references to other backend resources
     */
    // It's fine to ignore the rule here because the anti-static rule is to ban the static function which should use constructor
    // eslint-disable-next-line no-restricted-syntax
    static toResourceReferenceFullPath(backendId, referenceName) {
        return `/amplify/${RESOURCE_REFERENCE}/${getBackendIdentifierPathPart(backendId)}/${referenceName}`;
    }
}
exports.ParameterPathConversions = ParameterPathConversions;
const getBackendParameterPrefix = (parts) => {
    return `/amplify/${getBackendIdentifierPathPart(parts)}`;
};
/**
 * Get a branch-specific parameter prefix.
 */
const getBackendIdentifierPathPart = (parts) => {
    // round trip the backend id through the stack name conversion to ensure we are applying the same sanitization to SSM paths
    const sanitizedBackendId = backend_identifier_conversions_js_1.BackendIdentifierConversions.fromStackName(backend_identifier_conversions_js_1.BackendIdentifierConversions.toStackName(parts));
    if (!sanitizedBackendId || !sanitizedBackendId.hash) {
        // this *should* never happen
        throw new errors_1.AmplifyFault('BackendIdConversionFault', {
            message: `Could not sanitize the backendId to construct the parameter path`,
        });
    }
    return `${sanitizedBackendId.namespace}/${sanitizedBackendId.name}-${sanitizedBackendId.type}-${sanitizedBackendId.hash}`;
};
/**
 * Get a branch-specific parameter full path.
 */
const getBackendParameterFullPath = (backendIdentifier, parameterName) => {
    return `${getBackendParameterPrefix(backendIdentifier)}/${parameterName}`;
};
/**
 * Get a shared parameter prefix.
 */
const getSharedParameterPrefix = (appId) => {
    return `/amplify/${SHARED_SECRET}/${appId}`;
};
/**
 * Get a shared parameter full path.
 */
const getSharedParameterFullPath = (appId, parameterName) => {
    return `${getSharedParameterPrefix(appId)}/${parameterName}`;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyYW1ldGVyX3BhdGhfY29udmVyc2lvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcGFyYW1ldGVyX3BhdGhfY29udmVyc2lvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsMkZBQW1GO0FBQ25GLHFDQUF3QztBQUV4QyxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUM7QUFDL0IsTUFBTSxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQztBQUVoRDs7R0FFRztBQUNILE1BQWEsd0JBQXdCO0lBQ25DOztPQUVHO0lBQ0gsNEhBQTRIO0lBQzVILGdEQUFnRDtJQUNoRCxNQUFNLENBQUMsaUJBQWlCLENBQUMsU0FBb0M7UUFDM0QsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQUU7WUFDakMsT0FBTyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM3QztRQUNELE9BQU8sd0JBQXdCLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVEOztPQUVHO0lBQ0gsNEhBQTRIO0lBQzVILGdEQUFnRDtJQUNoRCxNQUFNLENBQUMsbUJBQW1CLENBQ3hCLFNBQW9DLEVBQ3BDLGFBQXFCO1FBRXJCLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1lBQ2pDLE9BQU8sMkJBQTJCLENBQUMsU0FBUyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsT0FBTywwQkFBMEIsQ0FBQyxTQUFTLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsNEhBQTRIO0lBQzVILGdEQUFnRDtJQUNoRCxNQUFNLENBQUMsMkJBQTJCLENBQ2hDLFNBQTRCLEVBQzVCLGFBQXFCO1FBRXJCLE9BQU8sWUFBWSxrQkFBa0IsSUFBSSw0QkFBNEIsQ0FDbkUsU0FBUyxDQUNWLElBQUksYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQztDQUNGO0FBekNELDREQXlDQztBQUVELE1BQU0seUJBQXlCLEdBQUcsQ0FBQyxLQUF3QixFQUFVLEVBQUU7SUFDckUsT0FBTyxZQUFZLDRCQUE0QixDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7QUFDM0QsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLDRCQUE0QixHQUFHLENBQUMsS0FBd0IsRUFBVSxFQUFFO0lBQ3hFLDJIQUEySDtJQUMzSCxNQUFNLGtCQUFrQixHQUFHLGdFQUE0QixDQUFDLGFBQWEsQ0FDbkUsZ0VBQTRCLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUNoRCxDQUFDO0lBQ0YsSUFBSSxDQUFDLGtCQUFrQixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxFQUFFO1FBQ25ELDZCQUE2QjtRQUM3QixNQUFNLElBQUkscUJBQVksQ0FBQywwQkFBMEIsRUFBRTtZQUNqRCxPQUFPLEVBQUUsa0VBQWtFO1NBQzVFLENBQUMsQ0FBQztLQUNKO0lBQ0QsT0FBTyxHQUFHLGtCQUFrQixDQUFDLFNBQVMsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLElBQUksa0JBQWtCLENBQUMsSUFBSSxJQUFJLGtCQUFrQixDQUFDLElBQUksRUFBRSxDQUFDO0FBQzVILENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSwyQkFBMkIsR0FBRyxDQUNsQyxpQkFBb0MsRUFDcEMsYUFBcUIsRUFDYixFQUFFO0lBQ1YsT0FBTyxHQUFHLHlCQUF5QixDQUFDLGlCQUFpQixDQUFDLElBQUksYUFBYSxFQUFFLENBQUM7QUFDNUUsQ0FBQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLHdCQUF3QixHQUFHLENBQUMsS0FBWSxFQUFVLEVBQUU7SUFDeEQsT0FBTyxZQUFZLGFBQWEsSUFBSSxLQUFLLEVBQUUsQ0FBQztBQUM5QyxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sMEJBQTBCLEdBQUcsQ0FDakMsS0FBWSxFQUNaLGFBQXFCLEVBQ2IsRUFBRTtJQUNWLE9BQU8sR0FBRyx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxhQUFhLEVBQUUsQ0FBQztBQUMvRCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBJZCwgQmFja2VuZElkZW50aWZpZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyQ29udmVyc2lvbnMgfSBmcm9tICcuL2JhY2tlbmRfaWRlbnRpZmllcl9jb252ZXJzaW9ucy5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5RmF1bHQgfSBmcm9tICcuL2Vycm9ycyc7XG5cbmNvbnN0IFNIQVJFRF9TRUNSRVQgPSAnc2hhcmVkJztcbmNvbnN0IFJFU09VUkNFX1JFRkVSRU5DRSA9ICdyZXNvdXJjZV9yZWZlcmVuY2UnO1xuXG4vKipcbiAqIFByb3ZpZGVzIHN0YXRpYyBtZXRob2RzIGZvciBjb252ZXJ0aW5nIEJhY2tlbmRJZGVudGlmaWVyIHRvIHBhcmFtZXRlciBwYXRoIHN0cmluZ3NcbiAqL1xuZXhwb3J0IGNsYXNzIFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucyB7XG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgQmFja2VuZElkZW50aWZpZXIgdG8gYSBwYXJhbWV0ZXIgcHJlZml4LlxuICAgKi9cbiAgLy8gSXQncyBmaW5lIHRvIGlnbm9yZSB0aGUgcnVsZSBoZXJlIGJlY2F1c2UgdGhlIGFudGktc3RhdGljIHJ1bGUgaXMgdG8gYmFuIHRoZSBzdGF0aWMgZnVuY3Rpb24gd2hpY2ggc2hvdWxkIHVzZSBjb25zdHJ1Y3RvclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgc3RhdGljIHRvUGFyYW1ldGVyUHJlZml4KGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIgfCBBcHBJZCk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBiYWNrZW5kSWQgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gZ2V0QmFja2VuZFBhcmFtZXRlclByZWZpeChiYWNrZW5kSWQpO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0U2hhcmVkUGFyYW1ldGVyUHJlZml4KGJhY2tlbmRJZCk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBhIEJhY2tlbmRJZGVudGlmaWVyIHRvIGEgcGFyYW1ldGVyIGZ1bGwgcGF0aC5cbiAgICovXG4gIC8vIEl0J3MgZmluZSB0byBpZ25vcmUgdGhlIHJ1bGUgaGVyZSBiZWNhdXNlIHRoZSBhbnRpLXN0YXRpYyBydWxlIGlzIHRvIGJhbiB0aGUgc3RhdGljIGZ1bmN0aW9uIHdoaWNoIHNob3VsZCB1c2UgY29uc3RydWN0b3JcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIHN0YXRpYyB0b1BhcmFtZXRlckZ1bGxQYXRoKFxuICAgIGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIgfCBBcHBJZCxcbiAgICBwYXJhbWV0ZXJOYW1lOiBzdHJpbmcsXG4gICk6IHN0cmluZyB7XG4gICAgaWYgKHR5cGVvZiBiYWNrZW5kSWQgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gZ2V0QmFja2VuZFBhcmFtZXRlckZ1bGxQYXRoKGJhY2tlbmRJZCwgcGFyYW1ldGVyTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBnZXRTaGFyZWRQYXJhbWV0ZXJGdWxsUGF0aChiYWNrZW5kSWQsIHBhcmFtZXRlck5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGFuIFNTTSBwYXRoIGZvciByZWZlcmVuY2VzIHRvIG90aGVyIGJhY2tlbmQgcmVzb3VyY2VzXG4gICAqL1xuICAvLyBJdCdzIGZpbmUgdG8gaWdub3JlIHRoZSBydWxlIGhlcmUgYmVjYXVzZSB0aGUgYW50aS1zdGF0aWMgcnVsZSBpcyB0byBiYW4gdGhlIHN0YXRpYyBmdW5jdGlvbiB3aGljaCBzaG91bGQgdXNlIGNvbnN0cnVjdG9yXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICBzdGF0aWMgdG9SZXNvdXJjZVJlZmVyZW5jZUZ1bGxQYXRoKFxuICAgIGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIsXG4gICAgcmVmZXJlbmNlTmFtZTogc3RyaW5nLFxuICApOiBzdHJpbmcge1xuICAgIHJldHVybiBgL2FtcGxpZnkvJHtSRVNPVVJDRV9SRUZFUkVOQ0V9LyR7Z2V0QmFja2VuZElkZW50aWZpZXJQYXRoUGFydChcbiAgICAgIGJhY2tlbmRJZCxcbiAgICApfS8ke3JlZmVyZW5jZU5hbWV9YDtcbiAgfVxufVxuXG5jb25zdCBnZXRCYWNrZW5kUGFyYW1ldGVyUHJlZml4ID0gKHBhcnRzOiBCYWNrZW5kSWRlbnRpZmllcik6IHN0cmluZyA9PiB7XG4gIHJldHVybiBgL2FtcGxpZnkvJHtnZXRCYWNrZW5kSWRlbnRpZmllclBhdGhQYXJ0KHBhcnRzKX1gO1xufTtcblxuLyoqXG4gKiBHZXQgYSBicmFuY2gtc3BlY2lmaWMgcGFyYW1ldGVyIHByZWZpeC5cbiAqL1xuY29uc3QgZ2V0QmFja2VuZElkZW50aWZpZXJQYXRoUGFydCA9IChwYXJ0czogQmFja2VuZElkZW50aWZpZXIpOiBzdHJpbmcgPT4ge1xuICAvLyByb3VuZCB0cmlwIHRoZSBiYWNrZW5kIGlkIHRocm91Z2ggdGhlIHN0YWNrIG5hbWUgY29udmVyc2lvbiB0byBlbnN1cmUgd2UgYXJlIGFwcGx5aW5nIHRoZSBzYW1lIHNhbml0aXphdGlvbiB0byBTU00gcGF0aHNcbiAgY29uc3Qgc2FuaXRpemVkQmFja2VuZElkID0gQmFja2VuZElkZW50aWZpZXJDb252ZXJzaW9ucy5mcm9tU3RhY2tOYW1lKFxuICAgIEJhY2tlbmRJZGVudGlmaWVyQ29udmVyc2lvbnMudG9TdGFja05hbWUocGFydHMpLFxuICApO1xuICBpZiAoIXNhbml0aXplZEJhY2tlbmRJZCB8fCAhc2FuaXRpemVkQmFja2VuZElkLmhhc2gpIHtcbiAgICAvLyB0aGlzICpzaG91bGQqIG5ldmVyIGhhcHBlblxuICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ0JhY2tlbmRJZENvbnZlcnNpb25GYXVsdCcsIHtcbiAgICAgIG1lc3NhZ2U6IGBDb3VsZCBub3Qgc2FuaXRpemUgdGhlIGJhY2tlbmRJZCB0byBjb25zdHJ1Y3QgdGhlIHBhcmFtZXRlciBwYXRoYCxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gYCR7c2FuaXRpemVkQmFja2VuZElkLm5hbWVzcGFjZX0vJHtzYW5pdGl6ZWRCYWNrZW5kSWQubmFtZX0tJHtzYW5pdGl6ZWRCYWNrZW5kSWQudHlwZX0tJHtzYW5pdGl6ZWRCYWNrZW5kSWQuaGFzaH1gO1xufTtcblxuLyoqXG4gKiBHZXQgYSBicmFuY2gtc3BlY2lmaWMgcGFyYW1ldGVyIGZ1bGwgcGF0aC5cbiAqL1xuY29uc3QgZ2V0QmFja2VuZFBhcmFtZXRlckZ1bGxQYXRoID0gKFxuICBiYWNrZW5kSWRlbnRpZmllcjogQmFja2VuZElkZW50aWZpZXIsXG4gIHBhcmFtZXRlck5hbWU6IHN0cmluZyxcbik6IHN0cmluZyA9PiB7XG4gIHJldHVybiBgJHtnZXRCYWNrZW5kUGFyYW1ldGVyUHJlZml4KGJhY2tlbmRJZGVudGlmaWVyKX0vJHtwYXJhbWV0ZXJOYW1lfWA7XG59O1xuXG4vKipcbiAqIEdldCBhIHNoYXJlZCBwYXJhbWV0ZXIgcHJlZml4LlxuICovXG5jb25zdCBnZXRTaGFyZWRQYXJhbWV0ZXJQcmVmaXggPSAoYXBwSWQ6IEFwcElkKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIGAvYW1wbGlmeS8ke1NIQVJFRF9TRUNSRVR9LyR7YXBwSWR9YDtcbn07XG5cbi8qKlxuICogR2V0IGEgc2hhcmVkIHBhcmFtZXRlciBmdWxsIHBhdGguXG4gKi9cbmNvbnN0IGdldFNoYXJlZFBhcmFtZXRlckZ1bGxQYXRoID0gKFxuICBhcHBJZDogQXBwSWQsXG4gIHBhcmFtZXRlck5hbWU6IHN0cmluZyxcbik6IHN0cmluZyA9PiB7XG4gIHJldHVybiBgJHtnZXRTaGFyZWRQYXJhbWV0ZXJQcmVmaXgoYXBwSWQpfS8ke3BhcmFtZXRlck5hbWV9YDtcbn07XG4iXX0=