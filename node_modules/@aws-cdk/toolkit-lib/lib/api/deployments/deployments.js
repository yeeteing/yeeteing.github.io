"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Deployments = void 0;
const crypto_1 = require("crypto");
const cdk_assets = require("cdk-assets");
const chalk = require("chalk");
const asset_manifest_builder_1 = require("./asset-manifest-builder");
const asset_publishing_1 = require("./asset-publishing");
const cfn_api_1 = require("./cfn-api");
const checks_1 = require("./checks");
const deploy_stack_1 = require("./deploy-stack");
const toolkit_error_1 = require("../../toolkit/toolkit-error");
const util_1 = require("../../util");
const cloudformation_1 = require("../cloudformation");
const environment_1 = require("../environment");
const stack_events_1 = require("../stack-events");
const toolkit_info_1 = require("../toolkit-info");
const BOOTSTRAP_STACK_VERSION_FOR_ROLLBACK = 23;
/**
 * Scope for a single set of deployments from a set of Cloud Assembly Artifacts
 *
 * Manages lookup of SDKs, Bootstrap stacks, etc.
 */
class Deployments {
    props;
    envs;
    /**
     * SDK provider for asset publishing (do not use for anything else).
     *
     * This SDK provider is only allowed to be used for that purpose, nothing else.
     *
     * It's not a different object, but the field name should imply that this
     * object should not be used directly, except to pass to asset handling routines.
     */
    assetSdkProvider;
    /**
     * SDK provider for passing to deployStack
     *
     * This SDK provider is only allowed to be used for that purpose, nothing else.
     *
     * It's not a different object, but the field name should imply that this
     * object should not be used directly, except to pass to `deployStack`.
     */
    deployStackSdkProvider;
    publisherCache = new Map();
    _allowCrossAccountAssetPublishing;
    ioHelper;
    constructor(props) {
        this.props = props;
        this.assetSdkProvider = props.sdkProvider;
        this.deployStackSdkProvider = props.sdkProvider;
        this.ioHelper = props.ioHelper;
        this.envs = new environment_1.EnvironmentAccess(props.sdkProvider, props.toolkitStackName ?? toolkit_info_1.DEFAULT_TOOLKIT_STACK_NAME, this.ioHelper);
    }
    /**
     * Resolves the environment for a stack.
     */
    async resolveEnvironment(stack) {
        return this.envs.resolveStackEnvironment(stack);
    }
    async readCurrentTemplateWithNestedStacks(rootStackArtifact, retrieveProcessedTemplate = false) {
        const env = await this.envs.accessStackForLookupBestEffort(rootStackArtifact);
        return (0, cloudformation_1.loadCurrentTemplateWithNestedStacks)(rootStackArtifact, env.sdk, retrieveProcessedTemplate);
    }
    async readCurrentTemplate(stackArtifact) {
        await this.ioHelper.defaults.debug(`Reading existing template for stack ${stackArtifact.displayName}.`);
        const env = await this.envs.accessStackForLookupBestEffort(stackArtifact);
        return (0, cloudformation_1.loadCurrentTemplate)(stackArtifact, env.sdk);
    }
    async resourceIdentifierSummaries(stackArtifact) {
        await this.ioHelper.defaults.debug(`Retrieving template summary for stack ${stackArtifact.displayName}.`);
        // Currently, needs to use `deploy-role` since it may need to read templates in the staging
        // bucket which have been encrypted with a KMS key (and lookup-role may not read encrypted things)
        const env = await this.envs.accessStackForReadOnlyStackOperations(stackArtifact);
        const cfn = env.sdk.cloudFormation();
        await (0, cfn_api_1.uploadStackTemplateAssets)(stackArtifact, this);
        // Upload the template, if necessary, before passing it to CFN
        const builder = new asset_manifest_builder_1.AssetManifestBuilder();
        const cfnParam = await (0, cloudformation_1.makeBodyParameter)(this.ioHelper, stackArtifact, env.resolvedEnvironment, builder, env.resources);
        // If the `makeBodyParameter` before this added assets, make sure to publish them before
        // calling the API.
        const addedAssets = builder.toManifest(stackArtifact.assembly.directory);
        for (const entry of addedAssets.entries) {
            await this.buildSingleAsset('no-version-validation', addedAssets, entry, {
                stack: stackArtifact,
            });
            await this.publishSingleAsset(addedAssets, entry, {
                stack: stackArtifact,
            });
        }
        const response = await cfn.getTemplateSummary(cfnParam);
        if (!response.ResourceIdentifierSummaries) {
            await this.ioHelper.defaults.debug('GetTemplateSummary API call did not return "ResourceIdentifierSummaries"');
        }
        return response.ResourceIdentifierSummaries ?? [];
    }
    async deployStack(options) {
        let deploymentMethod = options.deploymentMethod;
        // Honor the old options because this API is exported from the CLI as part of the legacy exports
        // @TODO remove when we don't have legacy exports anymore
        if (options.changeSetName || options.execute !== undefined) {
            if (deploymentMethod) {
                throw new toolkit_error_1.ToolkitError("You cannot supply both 'deploymentMethod' and 'changeSetName/execute'. Supply one or the other.");
            }
            deploymentMethod = {
                method: 'change-set',
                changeSetName: options.changeSetName,
                execute: options.execute,
            };
        }
        const env = await this.envs.accessStackForMutableStackOperations(options.stack);
        // Do a verification of the bootstrap stack version
        await this.validateBootstrapStackVersion(options.stack.stackName, options.stack.requiresBootstrapStackVersion, options.stack.bootstrapStackVersionSsmParameter, env.resources);
        const executionRoleArn = await env.replacePlaceholders(options.roleArn ?? options.stack.cloudFormationExecutionRoleArn);
        return (0, deploy_stack_1.deployStack)({
            stack: options.stack,
            resolvedEnvironment: env.resolvedEnvironment,
            deployName: options.deployName,
            notificationArns: options.notificationArns,
            sdk: env.sdk,
            sdkProvider: this.deployStackSdkProvider,
            roleArn: executionRoleArn,
            reuseAssets: options.reuseAssets,
            envResources: env.resources,
            tags: options.tags,
            deploymentMethod,
            forceDeployment: options.forceDeployment,
            parameters: options.parameters,
            usePreviousParameters: options.usePreviousParameters,
            rollback: options.rollback,
            hotswap: options.hotswap,
            hotswapPropertyOverrides: options.hotswapPropertyOverrides,
            extraUserAgent: options.extraUserAgent,
            resourcesToImport: options.resourcesToImport,
            overrideTemplate: options.overrideTemplate,
            assetParallelism: options.assetParallelism,
        }, this.ioHelper);
    }
    async rollbackStack(options) {
        let resourcesToSkip = options.orphanLogicalIds ?? [];
        if (options.orphanFailedResources && resourcesToSkip.length > 0) {
            throw new toolkit_error_1.ToolkitError('Cannot combine --force with --orphan');
        }
        const env = await this.envs.accessStackForMutableStackOperations(options.stack);
        if (options.validateBootstrapStackVersion ?? true) {
            // Do a verification of the bootstrap stack version
            await this.validateBootstrapStackVersion(options.stack.stackName, BOOTSTRAP_STACK_VERSION_FOR_ROLLBACK, options.stack.bootstrapStackVersionSsmParameter, env.resources);
        }
        const cfn = env.sdk.cloudFormation();
        const deployName = options.stack.stackName;
        // We loop in case of `--force` and the stack ends up in `CONTINUE_UPDATE_ROLLBACK`.
        let maxLoops = 10;
        while (maxLoops--) {
            const cloudFormationStack = await cloudformation_1.CloudFormationStack.lookup(cfn, deployName);
            const stackArn = cloudFormationStack.stackId;
            const executionRoleArn = await env.replacePlaceholders(options.roleArn ?? options.stack.cloudFormationExecutionRoleArn);
            switch (cloudFormationStack.stackStatus.rollbackChoice) {
                case stack_events_1.RollbackChoice.NONE:
                    await this.ioHelper.defaults.warn(`Stack ${deployName} does not need a rollback: ${cloudFormationStack.stackStatus}`);
                    return { stackArn: cloudFormationStack.stackId, notInRollbackableState: true };
                case stack_events_1.RollbackChoice.START_ROLLBACK:
                    await this.ioHelper.defaults.debug(`Initiating rollback of stack ${deployName}`);
                    await cfn.rollbackStack({
                        StackName: deployName,
                        RoleARN: executionRoleArn,
                        ClientRequestToken: (0, crypto_1.randomUUID)(),
                        // Enabling this is just the better overall default, the only reason it isn't the upstream default is backwards compatibility
                        RetainExceptOnCreate: true,
                    });
                    break;
                case stack_events_1.RollbackChoice.CONTINUE_UPDATE_ROLLBACK:
                    if (options.orphanFailedResources) {
                        // Find the failed resources from the deployment and automatically skip them
                        // (Using deployment log because we definitely have `DescribeStackEvents` permissions, and we might not have
                        // `DescribeStackResources` permissions).
                        const poller = new stack_events_1.StackEventPoller(cfn, {
                            stackName: deployName,
                            stackStatuses: ['ROLLBACK_IN_PROGRESS', 'UPDATE_ROLLBACK_IN_PROGRESS'],
                        });
                        await poller.poll();
                        resourcesToSkip = poller.resourceErrors
                            .filter((r) => !r.isStackEvent && r.parentStackLogicalIds.length === 0)
                            .map((r) => r.event.LogicalResourceId ?? '');
                    }
                    const skipDescription = resourcesToSkip.length > 0 ? ` (orphaning: ${resourcesToSkip.join(', ')})` : '';
                    await this.ioHelper.defaults.warn(`Continuing rollback of stack ${deployName}${skipDescription}`);
                    await cfn.continueUpdateRollback({
                        StackName: deployName,
                        ClientRequestToken: (0, crypto_1.randomUUID)(),
                        RoleARN: executionRoleArn,
                        ResourcesToSkip: resourcesToSkip,
                    });
                    break;
                case stack_events_1.RollbackChoice.ROLLBACK_FAILED:
                    await this.ioHelper.defaults.warn(`Stack ${deployName} failed creation and rollback. This state cannot be rolled back. You can recreate this stack by running 'cdk deploy'.`);
                    return { stackArn, notInRollbackableState: true };
                default:
                    throw new toolkit_error_1.ToolkitError(`Unexpected rollback choice: ${cloudFormationStack.stackStatus.rollbackChoice}`);
            }
            const monitor = new stack_events_1.StackActivityMonitor({
                cfn,
                stack: options.stack,
                stackName: deployName,
                ioHelper: this.ioHelper,
            });
            await monitor.start();
            let stackErrorMessage = undefined;
            let finalStackState = cloudFormationStack;
            try {
                const successStack = await (0, cfn_api_1.stabilizeStack)(cfn, this.ioHelper, deployName);
                // This shouldn't really happen, but catch it anyway. You never know.
                if (!successStack) {
                    throw new toolkit_error_1.ToolkitError('Stack deploy failed (the stack disappeared while we were rolling it back)');
                }
                finalStackState = successStack;
                const errors = monitor.errors.join(', ');
                if (errors) {
                    stackErrorMessage = errors;
                }
            }
            catch (e) {
                stackErrorMessage = suffixWithErrors((0, util_1.formatErrorMessage)(e), monitor.errors);
            }
            finally {
                await monitor.stop();
            }
            if (finalStackState.stackStatus.isRollbackSuccess || !stackErrorMessage) {
                return { stackArn, success: true };
            }
            // Either we need to ignore some resources to continue the rollback, or something went wrong
            if (finalStackState.stackStatus.rollbackChoice === stack_events_1.RollbackChoice.CONTINUE_UPDATE_ROLLBACK && options.orphanFailedResources) {
                // Do another loop-de-loop
                continue;
            }
            throw new toolkit_error_1.ToolkitError(`${stackErrorMessage} (fix problem and retry, or orphan these resources using --orphan or --force)`);
        }
        throw new toolkit_error_1.ToolkitError("Rollback did not finish after a large number of iterations; stopping because it looks like we're not making progress anymore. You can retry if rollback was progressing as expected.");
    }
    async destroyStack(options) {
        const env = await this.envs.accessStackForMutableStackOperations(options.stack);
        const executionRoleArn = await env.replacePlaceholders(options.roleArn ?? options.stack.cloudFormationExecutionRoleArn);
        return (0, deploy_stack_1.destroyStack)({
            sdk: env.sdk,
            roleArn: executionRoleArn,
            stack: options.stack,
            deployName: options.deployName,
        }, this.ioHelper);
    }
    async stackExists(options) {
        let env;
        if (options.tryLookupRole) {
            env = await this.envs.accessStackForLookupBestEffort(options.stack);
        }
        else {
            env = await this.envs.accessStackForReadOnlyStackOperations(options.stack);
        }
        const stack = await cloudformation_1.CloudFormationStack.lookup(env.sdk.cloudFormation(), options.deployName ?? options.stack.stackName);
        return stack.exists;
    }
    /**
     * Build a single asset from an asset manifest
     *
     * If an assert manifest artifact is given, the bootstrap stack version
     * will be validated according to the constraints in that manifest artifact.
     * If that is not necessary, `'no-version-validation'` can be passed.
     */
    // eslint-disable-next-line @stylistic/max-len
    async buildSingleAsset(assetArtifact, assetManifest, asset, options) {
        if (assetArtifact !== 'no-version-validation') {
            const env = await this.envs.accessStackForReadOnlyStackOperations(options.stack);
            await this.validateBootstrapStackVersion(options.stack.stackName, assetArtifact.requiresBootstrapStackVersion, assetArtifact.bootstrapStackVersionSsmParameter, env.resources);
        }
        const resolvedEnvironment = await this.envs.resolveStackEnvironment(options.stack);
        const publisher = this.cachedPublisher(assetManifest, resolvedEnvironment, options.stackName);
        await publisher.buildEntry(asset);
        if (publisher.hasFailures) {
            throw new toolkit_error_1.ToolkitError(`Failed to build asset ${asset.displayName(false)}`);
        }
    }
    /**
     * Publish a single asset from an asset manifest
     */
    async publishSingleAsset(assetManifest, asset, options) {
        const stackEnv = await this.envs.resolveStackEnvironment(options.stack);
        // No need to validate anymore, we already did that during build
        const publisher = this.cachedPublisher(assetManifest, stackEnv, options.stackName);
        await publisher.publishEntry(asset, {
            allowCrossAccount: await this.allowCrossAccountAssetPublishingForEnv(options.stack),
            force: options.forcePublish,
        });
        if (publisher.hasFailures) {
            throw new toolkit_error_1.ToolkitError(`Failed to publish asset ${asset.displayName(true)}`);
        }
    }
    async allowCrossAccountAssetPublishingForEnv(stack) {
        if (this._allowCrossAccountAssetPublishing === undefined) {
            const env = await this.envs.accessStackForReadOnlyStackOperations(stack);
            this._allowCrossAccountAssetPublishing = await (0, checks_1.determineAllowCrossAccountAssetPublishing)(env.sdk, this.ioHelper, this.props.toolkitStackName);
        }
        return this._allowCrossAccountAssetPublishing;
    }
    /**
     * Return whether a single asset has been published already
     */
    async isSingleAssetPublished(assetManifest, asset, options) {
        const stackEnv = await this.envs.resolveStackEnvironment(options.stack);
        const publisher = this.cachedPublisher(assetManifest, stackEnv, options.stackName);
        return publisher.isEntryPublished(asset);
    }
    /**
     * Validate that the bootstrap stack has the right version for this stack
     *
     * Call into envResources.validateVersion, but prepend the stack name in case of failure.
     */
    async validateBootstrapStackVersion(stackName, requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter, envResources) {
        try {
            await envResources.validateVersion(requiresBootstrapStackVersion, bootstrapStackVersionSsmParameter);
        }
        catch (e) {
            throw new toolkit_error_1.ToolkitError(`${stackName}: ${(0, util_1.formatErrorMessage)(e)}`);
        }
    }
    cachedPublisher(assetManifest, env, stackName) {
        const existing = this.publisherCache.get(assetManifest);
        if (existing) {
            return existing;
        }
        const prefix = stackName ? `${chalk.bold(stackName)}: ` : '';
        const publisher = new cdk_assets.AssetPublishing(assetManifest, {
            // The AssetPublishing class takes care of role assuming etc, so it's okay to
            // give it a direct `SdkProvider`.
            aws: new asset_publishing_1.PublishingAws(this.assetSdkProvider, env),
            progressListener: new ParallelSafeAssetProgress(prefix, this.ioHelper),
        });
        this.publisherCache.set(assetManifest, publisher);
        return publisher;
    }
}
exports.Deployments = Deployments;
/**
 * Asset progress that doesn't do anything with percentages (currently)
 */
class ParallelSafeAssetProgress extends asset_publishing_1.BasePublishProgressListener {
    prefix;
    constructor(prefix, ioHelper) {
        super(ioHelper);
        this.prefix = prefix;
    }
    getMessage(type, event) {
        return `${this.prefix}${type}: ${event.message}`;
    }
}
function suffixWithErrors(msg, errors) {
    return errors && errors.length > 0 ? `${msg}: ${errors.join(', ')}` : msg;
}
//# sourceMappingURL=data:application/json;base64,