import { getSecretClient, } from '@aws-amplify/backend-secret';
import { randomUUID } from 'node:crypto';
const secretClient = getSecretClient();
/**
 * Entry point for the lambda-backend custom resource to retrieve a backend secret.
 */
export const handler = async (event) => {
    console.info(`Received '${event.RequestType}' event`);
    const physicalId = event.RequestType === 'Create' ? randomUUID() : event.PhysicalResourceId;
    let data = undefined;
    if (event.RequestType === 'Update' || event.RequestType === 'Create') {
        const secretMap = await handleCreateUpdateEvent(secretClient, event);
        data = {
            ...secretMap,
        };
    }
    return {
        RequestId: event.RequestId,
        LogicalResourceId: event.LogicalResourceId,
        PhysicalResourceId: physicalId,
        Data: data,
        StackId: event.StackId,
        NoEcho: true,
        Status: 'SUCCESS',
    };
};
/**
 * Handles create/update event for the secret custom resource.
 */
export const handleCreateUpdateEvent = async (secretClient, event) => {
    const props = event.ResourceProperties;
    const secretMap = {};
    for (const secretName of props.secretNames) {
        let secretValue = undefined;
        try {
            const resp = await secretClient.getSecret({
                namespace: props.namespace,
                name: props.name,
                type: props.type,
            }, {
                name: secretName,
            });
            secretValue = resp.value;
        }
        catch (err) {
            const secretErr = err;
            if (secretErr.httpStatusCode && secretErr.httpStatusCode >= 500) {
                throw new Error(`Failed to retrieve backend secret '${secretName}' for '${props.namespace}/${props.name}'. Reason: ${JSON.stringify(err)}`, { cause: secretErr });
            }
        }
        // if the secret is not available in branch path, try retrieving it at the app-level.
        if (!secretValue) {
            try {
                const resp = await secretClient.getSecret(props.namespace, {
                    name: secretName,
                });
                secretValue = resp.value;
            }
            catch (err) {
                throw new Error(`Failed to retrieve backend secret '${secretName}' for '${props.namespace}'. Reason: ${JSON.stringify(err)}`, { cause: err });
            }
        }
        if (!secretValue) {
            throw new Error(`Unable to find backend secret for backend '${props.namespace}', branch '${props.name}', name '${secretName}'`);
        }
        // store the secret->secretValue pair in the secret map
        secretMap[secretName] = secretValue;
    }
    return secretMap;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9lbmdpbmUvYmFja2VuZC1zZWNyZXQvbGFtYmRhL2JhY2tlbmRfc2VjcmV0X2ZldGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUdMLGVBQWUsR0FDaEIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3pDLE1BQU0sWUFBWSxHQUFHLGVBQWUsRUFBRSxDQUFDO0FBRXZDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsS0FBd0MsRUFDYyxFQUFFO0lBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLENBQUMsV0FBVyxTQUFTLENBQUMsQ0FBQztJQUV0RCxNQUFNLFVBQVUsR0FDZCxLQUFLLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztJQUMzRSxJQUFJLElBQUksR0FBdUMsU0FBUyxDQUFDO0lBQ3pELElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxRQUFRLEVBQUUsQ0FBQztRQUNyRSxNQUFNLFNBQVMsR0FBRyxNQUFNLHVCQUF1QixDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNyRSxJQUFJLEdBQUc7WUFDTCxHQUFHLFNBQVM7U0FDYixDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU87UUFDTCxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7UUFDMUIsaUJBQWlCLEVBQUUsS0FBSyxDQUFDLGlCQUFpQjtRQUMxQyxrQkFBa0IsRUFBRSxVQUFVO1FBQzlCLElBQUksRUFBRSxJQUFJO1FBQ1YsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO1FBQ3RCLE1BQU0sRUFBRSxJQUFJO1FBQ1osTUFBTSxFQUFFLFNBQVM7S0FDNkIsQ0FBQztBQUNuRCxDQUFDLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLEtBQUssRUFDMUMsWUFBMEIsRUFDMUIsS0FBd0MsRUFDUCxFQUFFO0lBQ25DLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxrQkFBb0QsQ0FBQztJQUN6RSxNQUFNLFNBQVMsR0FBMkIsRUFBRSxDQUFDO0lBQzdDLEtBQUssTUFBTSxVQUFVLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzNDLElBQUksV0FBVyxHQUF1QixTQUFTLENBQUM7UUFDaEQsSUFBSSxDQUFDO1lBQ0gsTUFBTSxJQUFJLEdBQUcsTUFBTSxZQUFZLENBQUMsU0FBUyxDQUN2QztnQkFDRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7Z0JBQzFCLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtnQkFDaEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO2FBQ2pCLEVBQ0Q7Z0JBQ0UsSUFBSSxFQUFFLFVBQVU7YUFDakIsQ0FDRixDQUFDO1lBQ0YsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDM0IsQ0FBQztRQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDYixNQUFNLFNBQVMsR0FBRyxHQUFrQixDQUFDO1lBQ3JDLElBQUksU0FBUyxDQUFDLGNBQWMsSUFBSSxTQUFTLENBQUMsY0FBYyxJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUNoRSxNQUFNLElBQUksS0FBSyxDQUNiLHNDQUFzQyxVQUFVLFVBQzlDLEtBQUssQ0FBQyxTQUNSLElBQUksS0FBSyxDQUFDLElBQUksY0FBYyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQ2pELEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUNyQixDQUFDO1lBQ0osQ0FBQztRQUNILENBQUM7UUFFRCxxRkFBcUY7UUFDckYsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2pCLElBQUksQ0FBQztnQkFDSCxNQUFNLElBQUksR0FBRyxNQUFNLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtvQkFDekQsSUFBSSxFQUFFLFVBQVU7aUJBQ2pCLENBQUMsQ0FBQztnQkFDSCxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUMzQixDQUFDO1lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztnQkFDYixNQUFNLElBQUksS0FBSyxDQUNiLHNDQUFzQyxVQUFVLFVBQzlDLEtBQUssQ0FBQyxTQUNSLGNBQWMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUNuQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FDZixDQUFDO1lBQ0osQ0FBQztRQUNILENBQUM7UUFFRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FDYiw4Q0FBOEMsS0FBSyxDQUFDLFNBQVMsY0FBYyxLQUFLLENBQUMsSUFBSSxZQUFZLFVBQVUsR0FBRyxDQUMvRyxDQUFDO1FBQ0osQ0FBQztRQUVELHVEQUF1RDtRQUN2RCxTQUFTLENBQUMsVUFBVSxDQUFDLEdBQUcsV0FBVyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQsXG4gIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VTdWNjZXNzUmVzcG9uc2UsXG59IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHtcbiAgU2VjcmV0Q2xpZW50LFxuICBTZWNyZXRFcnJvcixcbiAgZ2V0U2VjcmV0Q2xpZW50LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1zZWNyZXQnO1xuaW1wb3J0IHsgcmFuZG9tVVVJRCB9IGZyb20gJ25vZGU6Y3J5cHRvJztcbmltcG9ydCB7IFNlY3JldFJlc291cmNlUHJvcHMgfSBmcm9tICcuL2JhY2tlbmRfc2VjcmV0X2ZldGNoZXJfdHlwZXMuanMnO1xuXG5jb25zdCBzZWNyZXRDbGllbnQgPSBnZXRTZWNyZXRDbGllbnQoKTtcblxuLyoqXG4gKiBFbnRyeSBwb2ludCBmb3IgdGhlIGxhbWJkYS1iYWNrZW5kIGN1c3RvbSByZXNvdXJjZSB0byByZXRyaWV2ZSBhIGJhY2tlbmQgc2VjcmV0LlxuICovXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChcbiAgZXZlbnQ6IENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudCxcbik6IFByb21pc2U8Q2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZVN1Y2Nlc3NSZXNwb25zZT4gPT4ge1xuICBjb25zb2xlLmluZm8oYFJlY2VpdmVkICcke2V2ZW50LlJlcXVlc3RUeXBlfScgZXZlbnRgKTtcblxuICBjb25zdCBwaHlzaWNhbElkID1cbiAgICBldmVudC5SZXF1ZXN0VHlwZSA9PT0gJ0NyZWF0ZScgPyByYW5kb21VVUlEKCkgOiBldmVudC5QaHlzaWNhbFJlc291cmNlSWQ7XG4gIGxldCBkYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICBpZiAoZXZlbnQuUmVxdWVzdFR5cGUgPT09ICdVcGRhdGUnIHx8IGV2ZW50LlJlcXVlc3RUeXBlID09PSAnQ3JlYXRlJykge1xuICAgIGNvbnN0IHNlY3JldE1hcCA9IGF3YWl0IGhhbmRsZUNyZWF0ZVVwZGF0ZUV2ZW50KHNlY3JldENsaWVudCwgZXZlbnQpO1xuICAgIGRhdGEgPSB7XG4gICAgICAuLi5zZWNyZXRNYXAsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgUmVxdWVzdElkOiBldmVudC5SZXF1ZXN0SWQsXG4gICAgTG9naWNhbFJlc291cmNlSWQ6IGV2ZW50LkxvZ2ljYWxSZXNvdXJjZUlkLFxuICAgIFBoeXNpY2FsUmVzb3VyY2VJZDogcGh5c2ljYWxJZCxcbiAgICBEYXRhOiBkYXRhLFxuICAgIFN0YWNrSWQ6IGV2ZW50LlN0YWNrSWQsXG4gICAgTm9FY2hvOiB0cnVlLFxuICAgIFN0YXR1czogJ1NVQ0NFU1MnLFxuICB9IGFzIENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VTdWNjZXNzUmVzcG9uc2U7XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgY3JlYXRlL3VwZGF0ZSBldmVudCBmb3IgdGhlIHNlY3JldCBjdXN0b20gcmVzb3VyY2UuXG4gKi9cbmV4cG9ydCBjb25zdCBoYW5kbGVDcmVhdGVVcGRhdGVFdmVudCA9IGFzeW5jIChcbiAgc2VjcmV0Q2xpZW50OiBTZWNyZXRDbGllbnQsXG4gIGV2ZW50OiBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnQsXG4pOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+ID0+IHtcbiAgY29uc3QgcHJvcHMgPSBldmVudC5SZXNvdXJjZVByb3BlcnRpZXMgYXMgdW5rbm93biBhcyBTZWNyZXRSZXNvdXJjZVByb3BzO1xuICBjb25zdCBzZWNyZXRNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgZm9yIChjb25zdCBzZWNyZXROYW1lIG9mIHByb3BzLnNlY3JldE5hbWVzKSB7XG4gICAgbGV0IHNlY3JldFZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBzZWNyZXRDbGllbnQuZ2V0U2VjcmV0KFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZXNwYWNlOiBwcm9wcy5uYW1lc3BhY2UsXG4gICAgICAgICAgbmFtZTogcHJvcHMubmFtZSxcbiAgICAgICAgICB0eXBlOiBwcm9wcy50eXBlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogc2VjcmV0TmFtZSxcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgICBzZWNyZXRWYWx1ZSA9IHJlc3AudmFsdWU7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBzZWNyZXRFcnIgPSBlcnIgYXMgU2VjcmV0RXJyb3I7XG4gICAgICBpZiAoc2VjcmV0RXJyLmh0dHBTdGF0dXNDb2RlICYmIHNlY3JldEVyci5odHRwU3RhdHVzQ29kZSA+PSA1MDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBGYWlsZWQgdG8gcmV0cmlldmUgYmFja2VuZCBzZWNyZXQgJyR7c2VjcmV0TmFtZX0nIGZvciAnJHtcbiAgICAgICAgICAgIHByb3BzLm5hbWVzcGFjZVxuICAgICAgICAgIH0vJHtwcm9wcy5uYW1lfScuIFJlYXNvbjogJHtKU09OLnN0cmluZ2lmeShlcnIpfWAsXG4gICAgICAgICAgeyBjYXVzZTogc2VjcmV0RXJyIH0sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaWYgdGhlIHNlY3JldCBpcyBub3QgYXZhaWxhYmxlIGluIGJyYW5jaCBwYXRoLCB0cnkgcmV0cmlldmluZyBpdCBhdCB0aGUgYXBwLWxldmVsLlxuICAgIGlmICghc2VjcmV0VmFsdWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCBzZWNyZXRDbGllbnQuZ2V0U2VjcmV0KHByb3BzLm5hbWVzcGFjZSwge1xuICAgICAgICAgIG5hbWU6IHNlY3JldE5hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICBzZWNyZXRWYWx1ZSA9IHJlc3AudmFsdWU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBGYWlsZWQgdG8gcmV0cmlldmUgYmFja2VuZCBzZWNyZXQgJyR7c2VjcmV0TmFtZX0nIGZvciAnJHtcbiAgICAgICAgICAgIHByb3BzLm5hbWVzcGFjZVxuICAgICAgICAgIH0nLiBSZWFzb246ICR7SlNPTi5zdHJpbmdpZnkoZXJyKX1gLFxuICAgICAgICAgIHsgY2F1c2U6IGVyciB9LFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghc2VjcmV0VmFsdWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFVuYWJsZSB0byBmaW5kIGJhY2tlbmQgc2VjcmV0IGZvciBiYWNrZW5kICcke3Byb3BzLm5hbWVzcGFjZX0nLCBicmFuY2ggJyR7cHJvcHMubmFtZX0nLCBuYW1lICcke3NlY3JldE5hbWV9J2AsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHN0b3JlIHRoZSBzZWNyZXQtPnNlY3JldFZhbHVlIHBhaXIgaW4gdGhlIHNlY3JldCBtYXBcbiAgICBzZWNyZXRNYXBbc2VjcmV0TmFtZV0gPSBzZWNyZXRWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWNyZXRNYXA7XG59O1xuIl19