"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateErrorToTelemetryErrorDetails = void 0;
const serializable_error_1 = require("./serializable_error");
/**
 * Translates an error into the shape of error details for telemetry
 */
const translateErrorToTelemetryErrorDetails = (error) => {
    if (!error) {
        return undefined;
    }
    let currentError = error;
    let errorDetails;
    try {
        while (currentError) {
            const serializedError = new serializable_error_1.SerializableError(currentError);
            const errorDetail = {
                name: serializedError.name,
                message: serializedError.message,
                stack: serializedError.stack ?? '',
            };
            if (errorDetails) {
                // this reverses the nesting so lowest level error is the top level error in our telemetry
                errorDetail.caused = errorDetails;
            }
            errorDetails = errorDetail;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            currentError = currentError.cause;
        }
    }
    catch {
        // Don't propogate errors related to not being able to translate to error data, return what was collected
        return errorDetails;
    }
    return errorDetails;
};
exports.translateErrorToTelemetryErrorDetails = translateErrorToTelemetryErrorDetails;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlX2Vycm9yX3RvX3RlbGVtZXRyeV9lcnJvcl9kZXRhaWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RlbGVtZXRyeS90cmFuc2xhdGVfZXJyb3JfdG9fdGVsZW1ldHJ5X2Vycm9yX2RldGFpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkRBQXlEO0FBR3pEOztHQUVHO0FBQ0ksTUFBTSxxQ0FBcUMsR0FBRyxDQUNuRCxLQUFhLEVBQ2MsRUFBRTtJQUM3QixJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDWCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBQ0QsSUFBSSxZQUFZLEdBQXNCLEtBQUssQ0FBQztJQUM1QyxJQUFJLFlBQXVDLENBQUM7SUFFNUMsSUFBSSxDQUFDO1FBQ0gsT0FBTyxZQUFZLEVBQUUsQ0FBQztZQUNwQixNQUFNLGVBQWUsR0FBRyxJQUFJLHNDQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzVELE1BQU0sV0FBVyxHQUE4QjtnQkFDN0MsSUFBSSxFQUFFLGVBQWUsQ0FBQyxJQUFJO2dCQUMxQixPQUFPLEVBQUUsZUFBZSxDQUFDLE9BQU87Z0JBQ2hDLEtBQUssRUFBRSxlQUFlLENBQUMsS0FBSyxJQUFJLEVBQUU7YUFDbkMsQ0FBQztZQUVGLElBQUksWUFBWSxFQUFFLENBQUM7Z0JBQ2pCLDBGQUEwRjtnQkFDMUYsV0FBVyxDQUFDLE1BQU0sR0FBRyxZQUFZLENBQUM7WUFDcEMsQ0FBQztZQUVELFlBQVksR0FBRyxXQUFXLENBQUM7WUFDM0IsOERBQThEO1lBQzlELFlBQVksR0FBSSxZQUFvQixDQUFDLEtBQUssQ0FBQztRQUM3QyxDQUFDO0lBQ0gsQ0FBQztJQUFDLE1BQU0sQ0FBQztRQUNQLHlHQUF5RztRQUN6RyxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQsT0FBTyxZQUFZLENBQUM7QUFDdEIsQ0FBQyxDQUFDO0FBakNXLFFBQUEscUNBQXFDLHlDQWlDaEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXJpYWxpemFibGVFcnJvciB9IGZyb20gJy4vc2VyaWFsaXphYmxlX2Vycm9yJztcbmltcG9ydCB7IFRlbGVtZXRyeVBheWxvYWQgfSBmcm9tICcuL3RlbGVtZXRyeV9wYXlsb2FkJztcblxuLyoqXG4gKiBUcmFuc2xhdGVzIGFuIGVycm9yIGludG8gdGhlIHNoYXBlIG9mIGVycm9yIGRldGFpbHMgZm9yIHRlbGVtZXRyeVxuICovXG5leHBvcnQgY29uc3QgdHJhbnNsYXRlRXJyb3JUb1RlbGVtZXRyeUVycm9yRGV0YWlscyA9IChcbiAgZXJyb3I/OiBFcnJvcixcbik6IFRlbGVtZXRyeVBheWxvYWRbJ2Vycm9yJ10gPT4ge1xuICBpZiAoIWVycm9yKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICBsZXQgY3VycmVudEVycm9yOiBFcnJvciB8IHVuZGVmaW5lZCA9IGVycm9yO1xuICBsZXQgZXJyb3JEZXRhaWxzOiBUZWxlbWV0cnlQYXlsb2FkWydlcnJvciddO1xuXG4gIHRyeSB7XG4gICAgd2hpbGUgKGN1cnJlbnRFcnJvcikge1xuICAgICAgY29uc3Qgc2VyaWFsaXplZEVycm9yID0gbmV3IFNlcmlhbGl6YWJsZUVycm9yKGN1cnJlbnRFcnJvcik7XG4gICAgICBjb25zdCBlcnJvckRldGFpbDogVGVsZW1ldHJ5UGF5bG9hZFsnZXJyb3InXSA9IHtcbiAgICAgICAgbmFtZTogc2VyaWFsaXplZEVycm9yLm5hbWUsXG4gICAgICAgIG1lc3NhZ2U6IHNlcmlhbGl6ZWRFcnJvci5tZXNzYWdlLFxuICAgICAgICBzdGFjazogc2VyaWFsaXplZEVycm9yLnN0YWNrID8/ICcnLFxuICAgICAgfTtcblxuICAgICAgaWYgKGVycm9yRGV0YWlscykge1xuICAgICAgICAvLyB0aGlzIHJldmVyc2VzIHRoZSBuZXN0aW5nIHNvIGxvd2VzdCBsZXZlbCBlcnJvciBpcyB0aGUgdG9wIGxldmVsIGVycm9yIGluIG91ciB0ZWxlbWV0cnlcbiAgICAgICAgZXJyb3JEZXRhaWwuY2F1c2VkID0gZXJyb3JEZXRhaWxzO1xuICAgICAgfVxuXG4gICAgICBlcnJvckRldGFpbHMgPSBlcnJvckRldGFpbDtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICBjdXJyZW50RXJyb3IgPSAoY3VycmVudEVycm9yIGFzIGFueSkuY2F1c2U7XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICAvLyBEb24ndCBwcm9wb2dhdGUgZXJyb3JzIHJlbGF0ZWQgdG8gbm90IGJlaW5nIGFibGUgdG8gdHJhbnNsYXRlIHRvIGVycm9yIGRhdGEsIHJldHVybiB3aGF0IHdhcyBjb2xsZWN0ZWRcbiAgICByZXR1cm4gZXJyb3JEZXRhaWxzO1xuICB9XG5cbiAgcmV0dXJuIGVycm9yRGV0YWlscztcbn07XG4iXX0=