import { ArgumentsCamelCase, Argv, CommandModule } from 'yargs';
import { SandboxBackendIdResolver } from '../sandbox_id_resolver.js';
import { SandboxCommandGlobalOptions } from '../option_types.js';
/**
 * Command that generates policy template with permissions to be able to run seed in sandbox environment
 */
export declare class SandboxSeedGeneratePolicyCommand implements CommandModule<object> {
    private readonly backendIdResolver;
    private readonly seedPolicyTemplate;
    /**
     * @inheritDoc
     */
    readonly command: string;
    /**
     * @inheritDoc
     */
    readonly describe: string;
    /**
     * Generates policy to run seed, is a subcommand of seed
     */
    constructor(backendIdResolver: SandboxBackendIdResolver, seedPolicyTemplate?: (backendId: import("@aws-amplify/plugin-types").BackendIdentifier, generateClientConfiguration?: <T extends import("@aws-amplify/client-config").ClientConfigVersion>(backendIdentifier: import("@aws-amplify/deployed-backend-client").DeployedBackendIdentifier, version: T, awsClientProvider?: import("@aws-amplify/plugin-types").AWSClientProvider<{
        getS3Client: import("@aws-sdk/client-s3").S3Client;
        getAmplifyClient: import("@aws-sdk/client-amplify").AmplifyClient;
        getCloudFormationClient: import("@aws-sdk/client-cloudformation").CloudFormationClient;
    }>) => Promise<import("@aws-amplify/client-config").ClientConfigVersionTemplateType<T>>, stsClient?: import("@aws-sdk/client-sts").STSClient) => Promise<import("aws-cdk-lib/aws-iam").PolicyDocument>);
    /**
     * @inheritDoc
     */
    handler: (args: ArgumentsCamelCase<SandboxCommandGlobalOptions>) => Promise<void>;
    /**
     * @inheritDoc
     */
    builder: (yargs: Argv) => Argv<{}>;
}
//# sourceMappingURL=sandbox_seed_policy_command.d.ts.map