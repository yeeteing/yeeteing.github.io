"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DockerFactory = exports.Docker = void 0;
const fs = require("fs");
const os = require("os");
const path = require("path");
const docker_credentials_1 = require("./docker-credentials");
const shell_1 = require("./shell");
const util_1 = require("./util");
const progress_1 = require("../progress");
var InspectImageErrorCode;
(function (InspectImageErrorCode) {
    InspectImageErrorCode[InspectImageErrorCode["Docker"] = 1] = "Docker";
    InspectImageErrorCode[InspectImageErrorCode["Podman"] = 125] = "Podman";
})(InspectImageErrorCode || (InspectImageErrorCode = {}));
class Docker {
    constructor(eventEmitter, subprocessOutputDestination) {
        this.eventEmitter = eventEmitter;
        this.subprocessOutputDestination = subprocessOutputDestination;
        this.configDir = undefined;
    }
    /**
     * Whether an image with the given tag exists
     */
    async exists(tag) {
        try {
            await this.execute(['inspect', tag], {
                subprocessOutputDestination: 'ignore',
            });
            return true;
        }
        catch (e) {
            const error = e;
            /**
             * The only error we expect to be thrown will have this property and value.
             * If it doesn't, it's unrecognized so re-throw it.
             */
            if (error.code !== 'PROCESS_FAILED') {
                throw error;
            }
            /**
             * If we know the shell command above returned an error, check to see
             * if the exit code is one we know to actually mean that the image doesn't
             * exist.
             */
            switch (error.exitCode) {
                case InspectImageErrorCode.Docker:
                case InspectImageErrorCode.Podman:
                    // Docker and Podman will return this exit code when an image doesn't exist, return false
                    // context: https://github.com/aws/aws-cdk/issues/16209
                    return false;
                default:
                    // This is an error but it's not an exit code we recognize, throw.
                    throw error;
            }
        }
    }
    async build(options) {
        const buildCommand = [
            'build',
            ...flatten(Object.entries(options.buildArgs || {}).map(([k, v]) => ['--build-arg', `${k}=${v}`])),
            ...flatten(Object.entries(options.buildSecrets || {}).map(([k, v]) => ['--secret', `id=${k},${v}`])),
            ...(options.buildSsh ? ['--ssh', options.buildSsh] : []),
            '--tag',
            options.tag,
            ...(options.target ? ['--target', options.target] : []),
            ...(options.file ? ['--file', options.file] : []),
            ...(options.networkMode ? ['--network', options.networkMode] : []),
            ...(options.platform ? ['--platform', options.platform] : []),
            ...(options.outputs ? options.outputs.map((output) => [`--output=${output}`]) : []),
            ...(options.cacheFrom
                ? [
                    ...options.cacheFrom
                        .map((cacheFrom) => ['--cache-from', this.cacheOptionToFlag(cacheFrom)])
                        .flat(),
                ]
                : []),
            ...(options.cacheTo ? ['--cache-to', this.cacheOptionToFlag(options.cacheTo)] : []),
            ...(options.cacheDisabled ? ['--no-cache'] : []),
            '.',
        ];
        await this.execute(buildCommand, {
            cwd: options.directory,
            subprocessOutputDestination: this.subprocessOutputDestination,
            env: {
                BUILDX_NO_DEFAULT_ATTESTATIONS: '1', // Docker Build adds provenance attestations by default that confuse cdk-assets
            },
        });
    }
    /**
     * Get credentials from ECR and run docker login
     */
    async login(ecr) {
        const credentials = await (0, docker_credentials_1.obtainEcrCredentials)(ecr, this.eventEmitter);
        // Use --password-stdin otherwise docker will complain. Loudly.
        await this.execute(['login', '--username', credentials.username, '--password-stdin', credentials.endpoint.replace(/^https?:\/\/|\/$/g, '')], {
            input: credentials.password,
            // Need to ignore otherwise Docker will complain
            // 'WARNING! Your password will be stored unencrypted'
            // doesn't really matter since it's a token.
            subprocessOutputDestination: 'ignore',
        });
    }
    async tag(sourceTag, targetTag) {
        await this.execute(['tag', sourceTag, targetTag]);
    }
    async push(options) {
        await this.execute(['push', options.tag], {
            subprocessOutputDestination: this.subprocessOutputDestination,
        });
    }
    /**
     * If a CDK Docker Credentials file exists, creates a new Docker config directory.
     * Sets up `docker-credential-cdk-assets` to be the credential helper for each domain in the CDK config.
     * All future commands (e.g., `build`, `push`) will use this config.
     *
     * See https://docs.docker.com/engine/reference/commandline/login/#credential-helpers for more details on cred helpers.
     *
     * @returns true if CDK config was found and configured, false otherwise
     */
    configureCdkCredentials() {
        const config = (0, docker_credentials_1.cdkCredentialsConfig)();
        if (!config) {
            return false;
        }
        this.configDir = fs.mkdtempSync(path.join(os.tmpdir(), 'cdkDockerConfig'));
        const domains = Object.keys(config.domainCredentials);
        const credHelpers = domains.reduce((map, domain) => {
            map[domain] = 'cdk-assets'; // Use docker-credential-cdk-assets for this domain
            return map;
        }, {});
        fs.writeFileSync(path.join(this.configDir, 'config.json'), JSON.stringify({ credHelpers }), {
            encoding: 'utf-8',
        });
        return true;
    }
    /**
     * Removes any configured Docker config directory.
     * All future commands (e.g., `build`, `push`) will use the default config.
     *
     * This is useful after calling `configureCdkCredentials` to reset to default credentials.
     */
    resetAuthPlugins() {
        this.configDir = undefined;
    }
    async execute(args, options = {}) {
        const configArgs = this.configDir ? ['--config', this.configDir] : [];
        const pathToCdkAssets = path.resolve(__dirname, '..', '..', 'bin');
        const shellEventPublisher = (0, progress_1.shellEventPublisherFromEventEmitter)(this.eventEmitter);
        try {
            await (0, shell_1.shell)([getDockerCmd(), ...configArgs, ...args], {
                ...options,
                shellEventPublisher: shellEventPublisher,
                env: {
                    ...process.env,
                    ...options.env,
                    PATH: `${pathToCdkAssets}${path.delimiter}${options.env?.PATH ?? process.env.PATH}`,
                },
            });
        }
        catch (e) {
            if (e.code === 'ENOENT') {
                throw new Error(`Failed to find and execute '${getDockerCmd()}' while attempting to build a container asset. Please install '${getDockerCmd()}' and try again. (Or set the 'CDK_DOCKER ' environment variable to choose a different compatible container client.)`);
            }
            throw e;
        }
    }
    cacheOptionToFlag(option) {
        let flag = `type=${option.type}`;
        if (option.params) {
            flag +=
                ',' +
                    Object.entries(option.params)
                        .map(([k, v]) => `${k}=${v}`)
                        .join(',');
        }
        return flag;
    }
}
exports.Docker = Docker;
/**
 * Helps get appropriately configured Docker instances during the container
 * image publishing process.
 */
class DockerFactory {
    constructor() {
        this.enterLoggedInDestinationsCriticalSection = (0, util_1.createCriticalSection)();
        this.loggedInDestinations = new Set();
    }
    /**
     * Gets a Docker instance for building images.
     */
    async forBuild(options) {
        const docker = new Docker(options.eventEmitter, options.subprocessOutputDestination);
        // Default behavior is to login before build so that the Dockerfile can reference images in the ECR repo
        // However, if we're in a pipelines environment (for example),
        // we may have alternative credentials to the default ones to use for the build itself.
        // If the special config file is present, delay the login to the default credentials until the push.
        // If the config file is present, we will configure and use those credentials for the build.
        let cdkDockerCredentialsConfigured = docker.configureCdkCredentials();
        if (!cdkDockerCredentialsConfigured) {
            await this.loginOncePerDestination(docker, options);
        }
        return docker;
    }
    /**
     * Gets a Docker instance for pushing images to ECR.
     */
    async forEcrPush(options) {
        const docker = new Docker(options.eventEmitter, options.subprocessOutputDestination);
        await this.loginOncePerDestination(docker, options);
        return docker;
    }
    async loginOncePerDestination(docker, options) {
        // Changes: 012345678910.dkr.ecr.us-west-2.amazonaws.com/tagging-test
        // To this: 012345678910.dkr.ecr.us-west-2.amazonaws.com
        const repositoryDomain = options.repoUri.split('/')[0];
        // Ensure one-at-a-time access to loggedInDestinations.
        await this.enterLoggedInDestinationsCriticalSection(async () => {
            if (this.loggedInDestinations.has(repositoryDomain)) {
                return;
            }
            await docker.login(options.ecr);
            this.loggedInDestinations.add(repositoryDomain);
        });
    }
}
exports.DockerFactory = DockerFactory;
function getDockerCmd() {
    return process.env.CDK_DOCKER ?? 'docker';
}
function flatten(x) {
    return Array.prototype.concat([], ...x);
}
//# sourceMappingURL=data:application/json;base64,