import { generateModels } from '@aws-amplify/graphql-generator';
/**
 * Generates GraphQL types for a given AppSync API
 */
export class StackMetadataGraphqlModelsGenerator {
    fetchSchema;
    resultBuilder;
    /**
     * Configures the AppSyncGraphqlTypesGenerator
     */
    constructor(fetchSchema, resultBuilder) {
        this.fetchSchema = fetchSchema;
        this.resultBuilder = resultBuilder;
    }
    generateModels = async ({ target, generateIndexRules, emitAuthProvider, useExperimentalPipelinedTransformer, transformerVersion, respectPrimaryKeyAttributesOnConnectionField, generateModelsForLazyLoadAndCustomSelectionSet, addTimestampFields, handleListNullabilityTransparently, }) => {
        const schema = await this.fetchSchema();
        if (!schema) {
            // eslint-disable-next-line @aws-amplify/amplify-backend-rules/prefer-amplify-errors
            throw new Error('Invalid schema');
        }
        const generatedModels = await generateModels({
            schema,
            target,
            generateIndexRules,
            emitAuthProvider,
            useExperimentalPipelinedTransformer,
            transformerVersion,
            respectPrimaryKeyAttributesOnConnectionField,
            generateModelsForLazyLoadAndCustomSelectionSet,
            addTimestampFields,
            handleListNullabilityTransparently,
        });
        return this.resultBuilder(generatedModels);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF9tb2RlbHNfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dyYXBocWxfbW9kZWxzX2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFPaEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW1DO0lBT3BDO0lBQ0E7SUFMVjs7T0FFRztJQUNILFlBQ1UsV0FBa0MsRUFDbEMsYUFFYTtRQUhiLGdCQUFXLEdBQVgsV0FBVyxDQUF1QjtRQUNsQyxrQkFBYSxHQUFiLGFBQWEsQ0FFQTtJQUNwQixDQUFDO0lBRUosY0FBYyxHQUFHLEtBQUssRUFBRSxFQUN0QixNQUFNLEVBQ04sa0JBQWtCLEVBQ2xCLGdCQUFnQixFQUNoQixtQ0FBbUMsRUFDbkMsa0JBQWtCLEVBQ2xCLDRDQUE0QyxFQUM1Qyw4Q0FBOEMsRUFDOUMsa0JBQWtCLEVBQ2xCLGtDQUFrQyxHQUNQLEVBQUUsRUFBRTtRQUMvQixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUV4QyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDWixvRkFBb0Y7WUFDcEYsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFFRCxNQUFNLGVBQWUsR0FBRyxNQUFNLGNBQWMsQ0FBQztZQUMzQyxNQUFNO1lBQ04sTUFBTTtZQUNOLGtCQUFrQjtZQUNsQixnQkFBZ0I7WUFDaEIsbUNBQW1DO1lBQ25DLGtCQUFrQjtZQUNsQiw0Q0FBNEM7WUFDNUMsOENBQThDO1lBQzlDLGtCQUFrQjtZQUNsQixrQ0FBa0M7U0FDbkMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuZXJhdGVNb2RlbHMgfSBmcm9tICdAYXdzLWFtcGxpZnkvZ3JhcGhxbC1nZW5lcmF0b3InO1xuaW1wb3J0IHtcbiAgR2VuZXJhdGlvblJlc3VsdCxcbiAgR3JhcGhxbE1vZGVsc0dlbmVyYXRvcixcbiAgTW9kZWxzR2VuZXJhdGlvblBhcmFtZXRlcnMsXG59IGZyb20gJy4vbW9kZWxfZ2VuZXJhdG9yLmpzJztcblxuLyoqXG4gKiBHZW5lcmF0ZXMgR3JhcGhRTCB0eXBlcyBmb3IgYSBnaXZlbiBBcHBTeW5jIEFQSVxuICovXG5leHBvcnQgY2xhc3MgU3RhY2tNZXRhZGF0YUdyYXBocWxNb2RlbHNHZW5lcmF0b3JcbiAgaW1wbGVtZW50cyBHcmFwaHFsTW9kZWxzR2VuZXJhdG9yXG57XG4gIC8qKlxuICAgKiBDb25maWd1cmVzIHRoZSBBcHBTeW5jR3JhcGhxbFR5cGVzR2VuZXJhdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGZldGNoU2NoZW1hOiAoKSA9PiBQcm9taXNlPHN0cmluZz4sXG4gICAgcHJpdmF0ZSByZXN1bHRCdWlsZGVyOiAoXG4gICAgICBmaWxlTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxuICAgICkgPT4gR2VuZXJhdGlvblJlc3VsdCxcbiAgKSB7fVxuXG4gIGdlbmVyYXRlTW9kZWxzID0gYXN5bmMgKHtcbiAgICB0YXJnZXQsXG4gICAgZ2VuZXJhdGVJbmRleFJ1bGVzLFxuICAgIGVtaXRBdXRoUHJvdmlkZXIsXG4gICAgdXNlRXhwZXJpbWVudGFsUGlwZWxpbmVkVHJhbnNmb3JtZXIsXG4gICAgdHJhbnNmb3JtZXJWZXJzaW9uLFxuICAgIHJlc3BlY3RQcmltYXJ5S2V5QXR0cmlidXRlc09uQ29ubmVjdGlvbkZpZWxkLFxuICAgIGdlbmVyYXRlTW9kZWxzRm9yTGF6eUxvYWRBbmRDdXN0b21TZWxlY3Rpb25TZXQsXG4gICAgYWRkVGltZXN0YW1wRmllbGRzLFxuICAgIGhhbmRsZUxpc3ROdWxsYWJpbGl0eVRyYW5zcGFyZW50bHksXG4gIH06IE1vZGVsc0dlbmVyYXRpb25QYXJhbWV0ZXJzKSA9PiB7XG4gICAgY29uc3Qgc2NoZW1hID0gYXdhaXQgdGhpcy5mZXRjaFNjaGVtYSgpO1xuXG4gICAgaWYgKCFzY2hlbWEpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYXdzLWFtcGxpZnkvYW1wbGlmeS1iYWNrZW5kLXJ1bGVzL3ByZWZlci1hbXBsaWZ5LWVycm9yc1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNjaGVtYScpO1xuICAgIH1cblxuICAgIGNvbnN0IGdlbmVyYXRlZE1vZGVscyA9IGF3YWl0IGdlbmVyYXRlTW9kZWxzKHtcbiAgICAgIHNjaGVtYSxcbiAgICAgIHRhcmdldCxcbiAgICAgIGdlbmVyYXRlSW5kZXhSdWxlcyxcbiAgICAgIGVtaXRBdXRoUHJvdmlkZXIsXG4gICAgICB1c2VFeHBlcmltZW50YWxQaXBlbGluZWRUcmFuc2Zvcm1lcixcbiAgICAgIHRyYW5zZm9ybWVyVmVyc2lvbixcbiAgICAgIHJlc3BlY3RQcmltYXJ5S2V5QXR0cmlidXRlc09uQ29ubmVjdGlvbkZpZWxkLFxuICAgICAgZ2VuZXJhdGVNb2RlbHNGb3JMYXp5TG9hZEFuZEN1c3RvbVNlbGVjdGlvblNldCxcbiAgICAgIGFkZFRpbWVzdGFtcEZpZWxkcyxcbiAgICAgIGhhbmRsZUxpc3ROdWxsYWJpbGl0eVRyYW5zcGFyZW50bHksXG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcy5yZXN1bHRCdWlsZGVyKGdlbmVyYXRlZE1vZGVscyk7XG4gIH07XG59XG4iXX0=