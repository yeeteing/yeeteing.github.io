"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackMetadataBackendOutputStorageStrategy = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
/**
 * Implementation of BackendOutputStorageStrategy that stores config data in stack metadata and outputs
 */
class StackMetadataBackendOutputStorageStrategy {
    stack;
    lazyListValueMap = new Map();
    /**
     * Initialize the instance with a stack.
     *
     * If the stack is an AmplifyStack, set a parameter in SSM so the stack can be identified later by the project environment
     */
    constructor(stack) {
        this.stack = stack;
    }
    /**
     * Store construct output as stack output and add metadata to the metadata object.
     */
    addBackendOutputEntry = (keyName, backendOutputEntry) => {
        // add all the data values as stack outputs
        Object.entries(backendOutputEntry.payload).forEach(([key, value]) => {
            new aws_cdk_lib_1.CfnOutput(this.stack, key, { value });
        });
        const metadata = this.stack.templateOptions.metadata || {};
        const existingMetadataEntry = metadata[keyName];
        this.addOrUpdateMetadata(existingMetadataEntry, keyName, backendOutputEntry);
    };
    /**
     * Lazily construct and append to output list as stack output and add metadata to the metadata object.
     */
    appendToBackendOutputList = (keyName, backendOutputEntry) => {
        const version = backendOutputEntry.version;
        let listsMap = this.lazyListValueMap.get(keyName);
        const metadata = this.stack.templateOptions.metadata || {};
        const existingMetadataEntry = metadata[keyName];
        if (existingMetadataEntry) {
            if (existingMetadataEntry.version !== version) {
                throw new Error(`Metadata entry for ${keyName} at version ${existingMetadataEntry.version} already exists. Cannot add another entry for the same key at version ${version}.`);
            }
        }
        this.addOrUpdateMetadata(existingMetadataEntry, keyName, backendOutputEntry);
        Object.entries(backendOutputEntry.payload ?? []).forEach(([listName, value]) => {
            if (!value) {
                return;
            }
            if (!listsMap) {
                listsMap = new Map();
                this.lazyListValueMap.set(keyName, listsMap);
            }
            let outputList = listsMap.get(listName);
            if (outputList) {
                outputList.push(value);
            }
            else {
                outputList = [value];
                listsMap.set(listName, outputList);
                new aws_cdk_lib_1.CfnOutput(this.stack, listName, {
                    value: aws_cdk_lib_1.Lazy.string({ produce: () => JSON.stringify(outputList) }),
                });
            }
        });
    };
    /**
     * Add or update metadata entry.
     * @param existingMetadataEntry - The existing metadata entry.
     * @param keyName - The key name.
     * @param backendOutputEntry - The backend output entry.
     */
    addOrUpdateMetadata(existingMetadataEntry, keyName, backendOutputEntry) {
        if (existingMetadataEntry) {
            this.stack.addMetadata(keyName, {
                version: backendOutputEntry.version,
                stackOutputs: [
                    ...new Set([
                        ...Object.keys(backendOutputEntry.payload),
                        ...existingMetadataEntry.stackOutputs,
                    ]),
                ],
            });
        }
        else {
            this.stack.addMetadata(keyName, {
                version: backendOutputEntry.version,
                stackOutputs: Object.keys(backendOutputEntry.payload),
            });
        }
    }
}
exports.StackMetadataBackendOutputStorageStrategy = StackMetadataBackendOutputStorageStrategy;
//# sourceMappingURL=data:application/json;base64,