import yargs from 'yargs';
import { createGenerateCommand } from './commands/generate/generate_command_factory.js';
import { createSandboxCommand } from './commands/sandbox/sandbox_command_factory.js';
import { createPipelineDeployCommand } from './commands/pipeline-deploy/pipeline_deploy_command_factory.js';
import { createConfigureCommand } from './commands/configure/configure_command_factory.js';
import { createInfoCommand } from './commands/info/info_command_factory.js';
import { createNoticesCommand } from './commands/notices/notices_command_factory.js';
import * as path from 'path';
/**
 * Creates main parser.
 */
export const createMainParser = (libraryVersion, noticesRenderer) => {
    const parser = yargs()
        .version(libraryVersion)
        // This option is being used indirectly to configure the log level of the Printer instance.
        // refer: https://github.com/aws-amplify/amplify-backend/blob/main/packages/cli/src/printer.ts
        .options('debug', {
        type: 'boolean',
        default: false,
        description: 'Print debug logs to the console',
    })
        .strict()
        // pnpm places the command bin file in `ampx.js` instead of `ampx` which causes yargs to think the command name is `ampx.js`.
        // This tells yargs that the command name is `ampx`.
        .scriptName(path.parse(process.argv[1]).name)
        .command(createGenerateCommand())
        .command(createSandboxCommand(noticesRenderer))
        .command(createPipelineDeployCommand())
        .command(createConfigureCommand())
        .command(createInfoCommand())
        .command(createNoticesCommand())
        .help()
        .alias('h', 'help')
        .alias('v', 'version')
        .demandCommand()
        .strictCommands()
        .recommendCommands()
        .fail(false);
    return parser;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbl9wYXJzZXJfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluX3BhcnNlcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBZSxNQUFNLE9BQU8sQ0FBQztBQUNwQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpREFBaUQsQ0FBQztBQUN4RixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNyRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQztBQUM1RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMzRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUM1RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUNyRixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUc3Qjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLENBQzlCLGNBQXNCLEVBQ3RCLGVBQWdDLEVBQzFCLEVBQUU7SUFDUixNQUFNLE1BQU0sR0FBRyxLQUFLLEVBQUU7U0FDbkIsT0FBTyxDQUFDLGNBQWMsQ0FBQztRQUN4QiwyRkFBMkY7UUFDM0YsOEZBQThGO1NBQzdGLE9BQU8sQ0FBQyxPQUFPLEVBQUU7UUFDaEIsSUFBSSxFQUFFLFNBQVM7UUFDZixPQUFPLEVBQUUsS0FBSztRQUNkLFdBQVcsRUFBRSxpQ0FBaUM7S0FDL0MsQ0FBQztTQUNELE1BQU0sRUFBRTtRQUNULDZIQUE2SDtRQUM3SCxvREFBb0Q7U0FDbkQsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztTQUM1QyxPQUFPLENBQUMscUJBQXFCLEVBQUUsQ0FBQztTQUNoQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDOUMsT0FBTyxDQUFDLDJCQUEyQixFQUFFLENBQUM7U0FDdEMsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7U0FDakMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDNUIsT0FBTyxDQUFDLG9CQUFvQixFQUFFLENBQUM7U0FDL0IsSUFBSSxFQUFFO1NBQ04sS0FBSyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUM7U0FDbEIsS0FBSyxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUM7U0FDckIsYUFBYSxFQUFFO1NBQ2YsY0FBYyxFQUFFO1NBQ2hCLGlCQUFpQixFQUFFO1NBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUVmLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB5YXJncywgeyBBcmd2IH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgY3JlYXRlR2VuZXJhdGVDb21tYW5kIH0gZnJvbSAnLi9jb21tYW5kcy9nZW5lcmF0ZS9nZW5lcmF0ZV9jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgY3JlYXRlU2FuZGJveENvbW1hbmQgfSBmcm9tICcuL2NvbW1hbmRzL3NhbmRib3gvc2FuZGJveF9jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgY3JlYXRlUGlwZWxpbmVEZXBsb3lDb21tYW5kIH0gZnJvbSAnLi9jb21tYW5kcy9waXBlbGluZS1kZXBsb3kvcGlwZWxpbmVfZGVwbG95X2NvbW1hbmRfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVDb25maWd1cmVDb21tYW5kIH0gZnJvbSAnLi9jb21tYW5kcy9jb25maWd1cmUvY29uZmlndXJlX2NvbW1hbmRfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVJbmZvQ29tbWFuZCB9IGZyb20gJy4vY29tbWFuZHMvaW5mby9pbmZvX2NvbW1hbmRfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBjcmVhdGVOb3RpY2VzQ29tbWFuZCB9IGZyb20gJy4vY29tbWFuZHMvbm90aWNlcy9ub3RpY2VzX2NvbW1hbmRfZmFjdG9yeS5qcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgTm90aWNlc1JlbmRlcmVyIH0gZnJvbSAnLi9ub3RpY2VzL25vdGljZXNfcmVuZGVyZXIuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgbWFpbiBwYXJzZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVNYWluUGFyc2VyID0gKFxuICBsaWJyYXJ5VmVyc2lvbjogc3RyaW5nLFxuICBub3RpY2VzUmVuZGVyZXI6IE5vdGljZXNSZW5kZXJlcixcbik6IEFyZ3YgPT4ge1xuICBjb25zdCBwYXJzZXIgPSB5YXJncygpXG4gICAgLnZlcnNpb24obGlicmFyeVZlcnNpb24pXG4gICAgLy8gVGhpcyBvcHRpb24gaXMgYmVpbmcgdXNlZCBpbmRpcmVjdGx5IHRvIGNvbmZpZ3VyZSB0aGUgbG9nIGxldmVsIG9mIHRoZSBQcmludGVyIGluc3RhbmNlLlxuICAgIC8vIHJlZmVyOiBodHRwczovL2dpdGh1Yi5jb20vYXdzLWFtcGxpZnkvYW1wbGlmeS1iYWNrZW5kL2Jsb2IvbWFpbi9wYWNrYWdlcy9jbGkvc3JjL3ByaW50ZXIudHNcbiAgICAub3B0aW9ucygnZGVidWcnLCB7XG4gICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnUHJpbnQgZGVidWcgbG9ncyB0byB0aGUgY29uc29sZScsXG4gICAgfSlcbiAgICAuc3RyaWN0KClcbiAgICAvLyBwbnBtIHBsYWNlcyB0aGUgY29tbWFuZCBiaW4gZmlsZSBpbiBgYW1weC5qc2AgaW5zdGVhZCBvZiBgYW1weGAgd2hpY2ggY2F1c2VzIHlhcmdzIHRvIHRoaW5rIHRoZSBjb21tYW5kIG5hbWUgaXMgYGFtcHguanNgLlxuICAgIC8vIFRoaXMgdGVsbHMgeWFyZ3MgdGhhdCB0aGUgY29tbWFuZCBuYW1lIGlzIGBhbXB4YC5cbiAgICAuc2NyaXB0TmFtZShwYXRoLnBhcnNlKHByb2Nlc3MuYXJndlsxXSkubmFtZSlcbiAgICAuY29tbWFuZChjcmVhdGVHZW5lcmF0ZUNvbW1hbmQoKSlcbiAgICAuY29tbWFuZChjcmVhdGVTYW5kYm94Q29tbWFuZChub3RpY2VzUmVuZGVyZXIpKVxuICAgIC5jb21tYW5kKGNyZWF0ZVBpcGVsaW5lRGVwbG95Q29tbWFuZCgpKVxuICAgIC5jb21tYW5kKGNyZWF0ZUNvbmZpZ3VyZUNvbW1hbmQoKSlcbiAgICAuY29tbWFuZChjcmVhdGVJbmZvQ29tbWFuZCgpKVxuICAgIC5jb21tYW5kKGNyZWF0ZU5vdGljZXNDb21tYW5kKCkpXG4gICAgLmhlbHAoKVxuICAgIC5hbGlhcygnaCcsICdoZWxwJylcbiAgICAuYWxpYXMoJ3YnLCAndmVyc2lvbicpXG4gICAgLmRlbWFuZENvbW1hbmQoKVxuICAgIC5zdHJpY3RDb21tYW5kcygpXG4gICAgLnJlY29tbWVuZENvbW1hbmRzKClcbiAgICAuZmFpbChmYWxzZSk7XG5cbiAgcmV0dXJuIHBhcnNlcjtcbn07XG4iXX0=