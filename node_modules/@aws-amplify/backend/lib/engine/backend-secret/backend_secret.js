import { SecretValue } from 'aws-cdk-lib';
import { ParameterPathConversions } from '@aws-amplify/platform-core';
/**
 * Resolves a backend secret to a CFN token via a lambda-backed CFN custom resource.
 */
export class CfnTokenBackendSecret {
    secretName;
    secretResourceFactory;
    /**
     * The name of the secret to fetch.
     */
    constructor(secretName, secretResourceFactory) {
        this.secretName = secretName;
        this.secretResourceFactory = secretResourceFactory;
    }
    /**
     * Get a reference to the value within a CDK scope.
     */
    resolve = (scope, backendIdentifier) => {
        const secretResource = this.secretResourceFactory.getOrCreate(scope, this.secretName, backendIdentifier);
        const val = secretResource.getAttString(`${this.secretName}`);
        return SecretValue.unsafePlainText(val); // safe since 'val' is a cdk token.
    };
    /**
     * Resolve to the secret path
     */
    resolvePath = (backendIdentifier) => {
        return {
            branchSecretPath: ParameterPathConversions.toParameterFullPath(backendIdentifier, this.secretName),
            sharedSecretPath: ParameterPathConversions.toParameterFullPath(backendIdentifier.namespace, this.secretName),
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZW5naW5lL2JhY2tlbmQtc2VjcmV0L2JhY2tlbmRfc2VjcmV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFdEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8scUJBQXFCO0lBS2I7SUFDQTtJQUxuQjs7T0FFRztJQUNILFlBQ21CLFVBQWtCLEVBQ2xCLHFCQUFrRDtRQURsRCxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ2xCLDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBNkI7SUFDbEUsQ0FBQztJQUNKOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQ1IsS0FBZ0IsRUFDaEIsaUJBQW9DLEVBQ3ZCLEVBQUU7UUFDZixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsV0FBVyxDQUMzRCxLQUFLLEVBQ0wsSUFBSSxDQUFDLFVBQVUsRUFDZixpQkFBaUIsQ0FDbEIsQ0FBQztRQUVGLE1BQU0sR0FBRyxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUM5RCxPQUFPLFdBQVcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxtQ0FBbUM7SUFDOUUsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxXQUFXLEdBQUcsQ0FBQyxpQkFBb0MsRUFBcUIsRUFBRTtRQUN4RSxPQUFPO1lBQ0wsZ0JBQWdCLEVBQUUsd0JBQXdCLENBQUMsbUJBQW1CLENBQzVELGlCQUFpQixFQUNqQixJQUFJLENBQUMsVUFBVSxDQUNoQjtZQUNELGdCQUFnQixFQUFFLHdCQUF3QixDQUFDLG1CQUFtQixDQUM1RCxpQkFBaUIsQ0FBQyxTQUFTLEVBQzNCLElBQUksQ0FBQyxVQUFVLENBQ2hCO1NBQ0YsQ0FBQztJQUNKLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQmFja2VuZElkZW50aWZpZXIsXG4gIEJhY2tlbmRTZWNyZXQsXG4gIFJlc29sdmVQYXRoUmVzdWx0LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQmFja2VuZFNlY3JldEZldGNoZXJGYWN0b3J5IH0gZnJvbSAnLi9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgU2VjcmV0VmFsdWUgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBQYXJhbWV0ZXJQYXRoQ29udmVyc2lvbnMgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbi8qKlxuICogUmVzb2x2ZXMgYSBiYWNrZW5kIHNlY3JldCB0byBhIENGTiB0b2tlbiB2aWEgYSBsYW1iZGEtYmFja2VkIENGTiBjdXN0b20gcmVzb3VyY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBDZm5Ub2tlbkJhY2tlbmRTZWNyZXQgaW1wbGVtZW50cyBCYWNrZW5kU2VjcmV0IHtcbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBzZWNyZXQgdG8gZmV0Y2guXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY3JldE5hbWU6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY3JldFJlc291cmNlRmFjdG9yeTogQmFja2VuZFNlY3JldEZldGNoZXJGYWN0b3J5LFxuICApIHt9XG4gIC8qKlxuICAgKiBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIHZhbHVlIHdpdGhpbiBhIENESyBzY29wZS5cbiAgICovXG4gIHJlc29sdmUgPSAoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBiYWNrZW5kSWRlbnRpZmllcjogQmFja2VuZElkZW50aWZpZXIsXG4gICk6IFNlY3JldFZhbHVlID0+IHtcbiAgICBjb25zdCBzZWNyZXRSZXNvdXJjZSA9IHRoaXMuc2VjcmV0UmVzb3VyY2VGYWN0b3J5LmdldE9yQ3JlYXRlKFxuICAgICAgc2NvcGUsXG4gICAgICB0aGlzLnNlY3JldE5hbWUsXG4gICAgICBiYWNrZW5kSWRlbnRpZmllcixcbiAgICApO1xuXG4gICAgY29uc3QgdmFsID0gc2VjcmV0UmVzb3VyY2UuZ2V0QXR0U3RyaW5nKGAke3RoaXMuc2VjcmV0TmFtZX1gKTtcbiAgICByZXR1cm4gU2VjcmV0VmFsdWUudW5zYWZlUGxhaW5UZXh0KHZhbCk7IC8vIHNhZmUgc2luY2UgJ3ZhbCcgaXMgYSBjZGsgdG9rZW4uXG4gIH07XG5cbiAgLyoqXG4gICAqIFJlc29sdmUgdG8gdGhlIHNlY3JldCBwYXRoXG4gICAqL1xuICByZXNvbHZlUGF0aCA9IChiYWNrZW5kSWRlbnRpZmllcjogQmFja2VuZElkZW50aWZpZXIpOiBSZXNvbHZlUGF0aFJlc3VsdCA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJyYW5jaFNlY3JldFBhdGg6IFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucy50b1BhcmFtZXRlckZ1bGxQYXRoKFxuICAgICAgICBiYWNrZW5kSWRlbnRpZmllcixcbiAgICAgICAgdGhpcy5zZWNyZXROYW1lLFxuICAgICAgKSxcbiAgICAgIHNoYXJlZFNlY3JldFBhdGg6IFBhcmFtZXRlclBhdGhDb252ZXJzaW9ucy50b1BhcmFtZXRlckZ1bGxQYXRoKFxuICAgICAgICBiYWNrZW5kSWRlbnRpZmllci5uYW1lc3BhY2UsXG4gICAgICAgIHRoaXMuc2VjcmV0TmFtZSxcbiAgICAgICksXG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==