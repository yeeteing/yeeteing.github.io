import { ConversationTurnError, ConversationTurnEvent, StreamingResponseChunk } from './types.js';
import type { ContentBlock } from '@aws-sdk/client-bedrock-runtime';
import { GraphqlRequestExecutor } from './graphql_request_executor';
import { UserAgentProvider } from './user_agent_provider';
export type MutationResponseInput = {
    input: {
        conversationId: string;
        content: ContentBlock[];
        associatedUserMessageId: string;
    };
};
export type MutationStreamingResponseInput = {
    input: StreamingResponseChunk;
};
export type MutationErrorsResponseInput = {
    input: {
        conversationId: string;
        errors: ConversationTurnError[];
        associatedUserMessageId: string;
    };
};
/**
 * This class is responsible for sending a response produced by Bedrock back to AppSync
 * in a form of mutation.
 */
export declare class ConversationTurnResponseSender {
    private readonly event;
    private readonly userAgentProvider;
    private readonly graphqlRequestExecutor;
    private readonly logger;
    /**
     * Creates conversation turn response sender.
     */
    constructor(event: ConversationTurnEvent, userAgentProvider?: UserAgentProvider, graphqlRequestExecutor?: GraphqlRequestExecutor, logger?: Console);
    sendResponse: (message: ContentBlock[]) => Promise<void>;
    sendResponseChunk: (chunk: StreamingResponseChunk) => Promise<void>;
    sendErrors: (errors: ConversationTurnError[]) => Promise<void>;
    private createMutationErrorsRequest;
    private createMutationRequest;
    private createStreamingMutationRequest;
    private serializeContent;
}
//# sourceMappingURL=conversation_turn_response_sender.d.ts.map