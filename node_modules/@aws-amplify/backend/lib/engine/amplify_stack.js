import { AmplifyFault, BackendIdentifierConversions, } from '@aws-amplify/platform-core';
import { Aspects, CfnResource, RemovalPolicy, Stack, } from 'aws-cdk-lib';
import { Role } from 'aws-cdk-lib/aws-iam';
/**
 * Amplify-specific Stack implementation to handle cross-cutting concerns for all Amplify stacks
 */
export class AmplifyStack extends Stack {
    /**
     * Default constructor
     */
    constructor(scope, backendId) {
        super(scope, BackendIdentifierConversions.toStackName(backendId));
        Aspects.of(this).add(new CognitoRoleTrustPolicyValidator());
        if (backendId.type === 'sandbox') {
            Aspects.of(this).add(new SandboxRemovalPolicyDestroyAspect());
        }
    }
    /**
     * Overrides Stack.allocateLogicalId to prevent redundant nested stack logical IDs
     */
    allocateLogicalId = (element) => {
        // Nested stack logical IDs have a redundant structure of <name>NestedStack<name>NestedStackResource<hash>
        // This rewrites the nested stack logical ID to <name><hash>
        const defaultId = super.allocateLogicalId(element);
        const match = /(?<name>.*)NestedStack.+NestedStackResource(?<hash>.*)/.exec(defaultId);
        if (match && match.groups && Object.keys(match.groups || {}).length === 2) {
            return `${match.groups.name}${match.groups.hash}`;
        }
        return defaultId;
    };
}
class CognitoRoleTrustPolicyValidator {
    visit = (node) => {
        if (!(node instanceof Role)) {
            return;
        }
        const assumeRolePolicyDocument = node.assumeRolePolicy?.toJSON();
        if (!assumeRolePolicyDocument) {
            return;
        }
        assumeRolePolicyDocument.Statement.forEach(this.cognitoTrustPolicyStatementValidator);
    };
    cognitoTrustPolicyStatementValidator = ({ Action: action, Condition: condition, Effect: effect, Principal: principal, }) => {
        if (action !== 'sts:AssumeRoleWithWebIdentity') {
            return;
        }
        if (principal?.Federated !== 'cognito-identity.amazonaws.com') {
            return;
        }
        if (effect === 'Deny') {
            return;
        }
        // if we got here, we have a policy that allows AssumeRoleWithWebIdentity with Cognito
        // need to validate that the policy has an appropriate condition
        const audCondition = condition?.StringEquals?.['cognito-identity.amazonaws.com:aud'];
        if (typeof audCondition !== 'string' || audCondition.length === 0) {
            throw new AmplifyFault('InvalidTrustPolicyFault', {
                message: 'Cannot create a Role trust policy with Cognito that does not have a StringEquals condition for cognito-identity.amazonaws.com:aud',
            });
        }
        const amrCondition = condition?.['ForAnyValue:StringLike']?.['cognito-identity.amazonaws.com:amr'];
        if (typeof amrCondition !== 'string' || amrCondition.length === 0) {
            throw new AmplifyFault('InvalidTrustPolicyFault', {
                message: 'Cannot create a Role trust policy with Cognito that does not have a StringLike condition for cognito-identity.amazonaws.com:amr',
            });
        }
    };
}
// This aspect sets removal policy of all resources to destroy for sandbox deployments
class SandboxRemovalPolicyDestroyAspect {
    visit(node) {
        if (CfnResource.isCfnResource(node)) {
            node.applyRemovalPolicy(RemovalPolicy.DESTROY);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1wbGlmeV9zdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmdpbmUvYW1wbGlmeV9zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsWUFBWSxFQUNaLDRCQUE0QixHQUM3QixNQUFNLDRCQUE0QixDQUFDO0FBRXBDLE9BQU8sRUFDTCxPQUFPLEVBRVAsV0FBVyxFQUVYLGFBQWEsRUFDYixLQUFLLEdBQ04sTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzNDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFlBQWEsU0FBUSxLQUFLO0lBQ3JDOztPQUVHO0lBQ0gsWUFBWSxLQUFnQixFQUFFLFNBQTRCO1FBQ3hELEtBQUssQ0FBQyxLQUFLLEVBQUUsNEJBQTRCLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDbEUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSwrQkFBK0IsRUFBRSxDQUFDLENBQUM7UUFFNUQsSUFBSSxTQUFTLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ2pDLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksaUNBQWlDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hFLENBQUM7SUFDSCxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxpQkFBaUIsR0FBRyxDQUFDLE9BQW1CLEVBQVUsRUFBRTtRQUNsRCwwR0FBMEc7UUFDMUcsNERBQTREO1FBQzVELE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxNQUFNLEtBQUssR0FBRyx3REFBd0QsQ0FBQyxJQUFJLENBQ3pFLFNBQVMsQ0FDVixDQUFDO1FBQ0YsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQzFFLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3BELENBQUM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDLENBQUM7Q0FDSDtBQUVELE1BQU0sK0JBQStCO0lBQ25DLEtBQUssR0FBRyxDQUFDLElBQWdCLEVBQUUsRUFBRTtRQUMzQixJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUM1QixPQUFPO1FBQ1QsQ0FBQztRQUNELE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxDQUFDO1FBQ2pFLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1lBQzlCLE9BQU87UUFDVCxDQUFDO1FBRUQsd0JBQXdCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FDeEMsSUFBSSxDQUFDLG9DQUFvQyxDQUMxQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRU0sb0NBQW9DLEdBQUcsQ0FBQyxFQUM5QyxNQUFNLEVBQUUsTUFBTSxFQUNkLFNBQVMsRUFBRSxTQUFTLEVBQ3BCLE1BQU0sRUFBRSxNQUFNLEVBQ2QsU0FBUyxFQUFFLFNBQVMsR0FTckIsRUFBRSxFQUFFO1FBQ0gsSUFBSSxNQUFNLEtBQUssK0JBQStCLEVBQUUsQ0FBQztZQUMvQyxPQUFPO1FBQ1QsQ0FBQztRQUNELElBQUksU0FBUyxFQUFFLFNBQVMsS0FBSyxnQ0FBZ0MsRUFBRSxDQUFDO1lBQzlELE9BQU87UUFDVCxDQUFDO1FBQ0QsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFLENBQUM7WUFDdEIsT0FBTztRQUNULENBQUM7UUFDRCxzRkFBc0Y7UUFDdEYsZ0VBQWdFO1FBRWhFLE1BQU0sWUFBWSxHQUNoQixTQUFTLEVBQUUsWUFBWSxFQUFFLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUNsRSxJQUFJLE9BQU8sWUFBWSxLQUFLLFFBQVEsSUFBSSxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ2xFLE1BQU0sSUFBSSxZQUFZLENBQUMseUJBQXlCLEVBQUU7Z0JBQ2hELE9BQU8sRUFDTCxtSUFBbUk7YUFDdEksQ0FBQyxDQUFDO1FBQ0wsQ0FBQztRQUVELE1BQU0sWUFBWSxHQUNoQixTQUFTLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQ3JDLG9DQUFvQyxDQUNyQyxDQUFDO1FBQ0osSUFBSSxPQUFPLFlBQVksS0FBSyxRQUFRLElBQUksWUFBWSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUNsRSxNQUFNLElBQUksWUFBWSxDQUFDLHlCQUF5QixFQUFFO2dCQUNoRCxPQUFPLEVBQ0wsaUlBQWlJO2FBQ3BJLENBQUMsQ0FBQztRQUNMLENBQUM7SUFDSCxDQUFDLENBQUM7Q0FDSDtBQUVELHNGQUFzRjtBQUN0RixNQUFNLGlDQUFpQztJQUNyQyxLQUFLLENBQUMsSUFBZ0I7UUFDcEIsSUFBSSxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNqRCxDQUFDO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQW1wbGlmeUZhdWx0LFxuICBCYWNrZW5kSWRlbnRpZmllckNvbnZlcnNpb25zLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHtcbiAgQXNwZWN0cyxcbiAgQ2ZuRWxlbWVudCxcbiAgQ2ZuUmVzb3VyY2UsXG4gIElBc3BlY3QsXG4gIFJlbW92YWxQb2xpY3ksXG4gIFN0YWNrLFxufSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBSb2xlIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QsIElDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcblxuLyoqXG4gKiBBbXBsaWZ5LXNwZWNpZmljIFN0YWNrIGltcGxlbWVudGF0aW9uIHRvIGhhbmRsZSBjcm9zcy1jdXR0aW5nIGNvbmNlcm5zIGZvciBhbGwgQW1wbGlmeSBzdGFja3NcbiAqL1xuZXhwb3J0IGNsYXNzIEFtcGxpZnlTdGFjayBleHRlbmRzIFN0YWNrIHtcbiAgLyoqXG4gICAqIERlZmF1bHQgY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIpIHtcbiAgICBzdXBlcihzY29wZSwgQmFja2VuZElkZW50aWZpZXJDb252ZXJzaW9ucy50b1N0YWNrTmFtZShiYWNrZW5kSWQpKTtcbiAgICBBc3BlY3RzLm9mKHRoaXMpLmFkZChuZXcgQ29nbml0b1JvbGVUcnVzdFBvbGljeVZhbGlkYXRvcigpKTtcblxuICAgIGlmIChiYWNrZW5kSWQudHlwZSA9PT0gJ3NhbmRib3gnKSB7XG4gICAgICBBc3BlY3RzLm9mKHRoaXMpLmFkZChuZXcgU2FuZGJveFJlbW92YWxQb2xpY3lEZXN0cm95QXNwZWN0KCkpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogT3ZlcnJpZGVzIFN0YWNrLmFsbG9jYXRlTG9naWNhbElkIHRvIHByZXZlbnQgcmVkdW5kYW50IG5lc3RlZCBzdGFjayBsb2dpY2FsIElEc1xuICAgKi9cbiAgYWxsb2NhdGVMb2dpY2FsSWQgPSAoZWxlbWVudDogQ2ZuRWxlbWVudCk6IHN0cmluZyA9PiB7XG4gICAgLy8gTmVzdGVkIHN0YWNrIGxvZ2ljYWwgSURzIGhhdmUgYSByZWR1bmRhbnQgc3RydWN0dXJlIG9mIDxuYW1lPk5lc3RlZFN0YWNrPG5hbWU+TmVzdGVkU3RhY2tSZXNvdXJjZTxoYXNoPlxuICAgIC8vIFRoaXMgcmV3cml0ZXMgdGhlIG5lc3RlZCBzdGFjayBsb2dpY2FsIElEIHRvIDxuYW1lPjxoYXNoPlxuICAgIGNvbnN0IGRlZmF1bHRJZCA9IHN1cGVyLmFsbG9jYXRlTG9naWNhbElkKGVsZW1lbnQpO1xuICAgIGNvbnN0IG1hdGNoID0gLyg/PG5hbWU+LiopTmVzdGVkU3RhY2suK05lc3RlZFN0YWNrUmVzb3VyY2UoPzxoYXNoPi4qKS8uZXhlYyhcbiAgICAgIGRlZmF1bHRJZCxcbiAgICApO1xuICAgIGlmIChtYXRjaCAmJiBtYXRjaC5ncm91cHMgJiYgT2JqZWN0LmtleXMobWF0Y2guZ3JvdXBzIHx8IHt9KS5sZW5ndGggPT09IDIpIHtcbiAgICAgIHJldHVybiBgJHttYXRjaC5ncm91cHMubmFtZX0ke21hdGNoLmdyb3Vwcy5oYXNofWA7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0SWQ7XG4gIH07XG59XG5cbmNsYXNzIENvZ25pdG9Sb2xlVHJ1c3RQb2xpY3lWYWxpZGF0b3IgaW1wbGVtZW50cyBJQXNwZWN0IHtcbiAgdmlzaXQgPSAobm9kZTogSUNvbnN0cnVjdCkgPT4ge1xuICAgIGlmICghKG5vZGUgaW5zdGFuY2VvZiBSb2xlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBhc3N1bWVSb2xlUG9saWN5RG9jdW1lbnQgPSBub2RlLmFzc3VtZVJvbGVQb2xpY3k/LnRvSlNPTigpO1xuICAgIGlmICghYXNzdW1lUm9sZVBvbGljeURvY3VtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYXNzdW1lUm9sZVBvbGljeURvY3VtZW50LlN0YXRlbWVudC5mb3JFYWNoKFxuICAgICAgdGhpcy5jb2duaXRvVHJ1c3RQb2xpY3lTdGF0ZW1lbnRWYWxpZGF0b3IsXG4gICAgKTtcbiAgfTtcblxuICBwcml2YXRlIGNvZ25pdG9UcnVzdFBvbGljeVN0YXRlbWVudFZhbGlkYXRvciA9ICh7XG4gICAgQWN0aW9uOiBhY3Rpb24sXG4gICAgQ29uZGl0aW9uOiBjb25kaXRpb24sXG4gICAgRWZmZWN0OiBlZmZlY3QsXG4gICAgUHJpbmNpcGFsOiBwcmluY2lwYWwsXG4gIH06IHtcbiAgICAvLyBUaGVzZSBwcm9wZXJ0eSBuYW1lcyBjb21lIGZyb20gdGhlIElBTSBwb2xpY3kgZG9jdW1lbnQgd2hpY2ggd2UgZG8gbm90IGNvbnRyb2xcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb24gKi9cbiAgICBBY3Rpb246IHN0cmluZztcbiAgICBDb25kaXRpb24/OiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PjtcbiAgICBFZmZlY3Q6ICdBbGxvdycgfCAnRGVueSc7XG4gICAgUHJpbmNpcGFsPzogeyBGZWRlcmF0ZWQ/OiBzdHJpbmcgfTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uYW1pbmctY29udmVudGlvbiAqL1xuICB9KSA9PiB7XG4gICAgaWYgKGFjdGlvbiAhPT0gJ3N0czpBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJpbmNpcGFsPy5GZWRlcmF0ZWQgIT09ICdjb2duaXRvLWlkZW50aXR5LmFtYXpvbmF3cy5jb20nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChlZmZlY3QgPT09ICdEZW55Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBpZiB3ZSBnb3QgaGVyZSwgd2UgaGF2ZSBhIHBvbGljeSB0aGF0IGFsbG93cyBBc3N1bWVSb2xlV2l0aFdlYklkZW50aXR5IHdpdGggQ29nbml0b1xuICAgIC8vIG5lZWQgdG8gdmFsaWRhdGUgdGhhdCB0aGUgcG9saWN5IGhhcyBhbiBhcHByb3ByaWF0ZSBjb25kaXRpb25cblxuICAgIGNvbnN0IGF1ZENvbmRpdGlvbiA9XG4gICAgICBjb25kaXRpb24/LlN0cmluZ0VxdWFscz8uWydjb2duaXRvLWlkZW50aXR5LmFtYXpvbmF3cy5jb206YXVkJ107XG4gICAgaWYgKHR5cGVvZiBhdWRDb25kaXRpb24gIT09ICdzdHJpbmcnIHx8IGF1ZENvbmRpdGlvbi5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBBbXBsaWZ5RmF1bHQoJ0ludmFsaWRUcnVzdFBvbGljeUZhdWx0Jywge1xuICAgICAgICBtZXNzYWdlOlxuICAgICAgICAgICdDYW5ub3QgY3JlYXRlIGEgUm9sZSB0cnVzdCBwb2xpY3kgd2l0aCBDb2duaXRvIHRoYXQgZG9lcyBub3QgaGF2ZSBhIFN0cmluZ0VxdWFscyBjb25kaXRpb24gZm9yIGNvZ25pdG8taWRlbnRpdHkuYW1hem9uYXdzLmNvbTphdWQnLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYW1yQ29uZGl0aW9uID1cbiAgICAgIGNvbmRpdGlvbj8uWydGb3JBbnlWYWx1ZTpTdHJpbmdMaWtlJ10/LltcbiAgICAgICAgJ2NvZ25pdG8taWRlbnRpdHkuYW1hem9uYXdzLmNvbTphbXInXG4gICAgICBdO1xuICAgIGlmICh0eXBlb2YgYW1yQ29uZGl0aW9uICE9PSAnc3RyaW5nJyB8fCBhbXJDb25kaXRpb24ubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgQW1wbGlmeUZhdWx0KCdJbnZhbGlkVHJ1c3RQb2xpY3lGYXVsdCcsIHtcbiAgICAgICAgbWVzc2FnZTpcbiAgICAgICAgICAnQ2Fubm90IGNyZWF0ZSBhIFJvbGUgdHJ1c3QgcG9saWN5IHdpdGggQ29nbml0byB0aGF0IGRvZXMgbm90IGhhdmUgYSBTdHJpbmdMaWtlIGNvbmRpdGlvbiBmb3IgY29nbml0by1pZGVudGl0eS5hbWF6b25hd3MuY29tOmFtcicsXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbi8vIFRoaXMgYXNwZWN0IHNldHMgcmVtb3ZhbCBwb2xpY3kgb2YgYWxsIHJlc291cmNlcyB0byBkZXN0cm95IGZvciBzYW5kYm94IGRlcGxveW1lbnRzXG5jbGFzcyBTYW5kYm94UmVtb3ZhbFBvbGljeURlc3Ryb3lBc3BlY3QgaW1wbGVtZW50cyBJQXNwZWN0IHtcbiAgdmlzaXQobm9kZTogSUNvbnN0cnVjdCk6IHZvaWQge1xuICAgIGlmIChDZm5SZXNvdXJjZS5pc0NmblJlc291cmNlKG5vZGUpKSB7XG4gICAgICBub2RlLmFwcGx5UmVtb3ZhbFBvbGljeShSZW1vdmFsUG9saWN5LkRFU1RST1kpO1xuICAgIH1cbiAgfVxufVxuIl19