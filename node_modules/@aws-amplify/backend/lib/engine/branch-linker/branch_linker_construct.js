import { Construct } from 'constructs';
import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';
import { Runtime as LambdaRuntime } from 'aws-cdk-lib/aws-lambda';
import { CustomResource, Duration } from 'aws-cdk-lib';
import { fileURLToPath } from 'node:url';
import path from 'path';
import { Provider } from 'aws-cdk-lib/custom-resources';
import * as iam from 'aws-cdk-lib/aws-iam';
import { BackendEnvironmentVariables } from '../../environment_variables.js';
const filename = fileURLToPath(import.meta.url);
const dirname = path.dirname(filename);
const resourcesRoot = path.normalize(path.join(dirname, 'lambda'));
const linkerLambdaFilePath = path.join(resourcesRoot, 'branch_linker.js');
/**
 * Type of the backend custom CFN resource.
 */
const LINKER_RESOURCE_TYPE = 'Custom::AmplifyBranchLinkerResource';
/**
 * Adds a custom resources that links and un-links branch deployments
 * to Amplify Console.
 */
export class AmplifyBranchLinkerConstruct extends Construct {
    /**
     * Creates Amplify Console linker construct.
     */
    constructor(scope, backendIdentifier) {
        super(scope, 'AmplifyBranchLinker');
        const environment = {};
        if (process.env[BackendEnvironmentVariables.AWS_ENDPOINT_URL_AMPLIFY]) {
            // Passing a standard AWS SDK environment variable if present to override
            // Amplify service endpoint.
            // See https://docs.aws.amazon.com/sdkref/latest/guide/feature-ss-endpoints.html
            environment[BackendEnvironmentVariables.AWS_ENDPOINT_URL_AMPLIFY] =
                process.env[BackendEnvironmentVariables.AWS_ENDPOINT_URL_AMPLIFY];
        }
        const linkerLambda = new NodejsFunction(this, 'CustomResourceLambda', {
            runtime: LambdaRuntime.NODEJS_20_X,
            timeout: Duration.seconds(10),
            entry: linkerLambdaFilePath,
            handler: 'handler',
            environment,
            bundling: {
                // TODO Remove it when Lambda serves SDK 3.440.0+
                // https://github.com/aws-amplify/amplify-backend/issues/561
                // This is added to force bundler to include local version of AWS SDK.
                // Lambda provided version does not have 'backend.stackArn' yet.
                externalModules: [],
            },
        });
        linkerLambda.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['amplify:GetBranch', 'amplify:UpdateBranch'],
            resources: [
                `arn:aws:amplify:*:*:apps/${backendIdentifier.namespace}/branches/${backendIdentifier.name}`,
            ],
        }));
        const customResourceProvider = new Provider(this, 'CustomResourceProvider', {
            onEventHandler: linkerLambda,
        });
        const customResourceProps = {
            appId: backendIdentifier.namespace,
            branchName: backendIdentifier.name,
        };
        new CustomResource(this, 'CustomResource', {
            serviceToken: customResourceProvider.serviceToken,
            properties: customResourceProps,
            resourceType: LINKER_RESOURCE_TYPE,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJhbmNoX2xpbmtlcl9jb25zdHJ1Y3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZW5naW5lL2JyYW5jaC1saW5rZXIvYnJhbmNoX2xpbmtlcl9jb25zdHJ1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE9BQU8sSUFBSSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3pDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFeEQsT0FBTyxLQUFLLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUc3RSxNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNoRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztBQUNuRSxNQUFNLG9CQUFvQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFFMUU7O0dBRUc7QUFDSCxNQUFNLG9CQUFvQixHQUFHLHFDQUFxQyxDQUFDO0FBRW5FOzs7R0FHRztBQUNILE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxTQUFTO0lBQ3pEOztPQUVHO0lBQ0gsWUFBWSxLQUFnQixFQUFFLGlCQUFvQztRQUNoRSxLQUFLLENBQUMsS0FBSyxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFFcEMsTUFBTSxXQUFXLEdBQTJCLEVBQUUsQ0FBQztRQUMvQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDO1lBQ3RFLHlFQUF5RTtZQUN6RSw0QkFBNEI7WUFDNUIsZ0ZBQWdGO1lBQ2hGLFdBQVcsQ0FBQywyQkFBMkIsQ0FBQyx3QkFBd0IsQ0FBQztnQkFDL0QsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ3RFLENBQUM7UUFDRCxNQUFNLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEVBQUUsc0JBQXNCLEVBQUU7WUFDcEUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxXQUFXO1lBQ2xDLE9BQU8sRUFBRSxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUM3QixLQUFLLEVBQUUsb0JBQW9CO1lBQzNCLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLFdBQVc7WUFDWCxRQUFRLEVBQUU7Z0JBQ1IsaURBQWlEO2dCQUNqRCw0REFBNEQ7Z0JBQzVELHNFQUFzRTtnQkFDdEUsZ0VBQWdFO2dCQUNoRSxlQUFlLEVBQUUsRUFBRTthQUNwQjtTQUNGLENBQUMsQ0FBQztRQUVILFlBQVksQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQzlDLElBQUksR0FBRyxDQUFDLGVBQWUsQ0FBQztZQUN0QixNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLO1lBQ3hCLE9BQU8sRUFBRSxDQUFDLG1CQUFtQixFQUFFLHNCQUFzQixDQUFDO1lBQ3RELFNBQVMsRUFBRTtnQkFDVCw0QkFBNEIsaUJBQWlCLENBQUMsU0FBUyxhQUFhLGlCQUFpQixDQUFDLElBQUksRUFBRTthQUM3RjtTQUNGLENBQUMsQ0FDSCxDQUFDO1FBRUYsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLFFBQVEsQ0FDekMsSUFBSSxFQUNKLHdCQUF3QixFQUN4QjtZQUNFLGNBQWMsRUFBRSxZQUFZO1NBQzdCLENBQ0YsQ0FBQztRQUVGLE1BQU0sbUJBQW1CLEdBQTJDO1lBQ2xFLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxTQUFTO1lBQ2xDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO1NBQ25DLENBQUM7UUFFRixJQUFJLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUU7WUFDekMsWUFBWSxFQUFFLHNCQUFzQixDQUFDLFlBQVk7WUFDakQsVUFBVSxFQUFFLG1CQUFtQjtZQUMvQixZQUFZLEVBQUUsb0JBQW9CO1NBQ25DLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgTm9kZWpzRnVuY3Rpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLW5vZGVqcyc7XG5pbXBvcnQgeyBSdW50aW1lIGFzIExhbWJkYVJ1bnRpbWUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IEN1c3RvbVJlc291cmNlLCBEdXJhdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICdub2RlOnVybCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnYXdzLWNkay1saWIvY3VzdG9tLXJlc291cmNlcyc7XG5pbXBvcnQgeyBBbXBsaWZ5QnJhbmNoTGlua2VyQ3VzdG9tUmVzb3VyY2VQcm9wcyB9IGZyb20gJy4vbGFtYmRhL2JyYW5jaF9saW5rZXJfdHlwZXMuanMnO1xuaW1wb3J0ICogYXMgaWFtIGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xuaW1wb3J0IHsgQmFja2VuZEVudmlyb25tZW50VmFyaWFibGVzIH0gZnJvbSAnLi4vLi4vZW52aXJvbm1lbnRfdmFyaWFibGVzLmpzJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5cbmNvbnN0IGZpbGVuYW1lID0gZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpO1xuY29uc3QgZGlybmFtZSA9IHBhdGguZGlybmFtZShmaWxlbmFtZSk7XG5jb25zdCByZXNvdXJjZXNSb290ID0gcGF0aC5ub3JtYWxpemUocGF0aC5qb2luKGRpcm5hbWUsICdsYW1iZGEnKSk7XG5jb25zdCBsaW5rZXJMYW1iZGFGaWxlUGF0aCA9IHBhdGguam9pbihyZXNvdXJjZXNSb290LCAnYnJhbmNoX2xpbmtlci5qcycpO1xuXG4vKipcbiAqIFR5cGUgb2YgdGhlIGJhY2tlbmQgY3VzdG9tIENGTiByZXNvdXJjZS5cbiAqL1xuY29uc3QgTElOS0VSX1JFU09VUkNFX1RZUEUgPSAnQ3VzdG9tOjpBbXBsaWZ5QnJhbmNoTGlua2VyUmVzb3VyY2UnO1xuXG4vKipcbiAqIEFkZHMgYSBjdXN0b20gcmVzb3VyY2VzIHRoYXQgbGlua3MgYW5kIHVuLWxpbmtzIGJyYW5jaCBkZXBsb3ltZW50c1xuICogdG8gQW1wbGlmeSBDb25zb2xlLlxuICovXG5leHBvcnQgY2xhc3MgQW1wbGlmeUJyYW5jaExpbmtlckNvbnN0cnVjdCBleHRlbmRzIENvbnN0cnVjdCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIEFtcGxpZnkgQ29uc29sZSBsaW5rZXIgY29uc3RydWN0LlxuICAgKi9cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgYmFja2VuZElkZW50aWZpZXI6IEJhY2tlbmRJZGVudGlmaWVyKSB7XG4gICAgc3VwZXIoc2NvcGUsICdBbXBsaWZ5QnJhbmNoTGlua2VyJyk7XG5cbiAgICBjb25zdCBlbnZpcm9ubWVudDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9O1xuICAgIGlmIChwcm9jZXNzLmVudltCYWNrZW5kRW52aXJvbm1lbnRWYXJpYWJsZXMuQVdTX0VORFBPSU5UX1VSTF9BTVBMSUZZXSkge1xuICAgICAgLy8gUGFzc2luZyBhIHN0YW5kYXJkIEFXUyBTREsgZW52aXJvbm1lbnQgdmFyaWFibGUgaWYgcHJlc2VudCB0byBvdmVycmlkZVxuICAgICAgLy8gQW1wbGlmeSBzZXJ2aWNlIGVuZHBvaW50LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9zZGtyZWYvbGF0ZXN0L2d1aWRlL2ZlYXR1cmUtc3MtZW5kcG9pbnRzLmh0bWxcbiAgICAgIGVudmlyb25tZW50W0JhY2tlbmRFbnZpcm9ubWVudFZhcmlhYmxlcy5BV1NfRU5EUE9JTlRfVVJMX0FNUExJRlldID1cbiAgICAgICAgcHJvY2Vzcy5lbnZbQmFja2VuZEVudmlyb25tZW50VmFyaWFibGVzLkFXU19FTkRQT0lOVF9VUkxfQU1QTElGWV07XG4gICAgfVxuICAgIGNvbnN0IGxpbmtlckxhbWJkYSA9IG5ldyBOb2RlanNGdW5jdGlvbih0aGlzLCAnQ3VzdG9tUmVzb3VyY2VMYW1iZGEnLCB7XG4gICAgICBydW50aW1lOiBMYW1iZGFSdW50aW1lLk5PREVKU18yMF9YLFxuICAgICAgdGltZW91dDogRHVyYXRpb24uc2Vjb25kcygxMCksXG4gICAgICBlbnRyeTogbGlua2VyTGFtYmRhRmlsZVBhdGgsXG4gICAgICBoYW5kbGVyOiAnaGFuZGxlcicsXG4gICAgICBlbnZpcm9ubWVudCxcbiAgICAgIGJ1bmRsaW5nOiB7XG4gICAgICAgIC8vIFRPRE8gUmVtb3ZlIGl0IHdoZW4gTGFtYmRhIHNlcnZlcyBTREsgMy40NDAuMCtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2F3cy1hbXBsaWZ5L2FtcGxpZnktYmFja2VuZC9pc3N1ZXMvNTYxXG4gICAgICAgIC8vIFRoaXMgaXMgYWRkZWQgdG8gZm9yY2UgYnVuZGxlciB0byBpbmNsdWRlIGxvY2FsIHZlcnNpb24gb2YgQVdTIFNESy5cbiAgICAgICAgLy8gTGFtYmRhIHByb3ZpZGVkIHZlcnNpb24gZG9lcyBub3QgaGF2ZSAnYmFja2VuZC5zdGFja0FybicgeWV0LlxuICAgICAgICBleHRlcm5hbE1vZHVsZXM6IFtdLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGxpbmtlckxhbWJkYS5ncmFudFByaW5jaXBhbC5hZGRUb1ByaW5jaXBhbFBvbGljeShcbiAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgICBhY3Rpb25zOiBbJ2FtcGxpZnk6R2V0QnJhbmNoJywgJ2FtcGxpZnk6VXBkYXRlQnJhbmNoJ10sXG4gICAgICAgIHJlc291cmNlczogW1xuICAgICAgICAgIGBhcm46YXdzOmFtcGxpZnk6KjoqOmFwcHMvJHtiYWNrZW5kSWRlbnRpZmllci5uYW1lc3BhY2V9L2JyYW5jaGVzLyR7YmFja2VuZElkZW50aWZpZXIubmFtZX1gLFxuICAgICAgICBdLFxuICAgICAgfSksXG4gICAgKTtcblxuICAgIGNvbnN0IGN1c3RvbVJlc291cmNlUHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIoXG4gICAgICB0aGlzLFxuICAgICAgJ0N1c3RvbVJlc291cmNlUHJvdmlkZXInLFxuICAgICAge1xuICAgICAgICBvbkV2ZW50SGFuZGxlcjogbGlua2VyTGFtYmRhLFxuICAgICAgfSxcbiAgICApO1xuXG4gICAgY29uc3QgY3VzdG9tUmVzb3VyY2VQcm9wczogQW1wbGlmeUJyYW5jaExpbmtlckN1c3RvbVJlc291cmNlUHJvcHMgPSB7XG4gICAgICBhcHBJZDogYmFja2VuZElkZW50aWZpZXIubmFtZXNwYWNlLFxuICAgICAgYnJhbmNoTmFtZTogYmFja2VuZElkZW50aWZpZXIubmFtZSxcbiAgICB9O1xuXG4gICAgbmV3IEN1c3RvbVJlc291cmNlKHRoaXMsICdDdXN0b21SZXNvdXJjZScsIHtcbiAgICAgIHNlcnZpY2VUb2tlbjogY3VzdG9tUmVzb3VyY2VQcm92aWRlci5zZXJ2aWNlVG9rZW4sXG4gICAgICBwcm9wZXJ0aWVzOiBjdXN0b21SZXNvdXJjZVByb3BzLFxuICAgICAgcmVzb3VyY2VUeXBlOiBMSU5LRVJfUkVTT1VSQ0VfVFlQRSxcbiAgICB9KTtcbiAgfVxufVxuIl19