import { NoticesController } from './notices_controller.js';
import { NoticesPrinter } from './notices_printer.js';
import { LogLevel, printer } from '@aws-amplify/cli-core';
import { hideBin } from 'yargs/helpers';
/**
 * Renders notices.
 */
export class NoticesRenderer {
    noticesController;
    noticesPrinter;
    _printer;
    _process;
    /**
     * Creates notices renderer.
     */
    constructor(packageManagerController, noticesController = new NoticesController(packageManagerController), noticesPrinter = new NoticesPrinter(packageManagerController), _printer = printer, _process = process) {
        this.noticesController = noticesController;
        this.noticesPrinter = noticesPrinter;
        this._printer = _printer;
        this._process = _process;
    }
    tryFindAndPrintApplicableNotices = async (params) => {
        const command = hideBin(this._process.argv)[0];
        if (command?.startsWith('notices')) {
            return;
        }
        try {
            const notices = await this.noticesController.getApplicableNotices({
                includeAcknowledged: false,
                ...params,
            });
            if (notices.length > 0) {
                this._printer.printNewLine();
                this.noticesPrinter.print(notices);
                await this.noticesController.recordPrintingTimes(notices);
            }
        }
        catch (e) {
            this._printer.log(`Unable to render notices on event=${params.event}`, LogLevel.DEBUG);
            if (e instanceof Error) {
                this._printer.log(e.message, LogLevel.DEBUG);
            }
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWNlc19yZW5kZXJlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub3RpY2VzL25vdGljZXNfcmVuZGVyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXRELE9BQU8sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDMUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU94Qzs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBTVA7SUFHQTtJQUdBO0lBQ0E7SUFabkI7O09BRUc7SUFDSCxZQUNFLHdCQUFrRCxFQUNqQyxvQkFBdUMsSUFBSSxpQkFBaUIsQ0FDM0Usd0JBQXdCLENBQ3pCLEVBQ2dCLGlCQUFpQyxJQUFJLGNBQWMsQ0FDbEUsd0JBQXdCLENBQ3pCLEVBQ2dCLFdBQVcsT0FBTyxFQUNsQixXQUFXLE9BQU87UUFQbEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUVqQztRQUNnQixtQkFBYyxHQUFkLGNBQWMsQ0FFOUI7UUFDZ0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQ2xDLENBQUM7SUFFSixnQ0FBZ0MsR0FBRyxLQUFLLEVBQUUsTUFBNkIsRUFBRSxFQUFFO1FBQ3pFLE1BQU0sT0FBTyxHQUF1QixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuRSxJQUFJLE9BQU8sRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUNuQyxPQUFPO1FBQ1QsQ0FBQztRQUNELElBQUksQ0FBQztZQUNILE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLG9CQUFvQixDQUFDO2dCQUNoRSxtQkFBbUIsRUFBRSxLQUFLO2dCQUMxQixHQUFHLE1BQU07YUFDVixDQUFDLENBQUM7WUFDSCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBQ3ZCLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNuQyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1RCxDQUFDO1FBQ0gsQ0FBQztRQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDWCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDZixxQ0FBcUMsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUNuRCxRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7WUFDRixJQUFJLENBQUMsWUFBWSxLQUFLLEVBQUUsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vdGljZXNDb250cm9sbGVyIH0gZnJvbSAnLi9ub3RpY2VzX2NvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHsgTm90aWNlc1ByaW50ZXIgfSBmcm9tICcuL25vdGljZXNfcHJpbnRlci5qcyc7XG5pbXBvcnQgeyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IExvZ0xldmVsLCBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IGhpZGVCaW4gfSBmcm9tICd5YXJncy9oZWxwZXJzJztcblxuZXhwb3J0IHR5cGUgTm90aWNlc1JlbmRlcmVyUGFyYW1zID0ge1xuICBldmVudDogJ3Bvc3RDb21tYW5kJyB8ICdwb3N0RGVwbG95bWVudCcgfCAnbGlzdE5vdGljZXNDb21tYW5kJztcbiAgZXJyb3I/OiBFcnJvcjtcbn07XG5cbi8qKlxuICogUmVuZGVycyBub3RpY2VzLlxuICovXG5leHBvcnQgY2xhc3MgTm90aWNlc1JlbmRlcmVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgbm90aWNlcyByZW5kZXJlci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcjogUGFja2FnZU1hbmFnZXJDb250cm9sbGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbm90aWNlc0NvbnRyb2xsZXI6IE5vdGljZXNDb250cm9sbGVyID0gbmV3IE5vdGljZXNDb250cm9sbGVyKFxuICAgICAgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyLFxuICAgICksXG4gICAgcHJpdmF0ZSByZWFkb25seSBub3RpY2VzUHJpbnRlcjogTm90aWNlc1ByaW50ZXIgPSBuZXcgTm90aWNlc1ByaW50ZXIoXG4gICAgICBwYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIsXG4gICAgKSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9wcmludGVyID0gcHJpbnRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9wcm9jZXNzID0gcHJvY2VzcyxcbiAgKSB7fVxuXG4gIHRyeUZpbmRBbmRQcmludEFwcGxpY2FibGVOb3RpY2VzID0gYXN5bmMgKHBhcmFtczogTm90aWNlc1JlbmRlcmVyUGFyYW1zKSA9PiB7XG4gICAgY29uc3QgY29tbWFuZDogc3RyaW5nIHwgdW5kZWZpbmVkID0gaGlkZUJpbih0aGlzLl9wcm9jZXNzLmFyZ3YpWzBdO1xuICAgIGlmIChjb21tYW5kPy5zdGFydHNXaXRoKCdub3RpY2VzJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG5vdGljZXMgPSBhd2FpdCB0aGlzLm5vdGljZXNDb250cm9sbGVyLmdldEFwcGxpY2FibGVOb3RpY2VzKHtcbiAgICAgICAgaW5jbHVkZUFja25vd2xlZGdlZDogZmFsc2UsXG4gICAgICAgIC4uLnBhcmFtcyxcbiAgICAgIH0pO1xuICAgICAgaWYgKG5vdGljZXMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLl9wcmludGVyLnByaW50TmV3TGluZSgpO1xuICAgICAgICB0aGlzLm5vdGljZXNQcmludGVyLnByaW50KG5vdGljZXMpO1xuICAgICAgICBhd2FpdCB0aGlzLm5vdGljZXNDb250cm9sbGVyLnJlY29yZFByaW50aW5nVGltZXMobm90aWNlcyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhpcy5fcHJpbnRlci5sb2coXG4gICAgICAgIGBVbmFibGUgdG8gcmVuZGVyIG5vdGljZXMgb24gZXZlbnQ9JHtwYXJhbXMuZXZlbnR9YCxcbiAgICAgICAgTG9nTGV2ZWwuREVCVUcsXG4gICAgICApO1xuICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICB0aGlzLl9wcmludGVyLmxvZyhlLm1lc3NhZ2UsIExvZ0xldmVsLkRFQlVHKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iXX0=