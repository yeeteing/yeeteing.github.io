"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplifyDynamoDbTableWrapper = exports.SSEType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const AMPLIFY_DYNAMODB_TABLE_RESOURCE_TYPE = 'Custom::AmplifyDynamoDBTable';
/**
 * Server Side Encryption Type Values
 * - `KMS` - Server-side encryption that uses AWS KMS. The key is stored in your account and is managed by KMS (AWS KMS charges apply).
 */
var SSEType;
(function (SSEType) {
    SSEType["KMS"] = "KMS";
})(SSEType || (exports.SSEType = SSEType = {}));
/**
 * Wrapper class around Custom::AmplifyDynamoDBTable custom resource, to simplify
 * the override experience a bit. This is NOT a construct, just an easier way to access
 * the generated construct.
 * This is a wrapper intended to mimic the `aws_cdk_lib.aws_dynamodb.Table` functionality more-or-less.
 * Notable differences is the addition of TKTK properties, to account for the fact that they're constructor props
 * in the CDK construct, as well as the removal of all from*, grant*, and metric* methods implemented by Table.
 */
class AmplifyDynamoDbTableWrapper {
    /**
     * Return true and perform type narrowing if a given input appears to be capable of
     * @param x the object to check.
     * @returns whether or not the resource is an underlying amplify dynamodb table resource.
     */
    static isAmplifyDynamoDbTableResource(x) {
        return x instanceof aws_cdk_lib_1.CfnResource && x.cfnResourceType === AMPLIFY_DYNAMODB_TABLE_RESOURCE_TYPE;
    }
    /**
     * Create the wrapper given an underlying CfnResource that is an instance of Custom::AmplifyDynamoDBTable.
     * @param resource the Cfn resource.
     */
    constructor(resource) {
        this.resource = resource;
        if (resource.cfnResourceType !== AMPLIFY_DYNAMODB_TABLE_RESOURCE_TYPE) {
            throw new Error(`Only CfnResource with type ${AMPLIFY_DYNAMODB_TABLE_RESOURCE_TYPE} can be used in AmplifyDynamoDbTable`);
        }
    }
    /**
     * Set the deletion policy of the resource based on the removal policy specified.
     * @param policy removal policy to set
     */
    applyRemovalPolicy(policy) {
        this.resource.applyRemovalPolicy(policy);
    }
    /**
     * Specify how you are charged for read and write throughput and how you manage capacity.
     */
    set billingMode(billingMode) {
        this.resource.addPropertyOverride('billingMode', billingMode);
    }
    /**
     * The name of TTL attribute.
     */
    set timeToLiveAttribute(timeToLiveSpecification) {
        this.resource.addPropertyOverride('timeToLiveSpecification', timeToLiveSpecification);
    }
    /**
     * Whether point-in-time recovery is enabled.
     */
    set pointInTimeRecoveryEnabled(pointInTimeRecoveryEnabled) {
        this.resource.addPropertyOverride('pointInTimeRecoverySpecification', { pointInTimeRecoveryEnabled });
    }
    /**
     * Whether point-in-time recovery is enabled
     * and recoveryPeriodInDays is set.
     */
    set pointInTimeRecoverySpecification(pointInTimeRecoverySpecification) {
        this.resource.addPropertyOverride('pointInTimeRecoverySpecification', pointInTimeRecoverySpecification);
    }
    /**
     * Update the provisioned throughput for the base table.
     */
    set provisionedThroughput(provisionedThroughput) {
        this.resource.addPropertyOverride('provisionedThroughput', provisionedThroughput);
    }
    /**
     * Set the provisionedThroughtput for a specified GSI by name.
     * @param indexName the index to specify a provisionedThroughput config for
     * @param provisionedThroughput the config to set
     */
    setGlobalSecondaryIndexProvisionedThroughput(indexName, provisionedThroughput) {
        const gsis = Object.entries(this.resource.rawOverrides?.Properties?.globalSecondaryIndexes ?? {});
        const foundGsis = gsis.filter(([_, gsiConfig]) => indexName === gsiConfig.indexName).map(([gsiIndex]) => gsiIndex);
        if (foundGsis.length !== 1) {
            throw new Error(`Index with name ${indexName} not found in table definition`);
        }
        this.resource.addPropertyOverride(`globalSecondaryIndexes.${foundGsis[0]}.provisionedThroughput`, provisionedThroughput);
    }
    /**
     * Set the ddb stream specification on the table.
     */
    set streamSpecification(streamSpecification) {
        this.resource.addPropertyOverride('streamSpecification', streamSpecification);
    }
    /**
     * Set the ddb server-side encryption specification on the table.
     */
    set sseSpecification(sseSpecification) {
        this.resource.addPropertyOverride('sseSpecification', sseSpecification);
    }
    /**
     * Set table deletion protection.
     */
    set deletionProtectionEnabled(deletionProtectionEnabled) {
        this.resource.addPropertyOverride('deletionProtectionEnabled', deletionProtectionEnabled);
    }
}
exports.AmplifyDynamoDbTableWrapper = AmplifyDynamoDbTableWrapper;
_a = JSII_RTTI_SYMBOL_1;
AmplifyDynamoDbTableWrapper[_a] = { fqn: "@aws-amplify/graphql-api-construct.AmplifyDynamoDbTableWrapper", version: "1.20.3" };
//# sourceMappingURL=data:application/json;base64,