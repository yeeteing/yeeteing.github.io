"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationTurnEventToolsProvider = void 0;
const graphql_tool_1 = require("./graphql_tool");
const graphql_query_factory_1 = require("./graphql_query_factory");
const user_agent_provider_1 = require("../user_agent_provider");
/**
 * Creates executable tools from definitions in conversation turn event.
 */
class ConversationTurnEventToolsProvider {
    /**
     * Creates conversation turn event tools provider.
     */
    constructor(event, graphQlQueryFactory = new graphql_query_factory_1.GraphQlQueryFactory()) {
        this.event = event;
        this.graphQlQueryFactory = graphQlQueryFactory;
        this.getEventTools = () => {
            var _a;
            const { toolsConfiguration, graphqlApiEndpoint } = this.event;
            if (!toolsConfiguration || !toolsConfiguration.dataTools) {
                return [];
            }
            const tools = (_a = toolsConfiguration.dataTools) === null || _a === void 0 ? void 0 : _a.map((tool) => {
                const { name, description, inputSchema } = tool;
                const query = this.graphQlQueryFactory.createQuery(tool);
                return new graphql_tool_1.GraphQlTool(name, description, inputSchema, graphqlApiEndpoint, query, this.event.request.headers.authorization, new user_agent_provider_1.UserAgentProvider(this.event));
            });
            return tools !== null && tools !== void 0 ? tools : [];
        };
    }
}
exports.ConversationTurnEventToolsProvider = ConversationTurnEventToolsProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRfdG9vbHNfcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29udmVyc2F0aW9uL3J1bnRpbWUvZXZlbnQtdG9vbHMtcHJvdmlkZXIvZXZlbnRfdG9vbHNfcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsaURBQTZDO0FBQzdDLG1FQUE4RDtBQUM5RCxnRUFBMkQ7QUFFM0Q7O0dBRUc7QUFDSCxNQUFhLGtDQUFrQztJQUM3Qzs7T0FFRztJQUNILFlBQ21CLEtBQTRCLEVBQzVCLHNCQUEyQyxJQUFJLDJDQUFtQixFQUFFO1FBRHBFLFVBQUssR0FBTCxLQUFLLENBQXVCO1FBQzVCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBaUQ7UUFHdkYsa0JBQWEsR0FBRyxHQUEwQixFQUFFOztZQUMxQyxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQzlELElBQUksQ0FBQyxrQkFBa0IsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsRUFBRSxDQUFDO2dCQUN6RCxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUM7WUFDRCxNQUFNLEtBQUssR0FBRyxNQUFBLGtCQUFrQixDQUFDLFNBQVMsMENBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ3ZELE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQztnQkFDaEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDekQsT0FBTyxJQUFJLDBCQUFXLENBQ3BCLElBQUksRUFDSixXQUFXLEVBQ1gsV0FBVyxFQUNYLGtCQUFrQixFQUNsQixLQUFLLEVBQ0wsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFDeEMsSUFBSSx1Q0FBaUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ2xDLENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sS0FBSyxhQUFMLEtBQUssY0FBTCxLQUFLLEdBQUksRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQztJQXJCQyxDQUFDO0NBc0JMO0FBN0JELGdGQTZCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnZlcnNhdGlvblR1cm5FdmVudCwgRXhlY3V0YWJsZVRvb2wgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBHcmFwaFFsVG9vbCB9IGZyb20gJy4vZ3JhcGhxbF90b29sJztcbmltcG9ydCB7IEdyYXBoUWxRdWVyeUZhY3RvcnkgfSBmcm9tICcuL2dyYXBocWxfcXVlcnlfZmFjdG9yeSc7XG5pbXBvcnQgeyBVc2VyQWdlbnRQcm92aWRlciB9IGZyb20gJy4uL3VzZXJfYWdlbnRfcHJvdmlkZXInO1xuXG4vKipcbiAqIENyZWF0ZXMgZXhlY3V0YWJsZSB0b29scyBmcm9tIGRlZmluaXRpb25zIGluIGNvbnZlcnNhdGlvbiB0dXJuIGV2ZW50LlxuICovXG5leHBvcnQgY2xhc3MgQ29udmVyc2F0aW9uVHVybkV2ZW50VG9vbHNQcm92aWRlciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGNvbnZlcnNhdGlvbiB0dXJuIGV2ZW50IHRvb2xzIHByb3ZpZGVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBldmVudDogQ29udmVyc2F0aW9uVHVybkV2ZW50LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ3JhcGhRbFF1ZXJ5RmFjdG9yeTogR3JhcGhRbFF1ZXJ5RmFjdG9yeSA9IG5ldyBHcmFwaFFsUXVlcnlGYWN0b3J5KCksXG4gICkge31cblxuICBnZXRFdmVudFRvb2xzID0gKCk6IEFycmF5PEV4ZWN1dGFibGVUb29sPiA9PiB7XG4gICAgY29uc3QgeyB0b29sc0NvbmZpZ3VyYXRpb24sIGdyYXBocWxBcGlFbmRwb2ludCB9ID0gdGhpcy5ldmVudDtcbiAgICBpZiAoIXRvb2xzQ29uZmlndXJhdGlvbiB8fCAhdG9vbHNDb25maWd1cmF0aW9uLmRhdGFUb29scykge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCB0b29scyA9IHRvb2xzQ29uZmlndXJhdGlvbi5kYXRhVG9vbHM/Lm1hcCgodG9vbCkgPT4ge1xuICAgICAgY29uc3QgeyBuYW1lLCBkZXNjcmlwdGlvbiwgaW5wdXRTY2hlbWEgfSA9IHRvb2w7XG4gICAgICBjb25zdCBxdWVyeSA9IHRoaXMuZ3JhcGhRbFF1ZXJ5RmFjdG9yeS5jcmVhdGVRdWVyeSh0b29sKTtcbiAgICAgIHJldHVybiBuZXcgR3JhcGhRbFRvb2woXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICBpbnB1dFNjaGVtYSxcbiAgICAgICAgZ3JhcGhxbEFwaUVuZHBvaW50LFxuICAgICAgICBxdWVyeSxcbiAgICAgICAgdGhpcy5ldmVudC5yZXF1ZXN0LmhlYWRlcnMuYXV0aG9yaXphdGlvbixcbiAgICAgICAgbmV3IFVzZXJBZ2VudFByb3ZpZGVyKHRoaXMuZXZlbnQpLFxuICAgICAgKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdG9vbHMgPz8gW107XG4gIH07XG59XG4iXX0=