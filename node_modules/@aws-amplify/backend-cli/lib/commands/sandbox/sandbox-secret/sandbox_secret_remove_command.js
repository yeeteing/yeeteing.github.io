import { printer } from '@aws-amplify/cli-core';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Command to remove sandbox secret.
 */
export class SandboxSecretRemoveCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Remove sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'remove [secret-name]';
        this.describe = 'Remove a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const sandboxBackendIdentifier = await this.sandboxIdResolver.resolve(args.identifier);
        if (args.secretName) {
            await this.secretClient.removeSecret(sandboxBackendIdentifier, args.secretName);
            printer.print(`Successfully removed secret ${args.secretName}`);
        }
        else if (args.all) {
            const secrets = await this.secretClient.listSecrets(sandboxBackendIdentifier);
            const names = secrets.map((secret) => secret.name);
            await this.secretClient.removeSecrets(sandboxBackendIdentifier, names);
            printer.print('Successfully removed all secrets');
        }
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .option('all', {
            describe: 'Remove all secrets',
            type: 'boolean',
            conflicts: ['secret-name'],
        })
            .positional('secret-name', {
            describe: 'Name of the secret to remove',
            type: 'string',
            demandOption: false,
        })
            .check((argv) => {
            if (!argv.all && !argv['secret-name']) {
                throw new AmplifyUserError('InvalidCommandInputError', {
                    message: 'Either secret-name or all flag must be provided',
                    resolution: 'Provide either secret-name or all flag',
                });
            }
            return true;
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfcmVtb3ZlX2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9yZW1vdmVfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFOUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMEJBQTBCO0lBaUJsQjtJQUNBO0lBZm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFDbUIsaUJBQTJDLEVBQzNDLFlBQTBCO1FBRDFCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7UUFDM0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFFM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQztRQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLHlCQUF5QixDQUFDO0lBQzVDLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQ2IsSUFBNkQsRUFDOUMsRUFBRTtRQUNqQixNQUFNLHdCQUF3QixHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FDbkUsSUFBSSxDQUFDLFVBQVUsQ0FDaEIsQ0FBQztRQUNGLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3BCLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQ2xDLHdCQUF3QixFQUN4QixJQUFJLENBQUMsVUFBVSxDQUNoQixDQUFDO1lBQ0YsT0FBTyxDQUFDLEtBQUssQ0FBQywrQkFBK0IsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDbEUsQ0FBQzthQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3BCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQ2pELHdCQUF3QixDQUN6QixDQUFDO1lBQ0YsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ25ELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDdkUsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQ3BELENBQUM7SUFDSCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBNkMsRUFBRTtRQUNuRSxPQUFPLEtBQUs7YUFDVCxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2IsUUFBUSxFQUFFLG9CQUFvQjtZQUM5QixJQUFJLEVBQUUsU0FBUztZQUNmLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQztTQUMzQixDQUFDO2FBQ0QsVUFBVSxDQUFDLGFBQWEsRUFBRTtZQUN6QixRQUFRLEVBQUUsOEJBQThCO1lBQ3hDLElBQUksRUFBRSxRQUFRO1lBQ2QsWUFBWSxFQUFFLEtBQUs7U0FDcEIsQ0FBQzthQUNELEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztnQkFDdEMsTUFBTSxJQUFJLGdCQUFnQixDQUFDLDBCQUEwQixFQUFFO29CQUNyRCxPQUFPLEVBQUUsaURBQWlEO29CQUMxRCxVQUFVLEVBQUUsd0NBQXdDO2lCQUNyRCxDQUFDLENBQUM7WUFDTCxDQUFDO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgU2VjcmV0Q2xpZW50IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4uL3NhbmRib3hfaWRfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQXJndW1lbnRzS2ViYWJDYXNlIH0gZnJvbSAnLi4vLi4vLi4va2ViYWJfY2FzZS5qcyc7XG5pbXBvcnQgeyBTYW5kYm94Q29tbWFuZEdsb2JhbE9wdGlvbnMgfSBmcm9tICcuLi9vcHRpb25fdHlwZXMuanMnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG4vKipcbiAqIENvbW1hbmQgdG8gcmVtb3ZlIHNhbmRib3ggc2VjcmV0LlxuICovXG5leHBvcnQgY2xhc3MgU2FuZGJveFNlY3JldFJlbW92ZUNvbW1hbmRcbiAgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdCwgU2VjcmV0UmVtb3ZlQ29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogUmVtb3ZlIHNhbmRib3ggc2VjcmV0IGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNhbmRib3hJZFJlc29sdmVyOiBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZWNyZXRDbGllbnQ6IFNlY3JldENsaWVudCxcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3JlbW92ZSBbc2VjcmV0LW5hbWVdJztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ1JlbW92ZSBhIHNhbmRib3ggc2VjcmV0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChcbiAgICBhcmdzOiBBcmd1bWVudHNDYW1lbENhc2U8U2VjcmV0UmVtb3ZlQ29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+LFxuICApOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBzYW5kYm94QmFja2VuZElkZW50aWZpZXIgPSBhd2FpdCB0aGlzLnNhbmRib3hJZFJlc29sdmVyLnJlc29sdmUoXG4gICAgICBhcmdzLmlkZW50aWZpZXIsXG4gICAgKTtcbiAgICBpZiAoYXJncy5zZWNyZXROYW1lKSB7XG4gICAgICBhd2FpdCB0aGlzLnNlY3JldENsaWVudC5yZW1vdmVTZWNyZXQoXG4gICAgICAgIHNhbmRib3hCYWNrZW5kSWRlbnRpZmllcixcbiAgICAgICAgYXJncy5zZWNyZXROYW1lLFxuICAgICAgKTtcbiAgICAgIHByaW50ZXIucHJpbnQoYFN1Y2Nlc3NmdWxseSByZW1vdmVkIHNlY3JldCAke2FyZ3Muc2VjcmV0TmFtZX1gKTtcbiAgICB9IGVsc2UgaWYgKGFyZ3MuYWxsKSB7XG4gICAgICBjb25zdCBzZWNyZXRzID0gYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQubGlzdFNlY3JldHMoXG4gICAgICAgIHNhbmRib3hCYWNrZW5kSWRlbnRpZmllcixcbiAgICAgICk7XG4gICAgICBjb25zdCBuYW1lcyA9IHNlY3JldHMubWFwKChzZWNyZXQpID0+IHNlY3JldC5uYW1lKTtcbiAgICAgIGF3YWl0IHRoaXMuc2VjcmV0Q2xpZW50LnJlbW92ZVNlY3JldHMoc2FuZGJveEJhY2tlbmRJZGVudGlmaWVyLCBuYW1lcyk7XG4gICAgICBwcmludGVyLnByaW50KCdTdWNjZXNzZnVsbHkgcmVtb3ZlZCBhbGwgc2VjcmV0cycpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PFNlY3JldFJlbW92ZUNvbW1hbmRPcHRpb25zS2ViYWJDYXNlPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzXG4gICAgICAub3B0aW9uKCdhbGwnLCB7XG4gICAgICAgIGRlc2NyaWJlOiAnUmVtb3ZlIGFsbCBzZWNyZXRzJyxcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICBjb25mbGljdHM6IFsnc2VjcmV0LW5hbWUnXSxcbiAgICAgIH0pXG4gICAgICAucG9zaXRpb25hbCgnc2VjcmV0LW5hbWUnLCB7XG4gICAgICAgIGRlc2NyaWJlOiAnTmFtZSBvZiB0aGUgc2VjcmV0IHRvIHJlbW92ZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBkZW1hbmRPcHRpb246IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5jaGVjaygoYXJndikgPT4ge1xuICAgICAgICBpZiAoIWFyZ3YuYWxsICYmICFhcmd2WydzZWNyZXQtbmFtZSddKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoJ0ludmFsaWRDb21tYW5kSW5wdXRFcnJvcicsIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6ICdFaXRoZXIgc2VjcmV0LW5hbWUgb3IgYWxsIGZsYWcgbXVzdCBiZSBwcm92aWRlZCcsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiAnUHJvdmlkZSBlaXRoZXIgc2VjcmV0LW5hbWUgb3IgYWxsIGZsYWcnLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gIH07XG59XG5cbnR5cGUgU2VjcmV0UmVtb3ZlQ29tbWFuZE9wdGlvbnNLZWJhYkNhc2UgPSBBcmd1bWVudHNLZWJhYkNhc2U8XG4gIHtcbiAgICBzZWNyZXROYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgLyoqXG4gICAgICogT3B0aW9uYWwgZmxhZyB0byByZW1vdmUgYWxsIHNlY3JldHMuXG4gICAgICovXG4gICAgYWxsPzogYm9vbGVhbjtcbiAgfSAmIFNhbmRib3hDb21tYW5kR2xvYmFsT3B0aW9uc1xuPjtcbiJdfQ==