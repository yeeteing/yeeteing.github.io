import _fsp from 'fs/promises';
import * as _path from 'path';
import { existsSync as _existsSync } from 'fs';
import { PackageManagerControllerBase } from './package_manager_controller_base.js';
import { PnpmLockFileReader } from './lock-file-reader/pnpm_lock_file_reader.js';
/**
 * PnpmPackageManagerController is an abstraction around pnpm commands that are needed to initialize a project and install dependencies
 */
export declare class PnpmPackageManagerController extends PackageManagerControllerBase {
    protected readonly cwd: string;
    protected readonly fsp: typeof _fsp;
    protected readonly path: _path.PlatformPath;
    protected readonly execa: import("execa").ExecaMethod<{}>;
    protected readonly executeWithDebugLogger: (cwd: string, executable: string, args?: Readonly<string[]>, execa?: import("execa").ExecaMethod<{}>, options?: import("@aws-amplify/plugin-types").ExecaOptions) => ReturnType<import("execa").ExecaMethod>;
    protected readonly existsSync: typeof _existsSync;
    protected readonly lockFileReader: PnpmLockFileReader;
    /**
     * constructor
     */
    constructor(cwd: string, fsp?: typeof _fsp, path?: _path.PlatformPath, execa?: import("execa").ExecaMethod<{}>, executeWithDebugLogger?: (cwd: string, executable: string, args?: Readonly<string[]>, execa?: import("execa").ExecaMethod<{}>, options?: import("@aws-amplify/plugin-types").ExecaOptions) => ReturnType<import("execa").ExecaMethod>, existsSync?: typeof _existsSync, lockFileReader?: PnpmLockFileReader);
}
//# sourceMappingURL=pnpm_package_manager_controller.d.ts.map