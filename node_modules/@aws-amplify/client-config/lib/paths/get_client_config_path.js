import fsp from 'fs/promises';
import path from 'path';
import { ClientConfigFormat } from '../index.js';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Get path to config file
 * @param fileName - name of the file to be used for client config. Can be different based on the version of the client config.
 * @param outDir - path to directory where config is written. If not provided defaults to current process working directory.
 * @param format - The format which the configuration should be exported into. Defaults to JSON.
 * returns path to config file
 */
export const getClientConfigPath = async (fileName, outDir, format) => {
    const defaultArgs = {
        out: process.cwd(),
        format: ClientConfigFormat.JSON,
    };
    format = format || defaultArgs.format;
    let targetPath = defaultArgs.out;
    if (outDir) {
        targetPath = path.isAbsolute(outDir)
            ? outDir
            : path.resolve(process.cwd(), outDir);
        try {
            await fsp.access(outDir);
        }
        catch (error) {
            // outDir does not exist, so create dir
            if (error instanceof Error && error.message.includes('ENOENT')) {
                try {
                    await fsp.mkdir(outDir, { recursive: true });
                }
                catch (error) {
                    if (error instanceof Error && error.message.includes('ENOENT')) {
                        throw new AmplifyUserError('InvalidPathError', {
                            message: `Directory ${outDir} could not be created.`,
                            resolution: 'Ensure that you have access for creating this file path and that the path is correct',
                        }, error);
                    }
                }
            }
            else {
                throw error;
            }
        }
    }
    let extension;
    switch (format) {
        case ClientConfigFormat.JSON_MOBILE:
            extension = 'json';
            break;
        default:
            extension = format;
            break;
    }
    targetPath = path.resolve(targetPath, `${fileName}.${extension}`);
    return targetPath;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2NsaWVudF9jb25maWdfcGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRocy9nZXRfY2xpZW50X2NvbmZpZ19wYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUM5QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUE0QixrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUU5RDs7Ozs7O0dBTUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLEVBQ3RDLFFBQWtDLEVBQ2xDLE1BQWUsRUFDZixNQUEyQixFQUMzQixFQUFFO0lBQ0YsTUFBTSxXQUFXLEdBQUc7UUFDbEIsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUU7UUFDbEIsTUFBTSxFQUFFLGtCQUFrQixDQUFDLElBQUk7S0FDaEMsQ0FBQztJQUNGLE1BQU0sR0FBRyxNQUFNLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQztJQUV0QyxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDO0lBRWpDLElBQUksTUFBTSxFQUFFLENBQUM7UUFDWCxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7WUFDbEMsQ0FBQyxDQUFDLE1BQU07WUFDUixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFeEMsSUFBSSxDQUFDO1lBQ0gsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNCLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsdUNBQXVDO1lBQ3ZDLElBQUksS0FBSyxZQUFZLEtBQUssSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO2dCQUMvRCxJQUFJLENBQUM7b0JBQ0gsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUMvQyxDQUFDO2dCQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7b0JBQ2YsSUFBSSxLQUFLLFlBQVksS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7d0JBQy9ELE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsa0JBQWtCLEVBQ2xCOzRCQUNFLE9BQU8sRUFBRSxhQUFhLE1BQU0sd0JBQXdCOzRCQUNwRCxVQUFVLEVBQ1Isc0ZBQXNGO3lCQUN6RixFQUNELEtBQUssQ0FDTixDQUFDO29CQUNKLENBQUM7Z0JBQ0gsQ0FBQztZQUNILENBQUM7aUJBQU0sQ0FBQztnQkFDTixNQUFNLEtBQUssQ0FBQztZQUNkLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVELElBQUksU0FBaUIsQ0FBQztJQUN0QixRQUFRLE1BQU0sRUFBRSxDQUFDO1FBQ2YsS0FBSyxrQkFBa0IsQ0FBQyxXQUFXO1lBQ2pDLFNBQVMsR0FBRyxNQUFNLENBQUM7WUFDbkIsTUFBTTtRQUNSO1lBQ0UsU0FBUyxHQUFHLE1BQU0sQ0FBQztZQUNuQixNQUFNO0lBQ1YsQ0FBQztJQUVELFVBQVUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLFFBQVEsSUFBSSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdGaWxlQmFzZU5hbWUsIENsaWVudENvbmZpZ0Zvcm1hdCB9IGZyb20gJy4uL2luZGV4LmpzJztcbmltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbi8qKlxuICogR2V0IHBhdGggdG8gY29uZmlnIGZpbGVcbiAqIEBwYXJhbSBmaWxlTmFtZSAtIG5hbWUgb2YgdGhlIGZpbGUgdG8gYmUgdXNlZCBmb3IgY2xpZW50IGNvbmZpZy4gQ2FuIGJlIGRpZmZlcmVudCBiYXNlZCBvbiB0aGUgdmVyc2lvbiBvZiB0aGUgY2xpZW50IGNvbmZpZy5cbiAqIEBwYXJhbSBvdXREaXIgLSBwYXRoIHRvIGRpcmVjdG9yeSB3aGVyZSBjb25maWcgaXMgd3JpdHRlbi4gSWYgbm90IHByb3ZpZGVkIGRlZmF1bHRzIHRvIGN1cnJlbnQgcHJvY2VzcyB3b3JraW5nIGRpcmVjdG9yeS5cbiAqIEBwYXJhbSBmb3JtYXQgLSBUaGUgZm9ybWF0IHdoaWNoIHRoZSBjb25maWd1cmF0aW9uIHNob3VsZCBiZSBleHBvcnRlZCBpbnRvLiBEZWZhdWx0cyB0byBKU09OLlxuICogcmV0dXJucyBwYXRoIHRvIGNvbmZpZyBmaWxlXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRDbGllbnRDb25maWdQYXRoID0gYXN5bmMgKFxuICBmaWxlTmFtZTogQ2xpZW50Q29uZmlnRmlsZUJhc2VOYW1lLFxuICBvdXREaXI/OiBzdHJpbmcsXG4gIGZvcm1hdD86IENsaWVudENvbmZpZ0Zvcm1hdCxcbikgPT4ge1xuICBjb25zdCBkZWZhdWx0QXJncyA9IHtcbiAgICBvdXQ6IHByb2Nlc3MuY3dkKCksXG4gICAgZm9ybWF0OiBDbGllbnRDb25maWdGb3JtYXQuSlNPTixcbiAgfTtcbiAgZm9ybWF0ID0gZm9ybWF0IHx8IGRlZmF1bHRBcmdzLmZvcm1hdDtcblxuICBsZXQgdGFyZ2V0UGF0aCA9IGRlZmF1bHRBcmdzLm91dDtcblxuICBpZiAob3V0RGlyKSB7XG4gICAgdGFyZ2V0UGF0aCA9IHBhdGguaXNBYnNvbHV0ZShvdXREaXIpXG4gICAgICA/IG91dERpclxuICAgICAgOiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgb3V0RGlyKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBmc3AuYWNjZXNzKG91dERpcik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIG91dERpciBkb2VzIG5vdCBleGlzdCwgc28gY3JlYXRlIGRpclxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnRU5PRU5UJykpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCBmc3AubWtkaXIob3V0RGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiBlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdFTk9FTlQnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgICAgICdJbnZhbGlkUGF0aEVycm9yJyxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGBEaXJlY3RvcnkgJHtvdXREaXJ9IGNvdWxkIG5vdCBiZSBjcmVhdGVkLmAsXG4gICAgICAgICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICAgICAgICdFbnN1cmUgdGhhdCB5b3UgaGF2ZSBhY2Nlc3MgZm9yIGNyZWF0aW5nIHRoaXMgZmlsZSBwYXRoIGFuZCB0aGF0IHRoZSBwYXRoIGlzIGNvcnJlY3QnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQgZXh0ZW5zaW9uOiBzdHJpbmc7XG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSBDbGllbnRDb25maWdGb3JtYXQuSlNPTl9NT0JJTEU6XG4gICAgICBleHRlbnNpb24gPSAnanNvbic7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZXh0ZW5zaW9uID0gZm9ybWF0O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICB0YXJnZXRQYXRoID0gcGF0aC5yZXNvbHZlKHRhcmdldFBhdGgsIGAke2ZpbGVOYW1lfS4ke2V4dGVuc2lvbn1gKTtcbiAgcmV0dXJuIHRhcmdldFBhdGg7XG59O1xuIl19