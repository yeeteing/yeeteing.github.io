import { customOutputKey, } from '@aws-amplify/backend-output-schemas';
import { Lazy } from 'aws-cdk-lib';
import { AmplifyUserError, ObjectAccumulatorPropertyAlreadyExistsError, ObjectAccumulatorVersionMismatchError, } from '@aws-amplify/platform-core';
/**
 * Accumulates custom outputs as they're added to the backend.
 */
export class CustomOutputsAccumulator {
    outputStorageStrategy;
    clientConfigAccumulator;
    hasBackendOutputEntry = false;
    /**
     * Creates custom outputs accumulator.
     */
    constructor(outputStorageStrategy, clientConfigAccumulator) {
        this.outputStorageStrategy = outputStorageStrategy;
        this.clientConfigAccumulator = clientConfigAccumulator;
    }
    addOutput = (clientConfigPart) => {
        try {
            this.clientConfigAccumulator.accumulate(clientConfigPart);
        }
        catch (error) {
            if (error instanceof ObjectAccumulatorPropertyAlreadyExistsError) {
                throw new AmplifyUserError('OutputEntryAlreadyExistsError', {
                    message: `Output entry with key ${error.key} already exists`,
                    resolution: "Check if 'backend.addOutput' is called multiple times with overlapping inputs",
                }, error);
            }
            if (error instanceof ObjectAccumulatorVersionMismatchError) {
                throw new AmplifyUserError('VersionMismatchError', {
                    message: `Conflicting versions of client configuration found.`,
                    resolution: "Ensure that the version specified in 'backend.addOutput' is consistent" +
                        ' and is same as the one used for generating the client config',
                }, error);
            }
            throw error;
        }
        this.ensureBackendOutputEntry();
    };
    ensureBackendOutputEntry = () => {
        if (this.hasBackendOutputEntry) {
            return;
        }
        this.outputStorageStrategy.addBackendOutputEntry(customOutputKey, {
            version: '1',
            payload: {
                customOutputs: Lazy.string({
                    produce: () => {
                        return JSON.stringify(this.clientConfigAccumulator.getAccumulatedObject());
                    },
                }),
            },
        });
        this.hasBackendOutputEntry = true;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tX291dHB1dHNfYWNjdW11bGF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5naW5lL2N1c3RvbV9vdXRwdXRzX2FjY3VtdWxhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFFTCxlQUFlLEdBQ2hCLE1BQU0scUNBQXFDLENBQUM7QUFDN0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNuQyxPQUFPLEVBQ0wsZ0JBQWdCLEVBRWhCLDJDQUEyQyxFQUMzQyxxQ0FBcUMsR0FDdEMsTUFBTSw0QkFBNEIsQ0FBQztBQUVwQzs7R0FFRztBQUNILE1BQU0sT0FBTyx3QkFBd0I7SUFPaEI7SUFDQTtJQVBYLHFCQUFxQixHQUFHLEtBQUssQ0FBQztJQUV0Qzs7T0FFRztJQUNILFlBQ21CLHFCQUFpRSxFQUNqRSx1QkFBd0Q7UUFEeEQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUE0QztRQUNqRSw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQWlDO0lBQ3hFLENBQUM7SUFFSixTQUFTLEdBQUcsQ0FDVixnQkFBa0UsRUFDbEUsRUFBRTtRQUNGLElBQUksQ0FBQztZQUNILElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM1RCxDQUFDO1FBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztZQUNmLElBQUksS0FBSyxZQUFZLDJDQUEyQyxFQUFFLENBQUM7Z0JBQ2pFLE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsK0JBQStCLEVBQy9CO29CQUNFLE9BQU8sRUFBRSx5QkFBeUIsS0FBSyxDQUFDLEdBQUcsaUJBQWlCO29CQUM1RCxVQUFVLEVBQ1IsK0VBQStFO2lCQUNsRixFQUNELEtBQUssQ0FDTixDQUFDO1lBQ0osQ0FBQztZQUNELElBQUksS0FBSyxZQUFZLHFDQUFxQyxFQUFFLENBQUM7Z0JBQzNELE1BQU0sSUFBSSxnQkFBZ0IsQ0FDeEIsc0JBQXNCLEVBQ3RCO29CQUNFLE9BQU8sRUFBRSxxREFBcUQ7b0JBQzlELFVBQVUsRUFDUix3RUFBd0U7d0JBQ3hFLCtEQUErRDtpQkFDbEUsRUFDRCxLQUFLLENBQ04sQ0FBQztZQUNKLENBQUM7WUFDRCxNQUFNLEtBQUssQ0FBQztRQUNkLENBQUM7UUFDRCxJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztJQUNsQyxDQUFDLENBQUM7SUFFTSx3QkFBd0IsR0FBRyxHQUFHLEVBQUU7UUFDdEMsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUMvQixPQUFPO1FBQ1QsQ0FBQztRQUNELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxxQkFBcUIsQ0FBQyxlQUFlLEVBQUU7WUFDaEUsT0FBTyxFQUFFLEdBQUc7WUFDWixPQUFPLEVBQUU7Z0JBQ1AsYUFBYSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7b0JBQ3pCLE9BQU8sRUFBRSxHQUFHLEVBQUU7d0JBQ1osT0FBTyxJQUFJLENBQUMsU0FBUyxDQUNuQixJQUFJLENBQUMsdUJBQXVCLENBQUMsb0JBQW9CLEVBQUUsQ0FDcEQsQ0FBQztvQkFDSixDQUFDO2lCQUNGLENBQUM7YUFDSDtTQUNGLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUM7SUFDcEMsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5LFxuICBEZWVwUGFydGlhbEFtcGxpZnlHZW5lcmF0ZWRDb25maWdzLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IENsaWVudENvbmZpZyB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGllbnQtY29uZmlnJztcbmltcG9ydCB7XG4gIEN1c3RvbU91dHB1dCxcbiAgY3VzdG9tT3V0cHV0S2V5LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc2NoZW1hcyc7XG5pbXBvcnQgeyBMYXp5IH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHtcbiAgQW1wbGlmeVVzZXJFcnJvcixcbiAgT2JqZWN0QWNjdW11bGF0b3IsXG4gIE9iamVjdEFjY3VtdWxhdG9yUHJvcGVydHlBbHJlYWR5RXhpc3RzRXJyb3IsXG4gIE9iamVjdEFjY3VtdWxhdG9yVmVyc2lvbk1pc21hdGNoRXJyb3IsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcblxuLyoqXG4gKiBBY2N1bXVsYXRlcyBjdXN0b20gb3V0cHV0cyBhcyB0aGV5J3JlIGFkZGVkIHRvIHRoZSBiYWNrZW5kLlxuICovXG5leHBvcnQgY2xhc3MgQ3VzdG9tT3V0cHV0c0FjY3VtdWxhdG9yIHtcbiAgcHJpdmF0ZSBoYXNCYWNrZW5kT3V0cHV0RW50cnkgPSBmYWxzZTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBjdXN0b20gb3V0cHV0cyBhY2N1bXVsYXRvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgb3V0cHV0U3RvcmFnZVN0cmF0ZWd5OiBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5PEN1c3RvbU91dHB1dD4sXG4gICAgcHJpdmF0ZSByZWFkb25seSBjbGllbnRDb25maWdBY2N1bXVsYXRvcjogT2JqZWN0QWNjdW11bGF0b3I8Q2xpZW50Q29uZmlnPixcbiAgKSB7fVxuXG4gIGFkZE91dHB1dCA9IChcbiAgICBjbGllbnRDb25maWdQYXJ0OiBEZWVwUGFydGlhbEFtcGxpZnlHZW5lcmF0ZWRDb25maWdzPENsaWVudENvbmZpZz4sXG4gICkgPT4ge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmNsaWVudENvbmZpZ0FjY3VtdWxhdG9yLmFjY3VtdWxhdGUoY2xpZW50Q29uZmlnUGFydCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIE9iamVjdEFjY3VtdWxhdG9yUHJvcGVydHlBbHJlYWR5RXhpc3RzRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgJ091dHB1dEVudHJ5QWxyZWFkeUV4aXN0c0Vycm9yJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlOiBgT3V0cHV0IGVudHJ5IHdpdGgga2V5ICR7ZXJyb3Iua2V5fSBhbHJlYWR5IGV4aXN0c2AsXG4gICAgICAgICAgICByZXNvbHV0aW9uOlxuICAgICAgICAgICAgICBcIkNoZWNrIGlmICdiYWNrZW5kLmFkZE91dHB1dCcgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIHdpdGggb3ZlcmxhcHBpbmcgaW5wdXRzXCIsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIE9iamVjdEFjY3VtdWxhdG9yVmVyc2lvbk1pc21hdGNoRXJyb3IpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgJ1ZlcnNpb25NaXNtYXRjaEVycm9yJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlOiBgQ29uZmxpY3RpbmcgdmVyc2lvbnMgb2YgY2xpZW50IGNvbmZpZ3VyYXRpb24gZm91bmQuYCxcbiAgICAgICAgICAgIHJlc29sdXRpb246XG4gICAgICAgICAgICAgIFwiRW5zdXJlIHRoYXQgdGhlIHZlcnNpb24gc3BlY2lmaWVkIGluICdiYWNrZW5kLmFkZE91dHB1dCcgaXMgY29uc2lzdGVudFwiICtcbiAgICAgICAgICAgICAgJyBhbmQgaXMgc2FtZSBhcyB0aGUgb25lIHVzZWQgZm9yIGdlbmVyYXRpbmcgdGhlIGNsaWVudCBjb25maWcnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgdGhpcy5lbnN1cmVCYWNrZW5kT3V0cHV0RW50cnkoKTtcbiAgfTtcblxuICBwcml2YXRlIGVuc3VyZUJhY2tlbmRPdXRwdXRFbnRyeSA9ICgpID0+IHtcbiAgICBpZiAodGhpcy5oYXNCYWNrZW5kT3V0cHV0RW50cnkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5vdXRwdXRTdG9yYWdlU3RyYXRlZ3kuYWRkQmFja2VuZE91dHB1dEVudHJ5KGN1c3RvbU91dHB1dEtleSwge1xuICAgICAgdmVyc2lvbjogJzEnLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBjdXN0b21PdXRwdXRzOiBMYXp5LnN0cmluZyh7XG4gICAgICAgICAgcHJvZHVjZTogKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICB0aGlzLmNsaWVudENvbmZpZ0FjY3VtdWxhdG9yLmdldEFjY3VtdWxhdGVkT2JqZWN0KCksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICB0aGlzLmhhc0JhY2tlbmRPdXRwdXRFbnRyeSA9IHRydWU7XG4gIH07XG59XG4iXX0=