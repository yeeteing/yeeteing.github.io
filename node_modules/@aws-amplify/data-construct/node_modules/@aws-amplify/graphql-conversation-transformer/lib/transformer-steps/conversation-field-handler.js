"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConversationFieldHandler = void 0;
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const semver = __importStar(require("semver"));
const conversation_model_1 = require("../graphql-types/conversation-model");
const message_model_1 = require("../graphql-types/message-model");
const name_values_1 = require("../graphql-types/name-values");
const process_tools_1 = require("../tools/process-tools");
class ConversationFieldHandler {
    getDirectiveConfig(parent, definition, directive, context) {
        if (parent.name.value !== 'Mutation') {
            throw new graphql_transformer_core_1.InvalidDirectiveError('@conversation directive must be used on Mutation field.');
        }
        const parsedConfig = this.getConversationConfig(directive, parent, definition, context);
        const conversationModels = this.createModels(parsedConfig, definition);
        const supportingFields = this.createSupportingFields(parsedConfig);
        const config = {
            ...parsedConfig,
            ...conversationModels,
            ...supportingFields,
        };
        this.validate(config);
        return config;
    }
    getConversationConfig(directive, parent, definition, context) {
        const directiveWrapped = new graphql_transformer_core_1.DirectiveWrapper(directive);
        const config = directiveWrapped.getArguments({
            parent,
            directive,
            field: definition,
        }, (0, graphql_transformer_core_1.generateGetArgumentsInput)(context.transformParameters));
        return config;
    }
    createModels(config, definition) {
        if (definition.type.kind !== 'NamedType' || definition.type.name.value !== 'AmplifyAIConversationMessage') {
            throw new graphql_transformer_core_1.InvalidDirectiveError('@conversation return type must be AmplifyAIConversationMessage');
        }
        const conversationMessageTypeName = (0, name_values_1.getConversationMessageTypeName)(config);
        const conversationTypeName = (0, name_values_1.getConversationTypeName)(config);
        const message = (0, message_model_1.createMessageModel)(conversationTypeName, conversationMessageTypeName, name_values_1.CONVERSATION_MESSAGES_REFERENCE_FIELD_NAME, definition.type);
        const conversation = (0, conversation_model_1.createConversationModel)(conversationTypeName, conversationMessageTypeName, name_values_1.CONVERSATION_MESSAGES_REFERENCE_FIELD_NAME);
        return { message, conversation };
    }
    createSupportingFields(config) {
        const conversationMessageTypeName = (0, name_values_1.getConversationMessageTypeName)(config);
        const messageSubscriptionFieldName = (0, name_values_1.getMessageSubscriptionFieldName)(config);
        const assistantMutationFieldName = (0, name_values_1.getAssistantMutationFieldName)(config);
        const assistantStreamingMutationFieldName = (0, name_values_1.getAssistantStreamingMutationFieldName)(config);
        const assistantResponseSubscriptionField = (0, message_model_1.createMessageSubscription)(messageSubscriptionFieldName, assistantStreamingMutationFieldName);
        const assistantResponseMutationInput = (0, message_model_1.createAssistantResponseMutationInput)(conversationMessageTypeName);
        const assistantResponseMutationField = (0, message_model_1.createAssistantMutationField)(assistantMutationFieldName, conversationMessageTypeName, assistantResponseMutationInput.name.value);
        const assistantResponseStreamingMutationInput = (0, message_model_1.createAssistantResponseStreamingMutationInput)(conversationMessageTypeName);
        const assistantResponseStreamingMutationField = (0, message_model_1.createAssistantStreamingMutationField)(assistantStreamingMutationFieldName, assistantResponseStreamingMutationInput.name.value);
        return {
            assistantResponseMutation: { field: assistantResponseMutationField, input: assistantResponseMutationInput },
            assistantResponseStreamingMutation: {
                field: assistantResponseStreamingMutationField,
                input: assistantResponseStreamingMutationInput,
            },
            assistantResponseSubscriptionField,
        };
    }
    validate(config) {
        this.validateReturnType(config);
        this.validateInferenceConfig(config);
        this.validateHandler(config);
        this.validateToolDefinitions(config);
    }
    validateToolDefinitions(config) {
        const { tools } = config;
        if (!tools)
            return;
        const isValidToolName = (name) => /^[a-zA-Z][a-zA-Z0-9_]*$/.test(name) && name.length >= 1 && name.length <= 64;
        for (const tool of tools) {
            if (!isValidToolName(tool.name)) {
                throw new graphql_transformer_core_1.InvalidDirectiveError(`Tool name must be between 1 and 64 characters, start with a letter, and contain only letters, numbers, and underscores. Found: ${tool.name}`);
            }
        }
        const invalidToolNames = tools
            .filter((tool) => !(0, process_tools_1.isModelOperationToolPredicate)(tool) && !(0, process_tools_1.isCustomQueryToolPredicate)(tool))
            .map((tool) => tool.name);
        if (invalidToolNames.length > 0) {
            throw new graphql_transformer_core_1.InvalidDirectiveError(`Tool definitions must contain a modelName and modelOperation, or queryName. Invalid tools: ${invalidToolNames.join(', ')}`);
        }
    }
    validateHandler(config) {
        if (config.handler && config.functionName) {
            throw new graphql_transformer_core_1.InvalidDirectiveError("'functionName' and 'handler' are mutually exclusive");
        }
        if (config.handler) {
            const eventVersion = semver.coerce(config.handler.eventVersion);
            if ((eventVersion === null || eventVersion === void 0 ? void 0 : eventVersion.major) !== 1) {
                throw new graphql_transformer_core_1.InvalidDirectiveError(`Unsupported custom conversation handler. Expected eventVersion to match 1.x, received ${config.handler.eventVersion}`);
            }
        }
    }
    validateReturnType(config) {
        const { field } = config;
        if (field.type.kind !== 'NamedType' || field.type.name.value !== 'AmplifyAIConversationMessage') {
            throw new graphql_transformer_core_1.InvalidDirectiveError('@conversation return type must be AmplifyAIConversationMessage');
        }
    }
    validateInferenceConfig(config) {
        if (!config.inferenceConfiguration)
            return;
        const { maxTokens, temperature, topP } = config.inferenceConfiguration;
        if (maxTokens !== undefined && maxTokens < 1) {
            throw new graphql_transformer_core_1.InvalidDirectiveError(`@conversation directive maxTokens valid range: Minimum value of 1. Provided: ${maxTokens}`);
        }
        if (temperature !== undefined && (temperature < 0 || temperature > 1)) {
            throw new graphql_transformer_core_1.InvalidDirectiveError(`@conversation directive temperature valid range: Minimum value of 0. Maximum value of 1. Provided: ${temperature}`);
        }
        if (topP !== undefined && (topP < 0 || topP > 1)) {
            throw new graphql_transformer_core_1.InvalidDirectiveError(`@conversation directive topP valid range: Minimum value of 0. Maximum value of 1. Provided: ${topP}`);
        }
    }
}
exports.ConversationFieldHandler = ConversationFieldHandler;
//# sourceMappingURL=conversation-field-handler.js.map