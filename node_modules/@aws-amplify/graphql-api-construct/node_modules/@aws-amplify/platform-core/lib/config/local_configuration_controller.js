"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalConfigurationController = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const promises_1 = __importDefault(require("fs/promises"));
/**
 * Used to interact with config file based on OS.
 */
class LocalConfigurationController {
    projectName;
    configFileName;
    dirPath;
    configFilePath;
    _store;
    /**
     * Initializes paths to project config dir & config file.
     */
    constructor(projectName = 'amplify', configFileName = 'config.json') {
        this.projectName = projectName;
        this.configFileName = configFileName;
        this.dirPath = this.getConfigDirPath(this.projectName);
        this.configFilePath = path_1.default.join(this.dirPath, this.configFileName);
    }
    /**
     * Gets values from cached config by path.
     */
    async get(path) {
        return path.split('.').reduce((acc, current) => {
            return acc?.[current];
        }, await this.store());
    }
    /**
     * Set value by path & update config file to disk.
     */
    async set(path, value) {
        let current = await this.store();
        path.split('.').forEach((key, index, keys) => {
            if (index === keys.length - 1) {
                current[key] = value;
            }
            else {
                if (current[key] == null) {
                    current[key] = {};
                }
                current = current[key];
            }
        });
        await this.write();
    }
    /**
     * Writes config file to disk if found.
     */
    async write() {
        // creates project directory if it doesn't exist.
        await this.mkConfigDir();
        const output = JSON.stringify(this._store ? this._store : {});
        await promises_1.default.writeFile(this.configFilePath, output, 'utf8');
    }
    /**
     * Reset cached config and delete the config file.
     */
    async clear() {
        this._store = {};
        await promises_1.default.rm(this.configFilePath);
    }
    /**
     * Getter for cached config, retrieves config from disk if not cached already.
     * If the store is not cached & config file does not exist, it will create a blank one.
     */
    async store() {
        if (this._store) {
            return this._store;
        }
        // check if file exists & readable.
        let fd;
        try {
            fd = await promises_1.default.open(this.configFilePath, promises_1.default.constants.F_OK, promises_1.default.constants.O_RDWR);
            const fileContent = await promises_1.default.readFile(fd, 'utf-8');
            this._store = JSON.parse(fileContent);
        }
        catch {
            this._store = {};
            await this.write();
        }
        finally {
            await fd?.close();
        }
        return this._store;
    }
    /**
     * Creates project directory to store config if it doesn't exist yet.
     */
    mkConfigDir() {
        return promises_1.default.mkdir(this.dirPath, { recursive: true });
    }
    /**
     * Returns the path to config directory depending on OS
     */
    getConfigDirPath(name) {
        const homedir = os_1.default.homedir();
        const macos = () => path_1.default.join(homedir, 'Library', 'Preferences', name);
        const windows = () => {
            return path_1.default.join(process.env.APPDATA || path_1.default.join(homedir, 'AppData', 'Roaming'), name, 'Config');
        };
        const linux = () => {
            return path_1.default.join(process.env.XDG_STATE_HOME || path_1.default.join(homedir, '.local', 'state'), name);
        };
        switch (process.platform) {
            case 'darwin':
                return macos();
            case 'win32':
                return windows();
            default:
                return linux();
        }
    }
}
exports.LocalConfigurationController = LocalConfigurationController;
//# sourceMappingURL=data:application/json;base64,