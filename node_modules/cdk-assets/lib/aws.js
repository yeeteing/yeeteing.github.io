"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultAwsClient = void 0;
const os = require("os");
const client_ecr_1 = require("@aws-sdk/client-ecr");
const client_s3_1 = require("@aws-sdk/client-s3");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const client_sts_1 = require("@aws-sdk/client-sts");
const credential_providers_1 = require("@aws-sdk/credential-providers");
const lib_storage_1 = require("@aws-sdk/lib-storage");
const config_resolver_1 = require("@smithy/config-resolver");
const node_config_provider_1 = require("@smithy/node-config-provider");
const USER_AGENT = 'cdk-assets';
/**
 * AWS client using the AWS SDK for JS with no special configuration
 */
class DefaultAwsClient {
    constructor(profile) {
        this.profile = profile;
        const clientConfig = {
            customUserAgent: USER_AGENT,
        };
        // storing the main credentials separately because
        // the `config` object changes every time we assume the file publishing role.
        // TODO refactor to make `config` a readonly property and avoid state mutations.
        this.mainCredentials = (0, credential_providers_1.fromNodeProviderChain)({
            profile: this.profile,
            clientConfig,
        });
        this.config = {
            clientConfig,
            credentials: this.mainCredentials,
        };
    }
    async s3Client(options) {
        const client = new client_s3_1.S3Client(await this.awsOptions(options));
        return {
            getBucketEncryption: (input) => client.send(new client_s3_1.GetBucketEncryptionCommand(input)),
            getBucketLocation: (input) => client.send(new client_s3_1.GetBucketLocationCommand(input)),
            listObjectsV2: (input) => client.send(new client_s3_1.ListObjectsV2Command(input)),
            upload: (input) => {
                const upload = new lib_storage_1.Upload({
                    client,
                    params: input,
                });
                return upload.done();
            },
        };
    }
    async ecrClient(options) {
        const client = new client_ecr_1.ECRClient(await this.awsOptions(options));
        return {
            describeImages: (input) => client.send(new client_ecr_1.DescribeImagesCommand(input)),
            describeRepositories: (input) => client.send(new client_ecr_1.DescribeRepositoriesCommand(input)),
            getAuthorizationToken: (input) => client.send(new client_ecr_1.GetAuthorizationTokenCommand(input ?? {})),
        };
    }
    async secretsManagerClient(options) {
        const client = new client_secrets_manager_1.SecretsManagerClient(await this.awsOptions(options));
        return {
            getSecretValue: (input) => client.send(new client_secrets_manager_1.GetSecretValueCommand(input)),
        };
    }
    async discoverPartition() {
        return (await this.discoverCurrentAccount()).partition;
    }
    async discoverDefaultRegion() {
        return (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS)() || 'us-east-1';
    }
    async discoverCurrentAccount() {
        if (this.account === undefined) {
            this.account = await this.getAccount();
        }
        return this.account;
    }
    async discoverTargetAccount(options) {
        return this.getAccount(await this.awsOptions(options));
    }
    async getAccount(options) {
        this.config.clientConfig = options ?? this.config.clientConfig;
        const stsClient = new client_sts_1.STSClient(await this.awsOptions(options));
        const command = new client_sts_1.GetCallerIdentityCommand();
        const response = await stsClient.send(command);
        if (!response.Account || !response.Arn) {
            throw new Error(`Unrecognized response from STS: '${JSON.stringify(response)}'`);
        }
        return {
            accountId: response.Account,
            partition: response.Arn.split(':')[1],
        };
    }
    async awsOptions(options) {
        const config = this.config;
        config.region = options?.region;
        if (options) {
            config.region = options.region;
            if (options.assumeRoleArn) {
                config.credentials = (0, credential_providers_1.fromTemporaryCredentials)({
                    // dont forget the credentials chain.
                    masterCredentials: this.mainCredentials,
                    params: {
                        RoleArn: options.assumeRoleArn,
                        ExternalId: options.assumeRoleExternalId,
                        RoleSessionName: `${USER_AGENT}-${safeUsername()}`,
                        TransitiveTagKeys: options.assumeRoleAdditionalOptions?.Tags
                            ? options.assumeRoleAdditionalOptions.Tags.map((t) => t.Key)
                            : undefined,
                        ...options.assumeRoleAdditionalOptions,
                    },
                    clientConfig: this.config.clientConfig,
                });
            }
        }
        return config;
    }
}
exports.DefaultAwsClient = DefaultAwsClient;
/**
 * Return the username with characters invalid for a RoleSessionName removed
 *
 * @see https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html#API_AssumeRole_RequestParameters
 */
function safeUsername() {
    try {
        return os.userInfo().username.replace(/[^\w+=,.@-]/g, '@');
    }
    catch {
        return 'noname';
    }
}
//# sourceMappingURL=data:application/json;base64,