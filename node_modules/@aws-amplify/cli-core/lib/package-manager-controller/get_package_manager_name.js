import { AmplifyUserError } from '@aws-amplify/platform-core';
import { cyan } from 'kleur/colors';
/**
 * Reads the npm_config_user_agent environment variable to determine the package manager that is currently being used.
 * Throws if npm_config_user_agent is not set.
 */
export const getPackageManagerName = () => {
    const userAgent = process.env.npm_config_user_agent;
    if (userAgent === undefined) {
        throw new AmplifyUserError('NoPackageManagerError', {
            message: `npm_config_user_agent environment variable is undefined`,
            details: 'This is usually caused by running commands without a package manager',
            // Note that we cannot use the format object to format the command here because that would create a circular dependency
            resolution: `Run commands via your package manager. For example: ${cyan('npx ampx <command>')} if npm is your package manager.`,
        });
    }
    const packageManagerAndVersion = userAgent.split(' ')[0];
    const [packageManagerName, packageManagerVersion] = packageManagerAndVersion.split('/');
    if (packageManagerName === 'yarn') {
        const yarnMajorVersion = packageManagerVersion.split('.')[0];
        return `yarn-${yarnMajorVersion === '1' ? 'classic' : 'modern'}`;
    }
    return packageManagerName;
};
const runnerMap = {
    npm: 'npx',
    'yarn-modern': 'yarn',
    'yarn-classic': 'yarn',
    pnpm: 'pnpm',
};
/**
 * Tries to determine the package manager runner that is currently being used. Eg 'npx' for 'npm' and 'yarn' for 'yarn'.
 */
export const getPackageManagerRunnerName = () => {
    const packageManagerName = getPackageManagerName();
    const packageManagerRunnerName = runnerMap[packageManagerName];
    if (!packageManagerRunnerName) {
        throw new AmplifyUserError('UnsupportedPackageManagerError', {
            message: `Package manager ${packageManagerName} is not supported.`,
            resolution: 'Use npm, yarn, or pnpm.',
        });
    }
    return packageManagerRunnerName;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X3BhY2thZ2VfbWFuYWdlcl9uYW1lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BhY2thZ2UtbWFuYWdlci1jb250cm9sbGVyL2dldF9wYWNrYWdlX21hbmFnZXJfbmFtZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXBDOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUFHLEdBQUcsRUFBRTtJQUN4QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDO0lBQ3BELElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRSxDQUFDO1FBQzVCLE1BQU0sSUFBSSxnQkFBZ0IsQ0FBQyx1QkFBdUIsRUFBRTtZQUNsRCxPQUFPLEVBQUUseURBQXlEO1lBQ2xFLE9BQU8sRUFDTCxzRUFBc0U7WUFDeEUsdUhBQXVIO1lBQ3ZILFVBQVUsRUFBRSx1REFBdUQsSUFBSSxDQUNyRSxvQkFBb0IsQ0FDckIsa0NBQWtDO1NBQ3BDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxNQUFNLHdCQUF3QixHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekQsTUFBTSxDQUFDLGtCQUFrQixFQUFFLHFCQUFxQixDQUFDLEdBQy9DLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV0QyxJQUFJLGtCQUFrQixLQUFLLE1BQU0sRUFBRSxDQUFDO1FBQ2xDLE1BQU0sZ0JBQWdCLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdELE9BQU8sUUFBUSxnQkFBZ0IsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkUsQ0FBQztJQUNELE9BQU8sa0JBQWtCLENBQUM7QUFDNUIsQ0FBQyxDQUFDO0FBRUYsTUFBTSxTQUFTLEdBQTJCO0lBQ3hDLEdBQUcsRUFBRSxLQUFLO0lBQ1YsYUFBYSxFQUFFLE1BQU07SUFDckIsY0FBYyxFQUFFLE1BQU07SUFDdEIsSUFBSSxFQUFFLE1BQU07Q0FDYixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRyxHQUFXLEVBQUU7SUFDdEQsTUFBTSxrQkFBa0IsR0FBRyxxQkFBcUIsRUFBRSxDQUFDO0lBQ25ELE1BQU0sd0JBQXdCLEdBQUcsU0FBUyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDL0QsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFDOUIsTUFBTSxJQUFJLGdCQUFnQixDQUFDLGdDQUFnQyxFQUFFO1lBQzNELE9BQU8sRUFBRSxtQkFBbUIsa0JBQWtCLG9CQUFvQjtZQUNsRSxVQUFVLEVBQUUseUJBQXlCO1NBQ3RDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFDRCxPQUFPLHdCQUF3QixDQUFDO0FBQ2xDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBjeWFuIH0gZnJvbSAna2xldXIvY29sb3JzJztcblxuLyoqXG4gKiBSZWFkcyB0aGUgbnBtX2NvbmZpZ191c2VyX2FnZW50IGVudmlyb25tZW50IHZhcmlhYmxlIHRvIGRldGVybWluZSB0aGUgcGFja2FnZSBtYW5hZ2VyIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHVzZWQuXG4gKiBUaHJvd3MgaWYgbnBtX2NvbmZpZ191c2VyX2FnZW50IGlzIG5vdCBzZXQuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRQYWNrYWdlTWFuYWdlck5hbWUgPSAoKSA9PiB7XG4gIGNvbnN0IHVzZXJBZ2VudCA9IHByb2Nlc3MuZW52Lm5wbV9jb25maWdfdXNlcl9hZ2VudDtcbiAgaWYgKHVzZXJBZ2VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoJ05vUGFja2FnZU1hbmFnZXJFcnJvcicsIHtcbiAgICAgIG1lc3NhZ2U6IGBucG1fY29uZmlnX3VzZXJfYWdlbnQgZW52aXJvbm1lbnQgdmFyaWFibGUgaXMgdW5kZWZpbmVkYCxcbiAgICAgIGRldGFpbHM6XG4gICAgICAgICdUaGlzIGlzIHVzdWFsbHkgY2F1c2VkIGJ5IHJ1bm5pbmcgY29tbWFuZHMgd2l0aG91dCBhIHBhY2thZ2UgbWFuYWdlcicsXG4gICAgICAvLyBOb3RlIHRoYXQgd2UgY2Fubm90IHVzZSB0aGUgZm9ybWF0IG9iamVjdCB0byBmb3JtYXQgdGhlIGNvbW1hbmQgaGVyZSBiZWNhdXNlIHRoYXQgd291bGQgY3JlYXRlIGEgY2lyY3VsYXIgZGVwZW5kZW5jeVxuICAgICAgcmVzb2x1dGlvbjogYFJ1biBjb21tYW5kcyB2aWEgeW91ciBwYWNrYWdlIG1hbmFnZXIuIEZvciBleGFtcGxlOiAke2N5YW4oXG4gICAgICAgICducHggYW1weCA8Y29tbWFuZD4nLFxuICAgICAgKX0gaWYgbnBtIGlzIHlvdXIgcGFja2FnZSBtYW5hZ2VyLmAsXG4gICAgfSk7XG4gIH1cbiAgY29uc3QgcGFja2FnZU1hbmFnZXJBbmRWZXJzaW9uID0gdXNlckFnZW50LnNwbGl0KCcgJylbMF07XG4gIGNvbnN0IFtwYWNrYWdlTWFuYWdlck5hbWUsIHBhY2thZ2VNYW5hZ2VyVmVyc2lvbl0gPVxuICAgIHBhY2thZ2VNYW5hZ2VyQW5kVmVyc2lvbi5zcGxpdCgnLycpO1xuXG4gIGlmIChwYWNrYWdlTWFuYWdlck5hbWUgPT09ICd5YXJuJykge1xuICAgIGNvbnN0IHlhcm5NYWpvclZlcnNpb24gPSBwYWNrYWdlTWFuYWdlclZlcnNpb24uc3BsaXQoJy4nKVswXTtcbiAgICByZXR1cm4gYHlhcm4tJHt5YXJuTWFqb3JWZXJzaW9uID09PSAnMScgPyAnY2xhc3NpYycgOiAnbW9kZXJuJ31gO1xuICB9XG4gIHJldHVybiBwYWNrYWdlTWFuYWdlck5hbWU7XG59O1xuXG5jb25zdCBydW5uZXJNYXA6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gIG5wbTogJ25weCcsXG4gICd5YXJuLW1vZGVybic6ICd5YXJuJyxcbiAgJ3lhcm4tY2xhc3NpYyc6ICd5YXJuJyxcbiAgcG5wbTogJ3BucG0nLFxufTtcblxuLyoqXG4gKiBUcmllcyB0byBkZXRlcm1pbmUgdGhlIHBhY2thZ2UgbWFuYWdlciBydW5uZXIgdGhhdCBpcyBjdXJyZW50bHkgYmVpbmcgdXNlZC4gRWcgJ25weCcgZm9yICducG0nIGFuZCAneWFybicgZm9yICd5YXJuJy5cbiAqL1xuZXhwb3J0IGNvbnN0IGdldFBhY2thZ2VNYW5hZ2VyUnVubmVyTmFtZSA9ICgpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBwYWNrYWdlTWFuYWdlck5hbWUgPSBnZXRQYWNrYWdlTWFuYWdlck5hbWUoKTtcbiAgY29uc3QgcGFja2FnZU1hbmFnZXJSdW5uZXJOYW1lID0gcnVubmVyTWFwW3BhY2thZ2VNYW5hZ2VyTmFtZV07XG4gIGlmICghcGFja2FnZU1hbmFnZXJSdW5uZXJOYW1lKSB7XG4gICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoJ1Vuc3VwcG9ydGVkUGFja2FnZU1hbmFnZXJFcnJvcicsIHtcbiAgICAgIG1lc3NhZ2U6IGBQYWNrYWdlIG1hbmFnZXIgJHtwYWNrYWdlTWFuYWdlck5hbWV9IGlzIG5vdCBzdXBwb3J0ZWQuYCxcbiAgICAgIHJlc29sdXRpb246ICdVc2UgbnBtLCB5YXJuLCBvciBwbnBtLicsXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhY2thZ2VNYW5hZ2VyUnVubmVyTmFtZTtcbn07XG4iXX0=