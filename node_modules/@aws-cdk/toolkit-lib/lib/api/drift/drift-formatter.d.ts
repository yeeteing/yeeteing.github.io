import type * as cxapi from '@aws-cdk/cx-api';
import type { StackResourceDrift } from '@aws-sdk/client-cloudformation';
/**
 * Props for the Drift Formatter
 */
export interface DriftFormatterProps {
    /**
     * The CloudFormation stack artifact
     */
    readonly stack: cxapi.CloudFormationStackArtifact;
    /**
     * The results of stack drift detection
     */
    readonly resourceDrifts: StackResourceDrift[];
}
interface DriftFormatterOutput {
    /**
     * Number of resources with drift. If undefined, then an error occurred
     * and resources were not properly checked for drift.
     */
    readonly numResourcesWithDrift: number;
    /**
     * How many resources were not checked for drift. If undefined, then an
     * error occurred and resources were not properly checked for drift.
     */
    readonly numResourcesUnchecked: number;
    /**
     * Resources that have not changed
     */
    readonly unchanged?: string;
    /**
     * Resources that were not checked for drift
     */
    readonly unchecked?: string;
    /**
     * Resources with drift
     */
    readonly modified?: string;
    /**
     * Resources that have been deleted (drift)
     */
    readonly deleted?: string;
    /**
     * The header, containing the stack name
     */
    readonly stackHeader: string;
    /**
     * The final results (summary) of the drift results
     */
    readonly summary: string;
}
/**
 * Class for formatting drift detection output
 */
export declare class DriftFormatter {
    readonly stackName: string;
    private readonly stack;
    private readonly resourceDriftResults;
    private readonly allStackResources;
    constructor(props: DriftFormatterProps);
    /**
     * Format the stack drift detection results
     */
    formatStackDrift(): DriftFormatterOutput;
    private buildLogicalToPathMap;
    /**
     * Renders stack drift information to the given stream
     *
     * @param driftResults - The stack resource drifts from CloudFormation
     * @param allStackResources - A map of all stack resources
     * @param verbose - Whether to output more verbose text (include undrifted resources)
     * @param logicalToPathMap - A map from logical ID to construct path
     */
    private formatStackDriftChanges;
    private formatLogicalId;
    private formatValue;
    private printSectionHeader;
    private printSectionFooter;
    private formatTreeDiff;
}
export {};
