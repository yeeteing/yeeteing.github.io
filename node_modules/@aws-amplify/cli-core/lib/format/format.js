import * as os from 'node:os';
import { blue, bold, cyan, dim, green, grey, magenta, red, underline, yellow, } from 'kleur/colors';
import { AmplifyError, AmplifyFault } from '@aws-amplify/platform-core';
import { getPackageManagerRunnerName } from '../package-manager-controller/get_package_manager_name.js';
/**
 * Formats various inputs into single string.
 */
export class Format {
    packageManagerRunnerName;
    /**
     * Initialize with a package manager runner name. Defaults to attempting to load a value derived from environment variables.
     */
    constructor(packageManagerRunnerName = getPackageManagerRunnerName()) {
        this.packageManagerRunnerName = packageManagerRunnerName;
    }
    normalizeAmpxCommand = (command) => {
        if (command.length === 0) {
            throw new AmplifyFault('InvalidFormatFault', {
                message: 'The command must be non-empty',
            });
        }
        return this.cyan(`${this.packageManagerRunnerName} ampx ${command}`);
    };
    error = (error) => {
        if (error instanceof Error) {
            let message = `${this.red(this.bold(`[${error.name}]`))} ${error.message}`;
            if (typeof error?.cause === 'object' && !!error.cause) {
                message = `${message}${os.EOL}${format.indent(`âˆŸ Caused by: ${this.error(error.cause)}`)}`;
            }
            if (AmplifyError.isAmplifyError(error) && error.resolution) {
                message =
                    message +
                        os.EOL +
                        `${format.success('Resolution')}: ${error.resolution}`;
            }
            if (AmplifyError.isAmplifyError(error) && error.details) {
                message = message + os.EOL + `Details: ${error.details}`;
            }
            return message;
        }
        else if (typeof error === 'string') {
            return this.red(error);
        }
        try {
            return this.red(JSON.stringify(error, null, 2));
        }
        catch (e) {
            return this.red('Unknown error') + os.EOL + this.error(e);
        }
    };
    note = (message) => this.grey(message);
    command = (command) => this.cyan(command);
    highlight = (command) => this.cyan(command);
    success = (message) => this.green(message);
    sectionHeader = (header) => this.bold(this.blue(header));
    bold = (message) => this.applyOnAllLines(bold, message);
    dim = (message) => this.applyOnAllLines(dim, message);
    link = (link) => underline(this.blue(link));
    list = (lines) => lines.map((line) => ` - ${line}`).join(os.EOL);
    indent = (message) => {
        if (message === '') {
            throw new Error('Message cannot be empty');
        }
        const spaces = '  '; // Two spaces for indentation
        return this.applyOnAllLines((line) => `${spaces}${line}`, message);
    };
    record = (record) => Object.entries(record)
        .map(([key, value]) => `${key}: ${String(value)}`)
        .join(os.EOL);
    color = (message, colorName) => this.applyOnAllLines(colors[colorName], message);
    applyOnAllLines = (mapFunction, message) => {
        return message && message.split(os.EOL).map(mapFunction).join(os.EOL);
    };
    // Primary colors
    cyan = (command) => this.applyOnAllLines(cyan, command);
    blue = (command) => this.applyOnAllLines(blue, command);
    red = (message) => this.applyOnAllLines(red, message);
    green = (message) => this.applyOnAllLines(green, message);
    grey = (message) => this.applyOnAllLines(grey, message);
}
// Map to connect colorName to kleur color
const colors = {
    Green: green,
    Yellow: yellow,
    Blue: blue,
    Magenta: magenta,
    Cyan: cyan,
    Red: red,
};
export const colorNames = [
    'Green',
    'Yellow',
    'Blue',
    'Magenta',
    'Cyan',
    'Red',
];
export const format = new Format();
//# sourceMappingURL=data:application/json;base64,