import { AmplifyPrompter, printer } from '@aws-amplify/cli-core';
import { DEFAULT_PROFILE } from '@smithy/shared-ini-file-loader';
import { EOL } from 'os';
import { Open } from '../open/open.js';
const configureAccountUrl = 'https://docs.amplify.aws/gen2/start/account-setup/';
const profileSetupInstruction = `Follow the instructions at ${configureAccountUrl}${EOL}to configure Amplify IAM user and credentials.${EOL}`;
/**
 * Command to configure AWS Amplify profile.
 */
export class ConfigureProfileCommand {
    profileController;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Configure profile command.
     */
    constructor(profileController) {
        this.profileController = profileController;
        this.command = 'profile';
        this.describe = 'Configure an AWS Amplify profile';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const profileName = args.name;
        const profileExists = await this.profileController.profileExists(profileName);
        if (profileExists) {
            printer.print(`Profile '${profileName}' already exists!${EOL}${profileSetupInstruction}`);
            return;
        }
        const hasIAMUser = await AmplifyPrompter.yesOrNo({
            message: 'Do you already have IAM User credentials?',
        });
        if (!hasIAMUser) {
            printer.print(profileSetupInstruction);
            await Open.open(configureAccountUrl, { wait: false });
            await AmplifyPrompter.input({
                message: `Hit [enter] when complete`,
            });
        }
        const accessKeyId = await AmplifyPrompter.secretValue('Enter Access Key ID:');
        const secretAccessKey = await AmplifyPrompter.secretValue('Enter Secret Access Key:');
        const region = await AmplifyPrompter.input({
            message: `Enter the AWS region to use with the '${profileName}' profile (eg us-east-1, us-west-2, etc):`,
            required: true,
        });
        await this.profileController.createOrAppendAWSFiles({
            profile: profileName,
            region,
            accessKeyId,
            secretAccessKey,
        });
        printer.print(`Created profile ${profileName} successfully!`);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs.option('name', {
            describe: 'An AWS profile name',
            type: 'string',
            array: false,
            default: DEFAULT_PROFILE,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlX3Byb2ZpbGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9jb25maWd1cmUvY29uZmlndXJlX3Byb2ZpbGVfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3pCLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUl2QyxNQUFNLG1CQUFtQixHQUN2QixvREFBb0QsQ0FBQztBQUV2RCxNQUFNLHVCQUF1QixHQUFHLDhCQUE4QixtQkFBbUIsR0FBRyxHQUFHLGlEQUFpRCxHQUFHLEVBQUUsQ0FBQztBQUU5STs7R0FFRztBQUNILE1BQU0sT0FBTyx1QkFBdUI7SUFnQkw7SUFiN0I7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUE2QixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUMvRCxJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLGtDQUFrQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQ2IsSUFBd0QsRUFDekMsRUFBRTtRQUNqQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzlCLE1BQU0sYUFBYSxHQUNqQixNQUFNLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUQsSUFBSSxhQUFhLEVBQUUsQ0FBQztZQUNsQixPQUFPLENBQUMsS0FBSyxDQUNYLFlBQVksV0FBVyxvQkFBb0IsR0FBRyxHQUFHLHVCQUF1QixFQUFFLENBQzNFLENBQUM7WUFDRixPQUFPO1FBQ1QsQ0FBQztRQUNELE1BQU0sVUFBVSxHQUFHLE1BQU0sZUFBZSxDQUFDLE9BQU8sQ0FBQztZQUMvQyxPQUFPLEVBQUUsMkNBQTJDO1NBQ3JELENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFFdkMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDdEQsTUFBTSxlQUFlLENBQUMsS0FBSyxDQUFDO2dCQUMxQixPQUFPLEVBQUUsMkJBQTJCO2FBQ3JDLENBQUMsQ0FBQztRQUNMLENBQUM7UUFFRCxNQUFNLFdBQVcsR0FBRyxNQUFNLGVBQWUsQ0FBQyxXQUFXLENBQ25ELHNCQUFzQixDQUN2QixDQUFDO1FBQ0YsTUFBTSxlQUFlLEdBQUcsTUFBTSxlQUFlLENBQUMsV0FBVyxDQUN2RCwwQkFBMEIsQ0FDM0IsQ0FBQztRQUVGLE1BQU0sTUFBTSxHQUFHLE1BQU0sZUFBZSxDQUFDLEtBQUssQ0FBQztZQUN6QyxPQUFPLEVBQUUseUNBQXlDLFdBQVcsMkNBQTJDO1lBQ3hHLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsc0JBQXNCLENBQUM7WUFDbEQsT0FBTyxFQUFFLFdBQVc7WUFDcEIsTUFBTTtZQUNOLFdBQVc7WUFDWCxlQUFlO1NBQ2hCLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLFdBQVcsZ0JBQWdCLENBQUMsQ0FBQztJQUNoRSxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBd0MsRUFBRTtRQUM5RCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQzFCLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLE9BQU8sRUFBRSxlQUFlO1NBQ3pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgQW1wbGlmeVByb21wdGVyLCBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IERFRkFVTFRfUFJPRklMRSB9IGZyb20gJ0BzbWl0aHkvc2hhcmVkLWluaS1maWxlLWxvYWRlcic7XG5pbXBvcnQgeyBFT0wgfSBmcm9tICdvcyc7XG5pbXBvcnQgeyBPcGVuIH0gZnJvbSAnLi4vb3Blbi9vcGVuLmpzJztcbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgUHJvZmlsZUNvbnRyb2xsZXIgfSBmcm9tICcuL3Byb2ZpbGVfY29udHJvbGxlci5qcyc7XG5cbmNvbnN0IGNvbmZpZ3VyZUFjY291bnRVcmwgPVxuICAnaHR0cHM6Ly9kb2NzLmFtcGxpZnkuYXdzL2dlbjIvc3RhcnQvYWNjb3VudC1zZXR1cC8nO1xuXG5jb25zdCBwcm9maWxlU2V0dXBJbnN0cnVjdGlvbiA9IGBGb2xsb3cgdGhlIGluc3RydWN0aW9ucyBhdCAke2NvbmZpZ3VyZUFjY291bnRVcmx9JHtFT0x9dG8gY29uZmlndXJlIEFtcGxpZnkgSUFNIHVzZXIgYW5kIGNyZWRlbnRpYWxzLiR7RU9MfWA7XG5cbi8qKlxuICogQ29tbWFuZCB0byBjb25maWd1cmUgQVdTIEFtcGxpZnkgcHJvZmlsZS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kXG4gIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZTxvYmplY3QsIENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9ucz5cbntcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmUgcHJvZmlsZSBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwcm9maWxlQ29udHJvbGxlcjogUHJvZmlsZUNvbnRyb2xsZXIpIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAncHJvZmlsZSc7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdDb25maWd1cmUgYW4gQVdTIEFtcGxpZnkgcHJvZmlsZSc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9ucz4sXG4gICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHByb2ZpbGVOYW1lID0gYXJncy5uYW1lO1xuICAgIGNvbnN0IHByb2ZpbGVFeGlzdHMgPVxuICAgICAgYXdhaXQgdGhpcy5wcm9maWxlQ29udHJvbGxlci5wcm9maWxlRXhpc3RzKHByb2ZpbGVOYW1lKTtcbiAgICBpZiAocHJvZmlsZUV4aXN0cykge1xuICAgICAgcHJpbnRlci5wcmludChcbiAgICAgICAgYFByb2ZpbGUgJyR7cHJvZmlsZU5hbWV9JyBhbHJlYWR5IGV4aXN0cyEke0VPTH0ke3Byb2ZpbGVTZXR1cEluc3RydWN0aW9ufWAsXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBoYXNJQU1Vc2VyID0gYXdhaXQgQW1wbGlmeVByb21wdGVyLnllc09yTm8oe1xuICAgICAgbWVzc2FnZTogJ0RvIHlvdSBhbHJlYWR5IGhhdmUgSUFNIFVzZXIgY3JlZGVudGlhbHM/JyxcbiAgICB9KTtcblxuICAgIGlmICghaGFzSUFNVXNlcikge1xuICAgICAgcHJpbnRlci5wcmludChwcm9maWxlU2V0dXBJbnN0cnVjdGlvbik7XG5cbiAgICAgIGF3YWl0IE9wZW4ub3Blbihjb25maWd1cmVBY2NvdW50VXJsLCB7IHdhaXQ6IGZhbHNlIH0pO1xuICAgICAgYXdhaXQgQW1wbGlmeVByb21wdGVyLmlucHV0KHtcbiAgICAgICAgbWVzc2FnZTogYEhpdCBbZW50ZXJdIHdoZW4gY29tcGxldGVgLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWNjZXNzS2V5SWQgPSBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIuc2VjcmV0VmFsdWUoXG4gICAgICAnRW50ZXIgQWNjZXNzIEtleSBJRDonLFxuICAgICk7XG4gICAgY29uc3Qgc2VjcmV0QWNjZXNzS2V5ID0gYXdhaXQgQW1wbGlmeVByb21wdGVyLnNlY3JldFZhbHVlKFxuICAgICAgJ0VudGVyIFNlY3JldCBBY2Nlc3MgS2V5OicsXG4gICAgKTtcblxuICAgIGNvbnN0IHJlZ2lvbiA9IGF3YWl0IEFtcGxpZnlQcm9tcHRlci5pbnB1dCh7XG4gICAgICBtZXNzYWdlOiBgRW50ZXIgdGhlIEFXUyByZWdpb24gdG8gdXNlIHdpdGggdGhlICcke3Byb2ZpbGVOYW1lfScgcHJvZmlsZSAoZWcgdXMtZWFzdC0xLCB1cy13ZXN0LTIsIGV0Yyk6YCxcbiAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdGhpcy5wcm9maWxlQ29udHJvbGxlci5jcmVhdGVPckFwcGVuZEFXU0ZpbGVzKHtcbiAgICAgIHByb2ZpbGU6IHByb2ZpbGVOYW1lLFxuICAgICAgcmVnaW9uLFxuICAgICAgYWNjZXNzS2V5SWQsXG4gICAgICBzZWNyZXRBY2Nlc3NLZXksXG4gICAgfSk7XG5cbiAgICBwcmludGVyLnByaW50KGBDcmVhdGVkIHByb2ZpbGUgJHtwcm9maWxlTmFtZX0gc3VjY2Vzc2Z1bGx5IWApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndik6IEFyZ3Y8Q29uZmlndXJlUHJvZmlsZUNvbW1hbmRPcHRpb25zPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzLm9wdGlvbignbmFtZScsIHtcbiAgICAgIGRlc2NyaWJlOiAnQW4gQVdTIHByb2ZpbGUgbmFtZScsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgIGRlZmF1bHQ6IERFRkFVTFRfUFJPRklMRSxcbiAgICB9KTtcbiAgfTtcbn1cblxuZXhwb3J0IHR5cGUgQ29uZmlndXJlUHJvZmlsZUNvbW1hbmRPcHRpb25zID1cbiAgQXJndW1lbnRzS2ViYWJDYXNlPENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZT47XG5cbnR5cGUgQ29uZmlndXJlUHJvZmlsZUNvbW1hbmRPcHRpb25zQ2FtZWxDYXNlID0ge1xuICBuYW1lOiBzdHJpbmc7XG59O1xuIl19