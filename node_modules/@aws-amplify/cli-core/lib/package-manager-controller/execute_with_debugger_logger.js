import { LogLevel } from '../printer/printer.js';
import { execa as _execa } from 'execa';
import { printer } from '../printer.js';
/**
 * Abstracts the execution of a command and pipes outputs/errors to `Printer.debug`
 */
export const executeWithDebugLogger = (cwd, executable, args, execa = _execa, options) => {
    try {
        const childProcess = execa(executable, args, {
            stdin: 'inherit',
            cwd,
            ...options,
        });
        childProcess?.stdout?.on('data', (data) => printer.log(data instanceof Buffer ? data.toString() : JSON.stringify(data), LogLevel.DEBUG));
        childProcess?.stderr?.on('data', (data) => printer.log(data instanceof Buffer ? data.toString() : JSON.stringify(data), LogLevel.DEBUG));
        return childProcess;
    }
    catch (err) {
        throw new Error(`\`${executable}${args ? ' ' + args.join(' ') : ''}\` did not exit successfully. Rerun with --debug for more information.`, { cause: err });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZV93aXRoX2RlYnVnZ2VyX2xvZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYWNrYWdlLW1hbmFnZXItY29udHJvbGxlci9leGVjdXRlX3dpdGhfZGVidWdnZXJfbG9nZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNqRCxPQUFPLEVBQWUsS0FBSyxJQUFJLE1BQU0sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUNyRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3hDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sc0JBQXNCLEdBQUcsQ0FDcEMsR0FBVyxFQUNYLFVBQWtCLEVBQ2xCLElBQXlCLEVBQ3pCLEtBQUssR0FBRyxNQUFNLEVBQ2QsT0FBc0IsRUFDRyxFQUFFO0lBQzNCLElBQUksQ0FBQztRQUNILE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFO1lBQzNDLEtBQUssRUFBRSxTQUFTO1lBQ2hCLEdBQUc7WUFDSCxHQUFHLE9BQU87U0FDWCxDQUFDLENBQUM7UUFFSCxZQUFZLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFhLEVBQUUsRUFBRSxDQUNqRCxPQUFPLENBQUMsR0FBRyxDQUNULElBQUksWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDL0QsUUFBUSxDQUFDLEtBQUssQ0FDZixDQUNGLENBQUM7UUFDRixZQUFZLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFhLEVBQUUsRUFBRSxDQUNqRCxPQUFPLENBQUMsR0FBRyxDQUNULElBQUksWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFDL0QsUUFBUSxDQUFDLEtBQUssQ0FDZixDQUNGLENBQUM7UUFFRixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLE1BQU0sSUFBSSxLQUFLLENBQ2IsS0FBSyxVQUFVLEdBQ2IsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDaEMsd0VBQXdFLEVBQ3hFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUNmLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICcuLi9wcmludGVyL3ByaW50ZXIuanMnO1xuaW1wb3J0IHsgRXhlY2FNZXRob2QsIGV4ZWNhIGFzIF9leGVjYSB9IGZyb20gJ2V4ZWNhJztcbmltcG9ydCB7IHByaW50ZXIgfSBmcm9tICcuLi9wcmludGVyLmpzJztcbmltcG9ydCB7IEV4ZWNhT3B0aW9ucyB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuXG4vKipcbiAqIEFic3RyYWN0cyB0aGUgZXhlY3V0aW9uIG9mIGEgY29tbWFuZCBhbmQgcGlwZXMgb3V0cHV0cy9lcnJvcnMgdG8gYFByaW50ZXIuZGVidWdgXG4gKi9cbmV4cG9ydCBjb25zdCBleGVjdXRlV2l0aERlYnVnTG9nZ2VyID0gKFxuICBjd2Q6IHN0cmluZyxcbiAgZXhlY3V0YWJsZTogc3RyaW5nLFxuICBhcmdzPzogUmVhZG9ubHk8c3RyaW5nW10+LFxuICBleGVjYSA9IF9leGVjYSxcbiAgb3B0aW9ucz86IEV4ZWNhT3B0aW9ucyxcbik6IFJldHVyblR5cGU8RXhlY2FNZXRob2Q+ID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCBjaGlsZFByb2Nlc3MgPSBleGVjYShleGVjdXRhYmxlLCBhcmdzLCB7XG4gICAgICBzdGRpbjogJ2luaGVyaXQnLFxuICAgICAgY3dkLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9KTtcblxuICAgIGNoaWxkUHJvY2Vzcz8uc3Rkb3V0Py5vbignZGF0YScsIChkYXRhOiB1bmtub3duKSA9PlxuICAgICAgcHJpbnRlci5sb2coXG4gICAgICAgIGRhdGEgaW5zdGFuY2VvZiBCdWZmZXIgPyBkYXRhLnRvU3RyaW5nKCkgOiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICAgICAgTG9nTGV2ZWwuREVCVUcsXG4gICAgICApLFxuICAgICk7XG4gICAgY2hpbGRQcm9jZXNzPy5zdGRlcnI/Lm9uKCdkYXRhJywgKGRhdGE6IHVua25vd24pID0+XG4gICAgICBwcmludGVyLmxvZyhcbiAgICAgICAgZGF0YSBpbnN0YW5jZW9mIEJ1ZmZlciA/IGRhdGEudG9TdHJpbmcoKSA6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgICBMb2dMZXZlbC5ERUJVRyxcbiAgICAgICksXG4gICAgKTtcblxuICAgIHJldHVybiBjaGlsZFByb2Nlc3M7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBcXGAke2V4ZWN1dGFibGV9JHtcbiAgICAgICAgYXJncyA/ICcgJyArIGFyZ3Muam9pbignICcpIDogJydcbiAgICAgIH1cXGAgZGlkIG5vdCBleGl0IHN1Y2Nlc3NmdWxseS4gUmVydW4gd2l0aCAtLWRlYnVnIGZvciBtb3JlIGluZm9ybWF0aW9uLmAsXG4gICAgICB7IGNhdXNlOiBlcnIgfSxcbiAgICApO1xuICB9XG59O1xuIl19