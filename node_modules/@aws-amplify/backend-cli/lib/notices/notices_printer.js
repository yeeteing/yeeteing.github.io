import { format, printer } from '@aws-amplify/cli-core';
/**
 * Prints notices.
 */
export class NoticesPrinter {
    packageManagerController;
    _printer;
    /**
     * Creates notices printer
     */
    constructor(packageManagerController, _printer = printer) {
        this.packageManagerController = packageManagerController;
        this._printer = _printer;
    }
    print = (notices) => {
        if (notices.length === 0) {
            return;
        }
        this._printer.print(`Notices:`);
        this._printer.printNewLine();
        for (const notice of notices) {
            this.printSingleNotice(notice);
            this._printer.printNewLine();
        }
        this._printer.print(`${format.dim("If you don't want to see a notice anymore, use ")}${format.color(this.packageManagerController.getCommand([
            'ampx',
            'notices',
            'acknowledge',
            '<notice-id>',
        ]), 'Cyan')}`);
    };
    printSingleNotice = (notice) => {
        this._printer.print(`${notice.id}\t${notice.title}`);
        this._printer.printNewLine();
        this.printDetails(notice.details);
        this._printer.printNewLine();
        if (notice.link) {
            this._printer.print(`\tMore information at: ${notice.link}`);
            this._printer.printNewLine();
        }
    };
    printDetails = (details) => {
        const tokens = details.split(/\s/);
        const lineLengthLimit = 80;
        let currentLine = '';
        const lines = [];
        for (const token of tokens) {
            if (currentLine.length + token.length > lineLengthLimit) {
                if (currentLine.length > 0) {
                    lines.push(currentLine);
                }
                currentLine = token;
            }
            else {
                if (currentLine.length > 0) {
                    currentLine = `${currentLine} ${token}`;
                }
                else {
                    currentLine = token;
                }
            }
        }
        if (currentLine.length > 0) {
            lines.push(currentLine);
        }
        for (const line of lines) {
            this._printer.print(`\t${line}`);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWNlc19wcmludGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vdGljZXMvbm90aWNlc19wcmludGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBVSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHaEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sY0FBYztJQUtOO0lBQ0E7SUFMbkI7O09BRUc7SUFDSCxZQUNtQix3QkFBa0QsRUFDbEQsV0FBVyxPQUFPO1FBRGxCLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUNsQyxDQUFDO0lBQ0osS0FBSyxHQUFHLENBQUMsT0FBc0IsRUFBRSxFQUFFO1FBQ2pDLElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN6QixPQUFPO1FBQ1QsQ0FBQztRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDN0IsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUM3QixJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMvQixDQUFDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQ2pCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxpREFBaUQsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQzdFLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLENBQUM7WUFDdkMsTUFBTTtZQUNOLFNBQVM7WUFDVCxhQUFhO1lBQ2IsYUFBYTtTQUNkLENBQUMsRUFDRixNQUFNLENBQ1AsRUFBRSxDQUNKLENBQUM7SUFDSixDQUFDLENBQUM7SUFFTSxpQkFBaUIsR0FBRyxDQUFDLE1BQWMsRUFBRSxFQUFFO1FBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsTUFBTSxDQUFDLEVBQUUsS0FBSyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDN0IsSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQzdELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDL0IsQ0FBQztJQUNILENBQUMsQ0FBQztJQUVNLFlBQVksR0FBRyxDQUFDLE9BQWUsRUFBRSxFQUFFO1FBQ3pDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkMsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDO1FBQzNCLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUNyQixNQUFNLEtBQUssR0FBa0IsRUFBRSxDQUFDO1FBRWhDLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFLENBQUM7WUFDM0IsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLEdBQUcsZUFBZSxFQUFFLENBQUM7Z0JBQ3hELElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztvQkFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDMUIsQ0FBQztnQkFDRCxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQ3RCLENBQUM7aUJBQU0sQ0FBQztnQkFDTixJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7b0JBQzNCLFdBQVcsR0FBRyxHQUFHLFdBQVcsSUFBSSxLQUFLLEVBQUUsQ0FBQztnQkFDMUMsQ0FBQztxQkFBTSxDQUFDO29CQUNOLFdBQVcsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFCLENBQUM7UUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuQyxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb3RpY2UsIGZvcm1hdCwgcHJpbnRlciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcblxuLyoqXG4gKiBQcmludHMgbm90aWNlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE5vdGljZXNQcmludGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgbm90aWNlcyBwcmludGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcjogUGFja2FnZU1hbmFnZXJDb250cm9sbGVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX3ByaW50ZXIgPSBwcmludGVyLFxuICApIHt9XG4gIHByaW50ID0gKG5vdGljZXM6IEFycmF5PE5vdGljZT4pID0+IHtcbiAgICBpZiAobm90aWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5fcHJpbnRlci5wcmludChgTm90aWNlczpgKTtcbiAgICB0aGlzLl9wcmludGVyLnByaW50TmV3TGluZSgpO1xuICAgIGZvciAoY29uc3Qgbm90aWNlIG9mIG5vdGljZXMpIHtcbiAgICAgIHRoaXMucHJpbnRTaW5nbGVOb3RpY2Uobm90aWNlKTtcbiAgICAgIHRoaXMuX3ByaW50ZXIucHJpbnROZXdMaW5lKCk7XG4gICAgfVxuICAgIHRoaXMuX3ByaW50ZXIucHJpbnQoXG4gICAgICBgJHtmb3JtYXQuZGltKFwiSWYgeW91IGRvbid0IHdhbnQgdG8gc2VlIGEgbm90aWNlIGFueW1vcmUsIHVzZSBcIil9JHtmb3JtYXQuY29sb3IoXG4gICAgICAgIHRoaXMucGFja2FnZU1hbmFnZXJDb250cm9sbGVyLmdldENvbW1hbmQoW1xuICAgICAgICAgICdhbXB4JyxcbiAgICAgICAgICAnbm90aWNlcycsXG4gICAgICAgICAgJ2Fja25vd2xlZGdlJyxcbiAgICAgICAgICAnPG5vdGljZS1pZD4nLFxuICAgICAgICBdKSxcbiAgICAgICAgJ0N5YW4nLFxuICAgICAgKX1gLFxuICAgICk7XG4gIH07XG5cbiAgcHJpdmF0ZSBwcmludFNpbmdsZU5vdGljZSA9IChub3RpY2U6IE5vdGljZSkgPT4ge1xuICAgIHRoaXMuX3ByaW50ZXIucHJpbnQoYCR7bm90aWNlLmlkfVxcdCR7bm90aWNlLnRpdGxlfWApO1xuICAgIHRoaXMuX3ByaW50ZXIucHJpbnROZXdMaW5lKCk7XG4gICAgdGhpcy5wcmludERldGFpbHMobm90aWNlLmRldGFpbHMpO1xuICAgIHRoaXMuX3ByaW50ZXIucHJpbnROZXdMaW5lKCk7XG4gICAgaWYgKG5vdGljZS5saW5rKSB7XG4gICAgICB0aGlzLl9wcmludGVyLnByaW50KGBcXHRNb3JlIGluZm9ybWF0aW9uIGF0OiAke25vdGljZS5saW5rfWApO1xuICAgICAgdGhpcy5fcHJpbnRlci5wcmludE5ld0xpbmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBwcmludERldGFpbHMgPSAoZGV0YWlsczogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgdG9rZW5zID0gZGV0YWlscy5zcGxpdCgvXFxzLyk7XG4gICAgY29uc3QgbGluZUxlbmd0aExpbWl0ID0gODA7XG4gICAgbGV0IGN1cnJlbnRMaW5lID0gJyc7XG4gICAgY29uc3QgbGluZXM6IEFycmF5PHN0cmluZz4gPSBbXTtcblxuICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgICBpZiAoY3VycmVudExpbmUubGVuZ3RoICsgdG9rZW4ubGVuZ3RoID4gbGluZUxlbmd0aExpbWl0KSB7XG4gICAgICAgIGlmIChjdXJyZW50TGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbGluZXMucHVzaChjdXJyZW50TGluZSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudExpbmUgPSB0b2tlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjdXJyZW50TGluZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgY3VycmVudExpbmUgPSBgJHtjdXJyZW50TGluZX0gJHt0b2tlbn1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnRMaW5lID0gdG9rZW47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN1cnJlbnRMaW5lLmxlbmd0aCA+IDApIHtcbiAgICAgIGxpbmVzLnB1c2goY3VycmVudExpbmUpO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgdGhpcy5fcHJpbnRlci5wcmludChgXFx0JHtsaW5lfWApO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==