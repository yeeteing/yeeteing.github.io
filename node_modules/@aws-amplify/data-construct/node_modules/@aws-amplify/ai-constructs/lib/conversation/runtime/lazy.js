"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Lazy_value;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lazy = void 0;
/**
 * A class that initializes lazily upon usage.
 */
class Lazy {
    /**
     * Creates lazy instance.
     */
    constructor(valueFactory) {
        this.valueFactory = valueFactory;
        _Lazy_value.set(this, void 0);
    }
    /**
     * Gets a value. Value is create at first access.
     */
    get value() {
        var _a;
        return (__classPrivateFieldSet(this, _Lazy_value, (_a = __classPrivateFieldGet(this, _Lazy_value, "f")) !== null && _a !== void 0 ? _a : this.valueFactory(), "f"));
    }
}
exports.Lazy = Lazy;
_Lazy_value = new WeakMap();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb252ZXJzYXRpb24vcnVudGltZS9sYXp5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztHQUVHO0FBQ0gsTUFBYSxJQUFJO0lBR2Y7O09BRUc7SUFDSCxZQUE2QixZQUFxQjtRQUFyQixpQkFBWSxHQUFaLFlBQVksQ0FBUztRQUxsRCw4QkFBVztJQUswQyxDQUFDO0lBQ3REOztPQUVHO0lBQ0gsSUFBVyxLQUFLOztRQUNkLE9BQU8sQ0FBQyxpSUFBZ0IsSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFBLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0Y7QUFiRCxvQkFhQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQSBjbGFzcyB0aGF0IGluaXRpYWxpemVzIGxhemlseSB1cG9uIHVzYWdlLlxuICovXG5leHBvcnQgY2xhc3MgTGF6eTxUPiB7XG4gICN2YWx1ZT86IFQ7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbGF6eSBpbnN0YW5jZS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgdmFsdWVGYWN0b3J5OiAoKSA9PiBUKSB7fVxuICAvKipcbiAgICogR2V0cyBhIHZhbHVlLiBWYWx1ZSBpcyBjcmVhdGUgYXQgZmlyc3QgYWNjZXNzLlxuICAgKi9cbiAgcHVibGljIGdldCB2YWx1ZSgpOiBUIHtcbiAgICByZXR1cm4gKHRoaXMuI3ZhbHVlID8/PSB0aGlzLnZhbHVlRmFjdG9yeSgpKTtcbiAgfVxufVxuIl19