import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { CodeBuildServiceException as __BaseException } from "./CodeBuildServiceException";
export declare class AccountLimitExceededException extends __BaseException {
  readonly name: "AccountLimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccountLimitExceededException, __BaseException>
  );
}
export declare class AccountSuspendedException extends __BaseException {
  readonly name: "AccountSuspendedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccountSuspendedException, __BaseException>
  );
}
export declare const ArtifactNamespace: {
  readonly BUILD_ID: "BUILD_ID";
  readonly NONE: "NONE";
};
export type ArtifactNamespace =
  (typeof ArtifactNamespace)[keyof typeof ArtifactNamespace];
export declare const ArtifactPackaging: {
  readonly NONE: "NONE";
  readonly ZIP: "ZIP";
};
export type ArtifactPackaging =
  (typeof ArtifactPackaging)[keyof typeof ArtifactPackaging];
export declare const ArtifactsType: {
  readonly CODEPIPELINE: "CODEPIPELINE";
  readonly NO_ARTIFACTS: "NO_ARTIFACTS";
  readonly S3: "S3";
};
export type ArtifactsType = (typeof ArtifactsType)[keyof typeof ArtifactsType];
export declare const AuthType: {
  readonly BASIC_AUTH: "BASIC_AUTH";
  readonly CODECONNECTIONS: "CODECONNECTIONS";
  readonly OAUTH: "OAUTH";
  readonly PERSONAL_ACCESS_TOKEN: "PERSONAL_ACCESS_TOKEN";
  readonly SECRETS_MANAGER: "SECRETS_MANAGER";
};
export type AuthType = (typeof AuthType)[keyof typeof AuthType];
export interface AutoRetryConfig {
  autoRetryLimit?: number | undefined;
  autoRetryNumber?: number | undefined;
  nextAutoRetry?: string | undefined;
  previousAutoRetry?: string | undefined;
}
export interface BatchDeleteBuildsInput {
  ids: string[] | undefined;
}
export interface BuildNotDeleted {
  id?: string | undefined;
  statusCode?: string | undefined;
}
export interface BatchDeleteBuildsOutput {
  buildsDeleted?: string[] | undefined;
  buildsNotDeleted?: BuildNotDeleted[] | undefined;
}
export declare class InvalidInputException extends __BaseException {
  readonly name: "InvalidInputException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidInputException, __BaseException>
  );
}
export interface BatchGetBuildBatchesInput {
  ids: string[] | undefined;
}
export declare const BucketOwnerAccess: {
  readonly FULL: "FULL";
  readonly NONE: "NONE";
  readonly READ_ONLY: "READ_ONLY";
};
export type BucketOwnerAccess =
  (typeof BucketOwnerAccess)[keyof typeof BucketOwnerAccess];
export interface BuildArtifacts {
  location?: string | undefined;
  sha256sum?: string | undefined;
  md5sum?: string | undefined;
  overrideArtifactName?: boolean | undefined;
  encryptionDisabled?: boolean | undefined;
  artifactIdentifier?: string | undefined;
  bucketOwnerAccess?: BucketOwnerAccess | undefined;
}
export declare const BatchReportModeType: {
  readonly REPORT_AGGREGATED_BATCH: "REPORT_AGGREGATED_BATCH";
  readonly REPORT_INDIVIDUAL_BUILDS: "REPORT_INDIVIDUAL_BUILDS";
};
export type BatchReportModeType =
  (typeof BatchReportModeType)[keyof typeof BatchReportModeType];
export interface BatchRestrictions {
  maximumBuildsAllowed?: number | undefined;
  computeTypesAllowed?: string[] | undefined;
  fleetsAllowed?: string[] | undefined;
}
export interface ProjectBuildBatchConfig {
  serviceRole?: string | undefined;
  combineArtifacts?: boolean | undefined;
  restrictions?: BatchRestrictions | undefined;
  timeoutInMins?: number | undefined;
  batchReportMode?: BatchReportModeType | undefined;
}
export declare const StatusType: {
  readonly FAILED: "FAILED";
  readonly FAULT: "FAULT";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly STOPPED: "STOPPED";
  readonly SUCCEEDED: "SUCCEEDED";
  readonly TIMED_OUT: "TIMED_OUT";
};
export type StatusType = (typeof StatusType)[keyof typeof StatusType];
export interface ResolvedArtifact {
  type?: ArtifactsType | undefined;
  location?: string | undefined;
  identifier?: string | undefined;
}
export interface BuildSummary {
  arn?: string | undefined;
  requestedOn?: Date | undefined;
  buildStatus?: StatusType | undefined;
  primaryArtifact?: ResolvedArtifact | undefined;
  secondaryArtifacts?: ResolvedArtifact[] | undefined;
}
export interface BuildGroup {
  identifier?: string | undefined;
  dependsOn?: string[] | undefined;
  ignoreFailure?: boolean | undefined;
  currentBuildSummary?: BuildSummary | undefined;
  priorBuildSummaryList?: BuildSummary[] | undefined;
}
export declare const CacheMode: {
  readonly LOCAL_CUSTOM_CACHE: "LOCAL_CUSTOM_CACHE";
  readonly LOCAL_DOCKER_LAYER_CACHE: "LOCAL_DOCKER_LAYER_CACHE";
  readonly LOCAL_SOURCE_CACHE: "LOCAL_SOURCE_CACHE";
};
export type CacheMode = (typeof CacheMode)[keyof typeof CacheMode];
export declare const CacheType: {
  readonly LOCAL: "LOCAL";
  readonly NO_CACHE: "NO_CACHE";
  readonly S3: "S3";
};
export type CacheType = (typeof CacheType)[keyof typeof CacheType];
export interface ProjectCache {
  type: CacheType | undefined;
  location?: string | undefined;
  modes?: CacheMode[] | undefined;
  cacheNamespace?: string | undefined;
}
export declare const MachineType: {
  readonly GENERAL: "GENERAL";
  readonly NVME: "NVME";
};
export type MachineType = (typeof MachineType)[keyof typeof MachineType];
export interface ComputeConfiguration {
  vCpu?: number | undefined;
  memory?: number | undefined;
  disk?: number | undefined;
  machineType?: MachineType | undefined;
  instanceType?: string | undefined;
}
export declare const ComputeType: {
  readonly ATTRIBUTE_BASED_COMPUTE: "ATTRIBUTE_BASED_COMPUTE";
  readonly BUILD_GENERAL1_2XLARGE: "BUILD_GENERAL1_2XLARGE";
  readonly BUILD_GENERAL1_LARGE: "BUILD_GENERAL1_LARGE";
  readonly BUILD_GENERAL1_MEDIUM: "BUILD_GENERAL1_MEDIUM";
  readonly BUILD_GENERAL1_SMALL: "BUILD_GENERAL1_SMALL";
  readonly BUILD_GENERAL1_XLARGE: "BUILD_GENERAL1_XLARGE";
  readonly BUILD_LAMBDA_10GB: "BUILD_LAMBDA_10GB";
  readonly BUILD_LAMBDA_1GB: "BUILD_LAMBDA_1GB";
  readonly BUILD_LAMBDA_2GB: "BUILD_LAMBDA_2GB";
  readonly BUILD_LAMBDA_4GB: "BUILD_LAMBDA_4GB";
  readonly BUILD_LAMBDA_8GB: "BUILD_LAMBDA_8GB";
  readonly CUSTOM_INSTANCE_TYPE: "CUSTOM_INSTANCE_TYPE";
};
export type ComputeType = (typeof ComputeType)[keyof typeof ComputeType];
export interface DockerServerStatus {
  status?: string | undefined;
  message?: string | undefined;
}
export interface DockerServer {
  computeType: ComputeType | undefined;
  securityGroupIds?: string[] | undefined;
  status?: DockerServerStatus | undefined;
}
export declare const EnvironmentVariableType: {
  readonly PARAMETER_STORE: "PARAMETER_STORE";
  readonly PLAINTEXT: "PLAINTEXT";
  readonly SECRETS_MANAGER: "SECRETS_MANAGER";
};
export type EnvironmentVariableType =
  (typeof EnvironmentVariableType)[keyof typeof EnvironmentVariableType];
export interface EnvironmentVariable {
  name: string | undefined;
  value: string | undefined;
  type?: EnvironmentVariableType | undefined;
}
export interface ProjectFleet {
  fleetArn?: string | undefined;
}
export declare const ImagePullCredentialsType: {
  readonly CODEBUILD: "CODEBUILD";
  readonly SERVICE_ROLE: "SERVICE_ROLE";
};
export type ImagePullCredentialsType =
  (typeof ImagePullCredentialsType)[keyof typeof ImagePullCredentialsType];
export declare const CredentialProviderType: {
  readonly SECRETS_MANAGER: "SECRETS_MANAGER";
};
export type CredentialProviderType =
  (typeof CredentialProviderType)[keyof typeof CredentialProviderType];
export interface RegistryCredential {
  credential: string | undefined;
  credentialProvider: CredentialProviderType | undefined;
}
export declare const EnvironmentType: {
  readonly ARM_CONTAINER: "ARM_CONTAINER";
  readonly ARM_EC2: "ARM_EC2";
  readonly ARM_LAMBDA_CONTAINER: "ARM_LAMBDA_CONTAINER";
  readonly LINUX_CONTAINER: "LINUX_CONTAINER";
  readonly LINUX_EC2: "LINUX_EC2";
  readonly LINUX_GPU_CONTAINER: "LINUX_GPU_CONTAINER";
  readonly LINUX_LAMBDA_CONTAINER: "LINUX_LAMBDA_CONTAINER";
  readonly MAC_ARM: "MAC_ARM";
  readonly WINDOWS_CONTAINER: "WINDOWS_CONTAINER";
  readonly WINDOWS_EC2: "WINDOWS_EC2";
  readonly WINDOWS_SERVER_2019_CONTAINER: "WINDOWS_SERVER_2019_CONTAINER";
  readonly WINDOWS_SERVER_2022_CONTAINER: "WINDOWS_SERVER_2022_CONTAINER";
};
export type EnvironmentType =
  (typeof EnvironmentType)[keyof typeof EnvironmentType];
export interface ProjectEnvironment {
  type: EnvironmentType | undefined;
  image: string | undefined;
  computeType: ComputeType | undefined;
  computeConfiguration?: ComputeConfiguration | undefined;
  fleet?: ProjectFleet | undefined;
  environmentVariables?: EnvironmentVariable[] | undefined;
  privilegedMode?: boolean | undefined;
  certificate?: string | undefined;
  registryCredential?: RegistryCredential | undefined;
  imagePullCredentialsType?: ImagePullCredentialsType | undefined;
  dockerServer?: DockerServer | undefined;
}
export declare const FileSystemType: {
  readonly EFS: "EFS";
};
export type FileSystemType =
  (typeof FileSystemType)[keyof typeof FileSystemType];
export interface ProjectFileSystemLocation {
  type?: FileSystemType | undefined;
  location?: string | undefined;
  mountPoint?: string | undefined;
  identifier?: string | undefined;
  mountOptions?: string | undefined;
}
export declare const LogsConfigStatusType: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type LogsConfigStatusType =
  (typeof LogsConfigStatusType)[keyof typeof LogsConfigStatusType];
export interface CloudWatchLogsConfig {
  status: LogsConfigStatusType | undefined;
  groupName?: string | undefined;
  streamName?: string | undefined;
}
export interface S3LogsConfig {
  status: LogsConfigStatusType | undefined;
  location?: string | undefined;
  encryptionDisabled?: boolean | undefined;
  bucketOwnerAccess?: BucketOwnerAccess | undefined;
}
export interface LogsConfig {
  cloudWatchLogs?: CloudWatchLogsConfig | undefined;
  s3Logs?: S3LogsConfig | undefined;
}
export interface PhaseContext {
  statusCode?: string | undefined;
  message?: string | undefined;
}
export declare const BuildBatchPhaseType: {
  readonly COMBINE_ARTIFACTS: "COMBINE_ARTIFACTS";
  readonly DOWNLOAD_BATCHSPEC: "DOWNLOAD_BATCHSPEC";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly STOPPED: "STOPPED";
  readonly SUBMITTED: "SUBMITTED";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type BuildBatchPhaseType =
  (typeof BuildBatchPhaseType)[keyof typeof BuildBatchPhaseType];
export interface BuildBatchPhase {
  phaseType?: BuildBatchPhaseType | undefined;
  phaseStatus?: StatusType | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  durationInSeconds?: number | undefined;
  contexts?: PhaseContext[] | undefined;
}
export declare const SourceAuthType: {
  readonly CODECONNECTIONS: "CODECONNECTIONS";
  readonly OAUTH: "OAUTH";
  readonly SECRETS_MANAGER: "SECRETS_MANAGER";
};
export type SourceAuthType =
  (typeof SourceAuthType)[keyof typeof SourceAuthType];
export interface SourceAuth {
  type: SourceAuthType | undefined;
  resource?: string | undefined;
}
export interface BuildStatusConfig {
  context?: string | undefined;
  targetUrl?: string | undefined;
}
export interface GitSubmodulesConfig {
  fetchSubmodules: boolean | undefined;
}
export declare const SourceType: {
  readonly BITBUCKET: "BITBUCKET";
  readonly CODECOMMIT: "CODECOMMIT";
  readonly CODEPIPELINE: "CODEPIPELINE";
  readonly GITHUB: "GITHUB";
  readonly GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE";
  readonly GITLAB: "GITLAB";
  readonly GITLAB_SELF_MANAGED: "GITLAB_SELF_MANAGED";
  readonly NO_SOURCE: "NO_SOURCE";
  readonly S3: "S3";
};
export type SourceType = (typeof SourceType)[keyof typeof SourceType];
export interface ProjectSource {
  type: SourceType | undefined;
  location?: string | undefined;
  gitCloneDepth?: number | undefined;
  gitSubmodulesConfig?: GitSubmodulesConfig | undefined;
  buildspec?: string | undefined;
  auth?: SourceAuth | undefined;
  reportBuildStatus?: boolean | undefined;
  buildStatusConfig?: BuildStatusConfig | undefined;
  insecureSsl?: boolean | undefined;
  sourceIdentifier?: string | undefined;
}
export interface ProjectSourceVersion {
  sourceIdentifier: string | undefined;
  sourceVersion: string | undefined;
}
export interface VpcConfig {
  vpcId?: string | undefined;
  subnets?: string[] | undefined;
  securityGroupIds?: string[] | undefined;
}
export interface BuildBatch {
  id?: string | undefined;
  arn?: string | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  currentPhase?: string | undefined;
  buildBatchStatus?: StatusType | undefined;
  sourceVersion?: string | undefined;
  resolvedSourceVersion?: string | undefined;
  projectName?: string | undefined;
  phases?: BuildBatchPhase[] | undefined;
  source?: ProjectSource | undefined;
  secondarySources?: ProjectSource[] | undefined;
  secondarySourceVersions?: ProjectSourceVersion[] | undefined;
  artifacts?: BuildArtifacts | undefined;
  secondaryArtifacts?: BuildArtifacts[] | undefined;
  cache?: ProjectCache | undefined;
  environment?: ProjectEnvironment | undefined;
  serviceRole?: string | undefined;
  logConfig?: LogsConfig | undefined;
  buildTimeoutInMinutes?: number | undefined;
  queuedTimeoutInMinutes?: number | undefined;
  complete?: boolean | undefined;
  initiator?: string | undefined;
  vpcConfig?: VpcConfig | undefined;
  encryptionKey?: string | undefined;
  buildBatchNumber?: number | undefined;
  fileSystemLocations?: ProjectFileSystemLocation[] | undefined;
  buildBatchConfig?: ProjectBuildBatchConfig | undefined;
  buildGroups?: BuildGroup[] | undefined;
  debugSessionEnabled?: boolean | undefined;
  reportArns?: string[] | undefined;
}
export interface BatchGetBuildBatchesOutput {
  buildBatches?: BuildBatch[] | undefined;
  buildBatchesNotFound?: string[] | undefined;
}
export interface BatchGetBuildsInput {
  ids: string[] | undefined;
}
export interface DebugSession {
  sessionEnabled?: boolean | undefined;
  sessionTarget?: string | undefined;
}
export interface ExportedEnvironmentVariable {
  name?: string | undefined;
  value?: string | undefined;
}
export interface LogsLocation {
  groupName?: string | undefined;
  streamName?: string | undefined;
  deepLink?: string | undefined;
  s3DeepLink?: string | undefined;
  cloudWatchLogsArn?: string | undefined;
  s3LogsArn?: string | undefined;
  cloudWatchLogs?: CloudWatchLogsConfig | undefined;
  s3Logs?: S3LogsConfig | undefined;
}
export interface NetworkInterface {
  subnetId?: string | undefined;
  networkInterfaceId?: string | undefined;
}
export declare const BuildPhaseType: {
  readonly BUILD: "BUILD";
  readonly COMPLETED: "COMPLETED";
  readonly DOWNLOAD_SOURCE: "DOWNLOAD_SOURCE";
  readonly FINALIZING: "FINALIZING";
  readonly INSTALL: "INSTALL";
  readonly POST_BUILD: "POST_BUILD";
  readonly PRE_BUILD: "PRE_BUILD";
  readonly PROVISIONING: "PROVISIONING";
  readonly QUEUED: "QUEUED";
  readonly SUBMITTED: "SUBMITTED";
  readonly UPLOAD_ARTIFACTS: "UPLOAD_ARTIFACTS";
};
export type BuildPhaseType =
  (typeof BuildPhaseType)[keyof typeof BuildPhaseType];
export interface BuildPhase {
  phaseType?: BuildPhaseType | undefined;
  phaseStatus?: StatusType | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  durationInSeconds?: number | undefined;
  contexts?: PhaseContext[] | undefined;
}
export interface Build {
  id?: string | undefined;
  arn?: string | undefined;
  buildNumber?: number | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  currentPhase?: string | undefined;
  buildStatus?: StatusType | undefined;
  sourceVersion?: string | undefined;
  resolvedSourceVersion?: string | undefined;
  projectName?: string | undefined;
  phases?: BuildPhase[] | undefined;
  source?: ProjectSource | undefined;
  secondarySources?: ProjectSource[] | undefined;
  secondarySourceVersions?: ProjectSourceVersion[] | undefined;
  artifacts?: BuildArtifacts | undefined;
  secondaryArtifacts?: BuildArtifacts[] | undefined;
  cache?: ProjectCache | undefined;
  environment?: ProjectEnvironment | undefined;
  serviceRole?: string | undefined;
  logs?: LogsLocation | undefined;
  timeoutInMinutes?: number | undefined;
  queuedTimeoutInMinutes?: number | undefined;
  buildComplete?: boolean | undefined;
  initiator?: string | undefined;
  vpcConfig?: VpcConfig | undefined;
  networkInterface?: NetworkInterface | undefined;
  encryptionKey?: string | undefined;
  exportedEnvironmentVariables?: ExportedEnvironmentVariable[] | undefined;
  reportArns?: string[] | undefined;
  fileSystemLocations?: ProjectFileSystemLocation[] | undefined;
  debugSession?: DebugSession | undefined;
  buildBatchArn?: string | undefined;
  autoRetryConfig?: AutoRetryConfig | undefined;
}
export interface BatchGetBuildsOutput {
  builds?: Build[] | undefined;
  buildsNotFound?: string[] | undefined;
}
export interface BatchGetCommandExecutionsInput {
  sandboxId: string | undefined;
  commandExecutionIds: string[] | undefined;
}
export declare const CommandType: {
  readonly SHELL: "SHELL";
};
export type CommandType = (typeof CommandType)[keyof typeof CommandType];
export interface CommandExecution {
  id?: string | undefined;
  sandboxId?: string | undefined;
  submitTime?: Date | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  status?: string | undefined;
  command?: string | undefined;
  type?: CommandType | undefined;
  exitCode?: string | undefined;
  standardOutputContent?: string | undefined;
  standardErrContent?: string | undefined;
  logs?: LogsLocation | undefined;
  sandboxArn?: string | undefined;
}
export interface BatchGetCommandExecutionsOutput {
  commandExecutions?: CommandExecution[] | undefined;
  commandExecutionsNotFound?: string[] | undefined;
}
export interface BatchGetFleetsInput {
  names: string[] | undefined;
}
export declare const FleetOverflowBehavior: {
  readonly ON_DEMAND: "ON_DEMAND";
  readonly QUEUE: "QUEUE";
};
export type FleetOverflowBehavior =
  (typeof FleetOverflowBehavior)[keyof typeof FleetOverflowBehavior];
export declare const FleetProxyRuleBehavior: {
  readonly ALLOW_ALL: "ALLOW_ALL";
  readonly DENY_ALL: "DENY_ALL";
};
export type FleetProxyRuleBehavior =
  (typeof FleetProxyRuleBehavior)[keyof typeof FleetProxyRuleBehavior];
export declare const FleetProxyRuleEffectType: {
  readonly ALLOW: "ALLOW";
  readonly DENY: "DENY";
};
export type FleetProxyRuleEffectType =
  (typeof FleetProxyRuleEffectType)[keyof typeof FleetProxyRuleEffectType];
export declare const FleetProxyRuleType: {
  readonly DOMAIN: "DOMAIN";
  readonly IP: "IP";
};
export type FleetProxyRuleType =
  (typeof FleetProxyRuleType)[keyof typeof FleetProxyRuleType];
export interface FleetProxyRule {
  type: FleetProxyRuleType | undefined;
  effect: FleetProxyRuleEffectType | undefined;
  entities: string[] | undefined;
}
export interface ProxyConfiguration {
  defaultBehavior?: FleetProxyRuleBehavior | undefined;
  orderedProxyRules?: FleetProxyRule[] | undefined;
}
export declare const FleetScalingType: {
  readonly TARGET_TRACKING_SCALING: "TARGET_TRACKING_SCALING";
};
export type FleetScalingType =
  (typeof FleetScalingType)[keyof typeof FleetScalingType];
export declare const FleetScalingMetricType: {
  readonly FLEET_UTILIZATION_RATE: "FLEET_UTILIZATION_RATE";
};
export type FleetScalingMetricType =
  (typeof FleetScalingMetricType)[keyof typeof FleetScalingMetricType];
export interface TargetTrackingScalingConfiguration {
  metricType?: FleetScalingMetricType | undefined;
  targetValue?: number | undefined;
}
export interface ScalingConfigurationOutput {
  scalingType?: FleetScalingType | undefined;
  targetTrackingScalingConfigs?:
    | TargetTrackingScalingConfiguration[]
    | undefined;
  maxCapacity?: number | undefined;
  desiredCapacity?: number | undefined;
}
export declare const FleetContextCode: {
  readonly ACTION_REQUIRED: "ACTION_REQUIRED";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly INSUFFICIENT_CAPACITY: "INSUFFICIENT_CAPACITY";
  readonly PENDING_DELETION: "PENDING_DELETION";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
};
export type FleetContextCode =
  (typeof FleetContextCode)[keyof typeof FleetContextCode];
export declare const FleetStatusCode: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly PENDING_DELETION: "PENDING_DELETION";
  readonly ROTATING: "ROTATING";
  readonly UPDATE_ROLLBACK_FAILED: "UPDATE_ROLLBACK_FAILED";
  readonly UPDATING: "UPDATING";
};
export type FleetStatusCode =
  (typeof FleetStatusCode)[keyof typeof FleetStatusCode];
export interface FleetStatus {
  statusCode?: FleetStatusCode | undefined;
  context?: FleetContextCode | undefined;
  message?: string | undefined;
}
export interface Tag {
  key?: string | undefined;
  value?: string | undefined;
}
export interface Fleet {
  arn?: string | undefined;
  name?: string | undefined;
  id?: string | undefined;
  created?: Date | undefined;
  lastModified?: Date | undefined;
  status?: FleetStatus | undefined;
  baseCapacity?: number | undefined;
  environmentType?: EnvironmentType | undefined;
  computeType?: ComputeType | undefined;
  computeConfiguration?: ComputeConfiguration | undefined;
  scalingConfiguration?: ScalingConfigurationOutput | undefined;
  overflowBehavior?: FleetOverflowBehavior | undefined;
  vpcConfig?: VpcConfig | undefined;
  proxyConfiguration?: ProxyConfiguration | undefined;
  imageId?: string | undefined;
  fleetServiceRole?: string | undefined;
  tags?: Tag[] | undefined;
}
export interface BatchGetFleetsOutput {
  fleets?: Fleet[] | undefined;
  fleetsNotFound?: string[] | undefined;
}
export interface BatchGetProjectsInput {
  names: string[] | undefined;
}
export interface ProjectArtifacts {
  type: ArtifactsType | undefined;
  location?: string | undefined;
  path?: string | undefined;
  namespaceType?: ArtifactNamespace | undefined;
  name?: string | undefined;
  packaging?: ArtifactPackaging | undefined;
  overrideArtifactName?: boolean | undefined;
  encryptionDisabled?: boolean | undefined;
  artifactIdentifier?: string | undefined;
  bucketOwnerAccess?: BucketOwnerAccess | undefined;
}
export interface ProjectBadge {
  badgeEnabled?: boolean | undefined;
  badgeRequestUrl?: string | undefined;
}
export declare const ProjectVisibilityType: {
  readonly PRIVATE: "PRIVATE";
  readonly PUBLIC_READ: "PUBLIC_READ";
};
export type ProjectVisibilityType =
  (typeof ProjectVisibilityType)[keyof typeof ProjectVisibilityType];
export declare const WebhookBuildType: {
  readonly BUILD: "BUILD";
  readonly BUILD_BATCH: "BUILD_BATCH";
  readonly RUNNER_BUILDKITE_BUILD: "RUNNER_BUILDKITE_BUILD";
};
export type WebhookBuildType =
  (typeof WebhookBuildType)[keyof typeof WebhookBuildType];
export declare const WebhookFilterType: {
  readonly ACTOR_ACCOUNT_ID: "ACTOR_ACCOUNT_ID";
  readonly BASE_REF: "BASE_REF";
  readonly COMMIT_MESSAGE: "COMMIT_MESSAGE";
  readonly EVENT: "EVENT";
  readonly FILE_PATH: "FILE_PATH";
  readonly HEAD_REF: "HEAD_REF";
  readonly ORGANIZATION_NAME: "ORGANIZATION_NAME";
  readonly RELEASE_NAME: "RELEASE_NAME";
  readonly REPOSITORY_NAME: "REPOSITORY_NAME";
  readonly TAG_NAME: "TAG_NAME";
  readonly WORKFLOW_NAME: "WORKFLOW_NAME";
};
export type WebhookFilterType =
  (typeof WebhookFilterType)[keyof typeof WebhookFilterType];
export interface WebhookFilter {
  type: WebhookFilterType | undefined;
  pattern: string | undefined;
  excludeMatchedPattern?: boolean | undefined;
}
export declare const PullRequestBuildApproverRole: {
  readonly BITBUCKET_ADMIN: "BITBUCKET_ADMIN";
  readonly BITBUCKET_READ: "BITBUCKET_READ";
  readonly BITBUCKET_WRITE: "BITBUCKET_WRITE";
  readonly GITHUB_ADMIN: "GITHUB_ADMIN";
  readonly GITHUB_MAINTAIN: "GITHUB_MAINTAIN";
  readonly GITHUB_READ: "GITHUB_READ";
  readonly GITHUB_TRIAGE: "GITHUB_TRIAGE";
  readonly GITHUB_WRITE: "GITHUB_WRITE";
  readonly GITLAB_DEVELOPER: "GITLAB_DEVELOPER";
  readonly GITLAB_GUEST: "GITLAB_GUEST";
  readonly GITLAB_MAINTAINER: "GITLAB_MAINTAINER";
  readonly GITLAB_OWNER: "GITLAB_OWNER";
  readonly GITLAB_PLANNER: "GITLAB_PLANNER";
  readonly GITLAB_REPORTER: "GITLAB_REPORTER";
};
export type PullRequestBuildApproverRole =
  (typeof PullRequestBuildApproverRole)[keyof typeof PullRequestBuildApproverRole];
export declare const PullRequestBuildCommentApproval: {
  readonly ALL_PULL_REQUESTS: "ALL_PULL_REQUESTS";
  readonly DISABLED: "DISABLED";
  readonly FORK_PULL_REQUESTS: "FORK_PULL_REQUESTS";
};
export type PullRequestBuildCommentApproval =
  (typeof PullRequestBuildCommentApproval)[keyof typeof PullRequestBuildCommentApproval];
export interface PullRequestBuildPolicy {
  requiresCommentApproval: PullRequestBuildCommentApproval | undefined;
  approverRoles?: PullRequestBuildApproverRole[] | undefined;
}
export declare const WebhookScopeType: {
  readonly GITHUB_GLOBAL: "GITHUB_GLOBAL";
  readonly GITHUB_ORGANIZATION: "GITHUB_ORGANIZATION";
  readonly GITLAB_GROUP: "GITLAB_GROUP";
};
export type WebhookScopeType =
  (typeof WebhookScopeType)[keyof typeof WebhookScopeType];
export interface ScopeConfiguration {
  name: string | undefined;
  domain?: string | undefined;
  scope: WebhookScopeType | undefined;
}
export declare const WebhookStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
};
export type WebhookStatus = (typeof WebhookStatus)[keyof typeof WebhookStatus];
export interface Webhook {
  url?: string | undefined;
  payloadUrl?: string | undefined;
  secret?: string | undefined;
  branchFilter?: string | undefined;
  filterGroups?: WebhookFilter[][] | undefined;
  buildType?: WebhookBuildType | undefined;
  manualCreation?: boolean | undefined;
  lastModifiedSecret?: Date | undefined;
  scopeConfiguration?: ScopeConfiguration | undefined;
  status?: WebhookStatus | undefined;
  statusMessage?: string | undefined;
  pullRequestBuildPolicy?: PullRequestBuildPolicy | undefined;
}
export interface Project {
  name?: string | undefined;
  arn?: string | undefined;
  description?: string | undefined;
  source?: ProjectSource | undefined;
  secondarySources?: ProjectSource[] | undefined;
  sourceVersion?: string | undefined;
  secondarySourceVersions?: ProjectSourceVersion[] | undefined;
  artifacts?: ProjectArtifacts | undefined;
  secondaryArtifacts?: ProjectArtifacts[] | undefined;
  cache?: ProjectCache | undefined;
  environment?: ProjectEnvironment | undefined;
  serviceRole?: string | undefined;
  timeoutInMinutes?: number | undefined;
  queuedTimeoutInMinutes?: number | undefined;
  encryptionKey?: string | undefined;
  tags?: Tag[] | undefined;
  created?: Date | undefined;
  lastModified?: Date | undefined;
  webhook?: Webhook | undefined;
  vpcConfig?: VpcConfig | undefined;
  badge?: ProjectBadge | undefined;
  logsConfig?: LogsConfig | undefined;
  fileSystemLocations?: ProjectFileSystemLocation[] | undefined;
  buildBatchConfig?: ProjectBuildBatchConfig | undefined;
  concurrentBuildLimit?: number | undefined;
  projectVisibility?: ProjectVisibilityType | undefined;
  publicProjectAlias?: string | undefined;
  resourceAccessRole?: string | undefined;
  autoRetryLimit?: number | undefined;
}
export interface BatchGetProjectsOutput {
  projects?: Project[] | undefined;
  projectsNotFound?: string[] | undefined;
}
export interface BatchGetReportGroupsInput {
  reportGroupArns: string[] | undefined;
}
export declare const ReportExportConfigType: {
  readonly NO_EXPORT: "NO_EXPORT";
  readonly S3: "S3";
};
export type ReportExportConfigType =
  (typeof ReportExportConfigType)[keyof typeof ReportExportConfigType];
export declare const ReportPackagingType: {
  readonly NONE: "NONE";
  readonly ZIP: "ZIP";
};
export type ReportPackagingType =
  (typeof ReportPackagingType)[keyof typeof ReportPackagingType];
export interface S3ReportExportConfig {
  bucket?: string | undefined;
  bucketOwner?: string | undefined;
  path?: string | undefined;
  packaging?: ReportPackagingType | undefined;
  encryptionKey?: string | undefined;
  encryptionDisabled?: boolean | undefined;
}
export interface ReportExportConfig {
  exportConfigType?: ReportExportConfigType | undefined;
  s3Destination?: S3ReportExportConfig | undefined;
}
export declare const ReportGroupStatusType: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETING: "DELETING";
};
export type ReportGroupStatusType =
  (typeof ReportGroupStatusType)[keyof typeof ReportGroupStatusType];
export declare const ReportType: {
  readonly CODE_COVERAGE: "CODE_COVERAGE";
  readonly TEST: "TEST";
};
export type ReportType = (typeof ReportType)[keyof typeof ReportType];
export interface ReportGroup {
  arn?: string | undefined;
  name?: string | undefined;
  type?: ReportType | undefined;
  exportConfig?: ReportExportConfig | undefined;
  created?: Date | undefined;
  lastModified?: Date | undefined;
  tags?: Tag[] | undefined;
  status?: ReportGroupStatusType | undefined;
}
export interface BatchGetReportGroupsOutput {
  reportGroups?: ReportGroup[] | undefined;
  reportGroupsNotFound?: string[] | undefined;
}
export interface BatchGetReportsInput {
  reportArns: string[] | undefined;
}
export interface CodeCoverageReportSummary {
  lineCoveragePercentage?: number | undefined;
  linesCovered?: number | undefined;
  linesMissed?: number | undefined;
  branchCoveragePercentage?: number | undefined;
  branchesCovered?: number | undefined;
  branchesMissed?: number | undefined;
}
export declare const ReportStatusType: {
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly GENERATING: "GENERATING";
  readonly INCOMPLETE: "INCOMPLETE";
  readonly SUCCEEDED: "SUCCEEDED";
};
export type ReportStatusType =
  (typeof ReportStatusType)[keyof typeof ReportStatusType];
export interface TestReportSummary {
  total: number | undefined;
  statusCounts: Record<string, number> | undefined;
  durationInNanoSeconds: number | undefined;
}
export interface Report {
  arn?: string | undefined;
  type?: ReportType | undefined;
  name?: string | undefined;
  reportGroupArn?: string | undefined;
  executionId?: string | undefined;
  status?: ReportStatusType | undefined;
  created?: Date | undefined;
  expired?: Date | undefined;
  exportConfig?: ReportExportConfig | undefined;
  truncated?: boolean | undefined;
  testSummary?: TestReportSummary | undefined;
  codeCoverageSummary?: CodeCoverageReportSummary | undefined;
}
export interface BatchGetReportsOutput {
  reports?: Report[] | undefined;
  reportsNotFound?: string[] | undefined;
}
export interface BatchGetSandboxesInput {
  ids: string[] | undefined;
}
export interface SandboxSessionPhase {
  phaseType?: string | undefined;
  phaseStatus?: StatusType | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  durationInSeconds?: number | undefined;
  contexts?: PhaseContext[] | undefined;
}
export interface SandboxSession {
  id?: string | undefined;
  status?: string | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  currentPhase?: string | undefined;
  phases?: SandboxSessionPhase[] | undefined;
  resolvedSourceVersion?: string | undefined;
  logs?: LogsLocation | undefined;
  networkInterface?: NetworkInterface | undefined;
}
export interface Sandbox {
  id?: string | undefined;
  arn?: string | undefined;
  projectName?: string | undefined;
  requestTime?: Date | undefined;
  startTime?: Date | undefined;
  endTime?: Date | undefined;
  status?: string | undefined;
  source?: ProjectSource | undefined;
  sourceVersion?: string | undefined;
  secondarySources?: ProjectSource[] | undefined;
  secondarySourceVersions?: ProjectSourceVersion[] | undefined;
  environment?: ProjectEnvironment | undefined;
  fileSystemLocations?: ProjectFileSystemLocation[] | undefined;
  timeoutInMinutes?: number | undefined;
  queuedTimeoutInMinutes?: number | undefined;
  vpcConfig?: VpcConfig | undefined;
  logConfig?: LogsConfig | undefined;
  encryptionKey?: string | undefined;
  serviceRole?: string | undefined;
  currentSession?: SandboxSession | undefined;
}
export interface BatchGetSandboxesOutput {
  sandboxes?: Sandbox[] | undefined;
  sandboxesNotFound?: string[] | undefined;
}
export interface BuildBatchFilter {
  status?: StatusType | undefined;
}
export interface ScalingConfigurationInput {
  scalingType?: FleetScalingType | undefined;
  targetTrackingScalingConfigs?:
    | TargetTrackingScalingConfiguration[]
    | undefined;
  maxCapacity?: number | undefined;
}
export interface CreateFleetInput {
  name: string | undefined;
  baseCapacity: number | undefined;
  environmentType: EnvironmentType | undefined;
  computeType: ComputeType | undefined;
  computeConfiguration?: ComputeConfiguration | undefined;
  scalingConfiguration?: ScalingConfigurationInput | undefined;
  overflowBehavior?: FleetOverflowBehavior | undefined;
  vpcConfig?: VpcConfig | undefined;
  proxyConfiguration?: ProxyConfiguration | undefined;
  imageId?: string | undefined;
  fleetServiceRole?: string | undefined;
  tags?: Tag[] | undefined;
}
export interface CreateFleetOutput {
  fleet?: Fleet | undefined;
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export interface CreateProjectInput {
  name: string | undefined;
  description?: string | undefined;
  source: ProjectSource | undefined;
  secondarySources?: ProjectSource[] | undefined;
  sourceVersion?: string | undefined;
  secondarySourceVersions?: ProjectSourceVersion[] | undefined;
  artifacts: ProjectArtifacts | undefined;
  secondaryArtifacts?: ProjectArtifacts[] | undefined;
  cache?: ProjectCache | undefined;
  environment: ProjectEnvironment | undefined;
  serviceRole: string | undefined;
  timeoutInMinutes?: number | undefined;
  queuedTimeoutInMinutes?: number | undefined;
  encryptionKey?: string | undefined;
  tags?: Tag[] | undefined;
  vpcConfig?: VpcConfig | undefined;
  badgeEnabled?: boolean | undefined;
  logsConfig?: LogsConfig | undefined;
  fileSystemLocations?: ProjectFileSystemLocation[] | undefined;
  buildBatchConfig?: ProjectBuildBatchConfig | undefined;
  concurrentBuildLimit?: number | undefined;
  autoRetryLimit?: number | undefined;
}
export interface CreateProjectOutput {
  project?: Project | undefined;
}
export interface CreateReportGroupInput {
  name: string | undefined;
  type: ReportType | undefined;
  exportConfig: ReportExportConfig | undefined;
  tags?: Tag[] | undefined;
}
export interface CreateReportGroupOutput {
  reportGroup?: ReportGroup | undefined;
}
export interface CreateWebhookInput {
  projectName: string | undefined;
  branchFilter?: string | undefined;
  filterGroups?: WebhookFilter[][] | undefined;
  buildType?: WebhookBuildType | undefined;
  manualCreation?: boolean | undefined;
  scopeConfiguration?: ScopeConfiguration | undefined;
  pullRequestBuildPolicy?: PullRequestBuildPolicy | undefined;
}
export interface CreateWebhookOutput {
  webhook?: Webhook | undefined;
}
export declare class OAuthProviderException extends __BaseException {
  readonly name: "OAuthProviderException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<OAuthProviderException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export interface DeleteBuildBatchInput {
  id: string | undefined;
}
export interface DeleteBuildBatchOutput {
  statusCode?: string | undefined;
  buildsDeleted?: string[] | undefined;
  buildsNotDeleted?: BuildNotDeleted[] | undefined;
}
export interface DeleteFleetInput {
  arn: string | undefined;
}
export interface DeleteFleetOutput {}
export interface DeleteProjectInput {
  name: string | undefined;
}
export interface DeleteProjectOutput {}
export interface DeleteReportInput {
  arn: string | undefined;
}
export interface DeleteReportOutput {}
export interface DeleteReportGroupInput {
  arn: string | undefined;
  deleteReports?: boolean | undefined;
}
export interface DeleteReportGroupOutput {}
export interface DeleteResourcePolicyInput {
  resourceArn: string | undefined;
}
export interface DeleteResourcePolicyOutput {}
export interface DeleteSourceCredentialsInput {
  arn: string | undefined;
}
export interface DeleteSourceCredentialsOutput {
  arn?: string | undefined;
}
export interface DeleteWebhookInput {
  projectName: string | undefined;
}
export interface DeleteWebhookOutput {}
export declare const ReportCodeCoverageSortByType: {
  readonly FILE_PATH: "FILE_PATH";
  readonly LINE_COVERAGE_PERCENTAGE: "LINE_COVERAGE_PERCENTAGE";
};
export type ReportCodeCoverageSortByType =
  (typeof ReportCodeCoverageSortByType)[keyof typeof ReportCodeCoverageSortByType];
export declare const SortOrderType: {
  readonly ASCENDING: "ASCENDING";
  readonly DESCENDING: "DESCENDING";
};
export type SortOrderType = (typeof SortOrderType)[keyof typeof SortOrderType];
export interface DescribeCodeCoveragesInput {
  reportArn: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
  sortOrder?: SortOrderType | undefined;
  sortBy?: ReportCodeCoverageSortByType | undefined;
  minLineCoveragePercentage?: number | undefined;
  maxLineCoveragePercentage?: number | undefined;
}
export interface CodeCoverage {
  id?: string | undefined;
  reportARN?: string | undefined;
  filePath?: string | undefined;
  lineCoveragePercentage?: number | undefined;
  linesCovered?: number | undefined;
  linesMissed?: number | undefined;
  branchCoveragePercentage?: number | undefined;
  branchesCovered?: number | undefined;
  branchesMissed?: number | undefined;
  expired?: Date | undefined;
}
export interface DescribeCodeCoveragesOutput {
  nextToken?: string | undefined;
  codeCoverages?: CodeCoverage[] | undefined;
}
export interface TestCaseFilter {
  status?: string | undefined;
  keyword?: string | undefined;
}
export interface DescribeTestCasesInput {
  reportArn: string | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
  filter?: TestCaseFilter | undefined;
}
export interface TestCase {
  reportArn?: string | undefined;
  testRawDataPath?: string | undefined;
  prefix?: string | undefined;
  name?: string | undefined;
  status?: string | undefined;
  durationInNanoSeconds?: number | undefined;
  message?: string | undefined;
  expired?: Date | undefined;
  testSuiteName?: string | undefined;
}
export interface DescribeTestCasesOutput {
  nextToken?: string | undefined;
  testCases?: TestCase[] | undefined;
}
export declare const ReportGroupTrendFieldType: {
  readonly BRANCHES_COVERED: "BRANCHES_COVERED";
  readonly BRANCHES_MISSED: "BRANCHES_MISSED";
  readonly BRANCH_COVERAGE: "BRANCH_COVERAGE";
  readonly DURATION: "DURATION";
  readonly LINES_COVERED: "LINES_COVERED";
  readonly LINES_MISSED: "LINES_MISSED";
  readonly LINE_COVERAGE: "LINE_COVERAGE";
  readonly PASS_RATE: "PASS_RATE";
  readonly TOTAL: "TOTAL";
};
export type ReportGroupTrendFieldType =
  (typeof ReportGroupTrendFieldType)[keyof typeof ReportGroupTrendFieldType];
export interface GetReportGroupTrendInput {
  reportGroupArn: string | undefined;
  numOfReports?: number | undefined;
  trendField: ReportGroupTrendFieldType | undefined;
}
export interface ReportWithRawData {
  reportArn?: string | undefined;
  data?: string | undefined;
}
export interface ReportGroupTrendStats {
  average?: string | undefined;
  max?: string | undefined;
  min?: string | undefined;
}
export interface GetReportGroupTrendOutput {
  stats?: ReportGroupTrendStats | undefined;
  rawData?: ReportWithRawData[] | undefined;
}
export interface GetResourcePolicyInput {
  resourceArn: string | undefined;
}
export interface GetResourcePolicyOutput {
  policy?: string | undefined;
}
export declare const ServerType: {
  readonly BITBUCKET: "BITBUCKET";
  readonly GITHUB: "GITHUB";
  readonly GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE";
  readonly GITLAB: "GITLAB";
  readonly GITLAB_SELF_MANAGED: "GITLAB_SELF_MANAGED";
};
export type ServerType = (typeof ServerType)[keyof typeof ServerType];
export interface ImportSourceCredentialsInput {
  username?: string | undefined;
  token: string | undefined;
  serverType: ServerType | undefined;
  authType: AuthType | undefined;
  shouldOverwrite?: boolean | undefined;
}
export interface ImportSourceCredentialsOutput {
  arn?: string | undefined;
}
export interface InvalidateProjectCacheInput {
  projectName: string | undefined;
}
export interface InvalidateProjectCacheOutput {}
export interface ListBuildBatchesInput {
  filter?: BuildBatchFilter | undefined;
  maxResults?: number | undefined;
  sortOrder?: SortOrderType | undefined;
  nextToken?: string | undefined;
}
export interface ListBuildBatchesOutput {
  ids?: string[] | undefined;
  nextToken?: string | undefined;
}
export interface ListBuildBatchesForProjectInput {
  projectName?: string | undefined;
  filter?: BuildBatchFilter | undefined;
  maxResults?: number | undefined;
  sortOrder?: SortOrderType | undefined;
  nextToken?: string | undefined;
}
export interface ListBuildBatchesForProjectOutput {
  ids?: string[] | undefined;
  nextToken?: string | undefined;
}
export interface ListBuildsInput {
  sortOrder?: SortOrderType | undefined;
  nextToken?: string | undefined;
}
export interface ListBuildsOutput {
  ids?: string[] | undefined;
  nextToken?: string | undefined;
}
export interface ListBuildsForProjectInput {
  projectName: string | undefined;
  sortOrder?: SortOrderType | undefined;
  nextToken?: string | undefined;
}
export interface ListBuildsForProjectOutput {
  ids?: string[] | undefined;
  nextToken?: string | undefined;
}
export interface ListCommandExecutionsForSandboxInput {
  sandboxId: string | undefined;
  maxResults?: number | undefined;
  sortOrder?: SortOrderType | undefined;
  nextToken?: string | undefined;
}
export interface ListCommandExecutionsForSandboxOutput {
  commandExecutions?: CommandExecution[] | undefined;
  nextToken?: string | undefined;
}
export interface ListCuratedEnvironmentImagesInput {}
export interface EnvironmentImage {
  name?: string | undefined;
  description?: string | undefined;
  versions?: string[] | undefined;
}
export declare const LanguageType: {
  readonly ANDROID: "ANDROID";
  readonly BASE: "BASE";
  readonly DOCKER: "DOCKER";
  readonly DOTNET: "DOTNET";
  readonly GOLANG: "GOLANG";
  readonly JAVA: "JAVA";
  readonly NODE_JS: "NODE_JS";
  readonly PHP: "PHP";
  readonly PYTHON: "PYTHON";
  readonly RUBY: "RUBY";
};
export type LanguageType = (typeof LanguageType)[keyof typeof LanguageType];
export interface EnvironmentLanguage {
  language?: LanguageType | undefined;
  images?: EnvironmentImage[] | undefined;
}
export declare const PlatformType: {
  readonly AMAZON_LINUX: "AMAZON_LINUX";
  readonly DEBIAN: "DEBIAN";
  readonly UBUNTU: "UBUNTU";
  readonly WINDOWS_SERVER: "WINDOWS_SERVER";
};
export type PlatformType = (typeof PlatformType)[keyof typeof PlatformType];
export interface EnvironmentPlatform {
  platform?: PlatformType | undefined;
  languages?: EnvironmentLanguage[] | undefined;
}
export interface ListCuratedEnvironmentImagesOutput {
  platforms?: EnvironmentPlatform[] | undefined;
}
export declare const FleetSortByType: {
  readonly CREATED_TIME: "CREATED_TIME";
  readonly LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME";
  readonly NAME: "NAME";
};
export type FleetSortByType =
  (typeof FleetSortByType)[keyof typeof FleetSortByType];
export interface ListFleetsInput {
  nextToken?: string | undefined;
  maxResults?: number | undefined;
  sortOrder?: SortOrderType | undefined;
  sortBy?: FleetSortByType | undefined;
}
export interface ListFleetsOutput {
  nextToken?: string | undefined;
  fleets?: string[] | undefined;
}
export declare const ProjectSortByType: {
  readonly CREATED_TIME: "CREATED_TIME";
  readonly LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME";
  readonly NAME: "NAME";
};
export type ProjectSortByType =
  (typeof ProjectSortByType)[keyof typeof ProjectSortByType];
export interface ListProjectsInput {
  sortBy?: ProjectSortByType | undefined;
  sortOrder?: SortOrderType | undefined;
  nextToken?: string | undefined;
}
export interface ListProjectsOutput {
  nextToken?: string | undefined;
  projects?: string[] | undefined;
}
export declare const ReportGroupSortByType: {
  readonly CREATED_TIME: "CREATED_TIME";
  readonly LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME";
  readonly NAME: "NAME";
};
export type ReportGroupSortByType =
  (typeof ReportGroupSortByType)[keyof typeof ReportGroupSortByType];
export interface ListReportGroupsInput {
  sortOrder?: SortOrderType | undefined;
  sortBy?: ReportGroupSortByType | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface ListReportGroupsOutput {
  nextToken?: string | undefined;
  reportGroups?: string[] | undefined;
}
export interface ReportFilter {
  status?: ReportStatusType | undefined;
}
export interface ListReportsInput {
  sortOrder?: SortOrderType | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
  filter?: ReportFilter | undefined;
}
export interface ListReportsOutput {
  nextToken?: string | undefined;
  reports?: string[] | undefined;
}
export interface ListReportsForReportGroupInput {
  reportGroupArn: string | undefined;
  nextToken?: string | undefined;
  sortOrder?: SortOrderType | undefined;
  maxResults?: number | undefined;
  filter?: ReportFilter | undefined;
}
export interface ListReportsForReportGroupOutput {
  nextToken?: string | undefined;
  reports?: string[] | undefined;
}
export interface ListSandboxesInput {
  maxResults?: number | undefined;
  sortOrder?: SortOrderType | undefined;
  nextToken?: string | undefined;
}
export interface ListSandboxesOutput {
  ids?: string[] | undefined;
  nextToken?: string | undefined;
}
export interface ListSandboxesForProjectInput {
  projectName: string | undefined;
  maxResults?: number | undefined;
  sortOrder?: SortOrderType | undefined;
  nextToken?: string | undefined;
}
export interface ListSandboxesForProjectOutput {
  ids?: string[] | undefined;
  nextToken?: string | undefined;
}
export declare const SharedResourceSortByType: {
  readonly ARN: "ARN";
  readonly MODIFIED_TIME: "MODIFIED_TIME";
};
export type SharedResourceSortByType =
  (typeof SharedResourceSortByType)[keyof typeof SharedResourceSortByType];
export interface ListSharedProjectsInput {
  sortBy?: SharedResourceSortByType | undefined;
  sortOrder?: SortOrderType | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListSharedProjectsOutput {
  nextToken?: string | undefined;
  projects?: string[] | undefined;
}
export interface ListSharedReportGroupsInput {
  sortOrder?: SortOrderType | undefined;
  sortBy?: SharedResourceSortByType | undefined;
  nextToken?: string | undefined;
  maxResults?: number | undefined;
}
export interface ListSharedReportGroupsOutput {
  nextToken?: string | undefined;
  reportGroups?: string[] | undefined;
}
export interface ListSourceCredentialsInput {}
export interface SourceCredentialsInfo {
  arn?: string | undefined;
  serverType?: ServerType | undefined;
  authType?: AuthType | undefined;
  resource?: string | undefined;
}
export interface ListSourceCredentialsOutput {
  sourceCredentialsInfos?: SourceCredentialsInfo[] | undefined;
}
export interface PutResourcePolicyInput {
  policy: string | undefined;
  resourceArn: string | undefined;
}
export interface PutResourcePolicyOutput {
  resourceArn?: string | undefined;
}
export interface RetryBuildInput {
  id?: string | undefined;
  idempotencyToken?: string | undefined;
}
export interface RetryBuildOutput {
  build?: Build | undefined;
}
export declare const RetryBuildBatchType: {
  readonly RETRY_ALL_BUILDS: "RETRY_ALL_BUILDS";
  readonly RETRY_FAILED_BUILDS: "RETRY_FAILED_BUILDS";
};
export type RetryBuildBatchType =
  (typeof RetryBuildBatchType)[keyof typeof RetryBuildBatchType];
export interface RetryBuildBatchInput {
  id?: string | undefined;
  idempotencyToken?: string | undefined;
  retryType?: RetryBuildBatchType | undefined;
}
export interface RetryBuildBatchOutput {
  buildBatch?: BuildBatch | undefined;
}
export interface StartBuildInput {
  projectName: string | undefined;
  secondarySourcesOverride?: ProjectSource[] | undefined;
  secondarySourcesVersionOverride?: ProjectSourceVersion[] | undefined;
  sourceVersion?: string | undefined;
  artifactsOverride?: ProjectArtifacts | undefined;
  secondaryArtifactsOverride?: ProjectArtifacts[] | undefined;
  environmentVariablesOverride?: EnvironmentVariable[] | undefined;
  sourceTypeOverride?: SourceType | undefined;
  sourceLocationOverride?: string | undefined;
  sourceAuthOverride?: SourceAuth | undefined;
  gitCloneDepthOverride?: number | undefined;
  gitSubmodulesConfigOverride?: GitSubmodulesConfig | undefined;
  buildspecOverride?: string | undefined;
  insecureSslOverride?: boolean | undefined;
  reportBuildStatusOverride?: boolean | undefined;
  buildStatusConfigOverride?: BuildStatusConfig | undefined;
  environmentTypeOverride?: EnvironmentType | undefined;
  imageOverride?: string | undefined;
  computeTypeOverride?: ComputeType | undefined;
  certificateOverride?: string | undefined;
  cacheOverride?: ProjectCache | undefined;
  serviceRoleOverride?: string | undefined;
  privilegedModeOverride?: boolean | undefined;
  timeoutInMinutesOverride?: number | undefined;
  queuedTimeoutInMinutesOverride?: number | undefined;
  encryptionKeyOverride?: string | undefined;
  idempotencyToken?: string | undefined;
  logsConfigOverride?: LogsConfig | undefined;
  registryCredentialOverride?: RegistryCredential | undefined;
  imagePullCredentialsTypeOverride?: ImagePullCredentialsType | undefined;
  debugSessionEnabled?: boolean | undefined;
  fleetOverride?: ProjectFleet | undefined;
  autoRetryLimitOverride?: number | undefined;
}
export interface StartBuildOutput {
  build?: Build | undefined;
}
export interface StartBuildBatchInput {
  projectName: string | undefined;
  secondarySourcesOverride?: ProjectSource[] | undefined;
  secondarySourcesVersionOverride?: ProjectSourceVersion[] | undefined;
  sourceVersion?: string | undefined;
  artifactsOverride?: ProjectArtifacts | undefined;
  secondaryArtifactsOverride?: ProjectArtifacts[] | undefined;
  environmentVariablesOverride?: EnvironmentVariable[] | undefined;
  sourceTypeOverride?: SourceType | undefined;
  sourceLocationOverride?: string | undefined;
  sourceAuthOverride?: SourceAuth | undefined;
  gitCloneDepthOverride?: number | undefined;
  gitSubmodulesConfigOverride?: GitSubmodulesConfig | undefined;
  buildspecOverride?: string | undefined;
  insecureSslOverride?: boolean | undefined;
  reportBuildBatchStatusOverride?: boolean | undefined;
  environmentTypeOverride?: EnvironmentType | undefined;
  imageOverride?: string | undefined;
  computeTypeOverride?: ComputeType | undefined;
  certificateOverride?: string | undefined;
  cacheOverride?: ProjectCache | undefined;
  serviceRoleOverride?: string | undefined;
  privilegedModeOverride?: boolean | undefined;
  buildTimeoutInMinutesOverride?: number | undefined;
  queuedTimeoutInMinutesOverride?: number | undefined;
  encryptionKeyOverride?: string | undefined;
  idempotencyToken?: string | undefined;
  logsConfigOverride?: LogsConfig | undefined;
  registryCredentialOverride?: RegistryCredential | undefined;
  imagePullCredentialsTypeOverride?: ImagePullCredentialsType | undefined;
  buildBatchConfigOverride?: ProjectBuildBatchConfig | undefined;
  debugSessionEnabled?: boolean | undefined;
}
export interface StartBuildBatchOutput {
  buildBatch?: BuildBatch | undefined;
}
export interface StartCommandExecutionInput {
  sandboxId: string | undefined;
  command: string | undefined;
  type?: CommandType | undefined;
}
export interface StartCommandExecutionOutput {
  commandExecution?: CommandExecution | undefined;
}
export interface StartSandboxInput {
  projectName?: string | undefined;
  idempotencyToken?: string | undefined;
}
export interface StartSandboxOutput {
  sandbox?: Sandbox | undefined;
}
export interface StartSandboxConnectionInput {
  sandboxId: string | undefined;
}
export interface SSMSession {
  sessionId?: string | undefined;
  tokenValue?: string | undefined;
  streamUrl?: string | undefined;
}
export interface StartSandboxConnectionOutput {
  ssmSession?: SSMSession | undefined;
}
export interface StopBuildInput {
  id: string | undefined;
}
export interface StopBuildOutput {
  build?: Build | undefined;
}
export interface StopBuildBatchInput {
  id: string | undefined;
}
export interface StopBuildBatchOutput {
  buildBatch?: BuildBatch | undefined;
}
export interface StopSandboxInput {
  id: string | undefined;
}
export interface StopSandboxOutput {
  sandbox?: Sandbox | undefined;
}
export interface UpdateFleetInput {
  arn: string | undefined;
  baseCapacity?: number | undefined;
  environmentType?: EnvironmentType | undefined;
  computeType?: ComputeType | undefined;
  computeConfiguration?: ComputeConfiguration | undefined;
  scalingConfiguration?: ScalingConfigurationInput | undefined;
  overflowBehavior?: FleetOverflowBehavior | undefined;
  vpcConfig?: VpcConfig | undefined;
  proxyConfiguration?: ProxyConfiguration | undefined;
  imageId?: string | undefined;
  fleetServiceRole?: string | undefined;
  tags?: Tag[] | undefined;
}
export interface UpdateFleetOutput {
  fleet?: Fleet | undefined;
}
export interface UpdateProjectInput {
  name: string | undefined;
  description?: string | undefined;
  source?: ProjectSource | undefined;
  secondarySources?: ProjectSource[] | undefined;
  sourceVersion?: string | undefined;
  secondarySourceVersions?: ProjectSourceVersion[] | undefined;
  artifacts?: ProjectArtifacts | undefined;
  secondaryArtifacts?: ProjectArtifacts[] | undefined;
  cache?: ProjectCache | undefined;
  environment?: ProjectEnvironment | undefined;
  serviceRole?: string | undefined;
  timeoutInMinutes?: number | undefined;
  queuedTimeoutInMinutes?: number | undefined;
  encryptionKey?: string | undefined;
  tags?: Tag[] | undefined;
  vpcConfig?: VpcConfig | undefined;
  badgeEnabled?: boolean | undefined;
  logsConfig?: LogsConfig | undefined;
  fileSystemLocations?: ProjectFileSystemLocation[] | undefined;
  buildBatchConfig?: ProjectBuildBatchConfig | undefined;
  concurrentBuildLimit?: number | undefined;
  autoRetryLimit?: number | undefined;
}
export interface UpdateProjectOutput {
  project?: Project | undefined;
}
export interface UpdateProjectVisibilityInput {
  projectArn: string | undefined;
  projectVisibility: ProjectVisibilityType | undefined;
  resourceAccessRole?: string | undefined;
}
export interface UpdateProjectVisibilityOutput {
  projectArn?: string | undefined;
  publicProjectAlias?: string | undefined;
  projectVisibility?: ProjectVisibilityType | undefined;
}
export interface UpdateReportGroupInput {
  arn: string | undefined;
  exportConfig?: ReportExportConfig | undefined;
  tags?: Tag[] | undefined;
}
export interface UpdateReportGroupOutput {
  reportGroup?: ReportGroup | undefined;
}
export interface UpdateWebhookInput {
  projectName: string | undefined;
  branchFilter?: string | undefined;
  rotateSecret?: boolean | undefined;
  filterGroups?: WebhookFilter[][] | undefined;
  buildType?: WebhookBuildType | undefined;
  pullRequestBuildPolicy?: PullRequestBuildPolicy | undefined;
}
export interface UpdateWebhookOutput {
  webhook?: Webhook | undefined;
}
export declare const CommandExecutionFilterSensitiveLog: (
  obj: CommandExecution
) => any;
export declare const BatchGetCommandExecutionsOutputFilterSensitiveLog: (
  obj: BatchGetCommandExecutionsOutput
) => any;
export declare const ImportSourceCredentialsInputFilterSensitiveLog: (
  obj: ImportSourceCredentialsInput
) => any;
export declare const ListCommandExecutionsForSandboxInputFilterSensitiveLog: (
  obj: ListCommandExecutionsForSandboxInput
) => any;
export declare const ListCommandExecutionsForSandboxOutputFilterSensitiveLog: (
  obj: ListCommandExecutionsForSandboxOutput
) => any;
export declare const ListFleetsInputFilterSensitiveLog: (
  obj: ListFleetsInput
) => any;
export declare const ListSandboxesForProjectInputFilterSensitiveLog: (
  obj: ListSandboxesForProjectInput
) => any;
export declare const StartCommandExecutionInputFilterSensitiveLog: (
  obj: StartCommandExecutionInput
) => any;
export declare const StartCommandExecutionOutputFilterSensitiveLog: (
  obj: StartCommandExecutionOutput
) => any;
export declare const StartSandboxInputFilterSensitiveLog: (
  obj: StartSandboxInput
) => any;
