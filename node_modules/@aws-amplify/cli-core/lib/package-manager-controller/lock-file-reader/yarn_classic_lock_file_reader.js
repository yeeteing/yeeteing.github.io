import fsp from 'fs/promises';
import path from 'path';
import { printer } from '../../printer.js';
import { LogLevel } from '../../printer/printer.js';
/**
 * YarnClassicLockFileReader is an abstraction around the logic used to read and parse lock file contents
 */
export class YarnClassicLockFileReader {
    getLockFileContentsFromCwd = async () => {
        const eolRegex = '[\r\n]';
        const dependencies = [];
        const yarnLockPath = path.resolve(process.cwd(), 'yarn.lock');
        try {
            const yarnLockContents = await fsp.readFile(yarnLockPath, 'utf-8');
            const yarnLockContentsArray = yarnLockContents
                .trim()
                .split(new RegExp(`${eolRegex}${eolRegex}`));
            // Slice to remove comment block at the start of the lock file
            for (const yarnDependencyBlock of yarnLockContentsArray.slice(1)) {
                const yarnDependencyLines = yarnDependencyBlock
                    .trim()
                    .split(new RegExp(eolRegex));
                const yarnDependencyName = yarnDependencyLines[0];
                const yarnDependencyVersion = yarnDependencyLines[1];
                // Get dependency name before versioning info
                const dependencyName = yarnDependencyName
                    .slice(0, yarnDependencyName.lastIndexOf('@'))
                    .replaceAll(/"/g, '');
                const versionMatch = yarnDependencyVersion.match(/"(.*)"/);
                const dependencyVersion = versionMatch ? versionMatch[1] : '';
                dependencies.push({ name: dependencyName, version: dependencyVersion });
            }
        }
        catch {
            printer.log(`Failed to get lock file contents because ${yarnLockPath} does not exist or is not parse-able`, LogLevel.DEBUG);
            return;
        }
        return { dependencies };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybl9jbGFzc2ljX2xvY2tfZmlsZV9yZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFja2FnZS1tYW5hZ2VyLWNvbnRyb2xsZXIvbG9jay1maWxlLXJlYWRlci95YXJuX2NsYXNzaWNfbG9ja19maWxlX3JlYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUM7QUFDOUIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFcEQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8seUJBQXlCO0lBQ3BDLDBCQUEwQixHQUFHLEtBQUssSUFFaEMsRUFBRTtRQUNGLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUMxQixNQUFNLFlBQVksR0FBc0IsRUFBRSxDQUFDO1FBQzNDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRTlELElBQUksQ0FBQztZQUNILE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNuRSxNQUFNLHFCQUFxQixHQUFHLGdCQUFnQjtpQkFDM0MsSUFBSSxFQUFFO2lCQUNOLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLFFBQVEsR0FBRyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFL0MsOERBQThEO1lBQzlELEtBQUssTUFBTSxtQkFBbUIsSUFBSSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDakUsTUFBTSxtQkFBbUIsR0FBRyxtQkFBbUI7cUJBQzVDLElBQUksRUFBRTtxQkFDTixLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDL0IsTUFBTSxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEQsTUFBTSxxQkFBcUIsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFckQsNkNBQTZDO2dCQUM3QyxNQUFNLGNBQWMsR0FBRyxrQkFBa0I7cUJBQ3RDLEtBQUssQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUM3QyxVQUFVLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUN4QixNQUFNLFlBQVksR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzNELE1BQU0saUJBQWlCLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFFOUQsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQztZQUMxRSxDQUFDO1FBQ0gsQ0FBQztRQUFDLE1BQU0sQ0FBQztZQUNQLE9BQU8sQ0FBQyxHQUFHLENBQ1QsNENBQTRDLFlBQVksc0NBQXNDLEVBQzlGLFFBQVEsQ0FBQyxLQUFLLENBQ2YsQ0FBQztZQUNGLE9BQU87UUFDVCxDQUFDO1FBRUQsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVwZW5kZW5jeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IGZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IExvY2tGaWxlQ29udGVudHMsIExvY2tGaWxlUmVhZGVyIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBwcmludGVyIH0gZnJvbSAnLi4vLi4vcHJpbnRlci5qcyc7XG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJy4uLy4uL3ByaW50ZXIvcHJpbnRlci5qcyc7XG5cbi8qKlxuICogWWFybkNsYXNzaWNMb2NrRmlsZVJlYWRlciBpcyBhbiBhYnN0cmFjdGlvbiBhcm91bmQgdGhlIGxvZ2ljIHVzZWQgdG8gcmVhZCBhbmQgcGFyc2UgbG9jayBmaWxlIGNvbnRlbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBZYXJuQ2xhc3NpY0xvY2tGaWxlUmVhZGVyIGltcGxlbWVudHMgTG9ja0ZpbGVSZWFkZXIge1xuICBnZXRMb2NrRmlsZUNvbnRlbnRzRnJvbUN3ZCA9IGFzeW5jICgpOiBQcm9taXNlPFxuICAgIExvY2tGaWxlQ29udGVudHMgfCB1bmRlZmluZWRcbiAgPiA9PiB7XG4gICAgY29uc3QgZW9sUmVnZXggPSAnW1xcclxcbl0nO1xuICAgIGNvbnN0IGRlcGVuZGVuY2llczogQXJyYXk8RGVwZW5kZW5jeT4gPSBbXTtcbiAgICBjb25zdCB5YXJuTG9ja1BhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgJ3lhcm4ubG9jaycpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHlhcm5Mb2NrQ29udGVudHMgPSBhd2FpdCBmc3AucmVhZEZpbGUoeWFybkxvY2tQYXRoLCAndXRmLTgnKTtcbiAgICAgIGNvbnN0IHlhcm5Mb2NrQ29udGVudHNBcnJheSA9IHlhcm5Mb2NrQ29udGVudHNcbiAgICAgICAgLnRyaW0oKVxuICAgICAgICAuc3BsaXQobmV3IFJlZ0V4cChgJHtlb2xSZWdleH0ke2VvbFJlZ2V4fWApKTtcblxuICAgICAgLy8gU2xpY2UgdG8gcmVtb3ZlIGNvbW1lbnQgYmxvY2sgYXQgdGhlIHN0YXJ0IG9mIHRoZSBsb2NrIGZpbGVcbiAgICAgIGZvciAoY29uc3QgeWFybkRlcGVuZGVuY3lCbG9jayBvZiB5YXJuTG9ja0NvbnRlbnRzQXJyYXkuc2xpY2UoMSkpIHtcbiAgICAgICAgY29uc3QgeWFybkRlcGVuZGVuY3lMaW5lcyA9IHlhcm5EZXBlbmRlbmN5QmxvY2tcbiAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgLnNwbGl0KG5ldyBSZWdFeHAoZW9sUmVnZXgpKTtcbiAgICAgICAgY29uc3QgeWFybkRlcGVuZGVuY3lOYW1lID0geWFybkRlcGVuZGVuY3lMaW5lc1swXTtcbiAgICAgICAgY29uc3QgeWFybkRlcGVuZGVuY3lWZXJzaW9uID0geWFybkRlcGVuZGVuY3lMaW5lc1sxXTtcblxuICAgICAgICAvLyBHZXQgZGVwZW5kZW5jeSBuYW1lIGJlZm9yZSB2ZXJzaW9uaW5nIGluZm9cbiAgICAgICAgY29uc3QgZGVwZW5kZW5jeU5hbWUgPSB5YXJuRGVwZW5kZW5jeU5hbWVcbiAgICAgICAgICAuc2xpY2UoMCwgeWFybkRlcGVuZGVuY3lOYW1lLmxhc3RJbmRleE9mKCdAJykpXG4gICAgICAgICAgLnJlcGxhY2VBbGwoL1wiL2csICcnKTtcbiAgICAgICAgY29uc3QgdmVyc2lvbk1hdGNoID0geWFybkRlcGVuZGVuY3lWZXJzaW9uLm1hdGNoKC9cIiguKilcIi8pO1xuICAgICAgICBjb25zdCBkZXBlbmRlbmN5VmVyc2lvbiA9IHZlcnNpb25NYXRjaCA/IHZlcnNpb25NYXRjaFsxXSA6ICcnO1xuXG4gICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKHsgbmFtZTogZGVwZW5kZW5jeU5hbWUsIHZlcnNpb246IGRlcGVuZGVuY3lWZXJzaW9uIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgcHJpbnRlci5sb2coXG4gICAgICAgIGBGYWlsZWQgdG8gZ2V0IGxvY2sgZmlsZSBjb250ZW50cyBiZWNhdXNlICR7eWFybkxvY2tQYXRofSBkb2VzIG5vdCBleGlzdCBvciBpcyBub3QgcGFyc2UtYWJsZWAsXG4gICAgICAgIExvZ0xldmVsLkRFQlVHLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4geyBkZXBlbmRlbmNpZXMgfTtcbiAgfTtcbn1cbiJdfQ==