"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributionMetadataStorage = void 0;
const _os = __importStar(require("os"));
const platform_core_1 = require("@aws-amplify/platform-core");
/**
 * Stores BI metrics information in stack descriptions
 */
class AttributionMetadataStorage {
    os;
    packageJsonReader;
    /**
     * Constructor with props for injecting test mocks
     */
    constructor(os = _os, packageJsonReader = new platform_core_1.PackageJsonReader()) {
        this.os = os;
        this.packageJsonReader = packageJsonReader;
    }
    /**
     * Stores an attribution metadata string in the stack description of the provided stack
     * Does nothing if the stack already has a non-empty description
     */
    storeAttributionMetadata = (stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata = {}) => {
        if (typeof stack.templateOptions.description === 'string' &&
            stack.templateOptions.description.length > 0) {
            // don't overwrite an existing description
            return;
        }
        stack.templateOptions.description = JSON.stringify(this.getAttributionMetadata(stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata));
    };
    getAttributionMetadata = (stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata) => ({
        createdOn: this.getPlatform(),
        createdBy: this.getDeploymentEngineType(stack),
        createdWith: this.packageJsonReader.read(libraryPackageJsonAbsolutePath).version ?? '',
        stackType: stackType,
        metadata: additionalMetadata,
    });
    getDeploymentEngineType = (stack) => {
        const deploymentType = stack.node.tryGetContext(platform_core_1.CDKContextKey.DEPLOYMENT_TYPE);
        if (deploymentType === undefined) {
            // if no deployment type context value is set, assume the construct is being used in a native CDK project
            return 'AmplifyCDK';
        }
        switch (deploymentType) {
            case 'branch':
                return 'AmplifyPipelineDeploy';
            case 'sandbox':
                return 'AmplifySandbox';
            default:
                throw new Error(`Unknown ${platform_core_1.CDKContextKey.DEPLOYMENT_TYPE} CDK context value "${deploymentType}"`);
        }
    };
    getPlatform = () => {
        switch (this.os.platform()) {
            case 'darwin':
                return 'Mac';
            case 'win32':
                return 'Windows';
            case 'linux':
                return 'Linux';
            default:
                return 'Other';
        }
    };
}
exports.AttributionMetadataStorage = AttributionMetadataStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmVfYXR0cmlidXRpb25fbWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RvcmVfYXR0cmlidXRpb25fbWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSx3Q0FBMEI7QUFDMUIsOERBQThFO0FBRzlFOztHQUVHO0FBQ0gsTUFBYSwwQkFBMEI7SUFLbEI7SUFDQTtJQUxuQjs7T0FFRztJQUNILFlBQ21CLEtBQWlCLEdBQUcsRUFDcEIsb0JBQW9CLElBQUksaUNBQWlCLEVBQUU7UUFEM0MsT0FBRSxHQUFGLEVBQUUsQ0FBa0I7UUFDcEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtJQUMzRCxDQUFDO0lBRUo7OztPQUdHO0lBQ0gsd0JBQXdCLEdBQUcsQ0FDekIsS0FBWSxFQUNaLFNBQWlCLEVBQ2pCLDhCQUFzQyxFQUN0QyxxQkFBNkMsRUFBRSxFQUN6QyxFQUFFO1FBQ1IsSUFDRSxPQUFPLEtBQUssQ0FBQyxlQUFlLENBQUMsV0FBVyxLQUFLLFFBQVE7WUFDckQsS0FBSyxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFDNUM7WUFDQSwwQ0FBMEM7WUFDMUMsT0FBTztTQUNSO1FBQ0QsS0FBSyxDQUFDLGVBQWUsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FDaEQsSUFBSSxDQUFDLHNCQUFzQixDQUN6QixLQUFLLEVBQ0wsU0FBUyxFQUNULDhCQUE4QixFQUM5QixrQkFBa0IsQ0FDbkIsQ0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRU0sc0JBQXNCLEdBQUcsQ0FDL0IsS0FBWSxFQUNaLFNBQWlCLEVBQ2pCLDhCQUFzQyxFQUN0QyxrQkFBMEMsRUFDckIsRUFBRSxDQUFDLENBQUM7UUFDekIsU0FBUyxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDN0IsU0FBUyxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUM7UUFDOUMsV0FBVyxFQUNULElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsQ0FBQyxPQUFPLElBQUksRUFBRTtRQUMzRSxTQUFTLEVBQUUsU0FBUztRQUNwQixRQUFRLEVBQUUsa0JBQWtCO0tBQzdCLENBQUMsQ0FBQztJQUVLLHVCQUF1QixHQUFHLENBQUMsS0FBWSxFQUF3QixFQUFFO1FBQ3ZFLE1BQU0sY0FBYyxHQUErQixLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FDekUsNkJBQWEsQ0FBQyxlQUFlLENBQzlCLENBQUM7UUFFRixJQUFJLGNBQWMsS0FBSyxTQUFTLEVBQUU7WUFDaEMseUdBQXlHO1lBQ3pHLE9BQU8sWUFBWSxDQUFDO1NBQ3JCO1FBRUQsUUFBUSxjQUFjLEVBQUU7WUFDdEIsS0FBSyxRQUFRO2dCQUNYLE9BQU8sdUJBQXVCLENBQUM7WUFDakMsS0FBSyxTQUFTO2dCQUNaLE9BQU8sZ0JBQWdCLENBQUM7WUFDMUI7Z0JBQ0UsTUFBTSxJQUFJLEtBQUssQ0FDYixXQUFXLDZCQUFhLENBQUMsZUFBZSx1QkFDdEMsY0FDRixHQUFHLENBQ0osQ0FBQztTQUNMO0lBQ0gsQ0FBQyxDQUFDO0lBRU0sV0FBVyxHQUFHLEdBQWEsRUFBRTtRQUNuQyxRQUFRLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDMUIsS0FBSyxRQUFRO2dCQUNYLE9BQU8sS0FBSyxDQUFDO1lBQ2YsS0FBSyxPQUFPO2dCQUNWLE9BQU8sU0FBUyxDQUFDO1lBQ25CLEtBQUssT0FBTztnQkFDVixPQUFPLE9BQU8sQ0FBQztZQUNqQjtnQkFDRSxPQUFPLE9BQU8sQ0FBQztTQUNsQjtJQUNILENBQUMsQ0FBQztDQUNIO0FBdEZELGdFQXNGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0ICogYXMgX29zIGZyb20gJ29zJztcbmltcG9ydCB7IENES0NvbnRleHRLZXksIFBhY2thZ2VKc29uUmVhZGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgRGVwbG95bWVudFR5cGUgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcblxuLyoqXG4gKiBTdG9yZXMgQkkgbWV0cmljcyBpbmZvcm1hdGlvbiBpbiBzdGFjayBkZXNjcmlwdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIEF0dHJpYnV0aW9uTWV0YWRhdGFTdG9yYWdlIHtcbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yIHdpdGggcHJvcHMgZm9yIGluamVjdGluZyB0ZXN0IG1vY2tzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9zOiB0eXBlb2YgX29zID0gX29zLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFja2FnZUpzb25SZWFkZXIgPSBuZXcgUGFja2FnZUpzb25SZWFkZXIoKSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBTdG9yZXMgYW4gYXR0cmlidXRpb24gbWV0YWRhdGEgc3RyaW5nIGluIHRoZSBzdGFjayBkZXNjcmlwdGlvbiBvZiB0aGUgcHJvdmlkZWQgc3RhY2tcbiAgICogRG9lcyBub3RoaW5nIGlmIHRoZSBzdGFjayBhbHJlYWR5IGhhcyBhIG5vbi1lbXB0eSBkZXNjcmlwdGlvblxuICAgKi9cbiAgc3RvcmVBdHRyaWJ1dGlvbk1ldGFkYXRhID0gKFxuICAgIHN0YWNrOiBTdGFjayxcbiAgICBzdGFja1R5cGU6IHN0cmluZyxcbiAgICBsaWJyYXJ5UGFja2FnZUpzb25BYnNvbHV0ZVBhdGg6IHN0cmluZyxcbiAgICBhZGRpdGlvbmFsTWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fSxcbiAgKTogdm9pZCA9PiB7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHN0YWNrLnRlbXBsYXRlT3B0aW9ucy5kZXNjcmlwdGlvbiA9PT0gJ3N0cmluZycgJiZcbiAgICAgIHN0YWNrLnRlbXBsYXRlT3B0aW9ucy5kZXNjcmlwdGlvbi5sZW5ndGggPiAwXG4gICAgKSB7XG4gICAgICAvLyBkb24ndCBvdmVyd3JpdGUgYW4gZXhpc3RpbmcgZGVzY3JpcHRpb25cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3RhY2sudGVtcGxhdGVPcHRpb25zLmRlc2NyaXB0aW9uID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgICB0aGlzLmdldEF0dHJpYnV0aW9uTWV0YWRhdGEoXG4gICAgICAgIHN0YWNrLFxuICAgICAgICBzdGFja1R5cGUsXG4gICAgICAgIGxpYnJhcnlQYWNrYWdlSnNvbkFic29sdXRlUGF0aCxcbiAgICAgICAgYWRkaXRpb25hbE1ldGFkYXRhLFxuICAgICAgKSxcbiAgICApO1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0QXR0cmlidXRpb25NZXRhZGF0YSA9IChcbiAgICBzdGFjazogU3RhY2ssXG4gICAgc3RhY2tUeXBlOiBzdHJpbmcsXG4gICAgbGlicmFyeVBhY2thZ2VKc29uQWJzb2x1dGVQYXRoOiBzdHJpbmcsXG4gICAgYWRkaXRpb25hbE1ldGFkYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxuICApOiBBdHRyaWJ1dGlvbk1ldGFkYXRhID0+ICh7XG4gICAgY3JlYXRlZE9uOiB0aGlzLmdldFBsYXRmb3JtKCksXG4gICAgY3JlYXRlZEJ5OiB0aGlzLmdldERlcGxveW1lbnRFbmdpbmVUeXBlKHN0YWNrKSxcbiAgICBjcmVhdGVkV2l0aDpcbiAgICAgIHRoaXMucGFja2FnZUpzb25SZWFkZXIucmVhZChsaWJyYXJ5UGFja2FnZUpzb25BYnNvbHV0ZVBhdGgpLnZlcnNpb24gPz8gJycsIC8vIFRoaXMgc2hvdWxkbid0IGhhcHBlbiwgcmVnYXJkbGVzcyB3ZSBzaG91bGRuJ3QgdGhyb3cgZm9yIGF0dHJpYnV0aW9uXG4gICAgc3RhY2tUeXBlOiBzdGFja1R5cGUsXG4gICAgbWV0YWRhdGE6IGFkZGl0aW9uYWxNZXRhZGF0YSxcbiAgfSk7XG5cbiAgcHJpdmF0ZSBnZXREZXBsb3ltZW50RW5naW5lVHlwZSA9IChzdGFjazogU3RhY2spOiBEZXBsb3ltZW50RW5naW5lVHlwZSA9PiB7XG4gICAgY29uc3QgZGVwbG95bWVudFR5cGU6IERlcGxveW1lbnRUeXBlIHwgdW5kZWZpbmVkID0gc3RhY2subm9kZS50cnlHZXRDb250ZXh0KFxuICAgICAgQ0RLQ29udGV4dEtleS5ERVBMT1lNRU5UX1RZUEUsXG4gICAgKTtcblxuICAgIGlmIChkZXBsb3ltZW50VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBpZiBubyBkZXBsb3ltZW50IHR5cGUgY29udGV4dCB2YWx1ZSBpcyBzZXQsIGFzc3VtZSB0aGUgY29uc3RydWN0IGlzIGJlaW5nIHVzZWQgaW4gYSBuYXRpdmUgQ0RLIHByb2plY3RcbiAgICAgIHJldHVybiAnQW1wbGlmeUNESyc7XG4gICAgfVxuXG4gICAgc3dpdGNoIChkZXBsb3ltZW50VHlwZSkge1xuICAgICAgY2FzZSAnYnJhbmNoJzpcbiAgICAgICAgcmV0dXJuICdBbXBsaWZ5UGlwZWxpbmVEZXBsb3knO1xuICAgICAgY2FzZSAnc2FuZGJveCc6XG4gICAgICAgIHJldHVybiAnQW1wbGlmeVNhbmRib3gnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBVbmtub3duICR7Q0RLQ29udGV4dEtleS5ERVBMT1lNRU5UX1RZUEV9IENESyBjb250ZXh0IHZhbHVlIFwiJHtcbiAgICAgICAgICAgIGRlcGxveW1lbnRUeXBlIGFzIHN0cmluZ1xuICAgICAgICAgIH1cImAsXG4gICAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHByaXZhdGUgZ2V0UGxhdGZvcm0gPSAoKTogUGxhdGZvcm0gPT4ge1xuICAgIHN3aXRjaCAodGhpcy5vcy5wbGF0Zm9ybSgpKSB7XG4gICAgICBjYXNlICdkYXJ3aW4nOlxuICAgICAgICByZXR1cm4gJ01hYyc7XG4gICAgICBjYXNlICd3aW4zMic6XG4gICAgICAgIHJldHVybiAnV2luZG93cyc7XG4gICAgICBjYXNlICdsaW51eCc6XG4gICAgICAgIHJldHVybiAnTGludXgnO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuICdPdGhlcic7XG4gICAgfVxuICB9O1xufVxuXG5leHBvcnQgdHlwZSBBdHRyaWJ1dGlvbk1ldGFkYXRhID0ge1xuICAvKipcbiAgICogVGhlIE9TIHRoYXQgc3ludGhlc2l6ZWQgdGhpcyBzdGFja1xuICAgKi9cbiAgY3JlYXRlZE9uOiBQbGF0Zm9ybTtcbiAgLyoqXG4gICAqIFRoZSBzeW50aGVzaXMgZW5naW5lIHRoYXQgZ2VuZXJhdGVkIHRoaXMgc3RhY2tcbiAgICovXG4gIGNyZWF0ZWRCeTogRGVwbG95bWVudEVuZ2luZVR5cGU7XG4gIC8qKlxuICAgKiBUaGUgbGlicmFyeSB2ZXJzaW9uIHRoYXQgY3JlYXRlZCB0aGlzIG1ldGFkYXRhXG4gICAqL1xuICBjcmVhdGVkV2l0aDogc3RyaW5nO1xuICAvKipcbiAgICogU3RyaW5nIHRoYXQgaWRlbnRpZmllcyB3aGF0IHR5cGUgb2Ygc3RhY2sgdGhpcyBtZXRhZGF0YSBpcyBzZXQgb25cbiAgICovXG4gIHN0YWNrVHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBGaWVsZCB3aGVyZSBjb25zdHJ1Y3RzIGNhbiBwdXQgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgQkkgdHJhY2tpbmdcbiAgICovXG4gIG1ldGFkYXRhOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+O1xufTtcblxuZXhwb3J0IHR5cGUgRGVwbG95bWVudEVuZ2luZVR5cGUgPVxuICB8ICdBbXBsaWZ5UGlwZWxpbmVEZXBsb3knXG4gIHwgJ0FtcGxpZnlTYW5kYm94J1xuICB8ICdBbXBsaWZ5Q0RLJztcblxuZXhwb3J0IHR5cGUgUGxhdGZvcm0gPSAnTWFjJyB8ICdXaW5kb3dzJyB8ICdMaW51eCcgfCAnT3RoZXInO1xuIl19