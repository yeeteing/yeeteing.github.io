import { AmplifyPrompter, printer } from '@aws-amplify/cli-core';
import { once } from 'events';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * Command to set sandbox secret.
 */
export class SandboxSecretSetCommand {
    sandboxIdResolver;
    secretClient;
    readStream;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Set sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient, readStream = process.stdin) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.readStream = readStream;
        this.command = 'set <secret-name>';
        this.describe = 'Set a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const secretValue = await this.readSecretValue();
        const secretIdentifier = await this.secretClient.setSecret(await this.sandboxIdResolver.resolve(args.identifier), args.secretName, secretValue);
        printer.print(`Successfully created version ${secretIdentifier.version} of secret ${secretIdentifier.name}`);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .positional('secret-name', {
            describe: 'Name of the secret to set',
            type: 'string',
            demandOption: true,
        })
            .check(async (argv) => {
            if (argv['secret-name']) {
                const secretNameRegex = /^[a-zA-Z0-9_.-]+$/;
                if (!argv['secret-name'].match(secretNameRegex)) {
                    throw new AmplifyUserError('InvalidCommandInputError', {
                        message: `Invalid secret name provided: ${argv['secret-name']}`,
                        resolution: 'Use a secret name that matches [a-zA-Z0-9_.-]+',
                    });
                }
            }
            return true;
        });
    };
    /**
     * Prompt (or) read secret value from stdin based on terminal interactive mode
     */
    readSecretValue = async () => {
        let secretValue = '';
        if (this.readStream.isTTY) {
            // This input is for interactive mode.
            secretValue = await AmplifyPrompter.secretValue();
        }
        else {
            // This allows to accept secret value from redirected input `|` and `>`.
            this.readStream.on('readable', () => {
                const chunk = this.readStream.read();
                if (chunk !== null) {
                    secretValue += chunk;
                }
            });
            // Wait for the end of the input.
            await once(this.readStream, 'end');
        }
        return secretValue;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfc2V0X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9zZXRfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBR2pFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFOUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBaUJmO0lBQ0E7SUFDQTtJQWhCbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsWUFBMEIsRUFDMUIsYUFBeUIsT0FBTyxDQUFDLEtBQUs7UUFGdEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUMxQixlQUFVLEdBQVYsVUFBVSxDQUE0QjtRQUV2RCxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsc0JBQXNCLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFDYixJQUEwRCxFQUMzQyxFQUFFO1FBQ2pCLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRWpELE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FDeEQsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFDckQsSUFBSSxDQUFDLFVBQVUsRUFDZixXQUFXLENBQ1osQ0FBQztRQUNGLE9BQU8sQ0FBQyxLQUFLLENBQ1gsZ0NBQWdDLGdCQUFnQixDQUFDLE9BQU8sY0FBYyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FDOUYsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUEwQyxFQUFFO1FBQ2hFLE9BQU8sS0FBSzthQUNULFVBQVUsQ0FBQyxhQUFhLEVBQUU7WUFDekIsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyxJQUFJLEVBQUUsUUFBUTtZQUNkLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUM7YUFDRCxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1lBQ3BCLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7Z0JBQ3hCLE1BQU0sZUFBZSxHQUFHLG1CQUFtQixDQUFDO2dCQUM1QyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDO29CQUNoRCxNQUFNLElBQUksZ0JBQWdCLENBQUMsMEJBQTBCLEVBQUU7d0JBQ3JELE9BQU8sRUFBRSxpQ0FBaUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO3dCQUMvRCxVQUFVLEVBQUUsZ0RBQWdEO3FCQUM3RCxDQUFDLENBQUM7Z0JBQ0wsQ0FBQztZQUNILENBQUM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSyxlQUFlLEdBQUcsS0FBSyxJQUFxQixFQUFFO1FBQ3BELElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDMUIsc0NBQXNDO1lBQ3RDLFdBQVcsR0FBRyxNQUFNLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwRCxDQUFDO2FBQU0sQ0FBQztZQUNOLHdFQUF3RTtZQUN4RSxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO2dCQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNyQyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUUsQ0FBQztvQkFDbkIsV0FBVyxJQUFJLEtBQUssQ0FBQztnQkFDdkIsQ0FBQztZQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0gsaUNBQWlDO1lBQ2pDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDckMsQ0FBQztRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgU2VjcmV0Q2xpZW50IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4uL3NhbmRib3hfaWRfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQW1wbGlmeVByb21wdGVyLCBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgU2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zIH0gZnJvbSAnLi4vb3B0aW9uX3R5cGVzLmpzJztcbmltcG9ydCB7IG9uY2UgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgUmVhZFN0cmVhbSB9IGZyb20gJ25vZGU6dHR5JztcbmltcG9ydCB7IEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5cbi8qKlxuICogQ29tbWFuZCB0byBzZXQgc2FuZGJveCBzZWNyZXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94U2VjcmV0U2V0Q29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBTZWNyZXRTZXRDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZT5cbntcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXQgc2FuZGJveCBzZWNyZXQgY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuZGJveElkUmVzb2x2ZXI6IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY3JldENsaWVudDogU2VjcmV0Q2xpZW50LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVhZFN0cmVhbTogUmVhZFN0cmVhbSA9IHByb2Nlc3Muc3RkaW4sXG4gICkge1xuICAgIHRoaXMuY29tbWFuZCA9ICdzZXQgPHNlY3JldC1uYW1lPic7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdTZXQgYSBzYW5kYm94IHNlY3JldCc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPFNlY3JldFNldENvbW1hbmRPcHRpb25zS2ViYWJDYXNlPixcbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgY29uc3Qgc2VjcmV0VmFsdWUgPSBhd2FpdCB0aGlzLnJlYWRTZWNyZXRWYWx1ZSgpO1xuXG4gICAgY29uc3Qgc2VjcmV0SWRlbnRpZmllciA9IGF3YWl0IHRoaXMuc2VjcmV0Q2xpZW50LnNldFNlY3JldChcbiAgICAgIGF3YWl0IHRoaXMuc2FuZGJveElkUmVzb2x2ZXIucmVzb2x2ZShhcmdzLmlkZW50aWZpZXIpLFxuICAgICAgYXJncy5zZWNyZXROYW1lLFxuICAgICAgc2VjcmV0VmFsdWUsXG4gICAgKTtcbiAgICBwcmludGVyLnByaW50KFxuICAgICAgYFN1Y2Nlc3NmdWxseSBjcmVhdGVkIHZlcnNpb24gJHtzZWNyZXRJZGVudGlmaWVyLnZlcnNpb259IG9mIHNlY3JldCAke3NlY3JldElkZW50aWZpZXIubmFtZX1gLFxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxTZWNyZXRTZXRDb21tYW5kT3B0aW9uc0tlYmFiQ2FzZT4gPT4ge1xuICAgIHJldHVybiB5YXJnc1xuICAgICAgLnBvc2l0aW9uYWwoJ3NlY3JldC1uYW1lJywge1xuICAgICAgICBkZXNjcmliZTogJ05hbWUgb2YgdGhlIHNlY3JldCB0byBzZXQnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgZGVtYW5kT3B0aW9uOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIC5jaGVjayhhc3luYyAoYXJndikgPT4ge1xuICAgICAgICBpZiAoYXJndlsnc2VjcmV0LW5hbWUnXSkge1xuICAgICAgICAgIGNvbnN0IHNlY3JldE5hbWVSZWdleCA9IC9eW2EtekEtWjAtOV8uLV0rJC87XG4gICAgICAgICAgaWYgKCFhcmd2WydzZWNyZXQtbmFtZSddLm1hdGNoKHNlY3JldE5hbWVSZWdleCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKCdJbnZhbGlkQ29tbWFuZElucHV0RXJyb3InLCB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGBJbnZhbGlkIHNlY3JldCBuYW1lIHByb3ZpZGVkOiAke2FyZ3ZbJ3NlY3JldC1uYW1lJ119YCxcbiAgICAgICAgICAgICAgcmVzb2x1dGlvbjogJ1VzZSBhIHNlY3JldCBuYW1lIHRoYXQgbWF0Y2hlcyBbYS16QS1aMC05Xy4tXSsnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFByb21wdCAob3IpIHJlYWQgc2VjcmV0IHZhbHVlIGZyb20gc3RkaW4gYmFzZWQgb24gdGVybWluYWwgaW50ZXJhY3RpdmUgbW9kZVxuICAgKi9cbiAgcHJpdmF0ZSByZWFkU2VjcmV0VmFsdWUgPSBhc3luYyAoKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICBsZXQgc2VjcmV0VmFsdWUgPSAnJztcbiAgICBpZiAodGhpcy5yZWFkU3RyZWFtLmlzVFRZKSB7XG4gICAgICAvLyBUaGlzIGlucHV0IGlzIGZvciBpbnRlcmFjdGl2ZSBtb2RlLlxuICAgICAgc2VjcmV0VmFsdWUgPSBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIuc2VjcmV0VmFsdWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBhbGxvd3MgdG8gYWNjZXB0IHNlY3JldCB2YWx1ZSBmcm9tIHJlZGlyZWN0ZWQgaW5wdXQgYHxgIGFuZCBgPmAuXG4gICAgICB0aGlzLnJlYWRTdHJlYW0ub24oJ3JlYWRhYmxlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBjaHVuayA9IHRoaXMucmVhZFN0cmVhbS5yZWFkKCk7XG4gICAgICAgIGlmIChjaHVuayAhPT0gbnVsbCkge1xuICAgICAgICAgIHNlY3JldFZhbHVlICs9IGNodW5rO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIFdhaXQgZm9yIHRoZSBlbmQgb2YgdGhlIGlucHV0LlxuICAgICAgYXdhaXQgb25jZSh0aGlzLnJlYWRTdHJlYW0sICdlbmQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlY3JldFZhbHVlO1xuICB9O1xufVxuXG50eXBlIFNlY3JldFNldENvbW1hbmRPcHRpb25zS2ViYWJDYXNlID0gQXJndW1lbnRzS2ViYWJDYXNlPFxuICB7XG4gICAgc2VjcmV0TmFtZTogc3RyaW5nO1xuICB9ICYgU2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zXG4+O1xuIl19