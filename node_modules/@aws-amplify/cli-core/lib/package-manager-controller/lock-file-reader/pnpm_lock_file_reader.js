import fsp from 'fs/promises';
import path from 'path';
import { printer } from '../../printer.js';
import { LogLevel } from '../../printer/printer.js';
/**
 * PnpmLockFileReader is an abstraction around the logic used to read and parse lock file contents
 */
export class PnpmLockFileReader {
    getLockFileContentsFromCwd = async () => {
        const eolRegex = '[\r\n]';
        const dependencies = [];
        const pnpmLockPath = path.resolve(process.cwd(), 'pnpm-lock.yaml');
        try {
            const pnpmLockContents = await fsp.readFile(pnpmLockPath, 'utf-8');
            const pnpmLockContentsArray = pnpmLockContents.split(new RegExp(`${eolRegex}${eolRegex}`));
            const startOfPackagesIndex = pnpmLockContentsArray.indexOf('packages:');
            if (startOfPackagesIndex === -1) {
                return { dependencies };
            }
            const pnpmLockPackages = pnpmLockContentsArray.slice(startOfPackagesIndex + 1);
            for (const pnpmDependencyBlock of pnpmLockPackages) {
                // Get line that contains dependency name and version and remove quotes and colon
                const pnpmDependencyLine = pnpmDependencyBlock
                    .trim()
                    .split(new RegExp(eolRegex))[0]
                    .replaceAll(/[':]/g, '');
                const dependencyName = pnpmDependencyLine.slice(0, pnpmDependencyLine.lastIndexOf('@'));
                const dependencyVersion = pnpmDependencyLine.slice(pnpmDependencyLine.lastIndexOf('@') + 1);
                dependencies.push({ name: dependencyName, version: dependencyVersion });
            }
        }
        catch {
            printer.log(`Failed to get lock file contents because ${pnpmLockPath} does not exist or is not parse-able`, LogLevel.DEBUG);
            return;
        }
        return { dependencies };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG5wbV9sb2NrX2ZpbGVfcmVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhY2thZ2UtbWFuYWdlci1jb250cm9sbGVyL2xvY2stZmlsZS1yZWFkZXIvcG5wbV9sb2NrX2ZpbGVfcmVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sR0FBRyxNQUFNLGFBQWEsQ0FBQztBQUM5QixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFFeEIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVwRDs7R0FFRztBQUNILE1BQU0sT0FBTyxrQkFBa0I7SUFDN0IsMEJBQTBCLEdBQUcsS0FBSyxJQUVoQyxFQUFFO1FBQ0YsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQzFCLE1BQU0sWUFBWSxHQUFzQixFQUFFLENBQUM7UUFDM0MsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUVuRSxJQUFJLENBQUM7WUFDSCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDbkUsTUFBTSxxQkFBcUIsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQ2xELElBQUksTUFBTSxDQUFDLEdBQUcsUUFBUSxHQUFHLFFBQVEsRUFBRSxDQUFDLENBQ3JDLENBQUM7WUFFRixNQUFNLG9CQUFvQixHQUFHLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN4RSxJQUFJLG9CQUFvQixLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ2hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsQ0FBQztZQUMxQixDQUFDO1lBQ0QsTUFBTSxnQkFBZ0IsR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQ2xELG9CQUFvQixHQUFHLENBQUMsQ0FDekIsQ0FBQztZQUVGLEtBQUssTUFBTSxtQkFBbUIsSUFBSSxnQkFBZ0IsRUFBRSxDQUFDO2dCQUNuRCxpRkFBaUY7Z0JBQ2pGLE1BQU0sa0JBQWtCLEdBQUcsbUJBQW1CO3FCQUMzQyxJQUFJLEVBQUU7cUJBQ04sS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUM5QixVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMzQixNQUFNLGNBQWMsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQzdDLENBQUMsRUFDRCxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQ3BDLENBQUM7Z0JBQ0YsTUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQ2hELGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQ3hDLENBQUM7Z0JBRUYsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQztZQUMxRSxDQUFDO1FBQ0gsQ0FBQztRQUFDLE1BQU0sQ0FBQztZQUNQLE9BQU8sQ0FBQyxHQUFHLENBQ1QsNENBQTRDLFlBQVksc0NBQXNDLEVBQzlGLFFBQVEsQ0FBQyxLQUFLLENBQ2YsQ0FBQztZQUNGLE9BQU87UUFDVCxDQUFDO1FBRUQsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDO0lBQzFCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVwZW5kZW5jeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IGZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IExvY2tGaWxlQ29udGVudHMsIExvY2tGaWxlUmVhZGVyIH0gZnJvbSAnLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBwcmludGVyIH0gZnJvbSAnLi4vLi4vcHJpbnRlci5qcyc7XG5pbXBvcnQgeyBMb2dMZXZlbCB9IGZyb20gJy4uLy4uL3ByaW50ZXIvcHJpbnRlci5qcyc7XG5cbi8qKlxuICogUG5wbUxvY2tGaWxlUmVhZGVyIGlzIGFuIGFic3RyYWN0aW9uIGFyb3VuZCB0aGUgbG9naWMgdXNlZCB0byByZWFkIGFuZCBwYXJzZSBsb2NrIGZpbGUgY29udGVudHNcbiAqL1xuZXhwb3J0IGNsYXNzIFBucG1Mb2NrRmlsZVJlYWRlciBpbXBsZW1lbnRzIExvY2tGaWxlUmVhZGVyIHtcbiAgZ2V0TG9ja0ZpbGVDb250ZW50c0Zyb21Dd2QgPSBhc3luYyAoKTogUHJvbWlzZTxcbiAgICBMb2NrRmlsZUNvbnRlbnRzIHwgdW5kZWZpbmVkXG4gID4gPT4ge1xuICAgIGNvbnN0IGVvbFJlZ2V4ID0gJ1tcXHJcXG5dJztcbiAgICBjb25zdCBkZXBlbmRlbmNpZXM6IEFycmF5PERlcGVuZGVuY3k+ID0gW107XG4gICAgY29uc3QgcG5wbUxvY2tQYXRoID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuY3dkKCksICdwbnBtLWxvY2sueWFtbCcpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBucG1Mb2NrQ29udGVudHMgPSBhd2FpdCBmc3AucmVhZEZpbGUocG5wbUxvY2tQYXRoLCAndXRmLTgnKTtcbiAgICAgIGNvbnN0IHBucG1Mb2NrQ29udGVudHNBcnJheSA9IHBucG1Mb2NrQ29udGVudHMuc3BsaXQoXG4gICAgICAgIG5ldyBSZWdFeHAoYCR7ZW9sUmVnZXh9JHtlb2xSZWdleH1gKSxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IHN0YXJ0T2ZQYWNrYWdlc0luZGV4ID0gcG5wbUxvY2tDb250ZW50c0FycmF5LmluZGV4T2YoJ3BhY2thZ2VzOicpO1xuICAgICAgaWYgKHN0YXJ0T2ZQYWNrYWdlc0luZGV4ID09PSAtMSkge1xuICAgICAgICByZXR1cm4geyBkZXBlbmRlbmNpZXMgfTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHBucG1Mb2NrUGFja2FnZXMgPSBwbnBtTG9ja0NvbnRlbnRzQXJyYXkuc2xpY2UoXG4gICAgICAgIHN0YXJ0T2ZQYWNrYWdlc0luZGV4ICsgMSxcbiAgICAgICk7XG5cbiAgICAgIGZvciAoY29uc3QgcG5wbURlcGVuZGVuY3lCbG9jayBvZiBwbnBtTG9ja1BhY2thZ2VzKSB7XG4gICAgICAgIC8vIEdldCBsaW5lIHRoYXQgY29udGFpbnMgZGVwZW5kZW5jeSBuYW1lIGFuZCB2ZXJzaW9uIGFuZCByZW1vdmUgcXVvdGVzIGFuZCBjb2xvblxuICAgICAgICBjb25zdCBwbnBtRGVwZW5kZW5jeUxpbmUgPSBwbnBtRGVwZW5kZW5jeUJsb2NrXG4gICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgIC5zcGxpdChuZXcgUmVnRXhwKGVvbFJlZ2V4KSlbMF1cbiAgICAgICAgICAucmVwbGFjZUFsbCgvWyc6XS9nLCAnJyk7XG4gICAgICAgIGNvbnN0IGRlcGVuZGVuY3lOYW1lID0gcG5wbURlcGVuZGVuY3lMaW5lLnNsaWNlKFxuICAgICAgICAgIDAsXG4gICAgICAgICAgcG5wbURlcGVuZGVuY3lMaW5lLmxhc3RJbmRleE9mKCdAJyksXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGRlcGVuZGVuY3lWZXJzaW9uID0gcG5wbURlcGVuZGVuY3lMaW5lLnNsaWNlKFxuICAgICAgICAgIHBucG1EZXBlbmRlbmN5TGluZS5sYXN0SW5kZXhPZignQCcpICsgMSxcbiAgICAgICAgKTtcblxuICAgICAgICBkZXBlbmRlbmNpZXMucHVzaCh7IG5hbWU6IGRlcGVuZGVuY3lOYW1lLCB2ZXJzaW9uOiBkZXBlbmRlbmN5VmVyc2lvbiB9KTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIHtcbiAgICAgIHByaW50ZXIubG9nKFxuICAgICAgICBgRmFpbGVkIHRvIGdldCBsb2NrIGZpbGUgY29udGVudHMgYmVjYXVzZSAke3BucG1Mb2NrUGF0aH0gZG9lcyBub3QgZXhpc3Qgb3IgaXMgbm90IHBhcnNlLWFibGVgLFxuICAgICAgICBMb2dMZXZlbC5ERUJVRyxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgZGVwZW5kZW5jaWVzIH07XG4gIH07XG59XG4iXX0=