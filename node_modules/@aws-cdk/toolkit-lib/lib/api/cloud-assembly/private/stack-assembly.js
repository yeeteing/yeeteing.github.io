"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackAssembly = void 0;
require("../../../private/dispose-polyfill");
const semver_1 = require("semver");
const toolkit_error_1 = require("../../../toolkit/toolkit-error");
const stack_assembly_1 = require("../stack-assembly");
const stack_collection_1 = require("../stack-collection");
const stack_selector_1 = require("../stack-selector");
/**
 * A single Cloud Assembly wrapped to provide additional stack operations.
 */
class StackAssembly extends stack_assembly_1.BaseStackAssembly {
    _asm;
    constructor(_asm, ioHelper) {
        super(_asm.cloudAssembly, ioHelper);
        this._asm = _asm;
    }
    get cloudAssembly() {
        return this._asm.cloudAssembly;
    }
    async _unlock() {
        return this._asm._unlock();
    }
    async dispose() {
        return this._asm.dispose();
    }
    async [Symbol.asyncDispose]() {
        return this.dispose();
    }
    /**
     * Improved stack selection interface with a single selector
     * @throws when the assembly does not contain any stacks, unless `selector.failOnEmpty` is `false`
     * @throws when individual selection strategies are not satisfied
     */
    async selectStacksV2(selector) {
        const asm = this.assembly;
        const topLevelStacks = asm.stacks;
        const allStacks = (0, semver_1.major)(asm.version) < 10 ? asm.stacks : asm.stacksRecursively;
        if (allStacks.length === 0 && (selector.failOnEmpty ?? true)) {
            throw new toolkit_error_1.ToolkitError('This app contains no stacks');
        }
        const extend = expandToExtendEnum(selector.expand);
        const patterns = StackAssembly.sanitizePatterns(selector.patterns ?? []);
        switch (selector.strategy) {
            case stack_selector_1.StackSelectionStrategy.ALL_STACKS:
                return new stack_collection_1.StackCollection(this, allStacks);
            case stack_selector_1.StackSelectionStrategy.MAIN_ASSEMBLY:
                if (topLevelStacks.length < 1) {
                    // @todo text should probably be handled in io host
                    throw new toolkit_error_1.ToolkitError('No stack found in the main cloud assembly. Use "list" to print manifest');
                }
                return this.extendStacks(topLevelStacks, allStacks, extend);
            case stack_selector_1.StackSelectionStrategy.ONLY_SINGLE:
                if (topLevelStacks.length !== 1) {
                    // @todo text should probably be handled in io host
                    throw new toolkit_error_1.ToolkitError('Since this app includes more than a single stack, specify which stacks to use (wildcards are supported) or specify `--all`\n' +
                        `Stacks: ${allStacks.map(x => x.hierarchicalId).join(' Â· ')}`);
                }
                return new stack_collection_1.StackCollection(this, topLevelStacks);
            default:
                const matched = await this.selectMatchingStacks(allStacks, patterns, extend);
                if (selector.strategy === stack_selector_1.StackSelectionStrategy.PATTERN_MUST_MATCH_SINGLE
                    && matched.stackCount !== 1) {
                    // @todo text should probably be handled in io host
                    throw new toolkit_error_1.ToolkitError(`Stack selection is ambiguous, please choose a specific stack for import [${allStacks.map(x => x.hierarchicalId).join(',')}]`);
                }
                if (selector.strategy === stack_selector_1.StackSelectionStrategy.PATTERN_MUST_MATCH
                    && matched.stackCount < 1) {
                    // @todo text should probably be handled in io host
                    throw new toolkit_error_1.ToolkitError(`Stack selection is ambiguous, please choose a specific stack for import [${allStacks.map(x => x.hierarchicalId).join(',')}]`);
                }
                return matched;
        }
    }
    /**
     * Select all stacks.
     *
     * This method never throws and can safely be used as a basis for other calculations.
     *
     * @returns a `StackCollection` of all stacks
     */
    selectAllStacks() {
        const allStacks = (0, semver_1.major)(this.assembly.version) < 10 ? this.assembly.stacks : this.assembly.stacksRecursively;
        return new stack_collection_1.StackCollection(this, allStacks);
    }
    /**
     * Select all stacks that have the validateOnSynth flag et.
     *
     * @returns a `StackCollection` of all stacks that needs to be validated
     */
    selectStacksForValidation() {
        const allStacks = this.selectAllStacks();
        return allStacks.filter((art) => art.validateOnSynth ?? false);
    }
}
exports.StackAssembly = StackAssembly;
function expandToExtendEnum(extend) {
    switch (extend) {
        case stack_selector_1.ExpandStackSelection.DOWNSTREAM:
            return stack_assembly_1.ExtendedStackSelection.Downstream;
        case stack_selector_1.ExpandStackSelection.UPSTREAM:
            return stack_assembly_1.ExtendedStackSelection.Upstream;
        case stack_selector_1.ExpandStackSelection.NONE:
            return stack_assembly_1.ExtendedStackSelection.None;
        default:
            return undefined;
    }
}
//# sourceMappingURL=data:application/json;base64,