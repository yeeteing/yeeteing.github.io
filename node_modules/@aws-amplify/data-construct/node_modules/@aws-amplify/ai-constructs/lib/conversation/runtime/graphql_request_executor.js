"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphqlRequestExecutor = void 0;
/**
 * This class is responsible for executing GraphQL requests.
 * Serializing query and it's inputs, adding authorization headers,
 * inspecting response for errors and de-serializing output.
 */
class GraphqlRequestExecutor {
    /**
     * Creates GraphQL request executor.
     */
    constructor(graphQlEndpoint, accessToken, userAgentProvider, _fetch = fetch) {
        this.graphQlEndpoint = graphQlEndpoint;
        this.accessToken = accessToken;
        this.userAgentProvider = userAgentProvider;
        this._fetch = _fetch;
        this.executeGraphql = async (request, options) => {
            var _a;
            const httpRequest = new Request(this.graphQlEndpoint, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/graphql',
                    Authorization: this.accessToken,
                    'x-amz-user-agent': (_a = options === null || options === void 0 ? void 0 : options.userAgent) !== null && _a !== void 0 ? _a : this.userAgentProvider.getUserAgent(),
                },
                body: JSON.stringify({
                    query: request.query,
                    variables: request.variables,
                }),
            });
            const res = await this._fetch(httpRequest);
            const responseHeaders = {};
            res.headers.forEach((value, key) => (responseHeaders[key] = value));
            if (!res.ok) {
                const body = await res.text();
                throw new Error(`GraphQL request failed, response headers=${JSON.stringify(responseHeaders)}, body=${body}`);
            }
            const body = await res.json();
            if (body && typeof body === 'object' && 'errors' in body) {
                throw new Error(`GraphQL request failed, response headers=${JSON.stringify(responseHeaders)}, body=${JSON.stringify(body)}`);
            }
            return body;
        };
    }
}
exports.GraphqlRequestExecutor = GraphqlRequestExecutor;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF9yZXF1ZXN0X2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnZlcnNhdGlvbi9ydW50aW1lL2dyYXBocWxfcmVxdWVzdF9leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFPQTs7OztHQUlHO0FBQ0gsTUFBYSxzQkFBc0I7SUFDakM7O09BRUc7SUFDSCxZQUNtQixlQUF1QixFQUN2QixXQUFtQixFQUNuQixpQkFBb0MsRUFDcEMsU0FBUyxLQUFLO1FBSGQsb0JBQWUsR0FBZixlQUFlLENBQVE7UUFDdkIsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBR2pDLG1CQUFjLEdBQUcsS0FBSyxFQUNwQixPQUFtQyxFQUNuQyxPQUVDLEVBQ2lCLEVBQUU7O1lBQ3BCLE1BQU0sV0FBVyxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3BELE1BQU0sRUFBRSxNQUFNO2dCQUNkLE9BQU8sRUFBRTtvQkFDUCxjQUFjLEVBQUUscUJBQXFCO29CQUNyQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFdBQVc7b0JBQy9CLGtCQUFrQixFQUNoQixNQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxTQUFTLG1DQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUU7aUJBQzlEO2dCQUNELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO29CQUNuQixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7b0JBQ3BCLFNBQVMsRUFBRSxPQUFPLENBQUMsU0FBUztpQkFDN0IsQ0FBQzthQUNILENBQUMsQ0FBQztZQUVILE1BQU0sR0FBRyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMzQyxNQUFNLGVBQWUsR0FBMkIsRUFBRSxDQUFDO1lBQ25ELEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNwRSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNaLE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUM5QixNQUFNLElBQUksS0FBSyxDQUNiLDRDQUE0QyxJQUFJLENBQUMsU0FBUyxDQUN4RCxlQUFlLENBQ2hCLFVBQVUsSUFBSSxFQUFFLENBQ2xCLENBQUM7WUFDSixDQUFDO1lBQ0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDOUIsSUFBSSxJQUFJLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUSxJQUFJLFFBQVEsSUFBSSxJQUFJLEVBQUUsQ0FBQztnQkFDekQsTUFBTSxJQUFJLEtBQUssQ0FDYiw0Q0FBNEMsSUFBSSxDQUFDLFNBQVMsQ0FDeEQsZUFBZSxDQUNoQixVQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDbEMsQ0FBQztZQUNKLENBQUM7WUFDRCxPQUFPLElBQWUsQ0FBQztRQUN6QixDQUFDLENBQUM7SUExQ0MsQ0FBQztDQTJDTDtBQXBERCx3REFvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBVc2VyQWdlbnRQcm92aWRlciB9IGZyb20gJy4vdXNlcl9hZ2VudF9wcm92aWRlcic7XG5cbmV4cG9ydCB0eXBlIEdyYXBocWxSZXF1ZXN0PFRWYXJpYWJsZXM+ID0ge1xuICBxdWVyeTogc3RyaW5nO1xuICB2YXJpYWJsZXM6IFRWYXJpYWJsZXM7XG59O1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgcmVzcG9uc2libGUgZm9yIGV4ZWN1dGluZyBHcmFwaFFMIHJlcXVlc3RzLlxuICogU2VyaWFsaXppbmcgcXVlcnkgYW5kIGl0J3MgaW5wdXRzLCBhZGRpbmcgYXV0aG9yaXphdGlvbiBoZWFkZXJzLFxuICogaW5zcGVjdGluZyByZXNwb25zZSBmb3IgZXJyb3JzIGFuZCBkZS1zZXJpYWxpemluZyBvdXRwdXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBHcmFwaHFsUmVxdWVzdEV4ZWN1dG9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgR3JhcGhRTCByZXF1ZXN0IGV4ZWN1dG9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBncmFwaFFsRW5kcG9pbnQ6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFjY2Vzc1Rva2VuOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSByZWFkb25seSB1c2VyQWdlbnRQcm92aWRlcjogVXNlckFnZW50UHJvdmlkZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZmV0Y2ggPSBmZXRjaCxcbiAgKSB7fVxuXG4gIGV4ZWN1dGVHcmFwaHFsID0gYXN5bmMgPFRWYXJpYWJsZXMsIFRSZXR1cm4+KFxuICAgIHJlcXVlc3Q6IEdyYXBocWxSZXF1ZXN0PFRWYXJpYWJsZXM+LFxuICAgIG9wdGlvbnM/OiB7XG4gICAgICB1c2VyQWdlbnQ/OiBzdHJpbmc7XG4gICAgfSxcbiAgKTogUHJvbWlzZTxUUmV0dXJuPiA9PiB7XG4gICAgY29uc3QgaHR0cFJlcXVlc3QgPSBuZXcgUmVxdWVzdCh0aGlzLmdyYXBoUWxFbmRwb2ludCwge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vZ3JhcGhxbCcsXG4gICAgICAgIEF1dGhvcml6YXRpb246IHRoaXMuYWNjZXNzVG9rZW4sXG4gICAgICAgICd4LWFtei11c2VyLWFnZW50JzpcbiAgICAgICAgICBvcHRpb25zPy51c2VyQWdlbnQgPz8gdGhpcy51c2VyQWdlbnRQcm92aWRlci5nZXRVc2VyQWdlbnQoKSxcbiAgICAgIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIHF1ZXJ5OiByZXF1ZXN0LnF1ZXJ5LFxuICAgICAgICB2YXJpYWJsZXM6IHJlcXVlc3QudmFyaWFibGVzLFxuICAgICAgfSksXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLl9mZXRjaChodHRwUmVxdWVzdCk7XG4gICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gICAgcmVzLmhlYWRlcnMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4gKHJlc3BvbnNlSGVhZGVyc1trZXldID0gdmFsdWUpKTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBHcmFwaFFMIHJlcXVlc3QgZmFpbGVkLCByZXNwb25zZSBoZWFkZXJzPSR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICApfSwgYm9keT0ke2JvZHl9YCxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IGJvZHkgPSBhd2FpdCByZXMuanNvbigpO1xuICAgIGlmIChib2R5ICYmIHR5cGVvZiBib2R5ID09PSAnb2JqZWN0JyAmJiAnZXJyb3JzJyBpbiBib2R5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBHcmFwaFFMIHJlcXVlc3QgZmFpbGVkLCByZXNwb25zZSBoZWFkZXJzPSR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgICAgcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICApfSwgYm9keT0ke0pTT04uc3RyaW5naWZ5KGJvZHkpfWAsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYm9keSBhcyBUUmV0dXJuO1xuICB9O1xufVxuIl19