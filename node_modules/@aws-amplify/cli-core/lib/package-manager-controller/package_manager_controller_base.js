import { existsSync as _existsSync } from 'fs';
import _fsp from 'fs/promises';
import { execa as _execa } from 'execa';
import * as _path from 'path';
import { LogLevel } from '../printer/printer.js';
import { printer } from '../printer.js';
import { executeWithDebugLogger as _executeWithDebugLogger } from './execute_with_debugger_logger.js';
import { getPackageManagerRunnerName } from './get_package_manager_name.js';
/**
 * PackageManagerController is an abstraction around package manager commands that are needed to initialize a project and install dependencies
 */
export class PackageManagerControllerBase {
    cwd;
    executable;
    initDefault;
    installCommand;
    lockFileReader;
    fsp;
    path;
    execa;
    executeWithDebugLogger;
    existsSync;
    binaryRunner;
    /**
     * constructor - sets the project root
     */
    constructor(cwd, executable, initDefault, installCommand, lockFileReader, fsp = _fsp, path = _path, execa = _execa, executeWithDebugLogger = _executeWithDebugLogger, existsSync = _existsSync) {
        this.cwd = cwd;
        this.executable = executable;
        this.initDefault = initDefault;
        this.installCommand = installCommand;
        this.lockFileReader = lockFileReader;
        this.fsp = fsp;
        this.path = path;
        this.execa = execa;
        this.executeWithDebugLogger = executeWithDebugLogger;
        this.existsSync = existsSync;
        this.binaryRunner = getPackageManagerRunnerName();
    }
    /**
     * installDependencies - installs dependencies in the project root
     */
    async installDependencies(packageNames, type) {
        const args = [`${this.installCommand}`].concat(...packageNames);
        if (type === 'dev') {
            args.push('-D');
        }
        await this.executeWithDebugLogger(this.cwd, this.executable, args, this.execa);
    }
    /**
     * initializeProject - initializes a project in the project root by checking the package.json file
     */
    initializeProject = async () => {
        if (this.packageJsonExists(this.cwd)) {
            // if package.json already exists, no need to do anything
            return;
        }
        printer.log(`No package.json file found in the current directory. Running \`${this.executable} init\`...`, LogLevel.DEBUG);
        try {
            await this.executeWithDebugLogger(this.cwd, this.executable, this.initDefault, this.execa);
        }
        catch (err) {
            throw new Error(`\`${this.executable} init\` did not exit successfully. Initialize a valid JavaScript package before continuing.`, { cause: err });
        }
        if (!this.packageJsonExists(this.cwd)) {
            // this should only happen if the customer exits out of npm init before finishing
            throw new Error(`package.json does not exist after running \`${this.executable} init\`. Initialize a valid JavaScript package before continuing.'`);
        }
    };
    /**
     * initializeTsConfig - initializes a tsconfig.json file in the project root
     *
     * When changing this method, double check if a corresponding change is needed in the integration test setup in `setup_dir_as_esm_module.ts`.
     */
    async initializeTsConfig(targetDir) {
        const tsConfigTemplate = {
            compilerOptions: {
                target: 'es2022',
                module: 'es2022',
                moduleResolution: 'bundler',
                resolveJsonModule: true,
                esModuleInterop: true,
                forceConsistentCasingInFileNames: true,
                strict: true,
                skipLibCheck: true,
                // The path here is coupled with backend-function's generated typedef file path
                paths: { '$amplify/*': ['../.amplify/generated/*'] },
            },
        };
        const tsConfigPath = this.path.resolve(targetDir, 'tsconfig.json');
        await this.fsp.writeFile(tsConfigPath, JSON.stringify(tsConfigTemplate, null, 2), 'utf-8');
    }
    /**
     * runWithPackageManager - Factory function that runs a command with the specified package manager's binary runner
     */
    runWithPackageManager(args = [], dir, options) {
        return this.executeWithDebugLogger(dir, this.binaryRunner, args, this.execa, options);
    }
    getCommand = (args) => `${this.binaryRunner} ${args.join(' ')}`;
    /**
     * allowsSignalPropagation - Determines if the package manager allows the process
     * signals such as SIGINT to be propagated to the underlying node process.
     * @deprecated
     */
    allowsSignalPropagation = () => true;
    /**
     * tryGetDependencies - Tries to retrieve dependency versions from the lock file in the project root
     */
    tryGetDependencies = async () => {
        const lockFileContents = await this.lockFileReader.getLockFileContentsFromCwd();
        return lockFileContents?.dependencies;
    };
    /**
     * Check if a package.json file exists in projectRoot
     */
    packageJsonExists = (projectRoot) => {
        return this.existsSync(this.path.resolve(projectRoot, 'package.json'));
    };
}
//# sourceMappingURL=data:application/json;base64,