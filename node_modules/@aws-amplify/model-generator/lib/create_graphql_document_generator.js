import { AppSyncClient } from '@aws-sdk/client-appsync';
import { BackendOutputClientFactory, } from '@aws-amplify/deployed-backend-client';
import { graphqlOutputKey } from '@aws-amplify/backend-output-schemas';
import { AppsyncGraphqlGenerationResult } from './appsync_graphql_generation_result.js';
import { AppSyncIntrospectionSchemaFetcher } from './appsync_schema_fetcher.js';
import { AppSyncGraphqlDocumentGenerator } from './graphql_document_generator.js';
import { getBackendOutputWithErrorHandling } from './get_backend_output_with_error_handling.js';
/**
 * Factory function to compose a model generator
 */
export const createGraphqlDocumentGenerator = ({ backendIdentifier, awsClientProvider, }) => {
    if (!backendIdentifier) {
        // eslint-disable-next-line @aws-amplify/amplify-backend-rules/prefer-amplify-errors
        throw new Error('`backendIdentifier` must be defined');
    }
    if (!awsClientProvider) {
        // eslint-disable-next-line @aws-amplify/amplify-backend-rules/prefer-amplify-errors
        throw new Error('`awsClientProvider` must be defined');
    }
    const fetchSchema = async () => {
        const backendOutputClient = BackendOutputClientFactory.getInstance(awsClientProvider);
        const output = await getBackendOutputWithErrorHandling(backendOutputClient, backendIdentifier);
        const apiId = output[graphqlOutputKey]?.payload.awsAppsyncApiId;
        if (!apiId) {
            // eslint-disable-next-line @aws-amplify/amplify-backend-rules/prefer-amplify-errors
            throw new Error(`Unable to determine AppSync API ID.`);
        }
        return new AppSyncIntrospectionSchemaFetcher(new AppSyncClient()).fetch(apiId);
    };
    return new AppSyncGraphqlDocumentGenerator(fetchSchema, (fileMap) => new AppsyncGraphqlGenerationResult(fileMap));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX2dyYXBocWxfZG9jdW1lbnRfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZV9ncmFwaHFsX2RvY3VtZW50X2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUNMLDBCQUEwQixHQUUzQixNQUFNLHNDQUFzQyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBS2xGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBVWhHOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsQ0FBQyxFQUM3QyxpQkFBaUIsRUFDakIsaUJBQWlCLEdBQ3FCLEVBQTRCLEVBQUU7SUFDcEUsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkIsb0ZBQW9GO1FBQ3BGLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0QsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkIsb0ZBQW9GO1FBQ3BGLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQsTUFBTSxXQUFXLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDN0IsTUFBTSxtQkFBbUIsR0FDdkIsMEJBQTBCLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDNUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxpQ0FBaUMsQ0FDcEQsbUJBQW1CLEVBQ25CLGlCQUFpQixDQUNsQixDQUFDO1FBQ0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQztRQUNoRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDWCxvRkFBb0Y7WUFDcEYsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFFRCxPQUFPLElBQUksaUNBQWlDLENBQUMsSUFBSSxhQUFhLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FDckUsS0FBSyxDQUNOLENBQUM7SUFDSixDQUFDLENBQUM7SUFDRixPQUFPLElBQUksK0JBQStCLENBQ3hDLFdBQVcsRUFDWCxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsSUFBSSw4QkFBOEIsQ0FBQyxPQUFPLENBQUMsQ0FDekQsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFN5bmNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtYXBwc3luYyc7XG5pbXBvcnQge1xuICBCYWNrZW5kT3V0cHV0Q2xpZW50RmFjdG9yeSxcbiAgRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllcixcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IGdyYXBocWxPdXRwdXRLZXkgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc2NoZW1hcyc7XG5pbXBvcnQgeyBBcHBzeW5jR3JhcGhxbEdlbmVyYXRpb25SZXN1bHQgfSBmcm9tICcuL2FwcHN5bmNfZ3JhcGhxbF9nZW5lcmF0aW9uX3Jlc3VsdC5qcyc7XG5pbXBvcnQgeyBBcHBTeW5jSW50cm9zcGVjdGlvblNjaGVtYUZldGNoZXIgfSBmcm9tICcuL2FwcHN5bmNfc2NoZW1hX2ZldGNoZXIuanMnO1xuaW1wb3J0IHsgQXBwU3luY0dyYXBocWxEb2N1bWVudEdlbmVyYXRvciB9IGZyb20gJy4vZ3JhcGhxbF9kb2N1bWVudF9nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgR3JhcGhxbERvY3VtZW50R2VuZXJhdG9yIH0gZnJvbSAnLi9tb2RlbF9nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgQVdTQ2xpZW50UHJvdmlkZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IEFtcGxpZnlDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtYW1wbGlmeSc7XG5pbXBvcnQgeyBDbG91ZEZvcm1hdGlvbkNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvbic7XG5pbXBvcnQgeyBnZXRCYWNrZW5kT3V0cHV0V2l0aEVycm9ySGFuZGxpbmcgfSBmcm9tICcuL2dldF9iYWNrZW5kX291dHB1dF93aXRoX2Vycm9yX2hhbmRsaW5nLmpzJztcblxuZXhwb3J0IHR5cGUgR3JhcGhxbERvY3VtZW50R2VuZXJhdG9yRmFjdG9yeVBhcmFtcyA9IHtcbiAgYmFja2VuZElkZW50aWZpZXI6IERlcGxveWVkQmFja2VuZElkZW50aWZpZXI7XG4gIGF3c0NsaWVudFByb3ZpZGVyOiBBV1NDbGllbnRQcm92aWRlcjx7XG4gICAgZ2V0QW1wbGlmeUNsaWVudDogQW1wbGlmeUNsaWVudDtcbiAgICBnZXRDbG91ZEZvcm1hdGlvbkNsaWVudDogQ2xvdWRGb3JtYXRpb25DbGllbnQ7XG4gIH0+O1xufTtcblxuLyoqXG4gKiBGYWN0b3J5IGZ1bmN0aW9uIHRvIGNvbXBvc2UgYSBtb2RlbCBnZW5lcmF0b3JcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUdyYXBocWxEb2N1bWVudEdlbmVyYXRvciA9ICh7XG4gIGJhY2tlbmRJZGVudGlmaWVyLFxuICBhd3NDbGllbnRQcm92aWRlcixcbn06IEdyYXBocWxEb2N1bWVudEdlbmVyYXRvckZhY3RvcnlQYXJhbXMpOiBHcmFwaHFsRG9jdW1lbnRHZW5lcmF0b3IgPT4ge1xuICBpZiAoIWJhY2tlbmRJZGVudGlmaWVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhd3MtYW1wbGlmeS9hbXBsaWZ5LWJhY2tlbmQtcnVsZXMvcHJlZmVyLWFtcGxpZnktZXJyb3JzXG4gICAgdGhyb3cgbmV3IEVycm9yKCdgYmFja2VuZElkZW50aWZpZXJgIG11c3QgYmUgZGVmaW5lZCcpO1xuICB9XG4gIGlmICghYXdzQ2xpZW50UHJvdmlkZXIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGF3cy1hbXBsaWZ5L2FtcGxpZnktYmFja2VuZC1ydWxlcy9wcmVmZXItYW1wbGlmeS1lcnJvcnNcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bhd3NDbGllbnRQcm92aWRlcmAgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIH1cblxuICBjb25zdCBmZXRjaFNjaGVtYSA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBiYWNrZW5kT3V0cHV0Q2xpZW50ID1cbiAgICAgIEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5LmdldEluc3RhbmNlKGF3c0NsaWVudFByb3ZpZGVyKTtcbiAgICBjb25zdCBvdXRwdXQgPSBhd2FpdCBnZXRCYWNrZW5kT3V0cHV0V2l0aEVycm9ySGFuZGxpbmcoXG4gICAgICBiYWNrZW5kT3V0cHV0Q2xpZW50LFxuICAgICAgYmFja2VuZElkZW50aWZpZXIsXG4gICAgKTtcbiAgICBjb25zdCBhcGlJZCA9IG91dHB1dFtncmFwaHFsT3V0cHV0S2V5XT8ucGF5bG9hZC5hd3NBcHBzeW5jQXBpSWQ7XG4gICAgaWYgKCFhcGlJZCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhd3MtYW1wbGlmeS9hbXBsaWZ5LWJhY2tlbmQtcnVsZXMvcHJlZmVyLWFtcGxpZnktZXJyb3JzXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBkZXRlcm1pbmUgQXBwU3luYyBBUEkgSUQuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBcHBTeW5jSW50cm9zcGVjdGlvblNjaGVtYUZldGNoZXIobmV3IEFwcFN5bmNDbGllbnQoKSkuZmV0Y2goXG4gICAgICBhcGlJZCxcbiAgICApO1xuICB9O1xuICByZXR1cm4gbmV3IEFwcFN5bmNHcmFwaHFsRG9jdW1lbnRHZW5lcmF0b3IoXG4gICAgZmV0Y2hTY2hlbWEsXG4gICAgKGZpbGVNYXApID0+IG5ldyBBcHBzeW5jR3JhcGhxbEdlbmVyYXRpb25SZXN1bHQoZmlsZU1hcCksXG4gICk7XG59O1xuIl19