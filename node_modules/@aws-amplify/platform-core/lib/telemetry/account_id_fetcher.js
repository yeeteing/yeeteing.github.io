"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountIdFetcher = void 0;
const client_sts_1 = require("@aws-sdk/client-sts");
const uuid_1 = require("uuid");
// eslint-disable-next-line spellcheck/spell-checker
const AMPLIFY_CLI_UUID_NAMESPACE = '283cae3e-c611-4659-9044-6796e5d696ec'; // A random v4 UUID
/**
 * Retrieves the account ID of the user
 */
class AccountIdFetcher {
    stsClient;
    accountIdPromise;
    /**
     * constructor for AccountIdFetcher
     */
    constructor(stsClient = new client_sts_1.STSClient()) {
        this.stsClient = stsClient;
    }
    fetch = async () => {
        if (this.accountIdPromise) {
            try {
                const stsResponse = await this.accountIdPromise;
                return this.getAccountIdFromStsResponse(stsResponse);
            }
            catch {
                // We failed to get the account Id. Most likely the user doesn't have credentials
                return;
            }
        }
        try {
            this.accountIdPromise = this.stsClient.send(new client_sts_1.GetCallerIdentityCommand({}));
            const stsResponse = await this.accountIdPromise;
            return this.getAccountIdFromStsResponse(stsResponse);
        }
        catch {
            // We failed to get the account Id. Most likely the user doesn't have credentials
            return;
        }
    };
    getAccountIdFromStsResponse = (stsResponse) => {
        if (stsResponse && stsResponse.Account) {
            return (0, uuid_1.v5)(stsResponse.Account.slice(0, -2), AMPLIFY_CLI_UUID_NAMESPACE);
        }
        // We failed to get the account Id. Most likely the user doesn't have credentials
        return;
    };
}
exports.AccountIdFetcher = AccountIdFetcher;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF9pZF9mZXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RlbGVtZXRyeS9hY2NvdW50X2lkX2ZldGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0RBSTZCO0FBQzdCLCtCQUFvQztBQUVwQyxvREFBb0Q7QUFDcEQsTUFBTSwwQkFBMEIsR0FBRyxzQ0FBc0MsQ0FBQyxDQUFDLG1CQUFtQjtBQUU5Rjs7R0FFRztBQUNILE1BQWEsZ0JBQWdCO0lBS0U7SUFKckIsZ0JBQWdCLENBQTJDO0lBQ25FOztPQUVHO0lBQ0gsWUFBNkIsWUFBWSxJQUFJLHNCQUFTLEVBQUU7UUFBM0IsY0FBUyxHQUFULFNBQVMsQ0FBa0I7SUFBRyxDQUFDO0lBQzVELEtBQUssR0FBRyxLQUFLLElBQUksRUFBRTtRQUNqQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQztnQkFDSCxNQUFNLFdBQVcsR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDaEQsT0FBTyxJQUFJLENBQUMsMkJBQTJCLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDdkQsQ0FBQztZQUFDLE1BQU0sQ0FBQztnQkFDUCxpRkFBaUY7Z0JBQ2pGLE9BQU87WUFDVCxDQUFDO1FBQ0gsQ0FBQztRQUNELElBQUksQ0FBQztZQUNILElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDekMsSUFBSSxxQ0FBd0IsQ0FBQyxFQUFFLENBQUMsQ0FDakMsQ0FBQztZQUNGLE1BQU0sV0FBVyxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDO1lBQ2hELE9BQU8sSUFBSSxDQUFDLDJCQUEyQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFBQyxNQUFNLENBQUM7WUFDUCxpRkFBaUY7WUFDakYsT0FBTztRQUNULENBQUM7SUFDSCxDQUFDLENBQUM7SUFFTSwyQkFBMkIsR0FBRyxDQUNwQyxXQUEyQyxFQUMzQyxFQUFFO1FBQ0YsSUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3ZDLE9BQU8sSUFBQSxTQUFNLEVBQ1gsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2hDLDBCQUEwQixDQUMzQixDQUFDO1FBQ0osQ0FBQztRQUNELGlGQUFpRjtRQUNqRixPQUFPO0lBQ1QsQ0FBQyxDQUFDO0NBQ0g7QUF4Q0QsNENBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kLFxuICBHZXRDYWxsZXJJZGVudGl0eUNvbW1hbmRPdXRwdXQsXG4gIFNUU0NsaWVudCxcbn0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXN0cyc7XG5pbXBvcnQgeyB2NSBhcyB1dWlkVjUgfSBmcm9tICd1dWlkJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHNwZWxsY2hlY2svc3BlbGwtY2hlY2tlclxuY29uc3QgQU1QTElGWV9DTElfVVVJRF9OQU1FU1BBQ0UgPSAnMjgzY2FlM2UtYzYxMS00NjU5LTkwNDQtNjc5NmU1ZDY5NmVjJzsgLy8gQSByYW5kb20gdjQgVVVJRFxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgYWNjb3VudCBJRCBvZiB0aGUgdXNlclxuICovXG5leHBvcnQgY2xhc3MgQWNjb3VudElkRmV0Y2hlciB7XG4gIHByaXZhdGUgYWNjb3VudElkUHJvbWlzZT86IFByb21pc2U8R2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kT3V0cHV0PjtcbiAgLyoqXG4gICAqIGNvbnN0cnVjdG9yIGZvciBBY2NvdW50SWRGZXRjaGVyXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHN0c0NsaWVudCA9IG5ldyBTVFNDbGllbnQoKSkge31cbiAgZmV0Y2ggPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKHRoaXMuYWNjb3VudElkUHJvbWlzZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3RzUmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFjY291bnRJZFByb21pc2U7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEFjY291bnRJZEZyb21TdHNSZXNwb25zZShzdHNSZXNwb25zZSk7XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gV2UgZmFpbGVkIHRvIGdldCB0aGUgYWNjb3VudCBJZC4gTW9zdCBsaWtlbHkgdGhlIHVzZXIgZG9lc24ndCBoYXZlIGNyZWRlbnRpYWxzXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuYWNjb3VudElkUHJvbWlzZSA9IHRoaXMuc3RzQ2xpZW50LnNlbmQoXG4gICAgICAgIG5ldyBHZXRDYWxsZXJJZGVudGl0eUNvbW1hbmQoe30pLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHN0c1Jlc3BvbnNlID0gYXdhaXQgdGhpcy5hY2NvdW50SWRQcm9taXNlO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0QWNjb3VudElkRnJvbVN0c1Jlc3BvbnNlKHN0c1Jlc3BvbnNlKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIC8vIFdlIGZhaWxlZCB0byBnZXQgdGhlIGFjY291bnQgSWQuIE1vc3QgbGlrZWx5IHRoZSB1c2VyIGRvZXNuJ3QgaGF2ZSBjcmVkZW50aWFsc1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGdldEFjY291bnRJZEZyb21TdHNSZXNwb25zZSA9IChcbiAgICBzdHNSZXNwb25zZTogR2V0Q2FsbGVySWRlbnRpdHlDb21tYW5kT3V0cHV0LFxuICApID0+IHtcbiAgICBpZiAoc3RzUmVzcG9uc2UgJiYgc3RzUmVzcG9uc2UuQWNjb3VudCkge1xuICAgICAgcmV0dXJuIHV1aWRWNShcbiAgICAgICAgc3RzUmVzcG9uc2UuQWNjb3VudC5zbGljZSgwLCAtMiksXG4gICAgICAgIEFNUExJRllfQ0xJX1VVSURfTkFNRVNQQUNFLFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gV2UgZmFpbGVkIHRvIGdldCB0aGUgYWNjb3VudCBJZC4gTW9zdCBsaWtlbHkgdGhlIHVzZXIgZG9lc24ndCBoYXZlIGNyZWRlbnRpYWxzXG4gICAgcmV0dXJuO1xuICB9O1xufVxuIl19