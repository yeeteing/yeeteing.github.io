"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CcApiContextProviderPlugin = void 0;
const client_cloudcontrol_1 = require("@aws-sdk/client-cloudcontrol");
const private_1 = require("../api/aws-auth/private");
const toolkit_error_1 = require("../toolkit/toolkit-error");
const util_1 = require("../util");
class CcApiContextProviderPlugin {
    aws;
    constructor(aws) {
        this.aws = aws;
    }
    /**
     * This returns a data object with the value from CloudControl API result.
     *
     * See the documentation in the Cloud Assembly Schema for the semantics of
     * each query parameter.
     */
    async getValue(args) {
        // Validate input
        if (args.exactIdentifier && args.propertyMatch) {
            throw new toolkit_error_1.ContextProviderError(`Provider protocol error: specify either exactIdentifier or propertyMatch, but not both (got ${JSON.stringify(args)})`);
        }
        if (args.ignoreErrorOnMissingContext && args.dummyValue === undefined) {
            throw new toolkit_error_1.ContextProviderError(`Provider protocol error: if ignoreErrorOnMissingContext is set, a dummyValue must be supplied (got ${JSON.stringify(args)})`);
        }
        if (args.dummyValue !== undefined && (!Array.isArray(args.dummyValue) || !args.dummyValue.every(isObject))) {
            throw new toolkit_error_1.ContextProviderError(`Provider protocol error: dummyValue must be an array of objects (got ${JSON.stringify(args.dummyValue)})`);
        }
        // Do the lookup
        const cloudControl = (await (0, private_1.initContextProviderSdk)(this.aws, args)).cloudControl();
        try {
            let resources;
            if (args.exactIdentifier) {
                // use getResource to get the exact identifier
                resources = await this.getResource(cloudControl, args.typeName, args.exactIdentifier);
            }
            else if (args.propertyMatch) {
                // use listResource
                resources = await this.listResources(cloudControl, args.typeName, args.propertyMatch, args.expectedMatchCount);
            }
            else {
                throw new toolkit_error_1.ContextProviderError(`Provider protocol error: neither exactIdentifier nor propertyMatch is specified in ${JSON.stringify(args)}.`);
            }
            return resources.map((r) => (0, util_1.getResultObj)(r.properties, r.identifier, args.propertiesToReturn));
        }
        catch (err) {
            if (toolkit_error_1.ContextProviderError.isNoResultsFoundError(err) && args.ignoreErrorOnMissingContext) {
                // We've already type-checked dummyValue.
                return args.dummyValue;
            }
            throw err;
        }
    }
    /**
     * Calls getResource from CC API to get the resource.
     * See https://docs.aws.amazon.com/cli/latest/reference/cloudcontrol/get-resource.html
     *
     * Will always return exactly one resource, or fail.
     */
    async getResource(cc, typeName, exactIdentifier) {
        try {
            const result = await cc.getResource({
                TypeName: typeName,
                Identifier: exactIdentifier,
            });
            if (!result.ResourceDescription) {
                throw new toolkit_error_1.ContextProviderError('Unexpected CloudControl API behavior: returned empty response');
            }
            return [foundResourceFromCcApi(result.ResourceDescription)];
        }
        catch (err) {
            if (err instanceof client_cloudcontrol_1.ResourceNotFoundException || err.name === 'ResourceNotFoundException') {
                throw new toolkit_error_1.NoResultsFoundError(`No resource of type ${typeName} with identifier: ${exactIdentifier}`);
            }
            if (!toolkit_error_1.ContextProviderError.isContextProviderError(err)) {
                throw toolkit_error_1.ContextProviderError.withCause(`Encountered CC API error while getting ${typeName} resource ${exactIdentifier}`, err);
            }
            throw err;
        }
    }
    /**
     * Calls listResources from CC API to get the resources and apply args.propertyMatch to find the resources.
     * See https://docs.aws.amazon.com/cli/latest/reference/cloudcontrol/list-resources.html
     *
     * Will return 0 or more resources.
     *
     * Does not currently paginate through more than one result page.
     */
    async listResources(cc, typeName, propertyMatch, expectedMatchCount) {
        try {
            const result = await cc.listResources({
                TypeName: typeName,
            });
            const found = (result.ResourceDescriptions ?? [])
                .map(foundResourceFromCcApi)
                .filter((r) => {
                return Object.entries(propertyMatch).every(([propPath, expected]) => {
                    const actual = (0, util_1.findJsonValue)(r.properties, propPath);
                    return propertyMatchesFilter(actual, expected);
                });
            });
            if ((expectedMatchCount === 'at-least-one' || expectedMatchCount === 'exactly-one') && found.length === 0) {
                throw new toolkit_error_1.NoResultsFoundError(`Could not find any resources matching ${JSON.stringify(propertyMatch)}; expected ${expectedMatchCountText(expectedMatchCount)}.`);
            }
            if ((expectedMatchCount === 'at-most-one' || expectedMatchCount === 'exactly-one') && found.length > 1) {
                throw new toolkit_error_1.ContextProviderError(`Found ${found.length} resources matching ${JSON.stringify(propertyMatch)}; expected ${expectedMatchCountText(expectedMatchCount)}. Please narrow the search criteria`);
            }
            return found;
        }
        catch (err) {
            if (!toolkit_error_1.ContextProviderError.isContextProviderError(err)) {
                throw toolkit_error_1.ContextProviderError.withCause(`Encountered CC API error while listing ${typeName} resources matching ${JSON.stringify(propertyMatch)}`, err);
            }
            throw err;
        }
    }
}
exports.CcApiContextProviderPlugin = CcApiContextProviderPlugin;
/**
 * Convert a CC API response object into a nicer object (parse the JSON)
 */
function foundResourceFromCcApi(desc) {
    return {
        identifier: desc.Identifier ?? '*MISSING*',
        properties: JSON.parse(desc.Properties ?? '{}'),
    };
}
/**
 * Whether the given property value matches the given filter
 *
 * For now we just check for strict equality, but we can implement pattern matching and fuzzy matching here later
 */
function propertyMatchesFilter(actual, expected) {
    return expected === actual;
}
function isObject(x) {
    return typeof x === 'object' && x !== null && !Array.isArray(x);
}
function expectedMatchCountText(expectation) {
    switch (expectation) {
        case 'at-least-one':
            return 'at least one';
        case 'at-most-one':
            return 'at most one';
        case 'exactly-one':
            return 'exactly one';
        case 'any':
            return 'any number';
        default:
            return expectation;
    }
}
//# sourceMappingURL=data:application/json;base64,