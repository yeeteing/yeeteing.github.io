import path from 'path';
import { existsSync } from 'fs';
import { AmplifyError, AmplifyUserError } from '@aws-amplify/platform-core';
import { format, printer } from '@aws-amplify/cli-core';
import { tsImport } from 'tsx/esm/api';
import { pathToFileURL } from 'url';
/**
 * Command that runs seed in sandbox environment
 */
export class SandboxSeedCommand {
    backendIDResolver;
    seedSubCommands;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Seeds sandbox environment.
     */
    constructor(backendIDResolver, seedSubCommands) {
        this.backendIDResolver = backendIDResolver;
        this.seedSubCommands = seedSubCommands;
        this.command = 'seed';
        this.describe = 'Seeds sandbox environment';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        printer.print(`${format.color('seed is running...', 'Blue')}`);
        const backendID = await this.backendIDResolver.resolve(args.identifier);
        const seedPath = path.join('amplify', 'seed', 'seed.ts');
        process.env.AMPLIFY_BACKEND_IDENTIFIER = JSON.stringify(backendID);
        try {
            await tsImport(pathToFileURL(seedPath).toString(), import.meta.url);
        }
        catch (e) {
            const error = e;
            if (error.message.includes('Cannot find module') &&
                error.message.includes('seed')) {
                throw new AmplifyUserError('SeedScriptNotFoundError', {
                    message: `There is no file that corresponds to ${seedPath}`,
                    resolution: `Please make a file that corresponds to ${seedPath} and put your seed logic in it`,
                }, error);
            }
            else {
                if (AmplifyError.isAmplifyError(e)) {
                    throw e;
                }
                throw new AmplifyUserError('SeedingFailedError', {
                    message: 'Seed failed to complete',
                    resolution: 'Check the Caused by error and fix any issues in your seed script',
                }, e instanceof Error ? error : undefined);
            }
        }
        printer.printNewLine();
        printer.print(`${format.success('âœ”')} seed has successfully completed`);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs.command(this.seedSubCommands).check(() => {
            const seedPath = path.join(process.cwd(), 'amplify', 'seed', 'seed.ts');
            if (!existsSync(seedPath)) {
                throw new AmplifyUserError('SeedScriptNotFoundError', {
                    message: `There is no file that corresponds to ${seedPath}`,
                    resolution: `Please make a file that corresponds to ${seedPath} and put your seed logic in it`,
                });
            }
            return true;
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWVkX2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlZWQvc2FuZGJveF9zZWVkX2NvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFFaEMsT0FBTyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTVFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBRXBDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjtJQWVWO0lBQ0E7SUFmbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsZUFBZ0M7UUFEaEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFFakQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRywyQkFBMkIsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLEdBQUcsS0FBSyxFQUNiLElBQXFELEVBQ3RDLEVBQUU7UUFDakIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3pELE9BQU8sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUM7WUFDSCxNQUFNLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0RSxDQUFDO1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNYLE1BQU0sS0FBSyxHQUFHLENBQVUsQ0FBQztZQUN6QixJQUNFLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLG9CQUFvQixDQUFDO2dCQUM1QyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFDOUIsQ0FBQztnQkFDRCxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLHlCQUF5QixFQUN6QjtvQkFDRSxPQUFPLEVBQUUsd0NBQXdDLFFBQVEsRUFBRTtvQkFDM0QsVUFBVSxFQUFFLDBDQUEwQyxRQUFRLGdDQUFnQztpQkFDL0YsRUFDRCxLQUFLLENBQ04sQ0FBQztZQUNKLENBQUM7aUJBQU0sQ0FBQztnQkFDTixJQUFJLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztvQkFDbkMsTUFBTSxDQUFDLENBQUM7Z0JBQ1YsQ0FBQztnQkFDRCxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLG9CQUFvQixFQUNwQjtvQkFDRSxPQUFPLEVBQUUseUJBQXlCO29CQUNsQyxVQUFVLEVBQ1Isa0VBQWtFO2lCQUNyRSxFQUNELENBQUMsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUN2QyxDQUFDO1lBQ0osQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7SUFDMUUsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQXFDLEVBQUU7UUFDM0QsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ3BELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDeEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO2dCQUMxQixNQUFNLElBQUksZ0JBQWdCLENBQUMseUJBQXlCLEVBQUU7b0JBQ3BELE9BQU8sRUFBRSx3Q0FBd0MsUUFBUSxFQUFFO29CQUMzRCxVQUFVLEVBQUUsMENBQTBDLFFBQVEsZ0NBQWdDO2lCQUMvRixDQUFDLENBQUM7WUFDTCxDQUFDO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBleGlzdHNTeW5jIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyIH0gZnJvbSAnLi4vc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5RXJyb3IsIEFtcGxpZnlVc2VyRXJyb3IgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBTYW5kYm94Q29tbWFuZEdsb2JhbE9wdGlvbnMgfSBmcm9tICcuLi9vcHRpb25fdHlwZXMuanMnO1xuaW1wb3J0IHsgZm9ybWF0LCBwcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7IHRzSW1wb3J0IH0gZnJvbSAndHN4L2VzbS9hcGknO1xuaW1wb3J0IHsgcGF0aFRvRmlsZVVSTCB9IGZyb20gJ3VybCc7XG5cbi8qKlxuICogQ29tbWFuZCB0aGF0IHJ1bnMgc2VlZCBpbiBzYW5kYm94IGVudmlyb25tZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94U2VlZENvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdD4ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNlZWRzIHNhbmRib3ggZW52aXJvbm1lbnQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhY2tlbmRJRFJlc29sdmVyOiBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZWVkU3ViQ29tbWFuZHM6IENvbW1hbmRNb2R1bGVbXSxcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3NlZWQnO1xuICAgIHRoaXMuZGVzY3JpYmUgPSAnU2VlZHMgc2FuZGJveCBlbnZpcm9ubWVudCc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPFNhbmRib3hDb21tYW5kR2xvYmFsT3B0aW9ucz4sXG4gICk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIHByaW50ZXIucHJpbnQoYCR7Zm9ybWF0LmNvbG9yKCdzZWVkIGlzIHJ1bm5pbmcuLi4nLCAnQmx1ZScpfWApO1xuICAgIGNvbnN0IGJhY2tlbmRJRCA9IGF3YWl0IHRoaXMuYmFja2VuZElEUmVzb2x2ZXIucmVzb2x2ZShhcmdzLmlkZW50aWZpZXIpO1xuICAgIGNvbnN0IHNlZWRQYXRoID0gcGF0aC5qb2luKCdhbXBsaWZ5JywgJ3NlZWQnLCAnc2VlZC50cycpO1xuICAgIHByb2Nlc3MuZW52LkFNUExJRllfQkFDS0VORF9JREVOVElGSUVSID0gSlNPTi5zdHJpbmdpZnkoYmFja2VuZElEKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdHNJbXBvcnQocGF0aFRvRmlsZVVSTChzZWVkUGF0aCkudG9TdHJpbmcoKSwgaW1wb3J0Lm1ldGEudXJsKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zdCBlcnJvciA9IGUgYXMgRXJyb3I7XG4gICAgICBpZiAoXG4gICAgICAgIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ0Nhbm5vdCBmaW5kIG1vZHVsZScpICYmXG4gICAgICAgIGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3NlZWQnKVxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBBbXBsaWZ5VXNlckVycm9yKFxuICAgICAgICAgICdTZWVkU2NyaXB0Tm90Rm91bmRFcnJvcicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgbWVzc2FnZTogYFRoZXJlIGlzIG5vIGZpbGUgdGhhdCBjb3JyZXNwb25kcyB0byAke3NlZWRQYXRofWAsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiBgUGxlYXNlIG1ha2UgYSBmaWxlIHRoYXQgY29ycmVzcG9uZHMgdG8gJHtzZWVkUGF0aH0gYW5kIHB1dCB5b3VyIHNlZWQgbG9naWMgaW4gaXRgLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3IsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoQW1wbGlmeUVycm9yLmlzQW1wbGlmeUVycm9yKGUpKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcihcbiAgICAgICAgICAnU2VlZGluZ0ZhaWxlZEVycm9yJyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBtZXNzYWdlOiAnU2VlZCBmYWlsZWQgdG8gY29tcGxldGUnLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjpcbiAgICAgICAgICAgICAgJ0NoZWNrIHRoZSBDYXVzZWQgYnkgZXJyb3IgYW5kIGZpeCBhbnkgaXNzdWVzIGluIHlvdXIgc2VlZCBzY3JpcHQnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZSBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiB1bmRlZmluZWQsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcHJpbnRlci5wcmludE5ld0xpbmUoKTtcbiAgICBwcmludGVyLnByaW50KGAke2Zvcm1hdC5zdWNjZXNzKCfinJQnKX0gc2VlZCBoYXMgc3VjY2Vzc2Z1bGx5IGNvbXBsZXRlZGApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndik6IEFyZ3Y8U2FuZGJveENvbW1hbmRHbG9iYWxPcHRpb25zPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzLmNvbW1hbmQodGhpcy5zZWVkU3ViQ29tbWFuZHMpLmNoZWNrKCgpID0+IHtcbiAgICAgIGNvbnN0IHNlZWRQYXRoID0gcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdhbXBsaWZ5JywgJ3NlZWQnLCAnc2VlZC50cycpO1xuICAgICAgaWYgKCFleGlzdHNTeW5jKHNlZWRQYXRoKSkge1xuICAgICAgICB0aHJvdyBuZXcgQW1wbGlmeVVzZXJFcnJvcignU2VlZFNjcmlwdE5vdEZvdW5kRXJyb3InLCB7XG4gICAgICAgICAgbWVzc2FnZTogYFRoZXJlIGlzIG5vIGZpbGUgdGhhdCBjb3JyZXNwb25kcyB0byAke3NlZWRQYXRofWAsXG4gICAgICAgICAgcmVzb2x1dGlvbjogYFBsZWFzZSBtYWtlIGEgZmlsZSB0aGF0IGNvcnJlc3BvbmRzIHRvICR7c2VlZFBhdGh9IGFuZCBwdXQgeW91ciBzZWVkIGxvZ2ljIGluIGl0YCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgfTtcbn1cbiJdfQ==