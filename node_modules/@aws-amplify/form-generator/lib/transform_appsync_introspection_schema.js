import os from 'os';
import { getGenericFromDataStore, } from '@aws-amplify/codegen-ui';
import { parse } from 'graphql';
// @graphql-codegen/core is moved to root package.json and bundled
// with esbuild due to https://github.com/aws-amplify/amplify-backend/issues/2901
// eslint-disable-next-line import/no-extraneous-dependencies
import * as graphqlCodegen from '@graphql-codegen/core';
import * as appsync from '@aws-amplify/appsync-modelgen-plugin';
import { DefaultDirectives } from '@aws-amplify/graphql-directives';
/**
 * Transforms an AppSync introspection schema for use in form generation
 */
export const transformIntrospectionSchema = async (modelIntrospectionSchema) => {
    const result = await appsync.preset.buildGeneratesSection({
        baseOutputDir: './',
        schema: parse(modelIntrospectionSchema),
        config: {
            directives: DefaultDirectives.map((directive) => directive.definition).join(os.EOL),
            isTimestampFieldsAdded: true,
            emitAuthProvider: true,
            generateIndexRules: true,
            handleListNullabilityTransparently: true,
            usePipelinedTransformer: true,
            transformerVersion: 2,
            respectPrimaryKeyAttributesOnConnectionField: true,
            improvePluralization: false,
            generateModelsForLazyLoadAndCustomSelectionSet: false,
            target: 'introspection',
            overrideOutputDir: './',
        },
        documents: [],
        pluginMap: {},
        presetConfig: {
            overrideOutputDir: null,
            target: 'typescript',
        },
        plugins: [],
    });
    const results = result.map((cfg) => {
        return graphqlCodegen.codegen({
            ...cfg,
            config: {
                ...cfg.config,
            },
            plugins: [
                {
                    appSyncLocalCodeGen: {},
                },
            ],
            pluginMap: {
                appSyncLocalCodeGen: appsync,
            },
        });
    });
    const [synced] = await Promise.all(results);
    return getGenericFromDataStore(JSON.parse(synced));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtX2FwcHN5bmNfaW50cm9zcGVjdGlvbl9zY2hlbWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHJhbnNmb3JtX2FwcHN5bmNfaW50cm9zcGVjdGlvbl9zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BCLE9BQU8sRUFFTCx1QkFBdUIsR0FDeEIsTUFBTSx5QkFBeUIsQ0FBQztBQUNqQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLGtFQUFrRTtBQUNsRSxpRkFBaUY7QUFDakYsNkRBQTZEO0FBQzdELE9BQU8sS0FBSyxjQUFjLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxLQUFLLE9BQU8sTUFBTSxzQ0FBc0MsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQWEsTUFBTSxpQ0FBaUMsQ0FBQztBQUUvRTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLEtBQUssRUFDL0Msd0JBQWdDLEVBQ0osRUFBRTtJQUM5QixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUM7UUFDeEQsYUFBYSxFQUFFLElBQUk7UUFDbkIsTUFBTSxFQUFFLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQztRQUN2QyxNQUFNLEVBQUU7WUFDTixVQUFVLEVBQUUsaUJBQWlCLENBQUMsR0FBRyxDQUMvQixDQUFDLFNBQW9CLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQy9DLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7WUFDZCxzQkFBc0IsRUFBRSxJQUFJO1lBQzVCLGdCQUFnQixFQUFFLElBQUk7WUFDdEIsa0JBQWtCLEVBQUUsSUFBSTtZQUN4QixrQ0FBa0MsRUFBRSxJQUFJO1lBQ3hDLHVCQUF1QixFQUFFLElBQUk7WUFDN0Isa0JBQWtCLEVBQUUsQ0FBQztZQUNyQiw0Q0FBNEMsRUFBRSxJQUFJO1lBQ2xELG9CQUFvQixFQUFFLEtBQUs7WUFDM0IsOENBQThDLEVBQUUsS0FBSztZQUNyRCxNQUFNLEVBQUUsZUFBZTtZQUN2QixpQkFBaUIsRUFBRSxJQUFJO1NBQ3hCO1FBQ0QsU0FBUyxFQUFFLEVBQUU7UUFDYixTQUFTLEVBQUUsRUFBRTtRQUNiLFlBQVksRUFBRTtZQUNaLGlCQUFpQixFQUFFLElBQUk7WUFDdkIsTUFBTSxFQUFFLFlBQVk7U0FDckI7UUFDRCxPQUFPLEVBQUUsRUFBRTtLQUNaLENBQUMsQ0FBQztJQUNILE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtRQUNqQyxPQUFPLGNBQWMsQ0FBQyxPQUFPLENBQUM7WUFDNUIsR0FBRyxHQUFHO1lBQ04sTUFBTSxFQUFFO2dCQUNOLEdBQUcsR0FBRyxDQUFDLE1BQU07YUFDZDtZQUNELE9BQU8sRUFBRTtnQkFDUDtvQkFDRSxtQkFBbUIsRUFBRSxFQUFFO2lCQUN4QjthQUNGO1lBQ0QsU0FBUyxFQUFFO2dCQUNULG1CQUFtQixFQUFFLE9BQU87YUFDN0I7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsT0FBTyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDckQsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCB7XG4gIEdlbmVyaWNEYXRhU2NoZW1hLFxuICBnZXRHZW5lcmljRnJvbURhdGFTdG9yZSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NvZGVnZW4tdWknO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tICdncmFwaHFsJztcbi8vIEBncmFwaHFsLWNvZGVnZW4vY29yZSBpcyBtb3ZlZCB0byByb290IHBhY2thZ2UuanNvbiBhbmQgYnVuZGxlZFxuLy8gd2l0aCBlc2J1aWxkIGR1ZSB0byBodHRwczovL2dpdGh1Yi5jb20vYXdzLWFtcGxpZnkvYW1wbGlmeS1iYWNrZW5kL2lzc3Vlcy8yOTAxXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWV4dHJhbmVvdXMtZGVwZW5kZW5jaWVzXG5pbXBvcnQgKiBhcyBncmFwaHFsQ29kZWdlbiBmcm9tICdAZ3JhcGhxbC1jb2RlZ2VuL2NvcmUnO1xuaW1wb3J0ICogYXMgYXBwc3luYyBmcm9tICdAYXdzLWFtcGxpZnkvYXBwc3luYy1tb2RlbGdlbi1wbHVnaW4nO1xuaW1wb3J0IHsgRGVmYXVsdERpcmVjdGl2ZXMsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9ncmFwaHFsLWRpcmVjdGl2ZXMnO1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgYW4gQXBwU3luYyBpbnRyb3NwZWN0aW9uIHNjaGVtYSBmb3IgdXNlIGluIGZvcm0gZ2VuZXJhdGlvblxuICovXG5leHBvcnQgY29uc3QgdHJhbnNmb3JtSW50cm9zcGVjdGlvblNjaGVtYSA9IGFzeW5jIChcbiAgbW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hOiBzdHJpbmcsXG4pOiBQcm9taXNlPEdlbmVyaWNEYXRhU2NoZW1hPiA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFwcHN5bmMucHJlc2V0LmJ1aWxkR2VuZXJhdGVzU2VjdGlvbih7XG4gICAgYmFzZU91dHB1dERpcjogJy4vJyxcbiAgICBzY2hlbWE6IHBhcnNlKG1vZGVsSW50cm9zcGVjdGlvblNjaGVtYSksXG4gICAgY29uZmlnOiB7XG4gICAgICBkaXJlY3RpdmVzOiBEZWZhdWx0RGlyZWN0aXZlcy5tYXAoXG4gICAgICAgIChkaXJlY3RpdmU6IERpcmVjdGl2ZSkgPT4gZGlyZWN0aXZlLmRlZmluaXRpb24sXG4gICAgICApLmpvaW4ob3MuRU9MKSxcbiAgICAgIGlzVGltZXN0YW1wRmllbGRzQWRkZWQ6IHRydWUsXG4gICAgICBlbWl0QXV0aFByb3ZpZGVyOiB0cnVlLFxuICAgICAgZ2VuZXJhdGVJbmRleFJ1bGVzOiB0cnVlLFxuICAgICAgaGFuZGxlTGlzdE51bGxhYmlsaXR5VHJhbnNwYXJlbnRseTogdHJ1ZSxcbiAgICAgIHVzZVBpcGVsaW5lZFRyYW5zZm9ybWVyOiB0cnVlLFxuICAgICAgdHJhbnNmb3JtZXJWZXJzaW9uOiAyLFxuICAgICAgcmVzcGVjdFByaW1hcnlLZXlBdHRyaWJ1dGVzT25Db25uZWN0aW9uRmllbGQ6IHRydWUsXG4gICAgICBpbXByb3ZlUGx1cmFsaXphdGlvbjogZmFsc2UsXG4gICAgICBnZW5lcmF0ZU1vZGVsc0ZvckxhenlMb2FkQW5kQ3VzdG9tU2VsZWN0aW9uU2V0OiBmYWxzZSxcbiAgICAgIHRhcmdldDogJ2ludHJvc3BlY3Rpb24nLFxuICAgICAgb3ZlcnJpZGVPdXRwdXREaXI6ICcuLycsXG4gICAgfSxcbiAgICBkb2N1bWVudHM6IFtdLFxuICAgIHBsdWdpbk1hcDoge30sXG4gICAgcHJlc2V0Q29uZmlnOiB7XG4gICAgICBvdmVycmlkZU91dHB1dERpcjogbnVsbCxcbiAgICAgIHRhcmdldDogJ3R5cGVzY3JpcHQnLFxuICAgIH0sXG4gICAgcGx1Z2luczogW10sXG4gIH0pO1xuICBjb25zdCByZXN1bHRzID0gcmVzdWx0Lm1hcCgoY2ZnKSA9PiB7XG4gICAgcmV0dXJuIGdyYXBocWxDb2RlZ2VuLmNvZGVnZW4oe1xuICAgICAgLi4uY2ZnLFxuICAgICAgY29uZmlnOiB7XG4gICAgICAgIC4uLmNmZy5jb25maWcsXG4gICAgICB9LFxuICAgICAgcGx1Z2luczogW1xuICAgICAgICB7XG4gICAgICAgICAgYXBwU3luY0xvY2FsQ29kZUdlbjoge30sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgcGx1Z2luTWFwOiB7XG4gICAgICAgIGFwcFN5bmNMb2NhbENvZGVHZW46IGFwcHN5bmMsXG4gICAgICB9LFxuICAgIH0pO1xuICB9KTtcblxuICBjb25zdCBbc3luY2VkXSA9IGF3YWl0IFByb21pc2UuYWxsKHJlc3VsdHMpO1xuICByZXR1cm4gZ2V0R2VuZXJpY0Zyb21EYXRhU3RvcmUoSlNPTi5wYXJzZShzeW5jZWQpKTtcbn07XG4iXX0=