import { AmplifyIOEventsBridgeSingletonFactory, PackageManagerControllerFactory, } from '@aws-amplify/cli-core';
import { FileWatchingSandbox } from './file_watching_sandbox.js';
import { BackendDeployerFactory } from '@aws-amplify/backend-deployer';
import { AmplifySandboxExecutor } from './sandbox_executor.js';
import { SSMClient } from '@aws-sdk/client-ssm';
import { getSecretClientWithAmplifyErrorHandling } from '@aws-amplify/backend-secret';
import { CloudWatchLogsClient } from '@aws-sdk/client-cloudwatch-logs';
import { LambdaClient } from '@aws-sdk/client-lambda';
import { BackendOutputClientFactory } from '@aws-amplify/deployed-backend-client';
import { LambdaFunctionLogStreamer } from './lambda_function_log_streamer.js';
import { CloudWatchLogEventMonitor } from './cloudwatch_logs_monitor.js';
/**
 * Factory to create a new sandbox
 */
export class SandboxSingletonFactory {
    sandboxIdResolver;
    sdkProfileResolver;
    printer;
    format;
    static instance;
    /**
     * sandboxIdResolver allows sandbox to lazily load the sandbox backend id on demand
     */
    constructor(sandboxIdResolver, sdkProfileResolver, printer, format) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.sdkProfileResolver = sdkProfileResolver;
        this.printer = printer;
        this.format = format;
    }
    /**
     * Returns a singleton instance of a Sandbox
     */
    getInstance = async () => {
        if (!SandboxSingletonFactory.instance) {
            const packageManagerControllerFactory = new PackageManagerControllerFactory(process.cwd(), this.printer);
            const cdkEventsBridgeIoHost = new AmplifyIOEventsBridgeSingletonFactory(this.printer).getInstance();
            const backendDeployerFactory = new BackendDeployerFactory(packageManagerControllerFactory.getPackageManagerController(), this.format, cdkEventsBridgeIoHost, this.sdkProfileResolver);
            SandboxSingletonFactory.instance = new FileWatchingSandbox(this.sandboxIdResolver, new AmplifySandboxExecutor(backendDeployerFactory.getInstance(), getSecretClientWithAmplifyErrorHandling(), this.printer), new SSMClient(), new LambdaFunctionLogStreamer(new LambdaClient(), new CloudWatchLogEventMonitor(new CloudWatchLogsClient()), BackendOutputClientFactory.getInstance(), this.printer), this.printer);
        }
        return SandboxSingletonFactory.instance;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zaW5nbGV0b25fZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zYW5kYm94X3NpbmdsZXRvbl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxxQ0FBcUMsRUFFckMsK0JBQStCLEdBRWhDLE1BQU0sdUJBQXVCLENBQUM7QUFDL0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFakUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdkUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUNsRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUd6RTs7R0FFRztBQUNILE1BQU0sT0FBTyx1QkFBdUI7SUFNZjtJQUNBO0lBQ0E7SUFDQTtJQVJYLE1BQU0sQ0FBQyxRQUFRLENBQXNCO0lBQzdDOztPQUVHO0lBQ0gsWUFDbUIsaUJBQTJDLEVBQzNDLGtCQUFzQyxFQUN0QyxPQUFnQixFQUNoQixNQUFjO1FBSGQsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUM5QixDQUFDO0lBRUo7O09BRUc7SUFDSCxXQUFXLEdBQUcsS0FBSyxJQUFzQixFQUFFO1FBQ3pDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUN0QyxNQUFNLCtCQUErQixHQUNuQyxJQUFJLCtCQUErQixDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkUsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLHFDQUFxQyxDQUNyRSxJQUFJLENBQUMsT0FBTyxDQUNiLENBQUMsV0FBVyxFQUFFLENBQUM7WUFFaEIsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLHNCQUFzQixDQUN2RCwrQkFBK0IsQ0FBQywyQkFBMkIsRUFBRSxFQUM3RCxJQUFJLENBQUMsTUFBTSxFQUNYLHFCQUFxQixFQUNyQixJQUFJLENBQUMsa0JBQWtCLENBQ3hCLENBQUM7WUFDRix1QkFBdUIsQ0FBQyxRQUFRLEdBQUcsSUFBSSxtQkFBbUIsQ0FDeEQsSUFBSSxDQUFDLGlCQUFpQixFQUN0QixJQUFJLHNCQUFzQixDQUN4QixzQkFBc0IsQ0FBQyxXQUFXLEVBQUUsRUFDcEMsdUNBQXVDLEVBQUUsRUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FDYixFQUNELElBQUksU0FBUyxFQUFFLEVBQ2YsSUFBSSx5QkFBeUIsQ0FDM0IsSUFBSSxZQUFZLEVBQUUsRUFDbEIsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLG9CQUFvQixFQUFFLENBQUMsRUFDekQsMEJBQTBCLENBQUMsV0FBVyxFQUFFLEVBQ3hDLElBQUksQ0FBQyxPQUFPLENBQ2IsRUFDRCxJQUFJLENBQUMsT0FBTyxDQUNiLENBQUM7UUFDSixDQUFDO1FBQ0QsT0FBTyx1QkFBdUIsQ0FBQyxRQUFRLENBQUM7SUFDMUMsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBbXBsaWZ5SU9FdmVudHNCcmlkZ2VTaW5nbGV0b25GYWN0b3J5LFxuICBGb3JtYXQsXG4gIFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnksXG4gIFByaW50ZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9jbGktY29yZSc7XG5pbXBvcnQgeyBGaWxlV2F0Y2hpbmdTYW5kYm94IH0gZnJvbSAnLi9maWxlX3dhdGNoaW5nX3NhbmRib3guanMnO1xuaW1wb3J0IHsgQmFja2VuZElkU2FuZGJveFJlc29sdmVyLCBTYW5kYm94IH0gZnJvbSAnLi9zYW5kYm94LmpzJztcbmltcG9ydCB7IEJhY2tlbmREZXBsb3llckZhY3RvcnkgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1kZXBsb3llcic7XG5pbXBvcnQgeyBBbXBsaWZ5U2FuZGJveEV4ZWN1dG9yIH0gZnJvbSAnLi9zYW5kYm94X2V4ZWN1dG9yLmpzJztcbmltcG9ydCB7IFNTTUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zc20nO1xuaW1wb3J0IHsgZ2V0U2VjcmV0Q2xpZW50V2l0aEFtcGxpZnlFcnJvckhhbmRsaW5nIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IENsb3VkV2F0Y2hMb2dzQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3Vkd2F0Y2gtbG9ncyc7XG5pbXBvcnQgeyBMYW1iZGFDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtbGFtYmRhJztcbmltcG9ydCB7IEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IExhbWJkYUZ1bmN0aW9uTG9nU3RyZWFtZXIgfSBmcm9tICcuL2xhbWJkYV9mdW5jdGlvbl9sb2dfc3RyZWFtZXIuanMnO1xuaW1wb3J0IHsgQ2xvdWRXYXRjaExvZ0V2ZW50TW9uaXRvciB9IGZyb20gJy4vY2xvdWR3YXRjaF9sb2dzX21vbml0b3IuanMnO1xuaW1wb3J0IHsgU0RLUHJvZmlsZVJlc29sdmVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5cbi8qKlxuICogRmFjdG9yeSB0byBjcmVhdGUgYSBuZXcgc2FuZGJveFxuICovXG5leHBvcnQgY2xhc3MgU2FuZGJveFNpbmdsZXRvbkZhY3Rvcnkge1xuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogU2FuZGJveCB8IHVuZGVmaW5lZDtcbiAgLyoqXG4gICAqIHNhbmRib3hJZFJlc29sdmVyIGFsbG93cyBzYW5kYm94IHRvIGxhemlseSBsb2FkIHRoZSBzYW5kYm94IGJhY2tlbmQgaWQgb24gZGVtYW5kXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNhbmRib3hJZFJlc29sdmVyOiBCYWNrZW5kSWRTYW5kYm94UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZGtQcm9maWxlUmVzb2x2ZXI6IFNES1Byb2ZpbGVSZXNvbHZlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByaW50ZXI6IFByaW50ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBmb3JtYXQ6IEZvcm1hdCxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2luZ2xldG9uIGluc3RhbmNlIG9mIGEgU2FuZGJveFxuICAgKi9cbiAgZ2V0SW5zdGFuY2UgPSBhc3luYyAoKTogUHJvbWlzZTxTYW5kYm94PiA9PiB7XG4gICAgaWYgKCFTYW5kYm94U2luZ2xldG9uRmFjdG9yeS5pbnN0YW5jZSkge1xuICAgICAgY29uc3QgcGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSA9XG4gICAgICAgIG5ldyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5KHByb2Nlc3MuY3dkKCksIHRoaXMucHJpbnRlcik7XG4gICAgICBjb25zdCBjZGtFdmVudHNCcmlkZ2VJb0hvc3QgPSBuZXcgQW1wbGlmeUlPRXZlbnRzQnJpZGdlU2luZ2xldG9uRmFjdG9yeShcbiAgICAgICAgdGhpcy5wcmludGVyLFxuICAgICAgKS5nZXRJbnN0YW5jZSgpO1xuXG4gICAgICBjb25zdCBiYWNrZW5kRGVwbG95ZXJGYWN0b3J5ID0gbmV3IEJhY2tlbmREZXBsb3llckZhY3RvcnkoXG4gICAgICAgIHBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlckZhY3RvcnkuZ2V0UGFja2FnZU1hbmFnZXJDb250cm9sbGVyKCksXG4gICAgICAgIHRoaXMuZm9ybWF0LFxuICAgICAgICBjZGtFdmVudHNCcmlkZ2VJb0hvc3QsXG4gICAgICAgIHRoaXMuc2RrUHJvZmlsZVJlc29sdmVyLFxuICAgICAgKTtcbiAgICAgIFNhbmRib3hTaW5nbGV0b25GYWN0b3J5Lmluc3RhbmNlID0gbmV3IEZpbGVXYXRjaGluZ1NhbmRib3goXG4gICAgICAgIHRoaXMuc2FuZGJveElkUmVzb2x2ZXIsXG4gICAgICAgIG5ldyBBbXBsaWZ5U2FuZGJveEV4ZWN1dG9yKFxuICAgICAgICAgIGJhY2tlbmREZXBsb3llckZhY3RvcnkuZ2V0SW5zdGFuY2UoKSxcbiAgICAgICAgICBnZXRTZWNyZXRDbGllbnRXaXRoQW1wbGlmeUVycm9ySGFuZGxpbmcoKSxcbiAgICAgICAgICB0aGlzLnByaW50ZXIsXG4gICAgICAgICksXG4gICAgICAgIG5ldyBTU01DbGllbnQoKSxcbiAgICAgICAgbmV3IExhbWJkYUZ1bmN0aW9uTG9nU3RyZWFtZXIoXG4gICAgICAgICAgbmV3IExhbWJkYUNsaWVudCgpLFxuICAgICAgICAgIG5ldyBDbG91ZFdhdGNoTG9nRXZlbnRNb25pdG9yKG5ldyBDbG91ZFdhdGNoTG9nc0NsaWVudCgpKSxcbiAgICAgICAgICBCYWNrZW5kT3V0cHV0Q2xpZW50RmFjdG9yeS5nZXRJbnN0YW5jZSgpLFxuICAgICAgICAgIHRoaXMucHJpbnRlcixcbiAgICAgICAgKSxcbiAgICAgICAgdGhpcy5wcmludGVyLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIFNhbmRib3hTaW5nbGV0b25GYWN0b3J5Lmluc3RhbmNlO1xuICB9O1xufVxuIl19