import { StackStatus } from '@aws-sdk/client-cloudformation';
import { BackendDeploymentStatus } from '../deployed_backend_client_factory.js';
/**
 * Maps CFN stack statuses to BackendMetadata status
 */
export class StackStatusMapper {
    /**
     * Converts CFN stack status to backend metadata status
     */
    translateStackStatus = (status) => {
        switch (status) {
            case StackStatus.CREATE_COMPLETE:
            case StackStatus.IMPORT_COMPLETE:
            case StackStatus.UPDATE_COMPLETE:
                return BackendDeploymentStatus.DEPLOYED;
            case StackStatus.CREATE_FAILED:
            case StackStatus.DELETE_FAILED:
            case StackStatus.IMPORT_ROLLBACK_COMPLETE:
            case StackStatus.IMPORT_ROLLBACK_FAILED:
            case StackStatus.ROLLBACK_COMPLETE:
            case StackStatus.ROLLBACK_FAILED:
            case StackStatus.UPDATE_ROLLBACK_COMPLETE:
            case StackStatus.UPDATE_ROLLBACK_FAILED:
            case StackStatus.UPDATE_FAILED:
                return BackendDeploymentStatus.FAILED;
            case StackStatus.CREATE_IN_PROGRESS:
            case StackStatus.IMPORT_IN_PROGRESS:
            case StackStatus.IMPORT_ROLLBACK_IN_PROGRESS:
            case StackStatus.REVIEW_IN_PROGRESS:
            case StackStatus.ROLLBACK_IN_PROGRESS:
            case StackStatus.UPDATE_COMPLETE_CLEANUP_IN_PROGRESS:
            case StackStatus.UPDATE_IN_PROGRESS:
            case StackStatus.UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS:
            case StackStatus.UPDATE_ROLLBACK_IN_PROGRESS:
                return BackendDeploymentStatus.DEPLOYING;
            case StackStatus.DELETE_IN_PROGRESS:
                return BackendDeploymentStatus.DELETING;
            case StackStatus.DELETE_COMPLETE:
                return BackendDeploymentStatus.DELETED;
            default:
                return BackendDeploymentStatus.UNKNOWN;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2tfc3RhdHVzX21hcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZXBsb3llZC1iYWNrZW5kLWNsaWVudC9zdGFja19zdGF0dXNfbWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM3RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUVoRjs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUI7O09BRUc7SUFDSCxvQkFBb0IsR0FBRyxDQUNyQixNQUF3QyxFQUNmLEVBQUU7UUFDM0IsUUFBUSxNQUFNLEVBQUUsQ0FBQztZQUNmLEtBQUssV0FBVyxDQUFDLGVBQWUsQ0FBQztZQUNqQyxLQUFLLFdBQVcsQ0FBQyxlQUFlLENBQUM7WUFDakMsS0FBSyxXQUFXLENBQUMsZUFBZTtnQkFDOUIsT0FBTyx1QkFBdUIsQ0FBQyxRQUFRLENBQUM7WUFFMUMsS0FBSyxXQUFXLENBQUMsYUFBYSxDQUFDO1lBQy9CLEtBQUssV0FBVyxDQUFDLGFBQWEsQ0FBQztZQUMvQixLQUFLLFdBQVcsQ0FBQyx3QkFBd0IsQ0FBQztZQUMxQyxLQUFLLFdBQVcsQ0FBQyxzQkFBc0IsQ0FBQztZQUN4QyxLQUFLLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQztZQUNuQyxLQUFLLFdBQVcsQ0FBQyxlQUFlLENBQUM7WUFDakMsS0FBSyxXQUFXLENBQUMsd0JBQXdCLENBQUM7WUFDMUMsS0FBSyxXQUFXLENBQUMsc0JBQXNCLENBQUM7WUFDeEMsS0FBSyxXQUFXLENBQUMsYUFBYTtnQkFDNUIsT0FBTyx1QkFBdUIsQ0FBQyxNQUFNLENBQUM7WUFFeEMsS0FBSyxXQUFXLENBQUMsa0JBQWtCLENBQUM7WUFDcEMsS0FBSyxXQUFXLENBQUMsa0JBQWtCLENBQUM7WUFDcEMsS0FBSyxXQUFXLENBQUMsMkJBQTJCLENBQUM7WUFDN0MsS0FBSyxXQUFXLENBQUMsa0JBQWtCLENBQUM7WUFDcEMsS0FBSyxXQUFXLENBQUMsb0JBQW9CLENBQUM7WUFDdEMsS0FBSyxXQUFXLENBQUMsbUNBQW1DLENBQUM7WUFDckQsS0FBSyxXQUFXLENBQUMsa0JBQWtCLENBQUM7WUFDcEMsS0FBSyxXQUFXLENBQUMsNENBQTRDLENBQUM7WUFDOUQsS0FBSyxXQUFXLENBQUMsMkJBQTJCO2dCQUMxQyxPQUFPLHVCQUF1QixDQUFDLFNBQVMsQ0FBQztZQUUzQyxLQUFLLFdBQVcsQ0FBQyxrQkFBa0I7Z0JBQ2pDLE9BQU8sdUJBQXVCLENBQUMsUUFBUSxDQUFDO1lBRTFDLEtBQUssV0FBVyxDQUFDLGVBQWU7Z0JBQzlCLE9BQU8sdUJBQXVCLENBQUMsT0FBTyxDQUFDO1lBRXpDO2dCQUNFLE9BQU8sdUJBQXVCLENBQUMsT0FBTyxDQUFDO1FBQzNDLENBQUM7SUFDSCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrU3RhdHVzIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IEJhY2tlbmREZXBsb3ltZW50U3RhdHVzIH0gZnJvbSAnLi4vZGVwbG95ZWRfYmFja2VuZF9jbGllbnRfZmFjdG9yeS5qcyc7XG5cbi8qKlxuICogTWFwcyBDRk4gc3RhY2sgc3RhdHVzZXMgdG8gQmFja2VuZE1ldGFkYXRhIHN0YXR1c1xuICovXG5leHBvcnQgY2xhc3MgU3RhY2tTdGF0dXNNYXBwZXIge1xuICAvKipcbiAgICogQ29udmVydHMgQ0ZOIHN0YWNrIHN0YXR1cyB0byBiYWNrZW5kIG1ldGFkYXRhIHN0YXR1c1xuICAgKi9cbiAgdHJhbnNsYXRlU3RhY2tTdGF0dXMgPSAoXG4gICAgc3RhdHVzOiBTdGFja1N0YXR1cyB8IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgKTogQmFja2VuZERlcGxveW1lbnRTdGF0dXMgPT4ge1xuICAgIHN3aXRjaCAoc3RhdHVzKSB7XG4gICAgICBjYXNlIFN0YWNrU3RhdHVzLkNSRUFURV9DT01QTEVURTpcbiAgICAgIGNhc2UgU3RhY2tTdGF0dXMuSU1QT1JUX0NPTVBMRVRFOlxuICAgICAgY2FzZSBTdGFja1N0YXR1cy5VUERBVEVfQ09NUExFVEU6XG4gICAgICAgIHJldHVybiBCYWNrZW5kRGVwbG95bWVudFN0YXR1cy5ERVBMT1lFRDtcblxuICAgICAgY2FzZSBTdGFja1N0YXR1cy5DUkVBVEVfRkFJTEVEOlxuICAgICAgY2FzZSBTdGFja1N0YXR1cy5ERUxFVEVfRkFJTEVEOlxuICAgICAgY2FzZSBTdGFja1N0YXR1cy5JTVBPUlRfUk9MTEJBQ0tfQ09NUExFVEU6XG4gICAgICBjYXNlIFN0YWNrU3RhdHVzLklNUE9SVF9ST0xMQkFDS19GQUlMRUQ6XG4gICAgICBjYXNlIFN0YWNrU3RhdHVzLlJPTExCQUNLX0NPTVBMRVRFOlxuICAgICAgY2FzZSBTdGFja1N0YXR1cy5ST0xMQkFDS19GQUlMRUQ6XG4gICAgICBjYXNlIFN0YWNrU3RhdHVzLlVQREFURV9ST0xMQkFDS19DT01QTEVURTpcbiAgICAgIGNhc2UgU3RhY2tTdGF0dXMuVVBEQVRFX1JPTExCQUNLX0ZBSUxFRDpcbiAgICAgIGNhc2UgU3RhY2tTdGF0dXMuVVBEQVRFX0ZBSUxFRDpcbiAgICAgICAgcmV0dXJuIEJhY2tlbmREZXBsb3ltZW50U3RhdHVzLkZBSUxFRDtcblxuICAgICAgY2FzZSBTdGFja1N0YXR1cy5DUkVBVEVfSU5fUFJPR1JFU1M6XG4gICAgICBjYXNlIFN0YWNrU3RhdHVzLklNUE9SVF9JTl9QUk9HUkVTUzpcbiAgICAgIGNhc2UgU3RhY2tTdGF0dXMuSU1QT1JUX1JPTExCQUNLX0lOX1BST0dSRVNTOlxuICAgICAgY2FzZSBTdGFja1N0YXR1cy5SRVZJRVdfSU5fUFJPR1JFU1M6XG4gICAgICBjYXNlIFN0YWNrU3RhdHVzLlJPTExCQUNLX0lOX1BST0dSRVNTOlxuICAgICAgY2FzZSBTdGFja1N0YXR1cy5VUERBVEVfQ09NUExFVEVfQ0xFQU5VUF9JTl9QUk9HUkVTUzpcbiAgICAgIGNhc2UgU3RhY2tTdGF0dXMuVVBEQVRFX0lOX1BST0dSRVNTOlxuICAgICAgY2FzZSBTdGFja1N0YXR1cy5VUERBVEVfUk9MTEJBQ0tfQ09NUExFVEVfQ0xFQU5VUF9JTl9QUk9HUkVTUzpcbiAgICAgIGNhc2UgU3RhY2tTdGF0dXMuVVBEQVRFX1JPTExCQUNLX0lOX1BST0dSRVNTOlxuICAgICAgICByZXR1cm4gQmFja2VuZERlcGxveW1lbnRTdGF0dXMuREVQTE9ZSU5HO1xuXG4gICAgICBjYXNlIFN0YWNrU3RhdHVzLkRFTEVURV9JTl9QUk9HUkVTUzpcbiAgICAgICAgcmV0dXJuIEJhY2tlbmREZXBsb3ltZW50U3RhdHVzLkRFTEVUSU5HO1xuXG4gICAgICBjYXNlIFN0YWNrU3RhdHVzLkRFTEVURV9DT01QTEVURTpcbiAgICAgICAgcmV0dXJuIEJhY2tlbmREZXBsb3ltZW50U3RhdHVzLkRFTEVURUQ7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBCYWNrZW5kRGVwbG95bWVudFN0YXR1cy5VTktOT1dOO1xuICAgIH1cbiAgfTtcbn1cbiJdfQ==