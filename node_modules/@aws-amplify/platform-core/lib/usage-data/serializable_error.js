"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerializableError = void 0;
const path_1 = __importDefault(require("path"));
const url_1 = require("url");
const os_1 = require("os");
/**
 * Wrapper around Error for serialization for usage metrics
 */
class SerializableError {
    name;
    message;
    details;
    trace;
    // breakdown of filePathRegex:
    // (file:/+)? -> matches optional file url prefix
    // homedir()/process.cwd() -> users home directory or current working directory, replacing \ with /
    // [\\w.\\-_@\\\\/]+ -> matches nested directories and file name
    filePathRegex = new RegExp(`(file:/+)?(${(0, os_1.homedir)().replaceAll('\\', '/')}|${process.cwd().replaceAll('\\', '/')})[\\w.\\-_@\\\\/]+`, 'g');
    stackTraceRegex = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
    arnRegex = /arn:[a-z0-9][-.a-z0-9]{0,62}:[A-Za-z0-9][A-Za-z0-9_/.-]{0,62}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9_/.-]{0,63}:[A-Za-z0-9][A-Za-z0-9:_/+=,@.-]{0,1023}/g;
    stackRegex = /amplify-[a-zA-Z0-9-]+/g;
    /**
     * constructor for SerializableError
     */
    constructor(error) {
        this.name =
            'code' in error && error.code
                ? this.sanitize(error.code)
                : error.name;
        this.message = this.anonymizePaths(this.sanitize(error.message));
        this.details =
            'details' in error
                ? this.anonymizePaths(this.sanitize(error.details))
                : undefined;
        this.trace = this.extractStackTrace(error);
    }
    extractStackTrace = (error) => {
        const result = [];
        if (error.stack) {
            const stack = error.stack.split('\n');
            stack.forEach((line) => {
                const match = this.stackTraceRegex.exec(line);
                if (match) {
                    const [, methodName, file, lineNumber, columnNumber] = match;
                    result.push({
                        methodName,
                        file,
                        lineNumber,
                        columnNumber,
                    });
                }
            });
            const processedPaths = this.processPaths(result.map((trace) => trace.file));
            result.forEach((trace, index) => {
                trace.file = processedPaths[index];
            });
        }
        return result;
    };
    anonymizePaths = (str) => {
        let result = str;
        const matches = [...result.matchAll(this.filePathRegex)];
        for (const match of matches) {
            result = result.replace(match[0], this.processPaths([match[0]])[0]);
        }
        return result;
    };
    processPaths = (paths) => {
        return paths.map((tracePath) => {
            let result = tracePath;
            if (this.isURLFilePath(result)) {
                result = (0, url_1.fileURLToPath)(result);
            }
            if (path_1.default.isAbsolute(result)) {
                return path_1.default.relative(process.cwd(), result);
            }
            return result;
        });
    };
    removeARN = (str) => {
        return str?.replace(this.arnRegex, '<escaped ARN>') ?? '';
    };
    removeStackIdentifier = (str) => {
        return str?.replace(this.stackRegex, '<escaped stack>') ?? '';
    };
    sanitize = (str) => {
        let result = str;
        result = this.removeARN(result);
        result = this.removeStackIdentifier(result);
        return result.replaceAll(/["❌]/g, '');
    };
    isURLFilePath = (path) => {
        try {
            new URL(path);
            return path.startsWith('file:');
        }
        catch {
            return false;
        }
    };
}
exports.SerializableError = SerializableError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXphYmxlX2Vycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VzYWdlLWRhdGEvc2VyaWFsaXphYmxlX2Vycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdEQUF3QjtBQUN4Qiw2QkFBb0M7QUFDcEMsMkJBQTZCO0FBRTdCOztHQUVHO0FBQ0gsTUFBYSxpQkFBaUI7SUFDNUIsSUFBSSxDQUFTO0lBQ2IsT0FBTyxDQUFTO0lBQ2hCLE9BQU8sQ0FBVTtJQUNqQixLQUFLLENBQVc7SUFFaEIsOEJBQThCO0lBQzlCLGlEQUFpRDtJQUNqRCxtR0FBbUc7SUFDbkcsZ0VBQWdFO0lBQ3hELGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FDaEMsY0FBYyxJQUFBLFlBQU8sR0FBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLG9CQUFvQixFQUN4RyxHQUFHLENBQ0osQ0FBQztJQUNNLGVBQWUsR0FDckIsK0ZBQStGLENBQUM7SUFDMUYsUUFBUSxHQUNkLG9KQUFvSixDQUFDO0lBQy9JLFVBQVUsR0FBRyx3QkFBd0IsQ0FBQztJQUM5Qzs7T0FFRztJQUNILFlBQVksS0FBWTtRQUN0QixJQUFJLENBQUMsSUFBSTtZQUNQLE1BQU0sSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLElBQUk7Z0JBQzNCLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFjLENBQUM7Z0JBQ3JDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxPQUFPO1lBQ1YsU0FBUyxJQUFJ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WSxFQUFVLEVBQUU7UUFDM0MsT0FBTyxHQUFHLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVELENBQUMsQ0FBQztJQUVNLHFCQUFxQixHQUFHLENBQUMsR0FBWSxFQUFVLEVBQUU7UUFDdkQsT0FBTyxHQUFHLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEUsQ0FBQyxDQUFDO0lBRU0sUUFBUSxHQUFHLENBQUMsR0FBVyxFQUFFLEVBQUU7UUFDakMsSUFBSSxNQUFNLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsT0FBTyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUM7SUFFTSxhQUFhLEdBQUcsQ0FBQyxJQUFZLEVBQVcsRUFBRTtRQUNoRCxJQUFJLENBQUM7WUFDSCxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNkLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNsQyxDQUFDO1FBQUMsTUFBTSxDQUFDO1lBQ1AsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0NBQ0g7QUE1R0QsOENBNEdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcbmltcG9ydCB7IGhvbWVkaXIgfSBmcm9tICdvcyc7XG5cbi8qKlxuICogV3JhcHBlciBhcm91bmQgRXJyb3IgZm9yIHNlcmlhbGl6YXRpb24gZm9yIHVzYWdlIG1ldHJpY3NcbiAqL1xuZXhwb3J0IGNsYXNzIFNlcmlhbGl6YWJsZUVycm9yIHtcbiAgbmFtZTogc3RyaW5nO1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIGRldGFpbHM/OiBzdHJpbmc7XG4gIHRyYWNlPzogVHJhY2VbXTtcblxuICAvLyBicmVha2Rvd24gb2YgZmlsZVBhdGhSZWdleDpcbiAgLy8gKGZpbGU6LyspPyAtPiBtYXRjaGVzIG9wdGlvbmFsIGZpbGUgdXJsIHByZWZpeFxuICAvLyBob21lZGlyKCkvcHJvY2Vzcy5jd2QoKSAtPiB1c2VycyBob21lIGRpcmVjdG9yeSBvciBjdXJyZW50IHdvcmtpbmcgZGlyZWN0b3J5LCByZXBsYWNpbmcgXFwgd2l0aCAvXG4gIC8vIFtcXFxcdy5cXFxcLV9AXFxcXFxcXFwvXSsgLT4gbWF0Y2hlcyBuZXN0ZWQgZGlyZWN0b3JpZXMgYW5kIGZpbGUgbmFtZVxuICBwcml2YXRlIGZpbGVQYXRoUmVnZXggPSBuZXcgUmVnRXhwKFxuICAgIGAoZmlsZTovKyk/KCR7aG9tZWRpcigpLnJlcGxhY2VBbGwoJ1xcXFwnLCAnLycpfXwke3Byb2Nlc3MuY3dkKCkucmVwbGFjZUFsbCgnXFxcXCcsICcvJyl9KVtcXFxcdy5cXFxcLV9AXFxcXFxcXFwvXStgLFxuICAgICdnJyxcbiAgKTtcbiAgcHJpdmF0ZSBzdGFja1RyYWNlUmVnZXggPVxuICAgIC9eXFxzKmF0ICg/OigoPzpcXFtvYmplY3Qgb2JqZWN0XFxdKT9bXlxcXFwvXSsoPzogXFxbYXMgXFxTK1xcXSk/KSApP1xcKD8oLio/KTooXFxkKykoPzo6KFxcZCspKT9cXCk/XFxzKiQvaTtcbiAgcHJpdmF0ZSBhcm5SZWdleCA9XG4gICAgL2FybjpbYS16MC05XVstLmEtejAtOV17MCw2Mn06W0EtWmEtejAtOV1bQS1aYS16MC05Xy8uLV17MCw2Mn06W0EtWmEtejAtOV8vLi1dezAsNjN9OltBLVphLXowLTlfLy4tXXswLDYzfTpbQS1aYS16MC05XVtBLVphLXowLTk6Xy8rPSxALi1dezAsMTAyM30vZztcbiAgcHJpdmF0ZSBzdGFja1JlZ2V4ID0gL2FtcGxpZnktW2EtekEtWjAtOS1dKy9nO1xuICAvKipcbiAgICogY29uc3RydWN0b3IgZm9yIFNlcmlhbGl6YWJsZUVycm9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcihlcnJvcjogRXJyb3IpIHtcbiAgICB0aGlzLm5hbWUgPVxuICAgICAgJ2NvZGUnIGluIGVycm9yICYmIGVycm9yLmNvZGVcbiAgICAgICAgPyB0aGlzLnNhbml0aXplKGVycm9yLmNvZGUgYXMgc3RyaW5nKVxuICAgICAgICA6IGVycm9yLm5hbWU7XG4gICAgdGhpcy5tZXNzYWdlID0gdGhpcy5hbm9ueW1pemVQYXRocyh0aGlzLnNhbml0aXplKGVycm9yLm1lc3NhZ2UpKTtcbiAgICB0aGlzLmRldGFpbHMgPVxuICAgICAgJ2RldGFpbHMnIGluIGVycm9yXG4gICAgICAgID8gdGhpcy5hbm9ueW1pemVQYXRocyh0aGlzLnNhbml0aXplKGVycm9yLmRldGFpbHMgYXMgc3RyaW5nKSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy50cmFjZSA9IHRoaXMuZXh0cmFjdFN0YWNrVHJhY2UoZXJyb3IpO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0U3RhY2tUcmFjZSA9IChlcnJvcjogRXJyb3IpOiBUcmFjZVtdID0+IHtcbiAgICBjb25zdCByZXN1bHQ6IFRyYWNlW10gPSBbXTtcbiAgICBpZiAoZXJyb3Iuc3RhY2spIHtcbiAgICAgIGNvbnN0IHN0YWNrID0gZXJyb3Iuc3RhY2suc3BsaXQoJ1xcbicpO1xuICAgICAgc3RhY2suZm9yRWFjaCgobGluZSkgPT4ge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHRoaXMuc3RhY2tUcmFjZVJlZ2V4LmV4ZWMobGluZSk7XG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGNvbnN0IFssIG1ldGhvZE5hbWUsIGZpbGUsIGxpbmVOdW1iZXIsIGNvbHVtbk51bWJlcl0gPSBtYXRjaDtcbiAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICBtZXRob2ROYW1lLFxuICAgICAgICAgICAgZmlsZSxcbiAgICAgICAgICAgIGxpbmVOdW1iZXIsXG4gICAgICAgICAgICBjb2x1bW5OdW1iZXIsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgY29uc3QgcHJvY2Vzc2VkUGF0aHMgPSB0aGlzLnByb2Nlc3NQYXRocyhcbiAgICAgICAgcmVzdWx0Lm1hcCgodHJhY2UpID0+IHRyYWNlLmZpbGUpLFxuICAgICAgKTtcbiAgICAgIHJlc3VsdC5mb3JFYWNoKCh0cmFjZSwgaW5kZXgpID0+IHtcbiAgICAgICAgdHJhY2UuZmlsZSA9IHByb2Nlc3NlZFBhdGhzW2luZGV4XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHByaXZhdGUgYW5vbnltaXplUGF0aHMgPSAoc3RyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgIGxldCByZXN1bHQgPSBzdHI7XG4gICAgY29uc3QgbWF0Y2hlcyA9IFsuLi5yZXN1bHQubWF0Y2hBbGwodGhpcy5maWxlUGF0aFJlZ2V4KV07XG4gICAgZm9yIChjb25zdCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShtYXRjaFswXSwgdGhpcy5wcm9jZXNzUGF0aHMoW21hdGNoWzBdXSlbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgcHJpdmF0ZSBwcm9jZXNzUGF0aHMgPSAocGF0aHM6IHN0cmluZ1tdKTogc3RyaW5nW10gPT4ge1xuICAgIHJldHVybiBwYXRocy5tYXAoKHRyYWNlUGF0aCkgPT4ge1xuICAgICAgbGV0IHJlc3VsdCA9IHRyYWNlUGF0aDtcbiAgICAgIGlmICh0aGlzLmlzVVJMRmlsZVBhdGgocmVzdWx0KSkge1xuICAgICAgICByZXN1bHQgPSBmaWxlVVJMVG9QYXRoKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZiAocGF0aC5pc0Fic29sdXRlKHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHBhdGgucmVsYXRpdmUocHJvY2Vzcy5jd2QoKSwgcmVzdWx0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgfTtcblxuICBwcml2YXRlIHJlbW92ZUFSTiA9IChzdHI/OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgIHJldHVybiBzdHI/LnJlcGxhY2UodGhpcy5hcm5SZWdleCwgJzxlc2NhcGVkIEFSTj4nKSA/PyAnJztcbiAgfTtcblxuICBwcml2YXRlIHJlbW92ZVN0YWNrSWRlbnRpZmllciA9IChzdHI/OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgIHJldHVybiBzdHI/LnJlcGxhY2UodGhpcy5zdGFja1JlZ2V4LCAnPGVzY2FwZWQgc3RhY2s+JykgPz8gJyc7XG4gIH07XG5cbiAgcHJpdmF0ZSBzYW5pdGl6ZSA9IChzdHI6IHN0cmluZykgPT4ge1xuICAgIGxldCByZXN1bHQgPSBzdHI7XG4gICAgcmVzdWx0ID0gdGhpcy5yZW1vdmVBUk4ocmVzdWx0KTtcbiAgICByZXN1bHQgPSB0aGlzLnJlbW92ZVN0YWNrSWRlbnRpZmllcihyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQucmVwbGFjZUFsbCgvW1wi4p2MXS9nLCAnJyk7XG4gIH07XG5cbiAgcHJpdmF0ZSBpc1VSTEZpbGVQYXRoID0gKHBhdGg6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xuICAgIHRyeSB7XG4gICAgICBuZXcgVVJMKHBhdGgpO1xuICAgICAgcmV0dXJuIHBhdGguc3RhcnRzV2l0aCgnZmlsZTonKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG5cbnR5cGUgVHJhY2UgPSB7XG4gIG1ldGhvZE5hbWU6IHN0cmluZztcbiAgZmlsZTogc3RyaW5nO1xuICBsaW5lTnVtYmVyOiBzdHJpbmc7XG4gIGNvbHVtbk51bWJlcjogc3RyaW5nO1xufTtcbiJdfQ==