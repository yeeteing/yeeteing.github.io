"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = void 0;
const entity_1 = require("./entity");
const relationship_1 = require("./relationship");
class Database {
    static entitiesOnly(entities) {
        return new Database(entities, relationship_1.NO_RELATIONSHIPS);
    }
    constructor(entities, relationships) {
        this.idCtr = 0;
        this.schema = {
            ...entities,
            ...relationships({
                relationship: (fromKey, toKey) => (0, relationship_1.relationshipCollection)((id) => this.get(fromKey, id), (id) => this.get(toKey, id)),
            }),
        };
    }
    id() {
        return `${this.idCtr++}`;
    }
    /**
     * Allocate an ID and store
     */
    allocate(key, entity) {
        return this.store(key, this.e(entity));
    }
    /**
     * Store with a preallocated ID
     */
    store(key, entity) {
        const coll = this.schema[key];
        coll.add(entity);
        return entity;
    }
    /**
     * Get an entity by key
     */
    get(key, id) {
        const coll = this.schema[key];
        const ret = coll.entities.get(typeof id === 'string' ? id : id.$ref);
        if (!ret) {
            throw new Error(`No such ${String(key)}: ${id}`);
        }
        return ret;
    }
    /**
     * All entities of a given type
     */
    all(key) {
        const coll = this.schema[key];
        return Array.from(coll.entities.values());
    }
    /**
     * Lookup an entity by index
     */
    lookup(key, index, lookup, value) {
        const coll = this.schema[key];
        const ids = coll.indexes[index].lookups[lookup](value);
        return addOnlyMethod(ids.map((id) => coll.entities.get(id)), `${String(key)} with ${String(index)} ${String(lookup)} ${JSON.stringify(value)}`);
    }
    /**
     * Allocate an ID and store if the entity does not yet exist
     */
    findOrAllocate(key, index, lookup, entity) {
        const res = this.lookup(key, index, lookup, entity[index]);
        if (res.length) {
            return res.only();
        }
        return this.allocate(key, entity);
    }
    link(key, from, to, attributes) {
        const col = this.schema[key];
        col.add(from, to, attributes);
    }
    /**
     * Follow a link
     */
    follow(key, from) {
        var _a;
        const col = this.schema[key];
        const toLinks = (_a = col.forward.get(from.$id)) !== null && _a !== void 0 ? _a : [];
        const ret = toLinks.map((i) => ({ entity: col.toColl(i.$id), ...removeId(i) }));
        return addOnlyMethod(ret, `${String(key)} from ${from}`);
    }
    /**
     * Follow incoming links backwards
     */
    incoming(key, to) {
        var _a;
        const col = this.schema[key];
        const fromIds = (_a = col.backward.get(to.$id)) !== null && _a !== void 0 ? _a : [];
        const ret = fromIds.map((i) => ({ entity: col.fromColl(i.$id), ...removeId(i) }));
        return addOnlyMethod(ret, `${String(key)} to ${to}`);
    }
    e(entity) {
        return {
            $id: this.id(),
            ...entity,
        };
    }
    /**
     * Turn the current database collection into something that can be stored.
     */
    save() {
        return {
            idCtr: this.idCtr,
            schema: dehydrate(this.schema),
        };
        function dehydrate(x) {
            if ((0, entity_1.isEntityCollection)(x)) {
                return x.dehydrate();
            }
            if ((0, relationship_1.isRelationshipCollection)(x)) {
                return x.dehydrate();
            }
            if (Array.isArray(x)) {
                return x.map(dehydrate);
            }
            if (!!x && typeof x === 'object') {
                return Object.fromEntries(Object.entries(x).map(([k, v]) => [k, dehydrate(v)]));
            }
            return x;
        }
    }
    load(db) {
        this.idCtr = db.idCtr;
        hydrate(this.schema, db.schema);
        function hydrate(proto, x) {
            if ((0, entity_1.isEntityCollection)(proto)) {
                proto.hydrateFrom(x);
            }
            if ((0, relationship_1.isRelationshipCollection)(proto)) {
                proto.hydrateFrom(x);
            }
            if (Array.isArray(x)) {
                x.forEach(hydrate);
            }
            if (!!proto && typeof proto === 'object' && !!x && typeof x === 'object') {
                for (const [k, v] of Object.entries(proto)) {
                    hydrate(v, x[k]);
                }
            }
        }
    }
}
exports.Database = Database;
function removeId(x) {
    const ret = { ...x };
    delete ret.$id;
    return ret;
}
function addOnlyMethod(xs, description) {
    return Object.defineProperties(xs, {
        only: {
            enumerable: false,
            value: () => {
                if (xs.length !== 1) {
                    throw new Error(`Expected exactly 1 ${description}, found ${xs.length}`);
                }
                return xs[0];
            },
        },
    });
}
//# sourceMappingURL=data:application/json;base64,