"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttributionMetadataStorage = void 0;
const _os = __importStar(require("os"));
const platform_core_1 = require("@aws-amplify/platform-core");
/**
 * Stores BI metrics information in stack descriptions
 */
class AttributionMetadataStorage {
    os;
    packageJsonReader;
    /**
     * Constructor with props for injecting test mocks
     */
    constructor(os = _os, packageJsonReader = new platform_core_1.PackageJsonReader()) {
        this.os = os;
        this.packageJsonReader = packageJsonReader;
    }
    /**
     * Stores an attribution metadata string in the stack description of the provided stack
     * Does nothing if the stack already has a non-empty description
     */
    storeAttributionMetadata = (stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata = {}) => {
        if (typeof stack.templateOptions.description === 'string' &&
            stack.templateOptions.description.length > 0) {
            // don't overwrite an existing description
            return;
        }
        stack.templateOptions.description = JSON.stringify(this.getAttributionMetadata(stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata));
    };
    getAttributionMetadata = (stack, stackType, libraryPackageJsonAbsolutePath, additionalMetadata) => ({
        createdOn: this.getPlatform(),
        createdBy: this.getDeploymentEngineType(stack),
        createdWith: this.packageJsonReader.read(libraryPackageJsonAbsolutePath).version ?? '', // This shouldn't happen, regardless we shouldn't throw for attribution
        stackType: stackType,
        metadata: additionalMetadata,
    });
    getDeploymentEngineType = (stack) => {
        const deploymentType = stack.node.tryGetContext(platform_core_1.CDKContextKey.DEPLOYMENT_TYPE);
        if (deploymentType === undefined) {
            // if no deployment type context value is set, assume the construct is being used in a native CDK project
            return 'AmplifyCDK';
        }
        switch (deploymentType) {
            case 'branch':
                return 'AmplifyPipelineDeploy';
            case 'sandbox':
                return 'AmplifySandbox';
            default:
                throw new Error(`Unknown ${platform_core_1.CDKContextKey.DEPLOYMENT_TYPE} CDK context value "${deploymentType}"`);
        }
    };
    getPlatform = () => {
        switch (this.os.platform()) {
            case 'darwin':
                return 'Mac';
            case 'win32':
                return 'Windows';
            case 'linux':
                return 'Linux';
            default:
                return 'Other';
        }
    };
}
exports.AttributionMetadataStorage = AttributionMetadataStorage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmVfYXR0cmlidXRpb25fbWV0YWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc3RvcmVfYXR0cmlidXRpb25fbWV0YWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0Esd0NBQTBCO0FBQzFCLDhEQUE4RTtBQUc5RTs7R0FFRztBQUNILE1BQWEsMEJBQTBCO0lBS2xCO0lBQ0E7SUFMbkI7O09BRUc7SUFDSCxZQUNtQixLQUFpQixHQUFHLEVBQ3BCLG9CQUFvQixJQUFJLGlDQUFpQixFQUFFO1FBRDNDLE9BQUUsR0FBRixFQUFFLENBQWtCO1FBQ3BCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBMEI7SUFDM0QsQ0FBQztJQUVKOzs7T0FHRztJQUNILHdCQUF3QixHQUFHLENBQ3pCLEtBQVksRUFDWixTQUFpQixFQUNqQiw4QkFBc0MsRUFDdEMscUJBQTZDLEVBQUUsRUFDekMsRUFBRTtRQUNSLElBQ0UsT0FBTyxLQUFLLENBQUMsZUFBZSxDQUFDLFdBQVcsS0FBSyxRQUFRO1lBQ3JELEtBQUssQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQzVDLENBQUM7WUFDRCwwQ0FBMEM7WUFDMUMsT0FBTztRQUNULENBQUM7UUFDRCxLQUFLLENBQUMsZUFBZSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUNoRCxJQUFJLENBQUMsc0JBQXNCLENBQ3pCLEtBQUssRUFDTCxTQUFTLEVBQ1QsOEJBQThCLEVBQzlCLGtCQUFrQixDQUNuQixDQUNGLENBQUM7SUFDSixDQUFDLENBQUM7SUFFTSxzQkFBc0IsR0FBRyxDQUMvQixLQUFZLEVBQ1osU0FBaUIsRUFDakIsOEJBQXNDLEVBQ3RDLGtCQUEwQyxFQUNyQixFQUFFLENBQUMsQ0FBQztRQUN6QixTQUFTLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUM3QixTQUFTLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEtBQUssQ0FBQztRQUM5QyxXQUFXLEVBQ1QsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLEVBQUUsdUVBQXVFO1FBQ3BKLFNBQVMsRUFBRSxTQUFTO1FBQ3BCLFFBQVEsRUFBRSxrQkFBa0I7S0FDN0IsQ0FBQyxDQUFDO0lBRUssdUJBQXVCLEdBQUcsQ0FBQyxLQUFZLEVBQXdCLEVBQUU7UUFDdkUsTUFBTSxjQUFjLEdBQStCLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUN6RSw2QkFBYSxDQUFDLGVBQWUsQ0FDOUIsQ0FBQztRQUVGLElBQUksY0FBYyxLQUFLLFNBQVMsRUFBRSxDQUFDO1lBQ2pDLHlHQUF5RztZQUN6RyxPQUFPLFlBQVksQ0FBQztRQUN0QixDQUFDO1FBRUQsUUFBUSxjQUFjLEVBQUUsQ0FBQztZQUN2QixLQUFLLFFBQVE7Z0JBQ1gsT0FBTyx1QkFBdUIsQ0FBQztZQUNqQyxLQUFLLFNBQVM7Z0JBQ1osT0FBTyxnQkFBZ0IsQ0FBQztZQUMxQjtnQkFDRSxNQUFNLElBQUksS0FBSyxDQUNiLFdBQVcsNkJBQWEsQ0FBQyxlQUFlLHVCQUN0QyxjQUNGLEdBQUcsQ0FDSixDQUFDO1FBQ04sQ0FBQztJQUNILENBQUMsQ0FBQztJQUVNLFdBQVcsR0FBRyxHQUFhLEVBQUU7UUFDbkMsUUFBUSxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7WUFDM0IsS0FBSyxRQUFRO2dCQUNYLE9BQU8sS0FBSyxDQUFDO1lBQ2YsS0FBSyxPQUFPO2dCQUNWLE9BQU8sU0FBUyxDQUFDO1lBQ25CLEtBQUssT0FBTztnQkFDVixPQUFPLE9BQU8sQ0FBQztZQUNqQjtnQkFDRSxPQUFPLE9BQU8sQ0FBQztRQUNuQixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0NBQ0g7QUF0RkQsZ0VBc0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgKiBhcyBfb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHsgQ0RLQ29udGV4dEtleSwgUGFja2FnZUpzb25SZWFkZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBEZXBsb3ltZW50VHlwZSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuXG4vKipcbiAqIFN0b3JlcyBCSSBtZXRyaWNzIGluZm9ybWF0aW9uIGluIHN0YWNrIGRlc2NyaXB0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgQXR0cmlidXRpb25NZXRhZGF0YVN0b3JhZ2Uge1xuICAvKipcbiAgICogQ29uc3RydWN0b3Igd2l0aCBwcm9wcyBmb3IgaW5qZWN0aW5nIHRlc3QgbW9ja3NcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgb3M6IHR5cGVvZiBfb3MgPSBfb3MsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYWNrYWdlSnNvblJlYWRlciA9IG5ldyBQYWNrYWdlSnNvblJlYWRlcigpLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIFN0b3JlcyBhbiBhdHRyaWJ1dGlvbiBtZXRhZGF0YSBzdHJpbmcgaW4gdGhlIHN0YWNrIGRlc2NyaXB0aW9uIG9mIHRoZSBwcm92aWRlZCBzdGFja1xuICAgKiBEb2VzIG5vdGhpbmcgaWYgdGhlIHN0YWNrIGFscmVhZHkgaGFzIGEgbm9uLWVtcHR5IGRlc2NyaXB0aW9uXG4gICAqL1xuICBzdG9yZUF0dHJpYnV0aW9uTWV0YWRhdGEgPSAoXG4gICAgc3RhY2s6IFN0YWNrLFxuICAgIHN0YWNrVHlwZTogc3RyaW5nLFxuICAgIGxpYnJhcnlQYWNrYWdlSnNvbkFic29sdXRlUGF0aDogc3RyaW5nLFxuICAgIGFkZGl0aW9uYWxNZXRhZGF0YTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHt9LFxuICApOiB2b2lkID0+IHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2Ygc3RhY2sudGVtcGxhdGVPcHRpb25zLmRlc2NyaXB0aW9uID09PSAnc3RyaW5nJyAmJlxuICAgICAgc3RhY2sudGVtcGxhdGVPcHRpb25zLmRlc2NyaXB0aW9uLmxlbmd0aCA+IDBcbiAgICApIHtcbiAgICAgIC8vIGRvbid0IG92ZXJ3cml0ZSBhbiBleGlzdGluZyBkZXNjcmlwdGlvblxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdGFjay50ZW1wbGF0ZU9wdGlvbnMuZGVzY3JpcHRpb24gPSBKU09OLnN0cmluZ2lmeShcbiAgICAgIHRoaXMuZ2V0QXR0cmlidXRpb25NZXRhZGF0YShcbiAgICAgICAgc3RhY2ssXG4gICAgICAgIHN0YWNrVHlwZSxcbiAgICAgICAgbGlicmFyeVBhY2thZ2VKc29uQWJzb2x1dGVQYXRoLFxuICAgICAgICBhZGRpdGlvbmFsTWV0YWRhdGEsXG4gICAgICApLFxuICAgICk7XG4gIH07XG5cbiAgcHJpdmF0ZSBnZXRBdHRyaWJ1dGlvbk1ldGFkYXRhID0gKFxuICAgIHN0YWNrOiBTdGFjayxcbiAgICBzdGFja1R5cGU6IHN0cmluZyxcbiAgICBsaWJyYXJ5UGFja2FnZUpzb25BYnNvbHV0ZVBhdGg6IHN0cmluZyxcbiAgICBhZGRpdGlvbmFsTWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4gICk6IEF0dHJpYnV0aW9uTWV0YWRhdGEgPT4gKHtcbiAgICBjcmVhdGVkT246IHRoaXMuZ2V0UGxhdGZvcm0oKSxcbiAgICBjcmVhdGVkQnk6IHRoaXMuZ2V0RGVwbG95bWVudEVuZ2luZVR5cGUoc3RhY2spLFxuICAgIGNyZWF0ZWRXaXRoOlxuICAgICAgdGhpcy5wYWNrYWdlSnNvblJlYWRlci5yZWFkKGxpYnJhcnlQYWNrYWdlSnNvbkFic29sdXRlUGF0aCkudmVyc2lvbiA/PyAnJywgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuLCByZWdhcmRsZXNzIHdlIHNob3VsZG4ndCB0aHJvdyBmb3IgYXR0cmlidXRpb25cbiAgICBzdGFja1R5cGU6IHN0YWNrVHlwZSxcbiAgICBtZXRhZGF0YTogYWRkaXRpb25hbE1ldGFkYXRhLFxuICB9KTtcblxuICBwcml2YXRlIGdldERlcGxveW1lbnRFbmdpbmVUeXBlID0gKHN0YWNrOiBTdGFjayk6IERlcGxveW1lbnRFbmdpbmVUeXBlID0+IHtcbiAgICBjb25zdCBkZXBsb3ltZW50VHlwZTogRGVwbG95bWVudFR5cGUgfCB1bmRlZmluZWQgPSBzdGFjay5ub2RlLnRyeUdldENvbnRleHQoXG4gICAgICBDREtDb250ZXh0S2V5LkRFUExPWU1FTlRfVFlQRSxcbiAgICApO1xuXG4gICAgaWYgKGRlcGxveW1lbnRUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGlmIG5vIGRlcGxveW1lbnQgdHlwZSBjb250ZXh0IHZhbHVlIGlzIHNldCwgYXNzdW1lIHRoZSBjb25zdHJ1Y3QgaXMgYmVpbmcgdXNlZCBpbiBhIG5hdGl2ZSBDREsgcHJvamVjdFxuICAgICAgcmV0dXJuICdBbXBsaWZ5Q0RLJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKGRlcGxveW1lbnRUeXBlKSB7XG4gICAgICBjYXNlICdicmFuY2gnOlxuICAgICAgICByZXR1cm4gJ0FtcGxpZnlQaXBlbGluZURlcGxveSc7XG4gICAgICBjYXNlICdzYW5kYm94JzpcbiAgICAgICAgcmV0dXJuICdBbXBsaWZ5U2FuZGJveCc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFVua25vd24gJHtDREtDb250ZXh0S2V5LkRFUExPWU1FTlRfVFlQRX0gQ0RLIGNvbnRleHQgdmFsdWUgXCIke1xuICAgICAgICAgICAgZGVwbG95bWVudFR5cGUgYXMgc3RyaW5nXG4gICAgICAgICAgfVwiYCxcbiAgICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSBnZXRQbGF0Zm9ybSA9ICgpOiBQbGF0Zm9ybSA9PiB7XG4gICAgc3dpdGNoICh0aGlzLm9zLnBsYXRmb3JtKCkpIHtcbiAgICAgIGNhc2UgJ2Rhcndpbic6XG4gICAgICAgIHJldHVybiAnTWFjJztcbiAgICAgIGNhc2UgJ3dpbjMyJzpcbiAgICAgICAgcmV0dXJuICdXaW5kb3dzJztcbiAgICAgIGNhc2UgJ2xpbnV4JzpcbiAgICAgICAgcmV0dXJuICdMaW51eCc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ090aGVyJztcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIEF0dHJpYnV0aW9uTWV0YWRhdGEgPSB7XG4gIC8qKlxuICAgKiBUaGUgT1MgdGhhdCBzeW50aGVzaXplZCB0aGlzIHN0YWNrXG4gICAqL1xuICBjcmVhdGVkT246IFBsYXRmb3JtO1xuICAvKipcbiAgICogVGhlIHN5bnRoZXNpcyBlbmdpbmUgdGhhdCBnZW5lcmF0ZWQgdGhpcyBzdGFja1xuICAgKi9cbiAgY3JlYXRlZEJ5OiBEZXBsb3ltZW50RW5naW5lVHlwZTtcbiAgLyoqXG4gICAqIFRoZSBsaWJyYXJ5IHZlcnNpb24gdGhhdCBjcmVhdGVkIHRoaXMgbWV0YWRhdGFcbiAgICovXG4gIGNyZWF0ZWRXaXRoOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTdHJpbmcgdGhhdCBpZGVudGlmaWVzIHdoYXQgdHlwZSBvZiBzdGFjayB0aGlzIG1ldGFkYXRhIGlzIHNldCBvblxuICAgKi9cbiAgc3RhY2tUeXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZpZWxkIHdoZXJlIGNvbnN0cnVjdHMgY2FuIHB1dCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGZvciBCSSB0cmFja2luZ1xuICAgKi9cbiAgbWV0YWRhdGE6IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG59O1xuXG5leHBvcnQgdHlwZSBEZXBsb3ltZW50RW5naW5lVHlwZSA9XG4gIHwgJ0FtcGxpZnlQaXBlbGluZURlcGxveSdcbiAgfCAnQW1wbGlmeVNhbmRib3gnXG4gIHwgJ0FtcGxpZnlDREsnO1xuXG5leHBvcnQgdHlwZSBQbGF0Zm9ybSA9ICdNYWMnIHwgJ1dpbmRvd3MnIHwgJ0xpbnV4JyB8ICdPdGhlcic7XG4iXX0=