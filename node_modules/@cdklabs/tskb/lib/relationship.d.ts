import { Entity, EntityCollection } from './entity';
export interface Relationship<From extends Entity, To extends Entity, Attributes = {}> {
    readonly from: From;
    readonly to: To;
    readonly attr: Attributes;
}
type FromGetter<R extends Relationship<any, any, any>> = (id: string) => R['from'];
type ToGetter<R extends Relationship<any, any, any>> = (id: string) => R['to'];
export interface RelationshipCollection<R extends Relationship<any, any, any>> {
    readonly type: 'rel';
    readonly fromColl: FromGetter<R>;
    readonly toColl: ToGetter<R>;
    readonly forward: Map<string, Rel<R['attr']>[]>;
    readonly backward: Map<string, Rel<R['attr']>[]>;
    add(from: R['from'], to: R['to'], attributes: R['attr']): void;
    dehydrate(): any;
    hydrateFrom(x: any): void;
}
export type Rel<Attributes> = {
    readonly $id: string;
} & Attributes;
export type KeyForEntityCollection<S, E extends Entity> = {
    [K in keyof S]: S[K] extends EntityCollection<E> ? K : never;
}[keyof S];
export declare const NO_RELATIONSHIPS: () => {};
export declare function relationshipCollection<R extends Relationship<any, any, any>>(fromField: FromGetter<R>, toField: ToGetter<R>): RelationshipCollection<R>;
export declare function isRelationshipCollection(x: unknown): x is RelationshipCollection<any>;
export {};
