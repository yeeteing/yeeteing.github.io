import fsp from 'fs/promises';
import path from 'path';
import { printer } from '../../printer.js';
import { LogLevel } from '../../printer/printer.js';
/**
 * YarnModernLockFileReader is an abstraction around the logic used to read and parse lock file contents
 */
export class YarnModernLockFileReader {
    getLockFileContentsFromCwd = async () => {
        const eolRegex = '[\r\n]';
        const dependencies = [];
        const yarnLockPath = path.resolve(process.cwd(), 'yarn.lock');
        try {
            const yarnLockContents = await fsp.readFile(yarnLockPath, 'utf-8');
            const yarnLockContentsArray = yarnLockContents.split(new RegExp(`${eolRegex}${eolRegex}`));
            if (yarnLockContentsArray.length === 3) {
                // Contents are only comment block, metadata, and workspace info
                return { dependencies };
            }
            // Slice to remove comment block and metadata at the start of the lock file
            for (const yarnDependencyBlock of yarnLockContentsArray.slice(2)) {
                const yarnDependencyLines = yarnDependencyBlock
                    .trim()
                    .split(new RegExp(eolRegex));
                const yarnDependencyName = yarnDependencyLines[0];
                const yarnDependencyVersion = yarnDependencyLines[1];
                // Get dependency name before versioning info
                const dependencyName = yarnDependencyName
                    .slice(0, yarnDependencyName.lastIndexOf('@'))
                    .replaceAll(/"/g, '');
                const versionMatch = yarnDependencyVersion.match(/[\d.]+/);
                const dependencyVersion = versionMatch ? versionMatch[0] : '';
                dependencies.push({ name: dependencyName, version: dependencyVersion });
            }
        }
        catch {
            printer.log(`Failed to get lock file contents because ${yarnLockPath} does not exist or is not parse-able`, LogLevel.DEBUG);
            return;
        }
        return { dependencies };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFybl9tb2Rlcm5fbG9ja19maWxlX3JlYWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWNrYWdlLW1hbmFnZXItY29udHJvbGxlci9sb2NrLWZpbGUtcmVhZGVyL3lhcm5fbW9kZXJuX2xvY2tfZmlsZV9yZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxHQUFHLE1BQU0sYUFBYSxDQUFDO0FBQzlCLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXBEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHdCQUF3QjtJQUNuQywwQkFBMEIsR0FBRyxLQUFLLElBRWhDLEVBQUU7UUFDRixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDMUIsTUFBTSxZQUFZLEdBQXNCLEVBQUUsQ0FBQztRQUMzQyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUU5RCxJQUFJLENBQUM7WUFDSCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDbkUsTUFBTSxxQkFBcUIsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQ2xELElBQUksTUFBTSxDQUFDLEdBQUcsUUFBUSxHQUFHLFFBQVEsRUFBRSxDQUFDLENBQ3JDLENBQUM7WUFFRixJQUFJLHFCQUFxQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDdkMsZ0VBQWdFO2dCQUNoRSxPQUFPLEVBQUUsWUFBWSxFQUFFLENBQUM7WUFDMUIsQ0FBQztZQUVELDJFQUEyRTtZQUMzRSxLQUFLLE1BQU0sbUJBQW1CLElBQUkscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ2pFLE1BQU0sbUJBQW1CLEdBQUcsbUJBQW1CO3FCQUM1QyxJQUFJLEVBQUU7cUJBQ04sS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLE1BQU0sa0JBQWtCLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELE1BQU0scUJBQXFCLEdBQUcsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBRXJELDZDQUE2QztnQkFDN0MsTUFBTSxjQUFjLEdBQUcsa0JBQWtCO3FCQUN0QyxLQUFLLENBQUMsQ0FBQyxFQUFFLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztxQkFDN0MsVUFBVSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDeEIsTUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUMzRCxNQUFNLGlCQUFpQixHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBRTlELFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUM7WUFDMUUsQ0FBQztRQUNILENBQUM7UUFBQyxNQUFNLENBQUM7WUFDUCxPQUFPLENBQUMsR0FBRyxDQUNULDRDQUE0QyxZQUFZLHNDQUFzQyxFQUM5RixRQUFRLENBQUMsS0FBSyxDQUNmLENBQUM7WUFDRixPQUFPO1FBQ1QsQ0FBQztRQUVELE9BQU8sRUFBRSxZQUFZLEVBQUUsQ0FBQztJQUMxQixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlcGVuZGVuY3kgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCBmc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBMb2NrRmlsZUNvbnRlbnRzLCBMb2NrRmlsZVJlYWRlciB9IGZyb20gJy4vdHlwZXMuanMnO1xuaW1wb3J0IHsgcHJpbnRlciB9IGZyb20gJy4uLy4uL3ByaW50ZXIuanMnO1xuaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tICcuLi8uLi9wcmludGVyL3ByaW50ZXIuanMnO1xuXG4vKipcbiAqIFlhcm5Nb2Rlcm5Mb2NrRmlsZVJlYWRlciBpcyBhbiBhYnN0cmFjdGlvbiBhcm91bmQgdGhlIGxvZ2ljIHVzZWQgdG8gcmVhZCBhbmQgcGFyc2UgbG9jayBmaWxlIGNvbnRlbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBZYXJuTW9kZXJuTG9ja0ZpbGVSZWFkZXIgaW1wbGVtZW50cyBMb2NrRmlsZVJlYWRlciB7XG4gIGdldExvY2tGaWxlQ29udGVudHNGcm9tQ3dkID0gYXN5bmMgKCk6IFByb21pc2U8XG4gICAgTG9ja0ZpbGVDb250ZW50cyB8IHVuZGVmaW5lZFxuICA+ID0+IHtcbiAgICBjb25zdCBlb2xSZWdleCA9ICdbXFxyXFxuXSc7XG4gICAgY29uc3QgZGVwZW5kZW5jaWVzOiBBcnJheTxEZXBlbmRlbmN5PiA9IFtdO1xuICAgIGNvbnN0IHlhcm5Mb2NrUGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCAneWFybi5sb2NrJyk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeWFybkxvY2tDb250ZW50cyA9IGF3YWl0IGZzcC5yZWFkRmlsZSh5YXJuTG9ja1BhdGgsICd1dGYtOCcpO1xuICAgICAgY29uc3QgeWFybkxvY2tDb250ZW50c0FycmF5ID0geWFybkxvY2tDb250ZW50cy5zcGxpdChcbiAgICAgICAgbmV3IFJlZ0V4cChgJHtlb2xSZWdleH0ke2VvbFJlZ2V4fWApLFxuICAgICAgKTtcblxuICAgICAgaWYgKHlhcm5Mb2NrQ29udGVudHNBcnJheS5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgLy8gQ29udGVudHMgYXJlIG9ubHkgY29tbWVudCBibG9jaywgbWV0YWRhdGEsIGFuZCB3b3Jrc3BhY2UgaW5mb1xuICAgICAgICByZXR1cm4geyBkZXBlbmRlbmNpZXMgfTtcbiAgICAgIH1cblxuICAgICAgLy8gU2xpY2UgdG8gcmVtb3ZlIGNvbW1lbnQgYmxvY2sgYW5kIG1ldGFkYXRhIGF0IHRoZSBzdGFydCBvZiB0aGUgbG9jayBmaWxlXG4gICAgICBmb3IgKGNvbnN0IHlhcm5EZXBlbmRlbmN5QmxvY2sgb2YgeWFybkxvY2tDb250ZW50c0FycmF5LnNsaWNlKDIpKSB7XG4gICAgICAgIGNvbnN0IHlhcm5EZXBlbmRlbmN5TGluZXMgPSB5YXJuRGVwZW5kZW5jeUJsb2NrXG4gICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgIC5zcGxpdChuZXcgUmVnRXhwKGVvbFJlZ2V4KSk7XG4gICAgICAgIGNvbnN0IHlhcm5EZXBlbmRlbmN5TmFtZSA9IHlhcm5EZXBlbmRlbmN5TGluZXNbMF07XG4gICAgICAgIGNvbnN0IHlhcm5EZXBlbmRlbmN5VmVyc2lvbiA9IHlhcm5EZXBlbmRlbmN5TGluZXNbMV07XG5cbiAgICAgICAgLy8gR2V0IGRlcGVuZGVuY3kgbmFtZSBiZWZvcmUgdmVyc2lvbmluZyBpbmZvXG4gICAgICAgIGNvbnN0IGRlcGVuZGVuY3lOYW1lID0geWFybkRlcGVuZGVuY3lOYW1lXG4gICAgICAgICAgLnNsaWNlKDAsIHlhcm5EZXBlbmRlbmN5TmFtZS5sYXN0SW5kZXhPZignQCcpKVxuICAgICAgICAgIC5yZXBsYWNlQWxsKC9cIi9nLCAnJyk7XG4gICAgICAgIGNvbnN0IHZlcnNpb25NYXRjaCA9IHlhcm5EZXBlbmRlbmN5VmVyc2lvbi5tYXRjaCgvW1xcZC5dKy8pO1xuICAgICAgICBjb25zdCBkZXBlbmRlbmN5VmVyc2lvbiA9IHZlcnNpb25NYXRjaCA/IHZlcnNpb25NYXRjaFswXSA6ICcnO1xuXG4gICAgICAgIGRlcGVuZGVuY2llcy5wdXNoKHsgbmFtZTogZGVwZW5kZW5jeU5hbWUsIHZlcnNpb246IGRlcGVuZGVuY3lWZXJzaW9uIH0pO1xuICAgICAgfVxuICAgIH0gY2F0Y2gge1xuICAgICAgcHJpbnRlci5sb2coXG4gICAgICAgIGBGYWlsZWQgdG8gZ2V0IGxvY2sgZmlsZSBjb250ZW50cyBiZWNhdXNlICR7eWFybkxvY2tQYXRofSBkb2VzIG5vdCBleGlzdCBvciBpcyBub3QgcGFyc2UtYWJsZWAsXG4gICAgICAgIExvZ0xldmVsLkRFQlVHLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4geyBkZXBlbmRlbmNpZXMgfTtcbiAgfTtcbn1cbiJdfQ==