"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectStackDrift = detectStackDrift;
const util_1 = require("util");
const toolkit_error_1 = require("../../toolkit/toolkit-error");
/**
 * Detect drift for a CloudFormation stack and wait for the detection to complete
 *
 * @param cfn - a CloudFormation client
 * @param ioHelper - helper for IO operations
 * @param stackName - the name of the stack to check for drift
 * @returns the CloudFormation description of the drift detection results
 */
async function detectStackDrift(cfn, ioHelper, stackName) {
    // Start drift detection
    const driftDetection = await cfn.detectStackDrift({
        StackName: stackName,
    });
    await ioHelper.defaults.trace((0, util_1.format)('Detecting drift with ID %s for stack %s...', driftDetection.StackDriftDetectionId, stackName));
    // Wait for drift detection to complete
    const driftStatus = await waitForDriftDetection(cfn, ioHelper, driftDetection.StackDriftDetectionId);
    if (!driftStatus) {
        throw new toolkit_error_1.ToolkitError('Drift detection took too long to complete. Aborting');
    }
    if (driftStatus?.DetectionStatus === 'DETECTION_FAILED') {
        throw new toolkit_error_1.ToolkitError(`Failed to detect drift: ${driftStatus.DetectionStatusReason || 'No reason provided'}`);
    }
    // Get the drift results
    return cfn.describeStackResourceDrifts({
        StackName: stackName,
    });
}
/**
 * Wait for a drift detection operation to complete
 */
async function waitForDriftDetection(cfn, ioHelper, driftDetectionId) {
    const maxWaitForDrift = 300_000; // if takes longer than 5min, fail
    const timeBetweenOutputs = 10_000; // how long to wait before telling user we're still checking
    const timeBetweenApiCalls = 2_000; // wait 2s per API call
    const deadline = Date.now() + maxWaitForDrift;
    let checkIn = Date.now() + timeBetweenOutputs;
    while (true) {
        const response = await cfn.describeStackDriftDetectionStatus({
            StackDriftDetectionId: driftDetectionId,
        });
        if (response.DetectionStatus === 'DETECTION_COMPLETE') {
            return response;
        }
        if (response.DetectionStatus === 'DETECTION_FAILED') {
            throw new toolkit_error_1.ToolkitError(`Drift detection failed: ${response.DetectionStatusReason}`);
        }
        if (Date.now() > deadline) {
            throw new toolkit_error_1.ToolkitError(`Drift detection failed: Timed out after ${maxWaitForDrift / 1000} seconds.`);
        }
        if (Date.now() > checkIn) {
            await ioHelper.defaults.trace('Waiting for drift detection to complete...');
            checkIn = Date.now() + timeBetweenOutputs;
        }
        // Wait a short while between API calls so we don't create a flood
        await new Promise(resolve => setTimeout(resolve, timeBetweenApiCalls));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJpZnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkcmlmdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQWNBLDRDQStCQztBQTdDRCwrQkFBOEI7QUFFOUIsK0RBQTJEO0FBSTNEOzs7Ozs7O0dBT0c7QUFDSSxLQUFLLFVBQVUsZ0JBQWdCLENBQ3BDLEdBQTBCLEVBQzFCLFFBQWtCLEVBQ2xCLFNBQWlCO0lBRWpCLHdCQUF3QjtJQUN4QixNQUFNLGNBQWMsR0FBRyxNQUFNLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNoRCxTQUFTLEVBQUUsU0FBUztLQUNyQixDQUFDLENBQUM7SUFFSCxNQUFNLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUMzQixJQUFBLGFBQU0sRUFBQyw0Q0FBNEMsRUFBRSxjQUFjLENBQUMscUJBQXFCLEVBQUUsU0FBUyxDQUFDLENBQ3RHLENBQUM7SUFFRix1Q0FBdUM7SUFDdkMsTUFBTSxXQUFXLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQyxxQkFBc0IsQ0FBQyxDQUFDO0lBRXRHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNqQixNQUFNLElBQUksNEJBQVksQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCxJQUFJLFdBQVcsRUFBRSxlQUFlLEtBQUssa0JBQWtCLEVBQUUsQ0FBQztRQUN4RCxNQUFNLElBQUksNEJBQVksQ0FDcEIsMkJBQTJCLFdBQVcsQ0FBQyxxQkFBcUIsSUFBSSxvQkFBb0IsRUFBRSxDQUN2RixDQUFDO0lBQ0osQ0FBQztJQUVELHdCQUF3QjtJQUN4QixPQUFPLEdBQUcsQ0FBQywyQkFBMkIsQ0FBQztRQUNyQyxTQUFTLEVBQUUsU0FBUztLQUNyQixDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxLQUFLLFVBQVUscUJBQXFCLENBQ2xDLEdBQTBCLEVBQzFCLFFBQWtCLEVBQ2xCLGdCQUF3QjtJQUV4QixNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsQ0FBQyxrQ0FBa0M7SUFDbkUsTUFBTSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsQ0FBQyw0REFBNEQ7SUFDL0YsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsQ0FBQyx1QkFBdUI7SUFDMUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLGVBQWUsQ0FBQztJQUM5QyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsa0JBQWtCLENBQUM7SUFFOUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUNaLE1BQU0sUUFBUSxHQUFHLE1BQU0sR0FBRyxDQUFDLGlDQUFpQyxDQUFDO1lBQzNELHFCQUFxQixFQUFFLGdCQUFnQjtTQUN4QyxDQUFDLENBQUM7UUFFSCxJQUFJLFFBQVEsQ0FBQyxlQUFlLEtBQUssb0JBQW9CLEVBQUUsQ0FBQztZQUN0RCxPQUFPLFFBQVEsQ0FBQztRQUNsQixDQUFDO1FBRUQsSUFBSSxRQUFRLENBQUMsZUFBZSxLQUFLLGtCQUFrQixFQUFFLENBQUM7WUFDcEQsTUFBTSxJQUFJLDRCQUFZLENBQUMsMkJBQTJCLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUM7UUFDdEYsQ0FBQztRQUVELElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxDQUFDO1lBQzFCLE1BQU0sSUFBSSw0QkFBWSxDQUFDLDJDQUEyQyxlQUFlLEdBQUcsSUFBSSxXQUFXLENBQUMsQ0FBQztRQUN2RyxDQUFDO1FBRUQsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsT0FBTyxFQUFFLENBQUM7WUFDekIsTUFBTSxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1lBQzVFLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsa0JBQWtCLENBQUM7UUFDNUMsQ0FBQztRQUVELGtFQUFrRTtRQUNsRSxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmb3JtYXQgfSBmcm9tICd1dGlsJztcbmltcG9ydCB0eXBlIHsgRGVzY3JpYmVTdGFja0RyaWZ0RGV0ZWN0aW9uU3RhdHVzQ29tbWFuZE91dHB1dCwgRGVzY3JpYmVTdGFja1Jlc291cmNlRHJpZnRzQ29tbWFuZE91dHB1dCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvbic7XG5pbXBvcnQgeyBUb29sa2l0RXJyb3IgfSBmcm9tICcuLi8uLi90b29sa2l0L3Rvb2xraXQtZXJyb3InO1xuaW1wb3J0IHR5cGUgeyBJQ2xvdWRGb3JtYXRpb25DbGllbnQgfSBmcm9tICcuLi9hd3MtYXV0aC9wcml2YXRlJztcbmltcG9ydCB0eXBlIHsgSW9IZWxwZXIgfSBmcm9tICcuLi9pby9wcml2YXRlJztcblxuLyoqXG4gKiBEZXRlY3QgZHJpZnQgZm9yIGEgQ2xvdWRGb3JtYXRpb24gc3RhY2sgYW5kIHdhaXQgZm9yIHRoZSBkZXRlY3Rpb24gdG8gY29tcGxldGVcbiAqXG4gKiBAcGFyYW0gY2ZuIC0gYSBDbG91ZEZvcm1hdGlvbiBjbGllbnRcbiAqIEBwYXJhbSBpb0hlbHBlciAtIGhlbHBlciBmb3IgSU8gb3BlcmF0aW9uc1xuICogQHBhcmFtIHN0YWNrTmFtZSAtIHRoZSBuYW1lIG9mIHRoZSBzdGFjayB0byBjaGVjayBmb3IgZHJpZnRcbiAqIEByZXR1cm5zIHRoZSBDbG91ZEZvcm1hdGlvbiBkZXNjcmlwdGlvbiBvZiB0aGUgZHJpZnQgZGV0ZWN0aW9uIHJlc3VsdHNcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRldGVjdFN0YWNrRHJpZnQoXG4gIGNmbjogSUNsb3VkRm9ybWF0aW9uQ2xpZW50LFxuICBpb0hlbHBlcjogSW9IZWxwZXIsXG4gIHN0YWNrTmFtZTogc3RyaW5nLFxuKTogUHJvbWlzZTxEZXNjcmliZVN0YWNrUmVzb3VyY2VEcmlmdHNDb21tYW5kT3V0cHV0PiB7XG4gIC8vIFN0YXJ0IGRyaWZ0IGRldGVjdGlvblxuICBjb25zdCBkcmlmdERldGVjdGlvbiA9IGF3YWl0IGNmbi5kZXRlY3RTdGFja0RyaWZ0KHtcbiAgICBTdGFja05hbWU6IHN0YWNrTmFtZSxcbiAgfSk7XG5cbiAgYXdhaXQgaW9IZWxwZXIuZGVmYXVsdHMudHJhY2UoXG4gICAgZm9ybWF0KCdEZXRlY3RpbmcgZHJpZnQgd2l0aCBJRCAlcyBmb3Igc3RhY2sgJXMuLi4nLCBkcmlmdERldGVjdGlvbi5TdGFja0RyaWZ0RGV0ZWN0aW9uSWQsIHN0YWNrTmFtZSksXG4gICk7XG5cbiAgLy8gV2FpdCBmb3IgZHJpZnQgZGV0ZWN0aW9uIHRvIGNvbXBsZXRlXG4gIGNvbnN0IGRyaWZ0U3RhdHVzID0gYXdhaXQgd2FpdEZvckRyaWZ0RGV0ZWN0aW9uKGNmbiwgaW9IZWxwZXIsIGRyaWZ0RGV0ZWN0aW9uLlN0YWNrRHJpZnREZXRlY3Rpb25JZCEpO1xuXG4gIGlmICghZHJpZnRTdGF0dXMpIHtcbiAgICB0aHJvdyBuZXcgVG9vbGtpdEVycm9yKCdEcmlmdCBkZXRlY3Rpb24gdG9vayB0b28gbG9uZyB0byBjb21wbGV0ZS4gQWJvcnRpbmcnKTtcbiAgfVxuXG4gIGlmIChkcmlmdFN0YXR1cz8uRGV0ZWN0aW9uU3RhdHVzID09PSAnREVURUNUSU9OX0ZBSUxFRCcpIHtcbiAgICB0aHJvdyBuZXcgVG9vbGtpdEVycm9yKFxuICAgICAgYEZhaWxlZCB0byBkZXRlY3QgZHJpZnQ6ICR7ZHJpZnRTdGF0dXMuRGV0ZWN0aW9uU3RhdHVzUmVhc29uIHx8ICdObyByZWFzb24gcHJvdmlkZWQnfWAsXG4gICAgKTtcbiAgfVxuXG4gIC8vIEdldCB0aGUgZHJpZnQgcmVzdWx0c1xuICByZXR1cm4gY2ZuLmRlc2NyaWJlU3RhY2tSZXNvdXJjZURyaWZ0cyh7XG4gICAgU3RhY2tOYW1lOiBzdGFja05hbWUsXG4gIH0pO1xufVxuXG4vKipcbiAqIFdhaXQgZm9yIGEgZHJpZnQgZGV0ZWN0aW9uIG9wZXJhdGlvbiB0byBjb21wbGV0ZVxuICovXG5hc3luYyBmdW5jdGlvbiB3YWl0Rm9yRHJpZnREZXRlY3Rpb24oXG4gIGNmbjogSUNsb3VkRm9ybWF0aW9uQ2xpZW50LFxuICBpb0hlbHBlcjogSW9IZWxwZXIsXG4gIGRyaWZ0RGV0ZWN0aW9uSWQ6IHN0cmluZyxcbik6IFByb21pc2U8RGVzY3JpYmVTdGFja0RyaWZ0RGV0ZWN0aW9uU3RhdHVzQ29tbWFuZE91dHB1dCB8IHVuZGVmaW5lZD4ge1xuICBjb25zdCBtYXhXYWl0Rm9yRHJpZnQgPSAzMDBfMDAwOyAvLyBpZiB0YWtlcyBsb25nZXIgdGhhbiA1bWluLCBmYWlsXG4gIGNvbnN0IHRpbWVCZXR3ZWVuT3V0cHV0cyA9IDEwXzAwMDsgLy8gaG93IGxvbmcgdG8gd2FpdCBiZWZvcmUgdGVsbGluZyB1c2VyIHdlJ3JlIHN0aWxsIGNoZWNraW5nXG4gIGNvbnN0IHRpbWVCZXR3ZWVuQXBpQ2FsbHMgPSAyXzAwMDsgLy8gd2FpdCAycyBwZXIgQVBJIGNhbGxcbiAgY29uc3QgZGVhZGxpbmUgPSBEYXRlLm5vdygpICsgbWF4V2FpdEZvckRyaWZ0O1xuICBsZXQgY2hlY2tJbiA9IERhdGUubm93KCkgKyB0aW1lQmV0d2Vlbk91dHB1dHM7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNmbi5kZXNjcmliZVN0YWNrRHJpZnREZXRlY3Rpb25TdGF0dXMoe1xuICAgICAgU3RhY2tEcmlmdERldGVjdGlvbklkOiBkcmlmdERldGVjdGlvbklkLFxuICAgIH0pO1xuXG4gICAgaWYgKHJlc3BvbnNlLkRldGVjdGlvblN0YXR1cyA9PT0gJ0RFVEVDVElPTl9DT01QTEVURScpIHtcbiAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICB9XG5cbiAgICBpZiAocmVzcG9uc2UuRGV0ZWN0aW9uU3RhdHVzID09PSAnREVURUNUSU9OX0ZBSUxFRCcpIHtcbiAgICAgIHRocm93IG5ldyBUb29sa2l0RXJyb3IoYERyaWZ0IGRldGVjdGlvbiBmYWlsZWQ6ICR7cmVzcG9uc2UuRGV0ZWN0aW9uU3RhdHVzUmVhc29ufWApO1xuICAgIH1cblxuICAgIGlmIChEYXRlLm5vdygpID4gZGVhZGxpbmUpIHtcbiAgICAgIHRocm93IG5ldyBUb29sa2l0RXJyb3IoYERyaWZ0IGRldGVjdGlvbiBmYWlsZWQ6IFRpbWVkIG91dCBhZnRlciAke21heFdhaXRGb3JEcmlmdCAvIDEwMDB9IHNlY29uZHMuYCk7XG4gICAgfVxuXG4gICAgaWYgKERhdGUubm93KCkgPiBjaGVja0luKSB7XG4gICAgICBhd2FpdCBpb0hlbHBlci5kZWZhdWx0cy50cmFjZSgnV2FpdGluZyBmb3IgZHJpZnQgZGV0ZWN0aW9uIHRvIGNvbXBsZXRlLi4uJyk7XG4gICAgICBjaGVja0luID0gRGF0ZS5ub3coKSArIHRpbWVCZXR3ZWVuT3V0cHV0cztcbiAgICB9XG5cbiAgICAvLyBXYWl0IGEgc2hvcnQgd2hpbGUgYmV0d2VlbiBBUEkgY2FsbHMgc28gd2UgZG9uJ3QgY3JlYXRlIGEgZmxvb2RcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZUJldHdlZW5BcGlDYWxscykpO1xuICB9XG59XG4iXX0=