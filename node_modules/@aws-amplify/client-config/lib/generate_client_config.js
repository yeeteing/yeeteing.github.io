import { ClientConfigGeneratorFactory } from './client_config_generator_factory.js';
import { BackendOutputClientFactory, } from '@aws-amplify/deployed-backend-client';
import { ModelIntrospectionSchemaAdapter } from './model_introspection_schema_adapter.js';
import { S3Client } from '@aws-sdk/client-s3';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { AmplifyClient } from '@aws-sdk/client-amplify';
// Because this function is acting as the DI container for this functionality, there is no way to test it without
// exposing the ClientConfigGeneratorFactory in the method signature. For this reason, we're turning off coverage for this file
// All this function should do is construct the factory and delegate to generateClientConfig()
// TODO this functionality should be tested in an E2E test once we've worked out a strategy to use real AWS credentials in tests
// https://github.com/aws-amplify/amplify-backend/issues/46
/* c8 ignore start */
/**
 * Main entry point for generating client config
 */
export const generateClientConfig = async (backendIdentifier, version, awsClientProvider) => {
    if (!awsClientProvider) {
        const s3Client = new S3Client();
        const amplifyClient = new AmplifyClient();
        const cloudFormationClient = new CloudFormationClient();
        awsClientProvider = {
            getS3Client: () => s3Client,
            getAmplifyClient: () => amplifyClient,
            getCloudFormationClient: () => cloudFormationClient,
        };
    }
    const backendOutputClient = BackendOutputClientFactory.getInstance(awsClientProvider);
    const modelSchemaAdapter = new ModelIntrospectionSchemaAdapter(awsClientProvider);
    return new ClientConfigGeneratorFactory(() => backendOutputClient.getOutput(backendIdentifier))
        .getInstance(modelSchemaAdapter, version)
        .generateClientConfig();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY2xpZW50X2NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9nZW5lcmF0ZV9jbGllbnRfY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBS3BGLE9BQU8sRUFDTCwwQkFBMEIsR0FFM0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUMxRixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBR3hELGlIQUFpSDtBQUNqSCwrSEFBK0g7QUFDL0gsOEZBQThGO0FBQzlGLGdJQUFnSTtBQUNoSSwyREFBMkQ7QUFDM0QscUJBQXFCO0FBRXJCOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsS0FBSyxFQUN2QyxpQkFBNEMsRUFDNUMsT0FBVSxFQUNWLGlCQUlFLEVBQzJDLEVBQUU7SUFDL0MsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNoQyxNQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO1FBQzFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO1FBQ3hELGlCQUFpQixHQUFHO1lBQ2xCLFdBQVcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRO1lBQzNCLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWE7WUFDckMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFLENBQUMsb0JBQW9CO1NBQ3BELENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxtQkFBbUIsR0FDdkIsMEJBQTBCLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDNUQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLCtCQUErQixDQUM1RCxpQkFBaUIsQ0FDbEIsQ0FBQztJQUNGLE9BQU8sSUFBSSw0QkFBNEIsQ0FBQyxHQUFHLEVBQUUsQ0FDM0MsbUJBQW1CLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQ2pEO1NBQ0UsV0FBVyxDQUFDLGtCQUFrQixFQUFFLE9BQU8sQ0FBQztTQUN4QyxvQkFBb0IsRUFBaUQsQ0FBQztBQUMzRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3JGYWN0b3J5IH0gZnJvbSAnLi9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9mYWN0b3J5LmpzJztcbmltcG9ydCB7XG4gIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gIENsaWVudENvbmZpZ1ZlcnNpb25UZW1wbGF0ZVR5cGUsXG59IGZyb20gJy4vY2xpZW50LWNvbmZpZy10eXBlcy9jbGllbnRfY29uZmlnLmpzJztcbmltcG9ydCB7XG4gIEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5LFxuICBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvZGVwbG95ZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgTW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlciB9IGZyb20gJy4vbW9kZWxfaW50cm9zcGVjdGlvbl9zY2hlbWFfYWRhcHRlci5qcyc7XG5pbXBvcnQgeyBTM0NsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1zMyc7XG5pbXBvcnQgeyBDbG91ZEZvcm1hdGlvbkNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvbic7XG5pbXBvcnQgeyBBbXBsaWZ5Q2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWFtcGxpZnknO1xuaW1wb3J0IHsgQVdTQ2xpZW50UHJvdmlkZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcblxuLy8gQmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIGFjdGluZyBhcyB0aGUgREkgY29udGFpbmVyIGZvciB0aGlzIGZ1bmN0aW9uYWxpdHksIHRoZXJlIGlzIG5vIHdheSB0byB0ZXN0IGl0IHdpdGhvdXRcbi8vIGV4cG9zaW5nIHRoZSBDbGllbnRDb25maWdHZW5lcmF0b3JGYWN0b3J5IGluIHRoZSBtZXRob2Qgc2lnbmF0dXJlLiBGb3IgdGhpcyByZWFzb24sIHdlJ3JlIHR1cm5pbmcgb2ZmIGNvdmVyYWdlIGZvciB0aGlzIGZpbGVcbi8vIEFsbCB0aGlzIGZ1bmN0aW9uIHNob3VsZCBkbyBpcyBjb25zdHJ1Y3QgdGhlIGZhY3RvcnkgYW5kIGRlbGVnYXRlIHRvIGdlbmVyYXRlQ2xpZW50Q29uZmlnKClcbi8vIFRPRE8gdGhpcyBmdW5jdGlvbmFsaXR5IHNob3VsZCBiZSB0ZXN0ZWQgaW4gYW4gRTJFIHRlc3Qgb25jZSB3ZSd2ZSB3b3JrZWQgb3V0IGEgc3RyYXRlZ3kgdG8gdXNlIHJlYWwgQVdTIGNyZWRlbnRpYWxzIGluIHRlc3RzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vYXdzLWFtcGxpZnkvYW1wbGlmeS1iYWNrZW5kL2lzc3Vlcy80NlxuLyogYzggaWdub3JlIHN0YXJ0ICovXG5cbi8qKlxuICogTWFpbiBlbnRyeSBwb2ludCBmb3IgZ2VuZXJhdGluZyBjbGllbnQgY29uZmlnXG4gKi9cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUNsaWVudENvbmZpZyA9IGFzeW5jIDxUIGV4dGVuZHMgQ2xpZW50Q29uZmlnVmVyc2lvbj4oXG4gIGJhY2tlbmRJZGVudGlmaWVyOiBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyLFxuICB2ZXJzaW9uOiBULFxuICBhd3NDbGllbnRQcm92aWRlcj86IEFXU0NsaWVudFByb3ZpZGVyPHtcbiAgICBnZXRTM0NsaWVudDogUzNDbGllbnQ7XG4gICAgZ2V0QW1wbGlmeUNsaWVudDogQW1wbGlmeUNsaWVudDtcbiAgICBnZXRDbG91ZEZvcm1hdGlvbkNsaWVudDogQ2xvdWRGb3JtYXRpb25DbGllbnQ7XG4gIH0+LFxuKTogUHJvbWlzZTxDbGllbnRDb25maWdWZXJzaW9uVGVtcGxhdGVUeXBlPFQ+PiA9PiB7XG4gIGlmICghYXdzQ2xpZW50UHJvdmlkZXIpIHtcbiAgICBjb25zdCBzM0NsaWVudCA9IG5ldyBTM0NsaWVudCgpO1xuICAgIGNvbnN0IGFtcGxpZnlDbGllbnQgPSBuZXcgQW1wbGlmeUNsaWVudCgpO1xuICAgIGNvbnN0IGNsb3VkRm9ybWF0aW9uQ2xpZW50ID0gbmV3IENsb3VkRm9ybWF0aW9uQ2xpZW50KCk7XG4gICAgYXdzQ2xpZW50UHJvdmlkZXIgPSB7XG4gICAgICBnZXRTM0NsaWVudDogKCkgPT4gczNDbGllbnQsXG4gICAgICBnZXRBbXBsaWZ5Q2xpZW50OiAoKSA9PiBhbXBsaWZ5Q2xpZW50LFxuICAgICAgZ2V0Q2xvdWRGb3JtYXRpb25DbGllbnQ6ICgpID0+IGNsb3VkRm9ybWF0aW9uQ2xpZW50LFxuICAgIH07XG4gIH1cblxuICBjb25zdCBiYWNrZW5kT3V0cHV0Q2xpZW50ID1cbiAgICBCYWNrZW5kT3V0cHV0Q2xpZW50RmFjdG9yeS5nZXRJbnN0YW5jZShhd3NDbGllbnRQcm92aWRlcik7XG4gIGNvbnN0IG1vZGVsU2NoZW1hQWRhcHRlciA9IG5ldyBNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyKFxuICAgIGF3c0NsaWVudFByb3ZpZGVyLFxuICApO1xuICByZXR1cm4gbmV3IENsaWVudENvbmZpZ0dlbmVyYXRvckZhY3RvcnkoKCkgPT5cbiAgICBiYWNrZW5kT3V0cHV0Q2xpZW50LmdldE91dHB1dChiYWNrZW5kSWRlbnRpZmllciksXG4gIClcbiAgICAuZ2V0SW5zdGFuY2UobW9kZWxTY2hlbWFBZGFwdGVyLCB2ZXJzaW9uKVxuICAgIC5nZW5lcmF0ZUNsaWVudENvbmZpZygpIGFzIFByb21pc2U8Q2xpZW50Q29uZmlnVmVyc2lvblRlbXBsYXRlVHlwZTxUPj47XG59O1xuIl19