import _isCI from 'is-ci';
import { ClientConfigFormat, ClientConfigVersionOption, DEFAULT_CLIENT_CONFIG_VERSION, } from '@aws-amplify/client-config';
import { AmplifyUserError } from '@aws-amplify/platform-core';
import { format } from '@aws-amplify/cli-core';
/**
 * An entry point for deploy command.
 */
export class PipelineDeployCommand {
    clientConfigGenerator;
    backendDeployer;
    isCiEnvironment;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for deploy command.
     */
    constructor(clientConfigGenerator, backendDeployer, isCiEnvironment = _isCI) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendDeployer = backendDeployer;
        this.isCiEnvironment = isCiEnvironment;
        this.command = 'pipeline-deploy';
        this.describe =
            'Command to deploy backends in a custom CI/CD pipeline. This command is not intended to be used locally.';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        if (!this.isCiEnvironment) {
            throw new AmplifyUserError('RunningPipelineDeployNotInCiError', {
                message: 'It looks like this command is being run outside of a CI/CD workflow.',
                resolution: `To deploy locally use ${format.normalizeAmpxCommand('sandbox')} instead.`,
            });
        }
        const backendId = {
            namespace: args.appId,
            name: args.branch,
            type: 'branch',
        };
        await this.backendDeployer.deploy(backendId, {
            validateAppSources: true,
        });
        await this.clientConfigGenerator.generateClientConfigToFile(backendId, args.outputsVersion, args.outputsOutDir, args.outputsFormat);
    };
    builder = (yargs) => {
        return yargs
            .version(false)
            .option('branch', {
            describe: 'Name of the git branch being deployed',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('app-id', {
            describe: 'The app id of the target Amplify app',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('outputs-out-dir', {
            describe: 'A path to directory where amplify_outputs is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
        })
            .option('outputs-version', {
            describe: 'Version of the configuration. Version 0 represents classic amplify-cli config file amplify-configuration and 1 represents newer config file amplify_outputs',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigVersionOption),
            default: DEFAULT_CLIENT_CONFIG_VERSION,
        })
            .option('outputs-format', {
            describe: 'amplify_outputs file format',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigFormat),
        })
            .check(async (argv) => {
            if (argv['branch'].length === 0 || argv['app-id'].length === 0) {
                throw new AmplifyUserError('InvalidCommandInputError', {
                    message: 'Invalid --branch or --app-id',
                    resolution: '--branch and --app-id must be at least 1 character',
                });
            }
            return true;
        });
    };
}
//# sourceMappingURL=data:application/json;base64,