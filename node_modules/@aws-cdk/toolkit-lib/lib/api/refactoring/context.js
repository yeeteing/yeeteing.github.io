"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RefactoringContext = void 0;
const cloudformation_1 = require("./cloudformation");
const digest_1 = require("./digest");
const toolkit_error_1 = require("../../toolkit/toolkit-error");
/**
 * Encapsulates the information for refactoring resources in a single environment.
 */
class RefactoringContext {
    _mappings = [];
    ambiguousMoves = [];
    environment;
    constructor(props) {
        this.environment = props.environment;
        if (props.mappings != null) {
            this._mappings = props.mappings;
        }
        else {
            const moves = resourceMoves(props.deployedStacks, props.localStacks);
            this.ambiguousMoves = ambiguousMoves(moves);
            if (!this.isAmbiguous) {
                this._mappings = resourceMappings(resourceMoves(props.deployedStacks, props.localStacks), props.filteredStacks);
            }
        }
    }
    get isAmbiguous() {
        return this.ambiguousMoves.length > 0;
    }
    get ambiguousPaths() {
        return this.ambiguousMoves.map(([a, b]) => [convert(a), convert(b)]);
        function convert(locations) {
            return locations.map((l) => l.toPath());
        }
    }
    get mappings() {
        if (this.isAmbiguous) {
            throw new toolkit_error_1.ToolkitError('Cannot access mappings when there are ambiguous resource moves. Please resolve the ambiguity first.');
        }
        return this._mappings;
    }
}
exports.RefactoringContext = RefactoringContext;
function resourceMoves(before, after) {
    return Object.values(removeUnmovedResources(zip(groupByKey(resourceDigests(before)), groupByKey(resourceDigests(after)))));
}
function removeUnmovedResources(m) {
    const result = {};
    for (const [hash, [before, after]] of Object.entries(m)) {
        const common = before.filter((b) => after.some((a) => a.equalTo(b)));
        result[hash] = [
            before.filter((b) => !common.some((c) => b.equalTo(c))),
            after.filter((a) => !common.some((c) => a.equalTo(c))),
        ];
    }
    return result;
}
/**
 * For each hash, identifying a single resource, zip the two lists of locations,
 * producing a resource move
 */
function zip(m1, m2) {
    const result = {};
    for (const [hash, locations] of Object.entries(m1)) {
        if (hash in m2) {
            result[hash] = [locations, m2[hash]];
        }
        else {
            result[hash] = [locations, []];
        }
    }
    for (const [hash, locations] of Object.entries(m2)) {
        if (!(hash in m1)) {
            result[hash] = [[], locations];
        }
    }
    return result;
}
function groupByKey(entries) {
    const result = {};
    for (const [hash, location] of entries) {
        if (hash in result) {
            result[hash].push(location);
        }
        else {
            result[hash] = [location];
        }
    }
    return result;
}
/**
 * Computes a list of pairs [digest, location] for each resource in the stack.
 */
function resourceDigests(stacks) {
    // index stacks by name
    const stacksByName = new Map();
    for (const stack of stacks) {
        stacksByName.set(stack.stackName, stack);
    }
    const digests = (0, digest_1.computeResourceDigests)(stacks);
    return Object.entries(digests).map(([loc, digest]) => {
        const [stackName, logicalId] = loc.split('.');
        const location = new cloudformation_1.ResourceLocation(stacksByName.get(stackName), logicalId);
        return [digest, location];
    });
}
function ambiguousMoves(movements) {
    // A move is considered ambiguous if two conditions are met:
    //  1. Both sides have at least one element (otherwise, it's just addition or deletion)
    //  2. At least one side has more than one element
    return movements
        .filter(([pre, post]) => pre.length > 0 && post.length > 0)
        .filter(([pre, post]) => pre.length > 1 || post.length > 1);
}
function resourceMappings(movements, stacks) {
    const stacksPredicate = stacks == null
        ? () => true
        : (m) => {
            // Any movement that involves one of the selected stacks (either moving from or to)
            // is considered a candidate for refactoring.
            const stackNames = [m.source.stack.stackName, m.destination.stack.stackName];
            return stacks.some((stack) => stackNames.includes(stack.stackName));
        };
    return movements
        .filter(([pre, post]) => pre.length === 1 && post.length === 1 && !pre[0].equalTo(post[0]))
        .map(([pre, post]) => new cloudformation_1.ResourceMapping(pre[0], post[0]))
        .filter(stacksPredicate);
}
//# sourceMappingURL=data:application/json;base64,