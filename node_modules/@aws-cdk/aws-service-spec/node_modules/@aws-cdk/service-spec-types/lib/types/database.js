"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RichSpecDatabase = exports.loadDatabase = exports.emptyDatabase = void 0;
const fs_1 = require("fs");
const zlib_1 = require("zlib");
const tskb_1 = require("@cdklabs/tskb");
function emptyDatabase() {
    return new tskb_1.Database({
        resource: (0, tskb_1.entityCollection)().index({
            cloudFormationType: (0, tskb_1.fieldIndex)('cloudFormationType', tskb_1.stringCmp),
        }),
        region: (0, tskb_1.entityCollection)().index({
            name: (0, tskb_1.fieldIndex)('name', tskb_1.stringCmp),
        }),
        service: (0, tskb_1.entityCollection)().index({
            name: (0, tskb_1.fieldIndex)('name', tskb_1.stringCmp),
            cloudFormationNamespace: (0, tskb_1.fieldIndex)('cloudFormationNamespace', tskb_1.stringCmp),
        }),
        typeDefinition: (0, tskb_1.entityCollection)(),
        augmentations: (0, tskb_1.entityCollection)(),
        metric: (0, tskb_1.entityCollection)().index({
            name: (0, tskb_1.fieldIndex)('name', tskb_1.stringCmp),
            namespace: (0, tskb_1.fieldIndex)('namespace', tskb_1.stringCmp),
            dedupKey: (0, tskb_1.fieldIndex)('dedupKey', tskb_1.stringCmp),
        }),
        dimensionSet: (0, tskb_1.entityCollection)().index({
            dedupKey: (0, tskb_1.fieldIndex)('dedupKey', tskb_1.stringCmp),
        }),
    }, (r) => ({
        hasResource: r.relationship('service', 'resource'),
        regionHasResource: r.relationship('region', 'resource'),
        regionHasService: r.relationship('region', 'service'),
        usesType: r.relationship('resource', 'typeDefinition'),
        isAugmented: r.relationship('resource', 'augmentations'),
        usesDimensionSet: r.relationship('metric', 'dimensionSet'),
        resourceHasMetric: r.relationship('resource', 'metric'),
        serviceHasMetric: r.relationship('service', 'metric'),
        resourceHasDimensionSet: r.relationship('resource', 'dimensionSet'),
        serviceHasDimensionSet: r.relationship('service', 'dimensionSet'),
    }));
}
exports.emptyDatabase = emptyDatabase;
async function loadDatabase(pathToDb) {
    const db = emptyDatabase();
    const contents = await fs_1.promises.readFile(pathToDb);
    const json = pathToDb.endsWith('.gz') ? (0, zlib_1.gunzipSync)(contents).toString('utf-8') : contents.toString('utf-8');
    db.load(JSON.parse(json));
    return db;
}
exports.loadDatabase = loadDatabase;
/**
 * Helpers for working with a SpecDatabase
 */
class RichSpecDatabase {
    constructor(db) {
        this.db = db;
    }
    /**
     * Find all resources of a given type
     */
    resourceByType(cfnType, operation = 'resourceByType') {
        const res = this.db.lookup('resource', 'cloudFormationType', 'equals', cfnType);
        if (res.length === 0) {
            throw new Error(`${operation}: no such resource: ${cfnType}`);
        }
        return res[0];
    }
    /**
     * All type definitions used by a certain resource
     */
    resourceTypeDefs(cfnType) {
        const resource = this.db.lookup('resource', 'cloudFormationType', 'equals', cfnType).only();
        return this.db.follow('usesType', resource).map((x) => x.entity);
    }
    /**
     * Find a type definition from a given property type
     */
    tryFindDef(type) {
        return type.type === 'ref' ? this.db.get('typeDefinition', type.reference.$ref) : undefined;
    }
}
exports.RichSpecDatabase = RichSpecDatabase;
//# sourceMappingURL=data:application/json;base64,