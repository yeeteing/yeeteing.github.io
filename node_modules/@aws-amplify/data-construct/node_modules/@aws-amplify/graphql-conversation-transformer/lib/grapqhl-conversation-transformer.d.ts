import { ModelTransformer } from '@aws-amplify/graphql-model-transformer';
import { BelongsToTransformer, HasManyTransformer } from '@aws-amplify/graphql-relational-transformer';
import { TransformerPluginBase } from '@aws-amplify/graphql-transformer-core';
import { TransformerAuthProvider, TransformerContextProvider, TransformerPrepareStepContextProvider, TransformerSchemaVisitStepContextProvider } from '@aws-amplify/graphql-transformer-interfaces';
import { BackendOutputEntry, BackendOutputStorageStrategy } from '@aws-amplify/plugin-types';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import { DirectiveNode, FieldDefinitionNode, InterfaceTypeDefinitionNode, ObjectTypeDefinitionNode } from 'graphql';
export declare class ConversationTransformer extends TransformerPluginBase {
    private directives;
    private fieldHandler;
    private prepareHandler;
    private resolverGenerator;
    constructor(modelTransformer: ModelTransformer, hasManyTransformer: HasManyTransformer, belongsToTransformer: BelongsToTransformer, authProvider: TransformerAuthProvider, outputStorageStrategy?: BackendOutputStorageStrategy<BackendOutputEntry>, functionNameMap?: Record<string, lambda.IFunction>);
    field: (parent: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode, definition: FieldDefinitionNode, directive: DirectiveNode, context: TransformerSchemaVisitStepContextProvider) => void;
    generateResolvers: (ctx: TransformerContextProvider) => void;
    prepare: (ctx: TransformerPrepareStepContextProvider) => void;
}
//# sourceMappingURL=grapqhl-conversation-transformer.d.ts.map