import { TELEMETRY_ENABLED, USAGE_DATA_TRACKING_ENABLED, } from '@aws-amplify/platform-core';
import { printer } from '@aws-amplify/cli-core';
/**
 * Command to configure AWS Amplify profile.
 */
export class ConfigureTelemetryCommand {
    configController;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Configure profile command.
     */
    constructor(configController) {
        this.configController = configController;
        this.command = 'telemetry';
        this.describe = 'Configure anonymous usage data collection';
    }
    /**
     * @inheritDoc
     */
    handler = () => {
        // CommandModule requires handler implementation. But this is never called if top level command
        // is configured to require subcommand.
        // Help is printed by default in that case before ever attempting to call handler.
        throw new Error('Top level generate handler should never be called');
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .command('enable', 'Enable anonymous data collection', {}, async () => {
            await this.configController.set(USAGE_DATA_TRACKING_ENABLED, true);
            await this.configController.set(TELEMETRY_ENABLED, true);
            printer.log('You have enabled telemetry data collection');
        })
            .command('disable', 'Disable anonymous data collection', {}, async () => {
            await this.configController.set(USAGE_DATA_TRACKING_ENABLED, false);
            await this.configController.set(TELEMETRY_ENABLED, false);
            printer.log('You have disabled telemetry data collection');
        })
            .demandCommand()
            .strictCommands()
            .recommendCommands();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlX3RlbGVtZXRyeV9jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2NvbmZpZ3VyZS90ZWxlbWV0cnkvY29uZmlndXJlX3RlbGVtZXRyeV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxpQkFBaUIsRUFDakIsMkJBQTJCLEdBQzVCLE1BQU0sNEJBQTRCLENBQUM7QUFFcEMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2hEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHlCQUF5QjtJQWNQO0lBYjdCOztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFBNkIsZ0JBQXlDO1FBQXpDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBeUI7UUFDcEUsSUFBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBRywyQ0FBMkMsQ0FBQztJQUM5RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLEdBQUcsR0FBRyxFQUFFO1FBQ2IsK0ZBQStGO1FBQy9GLHVDQUF1QztRQUN2QyxrRkFBa0Y7UUFDbEYsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0lBQ3ZFLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUFFLEVBQUU7UUFDeEIsT0FBTyxLQUFLO2FBQ1QsT0FBTyxDQUFDLFFBQVEsRUFBRSxrQ0FBa0MsRUFBRSxFQUFFLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDcEUsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ25FLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUN6RCxPQUFPLENBQUMsR0FBRyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDO2FBQ0QsT0FBTyxDQUFDLFNBQVMsRUFBRSxtQ0FBbUMsRUFBRSxFQUFFLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdEUsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3BFLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMxRCxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDO2FBQ0QsYUFBYSxFQUFFO2FBQ2YsY0FBYyxFQUFFO2FBQ2hCLGlCQUFpQixFQUFFLENBQUM7SUFDekIsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb25maWd1cmF0aW9uQ29udHJvbGxlcixcbiAgVEVMRU1FVFJZX0VOQUJMRUQsXG4gIFVTQUdFX0RBVEFfVFJBQ0tJTkdfRU5BQkxFRCxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IHByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuLyoqXG4gKiBDb21tYW5kIHRvIGNvbmZpZ3VyZSBBV1MgQW1wbGlmeSBwcm9maWxlLlxuICovXG5leHBvcnQgY2xhc3MgQ29uZmlndXJlVGVsZW1ldHJ5Q29tbWFuZCBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0PiB7XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogQ29uZmlndXJlIHByb2ZpbGUgY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgY29uZmlnQ29udHJvbGxlcjogQ29uZmlndXJhdGlvbkNvbnRyb2xsZXIpIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAndGVsZW1ldHJ5JztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0NvbmZpZ3VyZSBhbm9ueW1vdXMgdXNhZ2UgZGF0YSBjb2xsZWN0aW9uJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9ICgpID0+IHtcbiAgICAvLyBDb21tYW5kTW9kdWxlIHJlcXVpcmVzIGhhbmRsZXIgaW1wbGVtZW50YXRpb24uIEJ1dCB0aGlzIGlzIG5ldmVyIGNhbGxlZCBpZiB0b3AgbGV2ZWwgY29tbWFuZFxuICAgIC8vIGlzIGNvbmZpZ3VyZWQgdG8gcmVxdWlyZSBzdWJjb21tYW5kLlxuICAgIC8vIEhlbHAgaXMgcHJpbnRlZCBieSBkZWZhdWx0IGluIHRoYXQgY2FzZSBiZWZvcmUgZXZlciBhdHRlbXB0aW5nIHRvIGNhbGwgaGFuZGxlci5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RvcCBsZXZlbCBnZW5lcmF0ZSBoYW5kbGVyIHNob3VsZCBuZXZlciBiZSBjYWxsZWQnKTtcbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpID0+IHtcbiAgICByZXR1cm4geWFyZ3NcbiAgICAgIC5jb21tYW5kKCdlbmFibGUnLCAnRW5hYmxlIGFub255bW91cyBkYXRhIGNvbGxlY3Rpb24nLCB7fSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCB0aGlzLmNvbmZpZ0NvbnRyb2xsZXIuc2V0KFVTQUdFX0RBVEFfVFJBQ0tJTkdfRU5BQkxFRCwgdHJ1ZSk7XG4gICAgICAgIGF3YWl0IHRoaXMuY29uZmlnQ29udHJvbGxlci5zZXQoVEVMRU1FVFJZX0VOQUJMRUQsIHRydWUpO1xuICAgICAgICBwcmludGVyLmxvZygnWW91IGhhdmUgZW5hYmxlZCB0ZWxlbWV0cnkgZGF0YSBjb2xsZWN0aW9uJyk7XG4gICAgICB9KVxuICAgICAgLmNvbW1hbmQoJ2Rpc2FibGUnLCAnRGlzYWJsZSBhbm9ueW1vdXMgZGF0YSBjb2xsZWN0aW9uJywge30sIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5jb25maWdDb250cm9sbGVyLnNldChVU0FHRV9EQVRBX1RSQUNLSU5HX0VOQUJMRUQsIGZhbHNlKTtcbiAgICAgICAgYXdhaXQgdGhpcy5jb25maWdDb250cm9sbGVyLnNldChURUxFTUVUUllfRU5BQkxFRCwgZmFsc2UpO1xuICAgICAgICBwcmludGVyLmxvZygnWW91IGhhdmUgZGlzYWJsZWQgdGVsZW1ldHJ5IGRhdGEgY29sbGVjdGlvbicpO1xuICAgICAgfSlcbiAgICAgIC5kZW1hbmRDb21tYW5kKClcbiAgICAgIC5zdHJpY3RDb21tYW5kcygpXG4gICAgICAucmVjb21tZW5kQ29tbWFuZHMoKTtcbiAgfTtcbn1cbiJdfQ==