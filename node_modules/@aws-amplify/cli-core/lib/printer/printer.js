import { WriteStream } from 'node:tty';
import { EOL } from 'os';
import ora from 'ora';
import { format } from '../format/format.js';
import stripANSI from 'strip-ansi';
/**
 * The class that pretty prints to the output stream.
 */
export class Printer {
    minimumLogLevel;
    stdout;
    stderr;
    refreshRate;
    ttyEnabled;
    currentSpinner = {};
    /**
     * Sets default configs
     */
    constructor(minimumLogLevel, stdout = process.stdout, stderr = process.stderr, refreshRate = 100, ttyEnabled = process.env.CI
        ? false
        : stdout instanceof WriteStream
            ? stdout.isTTY
            : false) {
        this.minimumLogLevel = minimumLogLevel;
        this.stdout = stdout;
        this.stderr = stderr;
        this.refreshRate = refreshRate;
        this.ttyEnabled = ttyEnabled;
    }
    /**
     * Prints a given message to output stream followed by a newline.
     * If a spinner is running, honor it and keep the spinner at the cursor running
     */
    print = (message) => {
        message = this.stringify(message);
        if (this.isSpinnerRunning()) {
            this.printWhileSpinnerRunning(message);
            return;
        }
        if (!this.ttyEnabled) {
            message = stripANSI(message);
        }
        this.stdout.write(message);
        this.printNewLine();
    };
    /**
     * Prints a new line to output stream
     */
    printNewLine = () => {
        this.stdout.write(EOL);
    };
    /**
     * Logs a message to the output stream at the given log level followed by a newline
     */
    log = (message, level = LogLevel.INFO) => {
        message = this.stringify(message);
        const doLogMessage = level <= this.minimumLogLevel;
        if (!doLogMessage) {
            return;
        }
        this.print(this.prefixedMessage(message, level));
    };
    /**
     * Logs a message with animated spinner
     * If stdout is not a TTY, the message is logged at the info level without a spinner
     */
    indicateProgress = async (message, callback, successMessage) => {
        try {
            this.startSpinner(message, { timeoutSeconds: 3600 });
            await callback();
        }
        finally {
            this.stopSpinner(successMessage);
        }
    };
    /**
     * Start a spinner for the given message.
     * If stdout is not a TTY, the message is logged at the info level without a spinner
     */
    startSpinner = (message, options = { timeoutSeconds: 60 }) => {
        if (!this.ttyEnabled) {
            // Ora prints messages with a preceding `-` in non-tty console. We avoid it
            this.log(message);
            return;
        }
        // Can only run one spinner at a time.
        if (this.isSpinnerRunning()) {
            this.stopSpinner();
        }
        this.currentSpinner = {
            instance: ora({
                text: message,
                prefixText: this.getLogPrefix(),
                color: 'white',
                stream: this.stdout,
                spinner: 'dots',
                interval: this.refreshRate,
                discardStdin: false,
                hideCursor: false,
                isEnabled: this.ttyEnabled,
            }).start(),
            timeout: setTimeout(() => {
                this.stopSpinner();
            }, options.timeoutSeconds * 1000),
        };
    };
    isSpinnerRunning = () => {
        return this.currentSpinner.instance !== undefined;
    };
    /**
     * Stop the current running spinner
     */
    stopSpinner = (successMessage) => {
        if (this.currentSpinner.instance === undefined) {
            if (!this.ttyEnabled && successMessage) {
                this.print(`${format.success('âœ”')} ${successMessage}`);
            }
            return;
        }
        if (successMessage) {
            this.currentSpinner.instance.succeed(this.prefixedMessage(successMessage));
        }
        else {
            this.currentSpinner.instance.stop();
        }
        clearTimeout(this.currentSpinner.timeout);
        this.currentSpinner = {};
    };
    /**
     * Update the current running spinner options, e.g. message or prefixText
     */
    updateSpinner = (options) => {
        if (!this.ttyEnabled) {
            // prefix texts are not displayed in non-tty console by Ora and regular messages have a preceding `-`
            options.prefixText && this.log(options.prefixText);
            options.message && this.log(options.message);
            return;
        }
        if (this.currentSpinner.instance === undefined) {
            this.log(`No running spinner found.`, LogLevel.WARN);
            // // Maybe timed out? If the message was available, we start a new one
            if (options.message) {
                this.startSpinner(options.message);
                this.updateSpinner({ prefixText: options.prefixText });
            }
            return;
        }
        if (options.prefixText) {
            this.currentSpinner.instance.prefixText =
                options.prefixText + this.getLogPrefix();
        }
        else if (options.message) {
            this.currentSpinner.instance.text = options.message;
        }
        // Refresh the timer
        this.currentSpinner.timeout?.refresh();
    };
    /**
     * Clears the console
     */
    clearConsole = () => {
        if (!this.ttyEnabled) {
            return;
        }
        const lines = process.stdout.rows;
        this.stdout.write('\n'.repeat(process.stdout.rows));
        process.stdout.moveCursor(0, -lines);
    };
    printWhileSpinnerRunning = (message) => {
        if (!this.isSpinnerRunning()) {
            return;
        }
        const spinnerMessage = this.currentSpinner.instance?.text;
        this.currentSpinner.instance?.clear();
        this.stdout.write(message);
        this.printNewLine();
        this.currentSpinner.instance?.start(spinnerMessage);
    };
    stringify = (msg) => {
        if (typeof msg === 'string') {
            return msg;
        }
        else if (msg instanceof Error) {
            return msg.message;
        }
        try {
            return JSON.stringify(msg, null, 2);
        }
        catch {
            return String(msg);
        }
    };
    getLogPrefix = (level = LogLevel.INFO) => {
        let logPrefixFormatFn = format.dim;
        if (level <= LogLevel.WARN) {
            logPrefixFormatFn = (prefix) => {
                const prefixColor = level === LogLevel.ERROR ? 'Red' : 'Yellow';
                return format.bold(format.color(`${prefix} [${LogLevel[level]}]`, prefixColor));
            };
        }
        return logPrefixFormatFn(new Date().toLocaleTimeString());
    };
    prefixedMessage = (message, level = LogLevel.INFO) => {
        return message && [LogLevel.ERROR, LogLevel.DEBUG].includes(level)
            ? `${this.getLogPrefix(level)} ${message}`
            : message
                .split(EOL)
                .map((line) => `${this.getLogPrefix(level)} ${line}`)
                .join(EOL);
    };
}
export var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["ERROR"] = 0] = "ERROR";
    LogLevel[LogLevel["WARN"] = 1] = "WARN";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["DEBUG"] = 3] = "DEBUG";
})(LogLevel || (LogLevel = {}));
//# sourceMappingURL=data:application/json;base64,