import { ListAppsCommand } from '@aws-sdk/client-amplify';
import { BackendIdentifierConversions } from '@aws-amplify/platform-core';
/**
 * Resolves stack names given an Amplify app name and branch
 */
export class AppNameAndBranchMainStackNameResolver {
    amplifyClient;
    appNameAndBranch;
    /**
     * Initialize with an Amplify client and app info
     */
    constructor(amplifyClient, appNameAndBranch) {
        this.amplifyClient = amplifyClient;
        this.appNameAndBranch = appNameAndBranch;
    }
    /**
     * Lists all apps and filters by the specified appName. If one and only one app matches, then the appId is used.
     * If zero or multiple apps are found, an error message is thrown
     */
    resolveMainStackName = async () => {
        const listAppsResult = await this.amplifyClient.send(
        // 100 is the max page size. It is also the hard limit for how many Amplify apps you can have so no pagination is necessary
        new ListAppsCommand({ maxResults: 100 }));
        const appMatches = (listAppsResult?.apps || []).filter((app) => app.name === this.appNameAndBranch.appName);
        const region = await this.amplifyClient.config.region();
        if (appMatches.length === 0) {
            throw new Error(`No apps found with name ${this.appNameAndBranch.appName} in region ${region}`);
        }
        else if (appMatches.length >= 2) {
            throw new Error(`Multiple apps found with name ${this.appNameAndBranch.appName} in region ${region}. Use AppId instead of AppName to specify which Amplify App to use.`);
        }
        // if we get here, appMatches has one and only one entry
        const appId = appMatches[0].appId;
        if (typeof appId !== 'string') {
            // if this happens something has gone seriously wrong. It's probably an Amplify service issue.
            throw new Error(`Could not determine appId from app name ${this.appNameAndBranch.appName}. Try using AppId instead.`);
        }
        return BackendIdentifierConversions.toStackName({
            namespace: appId,
            name: this.appNameAndBranch.branchName,
            type: 'branch',
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX25hbWVfYW5kX2JyYW5jaF9tYWluX3N0YWNrX25hbWVfcmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RhY2stbmFtZS1yZXNvbHZlcnMvYXBwX25hbWVfYW5kX2JyYW5jaF9tYWluX3N0YWNrX25hbWVfcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFpQixlQUFlLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQVUxRTs7R0FFRztBQUNILE1BQU0sT0FBTyxxQ0FBcUM7SUFPN0I7SUFDQTtJQUxuQjs7T0FFRztJQUNILFlBQ21CLGFBQTRCLEVBQzVCLGdCQUFtRDtRQURuRCxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUM1QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQW1DO0lBQ25FLENBQUM7SUFFSjs7O09BR0c7SUFDSCxvQkFBb0IsR0FBRyxLQUFLLElBQXFCLEVBQUU7UUFDakQsTUFBTSxjQUFjLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUk7UUFDbEQsMkhBQTJIO1FBQzNILElBQUksZUFBZSxDQUFDLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQ3pDLENBQUM7UUFDRixNQUFNLFVBQVUsR0FBRyxDQUFDLGNBQWMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUNwRCxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUNwRCxDQUFDO1FBQ0YsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN4RCxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDNUIsTUFBTSxJQUFJLEtBQUssQ0FDYiwyQkFBMkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sY0FBYyxNQUFNLEVBQUUsQ0FDL0UsQ0FBQztRQUNKLENBQUM7YUFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FDYixpQ0FBaUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sY0FBYyxNQUFNLHFFQUFxRSxDQUN4SixDQUFDO1FBQ0osQ0FBQztRQUNELHdEQUF3RDtRQUN4RCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2xDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDOUIsOEZBQThGO1lBQzlGLE1BQU0sSUFBSSxLQUFLLENBQ2IsMkNBQTJDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLDRCQUE0QixDQUNyRyxDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sNEJBQTRCLENBQUMsV0FBVyxDQUFDO1lBQzlDLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLElBQUksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVTtZQUN0QyxJQUFJLEVBQUUsUUFBUTtTQUNmLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFpblN0YWNrTmFtZVJlc29sdmVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBBbXBsaWZ5Q2xpZW50LCBMaXN0QXBwc0NvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtYW1wbGlmeSc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllckNvbnZlcnNpb25zIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG4vKipcbiAqIFR1cGxlIG9mIEFtcGxpZnkgQXBwIG5hbWUgYW5kIGJyYW5jaFxuICovXG5leHBvcnQgdHlwZSBBcHBOYW1lQW5kQnJhbmNoQmFja2VuZElkZW50aWZpZXIgPSB7XG4gIGFwcE5hbWU6IHN0cmluZztcbiAgYnJhbmNoTmFtZTogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBSZXNvbHZlcyBzdGFjayBuYW1lcyBnaXZlbiBhbiBBbXBsaWZ5IGFwcCBuYW1lIGFuZCBicmFuY2hcbiAqL1xuZXhwb3J0IGNsYXNzIEFwcE5hbWVBbmRCcmFuY2hNYWluU3RhY2tOYW1lUmVzb2x2ZXJcbiAgaW1wbGVtZW50cyBNYWluU3RhY2tOYW1lUmVzb2x2ZXJcbntcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgd2l0aCBhbiBBbXBsaWZ5IGNsaWVudCBhbmQgYXBwIGluZm9cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYW1wbGlmeUNsaWVudDogQW1wbGlmeUNsaWVudCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFwcE5hbWVBbmRCcmFuY2g6IEFwcE5hbWVBbmRCcmFuY2hCYWNrZW5kSWRlbnRpZmllcixcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBMaXN0cyBhbGwgYXBwcyBhbmQgZmlsdGVycyBieSB0aGUgc3BlY2lmaWVkIGFwcE5hbWUuIElmIG9uZSBhbmQgb25seSBvbmUgYXBwIG1hdGNoZXMsIHRoZW4gdGhlIGFwcElkIGlzIHVzZWQuXG4gICAqIElmIHplcm8gb3IgbXVsdGlwbGUgYXBwcyBhcmUgZm91bmQsIGFuIGVycm9yIG1lc3NhZ2UgaXMgdGhyb3duXG4gICAqL1xuICByZXNvbHZlTWFpblN0YWNrTmFtZSA9IGFzeW5jICgpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIGNvbnN0IGxpc3RBcHBzUmVzdWx0ID0gYXdhaXQgdGhpcy5hbXBsaWZ5Q2xpZW50LnNlbmQoXG4gICAgICAvLyAxMDAgaXMgdGhlIG1heCBwYWdlIHNpemUuIEl0IGlzIGFsc28gdGhlIGhhcmQgbGltaXQgZm9yIGhvdyBtYW55IEFtcGxpZnkgYXBwcyB5b3UgY2FuIGhhdmUgc28gbm8gcGFnaW5hdGlvbiBpcyBuZWNlc3NhcnlcbiAgICAgIG5ldyBMaXN0QXBwc0NvbW1hbmQoeyBtYXhSZXN1bHRzOiAxMDAgfSksXG4gICAgKTtcbiAgICBjb25zdCBhcHBNYXRjaGVzID0gKGxpc3RBcHBzUmVzdWx0Py5hcHBzIHx8IFtdKS5maWx0ZXIoXG4gICAgICAoYXBwKSA9PiBhcHAubmFtZSA9PT0gdGhpcy5hcHBOYW1lQW5kQnJhbmNoLmFwcE5hbWUsXG4gICAgKTtcbiAgICBjb25zdCByZWdpb24gPSBhd2FpdCB0aGlzLmFtcGxpZnlDbGllbnQuY29uZmlnLnJlZ2lvbigpO1xuICAgIGlmIChhcHBNYXRjaGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgTm8gYXBwcyBmb3VuZCB3aXRoIG5hbWUgJHt0aGlzLmFwcE5hbWVBbmRCcmFuY2guYXBwTmFtZX0gaW4gcmVnaW9uICR7cmVnaW9ufWAsXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoYXBwTWF0Y2hlcy5sZW5ndGggPj0gMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgTXVsdGlwbGUgYXBwcyBmb3VuZCB3aXRoIG5hbWUgJHt0aGlzLmFwcE5hbWVBbmRCcmFuY2guYXBwTmFtZX0gaW4gcmVnaW9uICR7cmVnaW9ufS4gVXNlIEFwcElkIGluc3RlYWQgb2YgQXBwTmFtZSB0byBzcGVjaWZ5IHdoaWNoIEFtcGxpZnkgQXBwIHRvIHVzZS5gLFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gaWYgd2UgZ2V0IGhlcmUsIGFwcE1hdGNoZXMgaGFzIG9uZSBhbmQgb25seSBvbmUgZW50cnlcbiAgICBjb25zdCBhcHBJZCA9IGFwcE1hdGNoZXNbMF0uYXBwSWQ7XG4gICAgaWYgKHR5cGVvZiBhcHBJZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGlmIHRoaXMgaGFwcGVucyBzb21ldGhpbmcgaGFzIGdvbmUgc2VyaW91c2x5IHdyb25nLiBJdCdzIHByb2JhYmx5IGFuIEFtcGxpZnkgc2VydmljZSBpc3N1ZS5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENvdWxkIG5vdCBkZXRlcm1pbmUgYXBwSWQgZnJvbSBhcHAgbmFtZSAke3RoaXMuYXBwTmFtZUFuZEJyYW5jaC5hcHBOYW1lfS4gVHJ5IHVzaW5nIEFwcElkIGluc3RlYWQuYCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBCYWNrZW5kSWRlbnRpZmllckNvbnZlcnNpb25zLnRvU3RhY2tOYW1lKHtcbiAgICAgIG5hbWVzcGFjZTogYXBwSWQsXG4gICAgICBuYW1lOiB0aGlzLmFwcE5hbWVBbmRCcmFuY2guYnJhbmNoTmFtZSxcbiAgICAgIHR5cGU6ICdicmFuY2gnLFxuICAgIH0pO1xuICB9O1xufVxuIl19