import _fsp from 'fs/promises';
import path from 'path';
import { ClientConfigFormat, } from '../client-config-types/client_config.js';
import { AmplifyUserError } from '@aws-amplify/platform-core';
/**
 * A class that persists client config to disk.
 */
export class ClientConfigWriter {
    pathResolver;
    nameResolver;
    formatter;
    fsp;
    /**
     * Creates client config writer
     */
    constructor(pathResolver, nameResolver, formatter, fsp = _fsp) {
        this.pathResolver = pathResolver;
        this.nameResolver = nameResolver;
        this.formatter = formatter;
        this.fsp = fsp;
    }
    /**
     * Persists provided client config as json file to target path.
     */
    writeClientConfig = async (clientConfig, version, outDir, format = ClientConfigFormat.JSON) => {
        const targetPath = await this.pathResolver(this.nameResolver(version), outDir, format);
        const fileContent = this.formatter.format(clientConfig, format);
        try {
            await this.fsp.writeFile(targetPath, fileContent);
        }
        catch (err) {
            const error = err;
            if (error.message.includes('EACCES')) {
                throw new AmplifyUserError('PermissionsError', {
                    message: `You do not have the permissions to write to this file: ${targetPath}`,
                    resolution: `Ensure that you have the right permissions to write to ${targetPath}.`,
                }, error);
            }
            else {
                throw error;
            }
        }
        return {
            filesWritten: [path.relative(process.cwd(), targetPath)],
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ193cml0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ193cml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sYUFBYSxDQUFDO0FBQy9CLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUN4QixPQUFPLEVBR0wsa0JBQWtCLEdBR25CLE1BQU0seUNBQXlDLENBQUM7QUFFakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFZOUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBS1Y7SUFDQTtJQUNBO0lBQ0E7SUFQbkI7O09BRUc7SUFDSCxZQUNtQixZQUFzQyxFQUN0QyxZQUFzQyxFQUN0QyxTQUFnQyxFQUNoQyxNQUFNLElBQUk7UUFIVixpQkFBWSxHQUFaLFlBQVksQ0FBMEI7UUFDdEMsaUJBQVksR0FBWixZQUFZLENBQTBCO1FBQ3RDLGNBQVMsR0FBVCxTQUFTLENBQXVCO1FBQ2hDLFFBQUcsR0FBSCxHQUFHLENBQU87SUFDMUIsQ0FBQztJQUNKOztPQUVHO0lBQ0gsaUJBQWlCLEdBQUcsS0FBSyxFQUN2QixZQUEwQixFQUMxQixPQUE0QixFQUM1QixNQUFlLEVBQ2YsU0FBNkIsa0JBQWtCLENBQUMsSUFBSSxFQUNULEVBQUU7UUFDN0MsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUMxQixNQUFNLEVBQ04sTUFBTSxDQUNQLENBQUM7UUFDRixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFaEUsSUFBSSxDQUFDO1lBQ0gsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7WUFDYixNQUFNLEtBQUssR0FBRyxHQUFZLENBQUM7WUFDM0IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO2dCQUNyQyxNQUFNLElBQUksZ0JBQWdCLENBQ3hCLGtCQUFrQixFQUNsQjtvQkFDRSxPQUFPLEVBQUUsMERBQTBELFVBQVUsRUFBRTtvQkFDL0UsVUFBVSxFQUFFLDBEQUEwRCxVQUFVLEdBQUc7aUJBQ3BGLEVBQ0QsS0FBSyxDQUNOLENBQUM7WUFDSixDQUFDO2lCQUFNLENBQUM7Z0JBQ04sTUFBTSxLQUFLLENBQUM7WUFDZCxDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU87WUFDTCxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxVQUFVLENBQUMsQ0FBQztTQUN6RCxDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2ZzcCBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7XG4gIENsaWVudENvbmZpZyxcbiAgQ2xpZW50Q29uZmlnRmlsZUJhc2VOYW1lLFxuICBDbGllbnRDb25maWdGb3JtYXQsXG4gIENsaWVudENvbmZpZ1ZlcnNpb24sXG4gIEdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlUmVzdWx0LFxufSBmcm9tICcuLi9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnRm9ybWF0dGVyIH0gZnJvbSAnLi9jbGllbnRfY29uZmlnX2Zvcm1hdHRlci5qcyc7XG5pbXBvcnQgeyBBbXBsaWZ5VXNlckVycm9yIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuXG5leHBvcnQgdHlwZSBDbGllbnRDb25maWdQYXRoUmVzb2x2ZXIgPSAoXG4gIGZpbGVOYW1lOiBDbGllbnRDb25maWdGaWxlQmFzZU5hbWUsXG4gIG91dERpcj86IHN0cmluZyxcbiAgZm9ybWF0PzogQ2xpZW50Q29uZmlnRm9ybWF0LFxuKSA9PiBQcm9taXNlPHN0cmluZz47XG5cbmV4cG9ydCB0eXBlIENsaWVudENvbmZpZ05hbWVSZXNvbHZlciA9IChcbiAgdmVyc2lvbjogQ2xpZW50Q29uZmlnVmVyc2lvbixcbikgPT4gQ2xpZW50Q29uZmlnRmlsZUJhc2VOYW1lO1xuXG4vKipcbiAqIEEgY2xhc3MgdGhhdCBwZXJzaXN0cyBjbGllbnQgY29uZmlnIHRvIGRpc2suXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGllbnRDb25maWdXcml0ZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBjbGllbnQgY29uZmlnIHdyaXRlclxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYXRoUmVzb2x2ZXI6IENsaWVudENvbmZpZ1BhdGhSZXNvbHZlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5hbWVSZXNvbHZlcjogQ2xpZW50Q29uZmlnTmFtZVJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZm9ybWF0dGVyOiBDbGllbnRDb25maWdGb3JtYXR0ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBmc3AgPSBfZnNwLFxuICApIHt9XG4gIC8qKlxuICAgKiBQZXJzaXN0cyBwcm92aWRlZCBjbGllbnQgY29uZmlnIGFzIGpzb24gZmlsZSB0byB0YXJnZXQgcGF0aC5cbiAgICovXG4gIHdyaXRlQ2xpZW50Q29uZmlnID0gYXN5bmMgKFxuICAgIGNsaWVudENvbmZpZzogQ2xpZW50Q29uZmlnLFxuICAgIHZlcnNpb246IENsaWVudENvbmZpZ1ZlcnNpb24sXG4gICAgb3V0RGlyPzogc3RyaW5nLFxuICAgIGZvcm1hdDogQ2xpZW50Q29uZmlnRm9ybWF0ID0gQ2xpZW50Q29uZmlnRm9ybWF0LkpTT04sXG4gICk6IFByb21pc2U8R2VuZXJhdGVDbGllbnRDb25maWdUb0ZpbGVSZXN1bHQ+ID0+IHtcbiAgICBjb25zdCB0YXJnZXRQYXRoID0gYXdhaXQgdGhpcy5wYXRoUmVzb2x2ZXIoXG4gICAgICB0aGlzLm5hbWVSZXNvbHZlcih2ZXJzaW9uKSxcbiAgICAgIG91dERpcixcbiAgICAgIGZvcm1hdCxcbiAgICApO1xuICAgIGNvbnN0IGZpbGVDb250ZW50ID0gdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGNsaWVudENvbmZpZywgZm9ybWF0KTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmZzcC53cml0ZUZpbGUodGFyZ2V0UGF0aCwgZmlsZUNvbnRlbnQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc3QgZXJyb3IgPSBlcnIgYXMgRXJyb3I7XG4gICAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnRUFDQ0VTJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFtcGxpZnlVc2VyRXJyb3IoXG4gICAgICAgICAgJ1Blcm1pc3Npb25zRXJyb3InLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBZb3UgZG8gbm90IGhhdmUgdGhlIHBlcm1pc3Npb25zIHRvIHdyaXRlIHRvIHRoaXMgZmlsZTogJHt0YXJnZXRQYXRofWAsXG4gICAgICAgICAgICByZXNvbHV0aW9uOiBgRW5zdXJlIHRoYXQgeW91IGhhdmUgdGhlIHJpZ2h0IHBlcm1pc3Npb25zIHRvIHdyaXRlIHRvICR7dGFyZ2V0UGF0aH0uYCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbGVzV3JpdHRlbjogW3BhdGgucmVsYXRpdmUocHJvY2Vzcy5jd2QoKSwgdGFyZ2V0UGF0aCldLFxuICAgIH07XG4gIH07XG59XG4iXX0=