"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryContext = exports.FileContext = exports.CdkAppMultiContext = void 0;
exports.persistableContext = persistableContext;
const fs_1 = require("fs");
const os = require("os");
const path = require("path");
const toolkit_error_1 = require("../../toolkit/toolkit-error");
const context_1 = require("../context");
const settings_1 = require("../settings");
/**
 * A context store as used by a CDK app.
 *
 * Will source context from the following locations:
 *
 * - Any context values passed to the constructor (expected
 *   to come from the command line, treated as ephemeral).
 * - The `context` key in `<appDirectory>/cdk.json`.
 * - `<appDirectory>/cdk.context.json`.
 * - The `context` key in `~/.cdk.json`.
 *
 * Updates will be written to `<appDirectory>/cdk.context.json`.
 */
class CdkAppMultiContext {
    commandlineContext;
    _context;
    configContextFile;
    projectContextFile;
    userConfigFile;
    constructor(appDirectory, commandlineContext) {
        this.commandlineContext = commandlineContext;
        this.configContextFile = path.join(appDirectory, 'cdk.json');
        this.projectContextFile = path.join(appDirectory, 'cdk.context.json');
        this.userConfigFile = path.join(os.homedir() ?? '/tmp', '.cdk.json');
    }
    async read() {
        const context = await this.asyncInitialize();
        return context.all;
    }
    async update(updates) {
        const context = await this.asyncInitialize();
        for (const [key, value] of Object.entries(updates)) {
            context.set(key, value);
        }
        await context.save(this.projectContextFile);
    }
    /**
     * Initialize the `Context` object
     *
     * This code all exists to reuse code that's already there, to minimize
     * the chances of the new code behaving subtly differently than the
     * old code.
     *
     * It might be most of this is unnecessary now...
     */
    async asyncInitialize() {
        if (this._context) {
            return this._context;
        }
        const contextSources = [
            { bag: new settings_1.Settings(this.commandlineContext, true) },
            {
                fileName: this.configContextFile,
                bag: (await settingsFromFile(this.configContextFile)).subSettings(['context']).makeReadOnly(),
            },
            {
                fileName: this.projectContextFile,
                bag: await settingsFromFile(this.projectContextFile),
            },
            {
                fileName: this.userConfigFile,
                bag: (await settingsFromFile(this.userConfigFile)).subSettings(['context']).makeReadOnly(),
            },
        ];
        this._context = new context_1.Context(...contextSources);
        return this._context;
    }
}
exports.CdkAppMultiContext = CdkAppMultiContext;
/**
 * On-disk context stored in a single file
 */
class FileContext {
    fileName;
    _cache;
    constructor(fileName) {
        this.fileName = fileName;
    }
    async read() {
        if (!this._cache) {
            try {
                this._cache = JSON.parse(await fs_1.promises.readFile(this.fileName, 'utf-8'));
            }
            catch (e) {
                if (e.code === 'ENOENT') {
                    this._cache = {};
                }
                else {
                    throw e;
                }
            }
        }
        if (!this._cache || typeof this._cache !== 'object') {
            throw new toolkit_error_1.ToolkitError(`${this.fileName} must contain an object, got: ${JSON.stringify(this._cache)}`);
        }
        return this._cache;
    }
    async update(updates) {
        this._cache = {
            ...await this.read(),
            ...updates,
        };
        const persistable = persistableContext(this._cache);
        await fs_1.promises.writeFile(this.fileName, JSON.stringify(persistable, undefined, 2), 'utf-8');
    }
}
exports.FileContext = FileContext;
/**
 * An in-memory context store
 */
class MemoryContext {
    context = {};
    constructor(initialContext) {
        this.context = { ...initialContext };
    }
    read() {
        return Promise.resolve(this.context);
    }
    update(updates) {
        this.context = {
            ...this.context,
            ...updates,
        };
        return Promise.resolve();
    }
}
exports.MemoryContext = MemoryContext;
/**
 * Filter the given context, leaving only entries that should be persisted
 */
function persistableContext(context) {
    return Object.fromEntries(Object.entries(context)
        .filter(([_, value]) => !isTransientValue(value)));
}
function isTransientValue(x) {
    return x && typeof x === 'object' && x[settings_1.TRANSIENT_CONTEXT_KEY];
}
async function settingsFromFile(filename) {
    try {
        const data = JSON.parse(await fs_1.promises.readFile(filename, 'utf-8'));
        return new settings_1.Settings(data);
    }
    catch (e) {
        if (e.code === 'ENOENT') {
            return new settings_1.Settings();
        }
        throw e;
    }
}
//# sourceMappingURL=data:application/json;base64,