import { fileURLToPath } from 'node:url';
import { SandboxCommand, } from './sandbox_command.js';
import { SandboxSingletonFactory } from '@aws-amplify/sandbox';
import { SandboxDeleteCommand } from './sandbox-delete/sandbox_delete_command.js';
import { SandboxSeedCommand } from './sandbox-seed/sandbox_seed_command.js';
import { SandboxBackendIdResolver } from './sandbox_id_resolver.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { LocalNamespaceResolver } from '../../backend-identifier/local_namespace_resolver.js';
import { createSandboxSecretCommand } from './sandbox-secret/sandbox_secret_command_factory.js';
import { PackageJsonReader, UsageDataEmitterFactory, } from '@aws-amplify/platform-core';
import { SandboxEventHandlerFactory } from './sandbox_event_handler_factory.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { PackageManagerControllerFactory, format, printer, } from '@aws-amplify/cli-core';
import { S3Client } from '@aws-sdk/client-s3';
import { AmplifyClient } from '@aws-sdk/client-amplify';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { SandboxSeedGeneratePolicyCommand } from './sandbox-seed/sandbox_seed_policy_command.js';
import { SDKProfileResolverProvider } from '../../sdk_profile_resolver_provider.js';
/**
 * Creates wired sandbox command.
 */
export const createSandboxCommand = (noticesRenderer) => {
    const sandboxBackendIdPartsResolver = new SandboxBackendIdResolver(new LocalNamespaceResolver(new PackageJsonReader()));
    const sandboxFactory = new SandboxSingletonFactory(sandboxBackendIdPartsResolver.resolve, new SDKProfileResolverProvider().resolve, printer, format);
    const s3Client = new S3Client();
    const amplifyClient = new AmplifyClient();
    const cloudFormationClient = new CloudFormationClient();
    const awsClientProvider = {
        getS3Client: () => s3Client,
        getAmplifyClient: () => amplifyClient,
        getCloudFormationClient: () => cloudFormationClient,
    };
    const clientConfigGeneratorAdapter = new ClientConfigGeneratorAdapter(awsClientProvider);
    const libraryVersion = new PackageJsonReader().read(fileURLToPath(new URL('../../../package.json', import.meta.url))).version ?? '';
    const eventHandlerFactory = new SandboxEventHandlerFactory(sandboxBackendIdPartsResolver.resolve, async () => {
        const dependencies = await new PackageManagerControllerFactory()
            .getPackageManagerController()
            .tryGetDependencies();
        return await new UsageDataEmitterFactory().getInstance(libraryVersion, dependencies);
    }, noticesRenderer);
    const commandMiddleWare = new CommandMiddleware(printer);
    return new SandboxCommand(sandboxFactory, [
        new SandboxDeleteCommand(sandboxFactory),
        createSandboxSecretCommand(),
        new SandboxSeedCommand(sandboxBackendIdPartsResolver, [
            new SandboxSeedGeneratePolicyCommand(sandboxBackendIdPartsResolver),
        ]),
    ], clientConfigGeneratorAdapter, commandMiddleWare, eventHandlerFactory.getSandboxEventHandlers);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9jb21tYW5kX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3pDLE9BQU8sRUFDTCxjQUFjLEdBRWYsTUFBTSxzQkFBc0IsQ0FBQztBQUM5QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3REFBd0QsQ0FBQztBQUN0RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQztBQUM5RixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUNoRyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLHVCQUF1QixHQUN4QixNQUFNLDRCQUE0QixDQUFDO0FBQ3BDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hFLE9BQU8sRUFDTCwrQkFBK0IsRUFDL0IsTUFBTSxFQUNOLE9BQU8sR0FDUixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFdEUsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDakcsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFcEY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRyxDQUNsQyxlQUFnQyxFQUN1QixFQUFFO0lBQ3pELE1BQU0sNkJBQTZCLEdBQUcsSUFBSSx3QkFBd0IsQ0FDaEUsSUFBSSxzQkFBc0IsQ0FBQyxJQUFJLGlCQUFpQixFQUFFLENBQUMsQ0FDcEQsQ0FBQztJQUVGLE1BQU0sY0FBYyxHQUFHLElBQUksdUJBQXVCLENBQ2hELDZCQUE2QixDQUFDLE9BQU8sRUFDckMsSUFBSSwwQkFBMEIsRUFBRSxDQUFDLE9BQU8sRUFDeEMsT0FBTyxFQUNQLE1BQU0sQ0FDUCxDQUFDO0lBQ0YsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztJQUNoQyxNQUFNLGFBQWEsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0lBQzFDLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxvQkFBb0IsRUFBRSxDQUFDO0lBRXhELE1BQU0saUJBQWlCLEdBQUc7UUFDeEIsV0FBVyxFQUFFLEdBQUcsRUFBRSxDQUFDLFFBQVE7UUFDM0IsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLENBQUMsYUFBYTtRQUNyQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxvQkFBb0I7S0FDcEQsQ0FBQztJQUNGLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSw0QkFBNEIsQ0FDbkUsaUJBQWlCLENBQ2xCLENBQUM7SUFFRixNQUFNLGNBQWMsR0FDbEIsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FDMUIsYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLHVCQUF1QixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDakUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO0lBRWxCLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSwwQkFBMEIsQ0FDeEQsNkJBQTZCLENBQUMsT0FBTyxFQUNyQyxLQUFLLElBQUksRUFBRTtRQUNULE1BQU0sWUFBWSxHQUFHLE1BQU0sSUFBSSwrQkFBK0IsRUFBRTthQUM3RCwyQkFBMkIsRUFBRTthQUM3QixrQkFBa0IsRUFBRSxDQUFDO1FBQ3hCLE9BQU8sTUFBTSxJQUFJLHVCQUF1QixFQUFFLENBQUMsV0FBVyxDQUNwRCxjQUFjLEVBQ2QsWUFBWSxDQUNiLENBQUM7SUFDSixDQUFDLEVBQ0QsZUFBZSxDQUNoQixDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELE9BQU8sSUFBSSxjQUFjLENBQ3ZCLGNBQWMsRUFDZDtRQUNFLElBQUksb0JBQW9CLENBQUMsY0FBYyxDQUFDO1FBQ3hDLDBCQUEwQixFQUFFO1FBQzVCLElBQUksa0JBQWtCLENBQUMsNkJBQTZCLEVBQUU7WUFDcEQsSUFBSSxnQ0FBZ0MsQ0FBQyw2QkFBNkIsQ0FBQztTQUNwRSxDQUFDO0tBQ0gsRUFDRCw0QkFBNEIsRUFDNUIsaUJBQWlCLEVBQ2pCLG1CQUFtQixDQUFDLHVCQUF1QixDQUM1QyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICdub2RlOnVybCc7XG5pbXBvcnQge1xuICBTYW5kYm94Q29tbWFuZCxcbiAgU2FuZGJveENvbW1hbmRPcHRpb25zS2ViYWJDYXNlLFxufSBmcm9tICcuL3NhbmRib3hfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9zYW5kYm94JztcbmltcG9ydCB7IFNhbmRib3hEZWxldGVDb21tYW5kIH0gZnJvbSAnLi9zYW5kYm94LWRlbGV0ZS9zYW5kYm94X2RlbGV0ZV9jb21tYW5kLmpzJztcbmltcG9ydCB7IFNhbmRib3hTZWVkQ29tbWFuZCB9IGZyb20gJy4vc2FuZGJveC1zZWVkL3NhbmRib3hfc2VlZF9jb21tYW5kLmpzJztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4vc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyIH0gZnJvbSAnLi4vLi4vY2xpZW50LWNvbmZpZy9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9hZGFwdGVyLmpzJztcbmltcG9ydCB7IExvY2FsTmFtZXNwYWNlUmVzb2x2ZXIgfSBmcm9tICcuLi8uLi9iYWNrZW5kLWlkZW50aWZpZXIvbG9jYWxfbmFtZXNwYWNlX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IGNyZWF0ZVNhbmRib3hTZWNyZXRDb21tYW5kIH0gZnJvbSAnLi9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9jb21tYW5kX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHtcbiAgUGFja2FnZUpzb25SZWFkZXIsXG4gIFVzYWdlRGF0YUVtaXR0ZXJGYWN0b3J5LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeSB9IGZyb20gJy4vc2FuZGJveF9ldmVudF9oYW5kbGVyX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgQ29tbWFuZE1pZGRsZXdhcmUgfSBmcm9tICcuLi8uLi9jb21tYW5kX21pZGRsZXdhcmUuanMnO1xuaW1wb3J0IHtcbiAgUGFja2FnZU1hbmFnZXJDb250cm9sbGVyRmFjdG9yeSxcbiAgZm9ybWF0LFxuICBwcmludGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHsgQW1wbGlmeUNsaWVudCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1hbXBsaWZ5JztcbmltcG9ydCB7IENsb3VkRm9ybWF0aW9uQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWNsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IE5vdGljZXNSZW5kZXJlciB9IGZyb20gJy4uLy4uL25vdGljZXMvbm90aWNlc19yZW5kZXJlci5qcyc7XG5pbXBvcnQgeyBTYW5kYm94U2VlZEdlbmVyYXRlUG9saWN5Q29tbWFuZCB9IGZyb20gJy4vc2FuZGJveC1zZWVkL3NhbmRib3hfc2VlZF9wb2xpY3lfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBTREtQcm9maWxlUmVzb2x2ZXJQcm92aWRlciB9IGZyb20gJy4uLy4uL3Nka19wcm9maWxlX3Jlc29sdmVyX3Byb3ZpZGVyLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIHdpcmVkIHNhbmRib3ggY29tbWFuZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNhbmRib3hDb21tYW5kID0gKFxuICBub3RpY2VzUmVuZGVyZXI6IE5vdGljZXNSZW5kZXJlcixcbik6IENvbW1hbmRNb2R1bGU8b2JqZWN0LCBTYW5kYm94Q29tbWFuZE9wdGlvbnNLZWJhYkNhc2U+ID0+IHtcbiAgY29uc3Qgc2FuZGJveEJhY2tlbmRJZFBhcnRzUmVzb2x2ZXIgPSBuZXcgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyKFxuICAgIG5ldyBMb2NhbE5hbWVzcGFjZVJlc29sdmVyKG5ldyBQYWNrYWdlSnNvblJlYWRlcigpKSxcbiAgKTtcblxuICBjb25zdCBzYW5kYm94RmFjdG9yeSA9IG5ldyBTYW5kYm94U2luZ2xldG9uRmFjdG9yeShcbiAgICBzYW5kYm94QmFja2VuZElkUGFydHNSZXNvbHZlci5yZXNvbHZlLFxuICAgIG5ldyBTREtQcm9maWxlUmVzb2x2ZXJQcm92aWRlcigpLnJlc29sdmUsXG4gICAgcHJpbnRlcixcbiAgICBmb3JtYXQsXG4gICk7XG4gIGNvbnN0IHMzQ2xpZW50ID0gbmV3IFMzQ2xpZW50KCk7XG4gIGNvbnN0IGFtcGxpZnlDbGllbnQgPSBuZXcgQW1wbGlmeUNsaWVudCgpO1xuICBjb25zdCBjbG91ZEZvcm1hdGlvbkNsaWVudCA9IG5ldyBDbG91ZEZvcm1hdGlvbkNsaWVudCgpO1xuXG4gIGNvbnN0IGF3c0NsaWVudFByb3ZpZGVyID0ge1xuICAgIGdldFMzQ2xpZW50OiAoKSA9PiBzM0NsaWVudCxcbiAgICBnZXRBbXBsaWZ5Q2xpZW50OiAoKSA9PiBhbXBsaWZ5Q2xpZW50LFxuICAgIGdldENsb3VkRm9ybWF0aW9uQ2xpZW50OiAoKSA9PiBjbG91ZEZvcm1hdGlvbkNsaWVudCxcbiAgfTtcbiAgY29uc3QgY2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciA9IG5ldyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyKFxuICAgIGF3c0NsaWVudFByb3ZpZGVyLFxuICApO1xuXG4gIGNvbnN0IGxpYnJhcnlWZXJzaW9uID1cbiAgICBuZXcgUGFja2FnZUpzb25SZWFkZXIoKS5yZWFkKFxuICAgICAgZmlsZVVSTFRvUGF0aChuZXcgVVJMKCcuLi8uLi8uLi9wYWNrYWdlLmpzb24nLCBpbXBvcnQubWV0YS51cmwpKSxcbiAgICApLnZlcnNpb24gPz8gJyc7XG5cbiAgY29uc3QgZXZlbnRIYW5kbGVyRmFjdG9yeSA9IG5ldyBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeShcbiAgICBzYW5kYm94QmFja2VuZElkUGFydHNSZXNvbHZlci5yZXNvbHZlLFxuICAgIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IGF3YWl0IG5ldyBQYWNrYWdlTWFuYWdlckNvbnRyb2xsZXJGYWN0b3J5KClcbiAgICAgICAgLmdldFBhY2thZ2VNYW5hZ2VyQ29udHJvbGxlcigpXG4gICAgICAgIC50cnlHZXREZXBlbmRlbmNpZXMoKTtcbiAgICAgIHJldHVybiBhd2FpdCBuZXcgVXNhZ2VEYXRhRW1pdHRlckZhY3RvcnkoKS5nZXRJbnN0YW5jZShcbiAgICAgICAgbGlicmFyeVZlcnNpb24sXG4gICAgICAgIGRlcGVuZGVuY2llcyxcbiAgICAgICk7XG4gICAgfSxcbiAgICBub3RpY2VzUmVuZGVyZXIsXG4gICk7XG5cbiAgY29uc3QgY29tbWFuZE1pZGRsZVdhcmUgPSBuZXcgQ29tbWFuZE1pZGRsZXdhcmUocHJpbnRlcik7XG4gIHJldHVybiBuZXcgU2FuZGJveENvbW1hbmQoXG4gICAgc2FuZGJveEZhY3RvcnksXG4gICAgW1xuICAgICAgbmV3IFNhbmRib3hEZWxldGVDb21tYW5kKHNhbmRib3hGYWN0b3J5KSxcbiAgICAgIGNyZWF0ZVNhbmRib3hTZWNyZXRDb21tYW5kKCksXG4gICAgICBuZXcgU2FuZGJveFNlZWRDb21tYW5kKHNhbmRib3hCYWNrZW5kSWRQYXJ0c1Jlc29sdmVyLCBbXG4gICAgICAgIG5ldyBTYW5kYm94U2VlZEdlbmVyYXRlUG9saWN5Q29tbWFuZChzYW5kYm94QmFja2VuZElkUGFydHNSZXNvbHZlciksXG4gICAgICBdKSxcbiAgICBdLFxuICAgIGNsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIsXG4gICAgY29tbWFuZE1pZGRsZVdhcmUsXG4gICAgZXZlbnRIYW5kbGVyRmFjdG9yeS5nZXRTYW5kYm94RXZlbnRIYW5kbGVycyxcbiAgKTtcbn07XG4iXX0=