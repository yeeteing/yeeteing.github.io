import { NestedStack } from 'aws-cdk-lib';
import { fileURLToPath } from 'node:url';
/**
 * Vends and caches nested stacks under a provided root stack
 */
export class NestedStackResolver {
    rootStack;
    attributionMetadataStorage;
    stacks = {};
    /**
     * Initialize with a root stack
     */
    constructor(rootStack, attributionMetadataStorage) {
        this.rootStack = rootStack;
        this.attributionMetadataStorage = attributionMetadataStorage;
    }
    /**
     * Proxy to getStackFor that appends attribution metadata for custom stacks
     */
    createCustomStack = (name) => {
        if (this.stacks[name]) {
            throw new Error(`Custom stack named ${name} has already been created`);
        }
        const stack = this.getStackFor(name);
        // this is safe even if stack is cached from an earlier invocation because storeAttributionMetadata is a noop if the stack description already exists
        this.attributionMetadataStorage.storeAttributionMetadata(stack, `custom`, fileURLToPath(new URL('../../package.json', import.meta.url)));
        return stack;
    };
    /**
     * Returns a cached NestedStack if resourceGroupName has been seen before
     * Otherwise, creates a new NestedStack, caches it and returns it
     */
    getStackFor = (resourceGroupName) => {
        if (!this.stacks[resourceGroupName]) {
            this.stacks[resourceGroupName] = new NestedStack(this.rootStack, resourceGroupName);
        }
        return this.stacks[resourceGroupName];
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdGVkX3N0YWNrX3Jlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZ2luZS9uZXN0ZWRfc3RhY2tfcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBUyxNQUFNLGFBQWEsQ0FBQztBQUVqRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBVXpDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFtQjtJQU9YO0lBQ0E7SUFQRixNQUFNLEdBQTBCLEVBQUUsQ0FBQztJQUVwRDs7T0FFRztJQUNILFlBQ21CLFNBQWdCLEVBQ2hCLDBCQUFzRDtRQUR0RCxjQUFTLEdBQVQsU0FBUyxDQUFPO1FBQ2hCLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBNEI7SUFDdEUsQ0FBQztJQUVKOztPQUVHO0lBQ0gsaUJBQWlCLEdBQUcsQ0FBQyxJQUFZLEVBQVMsRUFBRTtRQUMxQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixJQUFJLDJCQUEyQixDQUFDLENBQUM7UUFDekUsQ0FBQztRQUNELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMscUpBQXFKO1FBQ3JKLElBQUksQ0FBQywwQkFBMEIsQ0FBQyx3QkFBd0IsQ0FDdEQsS0FBSyxFQUNMLFFBQVEsRUFDUixhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUM5RCxDQUFDO1FBQ0YsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLENBQUM7SUFFRjs7O09BR0c7SUFDSCxXQUFXLEdBQUcsQ0FBQyxpQkFBeUIsRUFBUyxFQUFFO1FBQ2pELElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQztZQUNwQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxXQUFXLENBQzlDLElBQUksQ0FBQyxTQUFTLEVBQ2QsaUJBQWlCLENBQ2xCLENBQUM7UUFDSixDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXN0ZWRTdGFjaywgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBBdHRyaWJ1dGlvbk1ldGFkYXRhU3RvcmFnZSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zdG9yYWdlJztcbmltcG9ydCB7IGZpbGVVUkxUb1BhdGggfSBmcm9tICdub2RlOnVybCc7XG5cbi8qKlxuICogVmVuZHMgc3RhY2tzIGZvciBhIHJlc291cmNlIGdyb3VwaW5nXG4gKi9cbmV4cG9ydCB0eXBlIFN0YWNrUmVzb2x2ZXIgPSB7XG4gIGdldFN0YWNrRm9yOiAocmVzb3VyY2VHcm91cE5hbWU6IHN0cmluZykgPT4gU3RhY2s7XG4gIGNyZWF0ZUN1c3RvbVN0YWNrOiAobmFtZTogc3RyaW5nKSA9PiBTdGFjaztcbn07XG5cbi8qKlxuICogVmVuZHMgYW5kIGNhY2hlcyBuZXN0ZWQgc3RhY2tzIHVuZGVyIGEgcHJvdmlkZWQgcm9vdCBzdGFja1xuICovXG5leHBvcnQgY2xhc3MgTmVzdGVkU3RhY2tSZXNvbHZlciBpbXBsZW1lbnRzIFN0YWNrUmVzb2x2ZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHN0YWNrczogUmVjb3JkPHN0cmluZywgU3RhY2s+ID0ge307XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgd2l0aCBhIHJvb3Qgc3RhY2tcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcm9vdFN0YWNrOiBTdGFjayxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGF0dHJpYnV0aW9uTWV0YWRhdGFTdG9yYWdlOiBBdHRyaWJ1dGlvbk1ldGFkYXRhU3RvcmFnZSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBQcm94eSB0byBnZXRTdGFja0ZvciB0aGF0IGFwcGVuZHMgYXR0cmlidXRpb24gbWV0YWRhdGEgZm9yIGN1c3RvbSBzdGFja3NcbiAgICovXG4gIGNyZWF0ZUN1c3RvbVN0YWNrID0gKG5hbWU6IHN0cmluZyk6IFN0YWNrID0+IHtcbiAgICBpZiAodGhpcy5zdGFja3NbbmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ3VzdG9tIHN0YWNrIG5hbWVkICR7bmFtZX0gaGFzIGFscmVhZHkgYmVlbiBjcmVhdGVkYCk7XG4gICAgfVxuICAgIGNvbnN0IHN0YWNrID0gdGhpcy5nZXRTdGFja0ZvcihuYW1lKTtcbiAgICAvLyB0aGlzIGlzIHNhZmUgZXZlbiBpZiBzdGFjayBpcyBjYWNoZWQgZnJvbSBhbiBlYXJsaWVyIGludm9jYXRpb24gYmVjYXVzZSBzdG9yZUF0dHJpYnV0aW9uTWV0YWRhdGEgaXMgYSBub29wIGlmIHRoZSBzdGFjayBkZXNjcmlwdGlvbiBhbHJlYWR5IGV4aXN0c1xuICAgIHRoaXMuYXR0cmlidXRpb25NZXRhZGF0YVN0b3JhZ2Uuc3RvcmVBdHRyaWJ1dGlvbk1ldGFkYXRhKFxuICAgICAgc3RhY2ssXG4gICAgICBgY3VzdG9tYCxcbiAgICAgIGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi4vLi4vcGFja2FnZS5qc29uJywgaW1wb3J0Lm1ldGEudXJsKSksXG4gICAgKTtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBjYWNoZWQgTmVzdGVkU3RhY2sgaWYgcmVzb3VyY2VHcm91cE5hbWUgaGFzIGJlZW4gc2VlbiBiZWZvcmVcbiAgICogT3RoZXJ3aXNlLCBjcmVhdGVzIGEgbmV3IE5lc3RlZFN0YWNrLCBjYWNoZXMgaXQgYW5kIHJldHVybnMgaXRcbiAgICovXG4gIGdldFN0YWNrRm9yID0gKHJlc291cmNlR3JvdXBOYW1lOiBzdHJpbmcpOiBTdGFjayA9PiB7XG4gICAgaWYgKCF0aGlzLnN0YWNrc1tyZXNvdXJjZUdyb3VwTmFtZV0pIHtcbiAgICAgIHRoaXMuc3RhY2tzW3Jlc291cmNlR3JvdXBOYW1lXSA9IG5ldyBOZXN0ZWRTdGFjayhcbiAgICAgICAgdGhpcy5yb290U3RhY2ssXG4gICAgICAgIHJlc291cmNlR3JvdXBOYW1lLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc3RhY2tzW3Jlc291cmNlR3JvdXBOYW1lXTtcbiAgfTtcbn1cbiJdfQ==