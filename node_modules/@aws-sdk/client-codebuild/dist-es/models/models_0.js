import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { CodeBuildServiceException as __BaseException } from "./CodeBuildServiceException";
export class AccountLimitExceededException extends __BaseException {
    name = "AccountLimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccountLimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccountLimitExceededException.prototype);
    }
}
export class AccountSuspendedException extends __BaseException {
    name = "AccountSuspendedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccountSuspendedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccountSuspendedException.prototype);
    }
}
export const ArtifactNamespace = {
    BUILD_ID: "BUILD_ID",
    NONE: "NONE",
};
export const ArtifactPackaging = {
    NONE: "NONE",
    ZIP: "ZIP",
};
export const ArtifactsType = {
    CODEPIPELINE: "CODEPIPELINE",
    NO_ARTIFACTS: "NO_ARTIFACTS",
    S3: "S3",
};
export const AuthType = {
    BASIC_AUTH: "BASIC_AUTH",
    CODECONNECTIONS: "CODECONNECTIONS",
    OAUTH: "OAUTH",
    PERSONAL_ACCESS_TOKEN: "PERSONAL_ACCESS_TOKEN",
    SECRETS_MANAGER: "SECRETS_MANAGER",
};
export class InvalidInputException extends __BaseException {
    name = "InvalidInputException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidInputException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidInputException.prototype);
    }
}
export const BucketOwnerAccess = {
    FULL: "FULL",
    NONE: "NONE",
    READ_ONLY: "READ_ONLY",
};
export const BatchReportModeType = {
    REPORT_AGGREGATED_BATCH: "REPORT_AGGREGATED_BATCH",
    REPORT_INDIVIDUAL_BUILDS: "REPORT_INDIVIDUAL_BUILDS",
};
export const StatusType = {
    FAILED: "FAILED",
    FAULT: "FAULT",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    SUCCEEDED: "SUCCEEDED",
    TIMED_OUT: "TIMED_OUT",
};
export const CacheMode = {
    LOCAL_CUSTOM_CACHE: "LOCAL_CUSTOM_CACHE",
    LOCAL_DOCKER_LAYER_CACHE: "LOCAL_DOCKER_LAYER_CACHE",
    LOCAL_SOURCE_CACHE: "LOCAL_SOURCE_CACHE",
};
export const CacheType = {
    LOCAL: "LOCAL",
    NO_CACHE: "NO_CACHE",
    S3: "S3",
};
export const MachineType = {
    GENERAL: "GENERAL",
    NVME: "NVME",
};
export const ComputeType = {
    ATTRIBUTE_BASED_COMPUTE: "ATTRIBUTE_BASED_COMPUTE",
    BUILD_GENERAL1_2XLARGE: "BUILD_GENERAL1_2XLARGE",
    BUILD_GENERAL1_LARGE: "BUILD_GENERAL1_LARGE",
    BUILD_GENERAL1_MEDIUM: "BUILD_GENERAL1_MEDIUM",
    BUILD_GENERAL1_SMALL: "BUILD_GENERAL1_SMALL",
    BUILD_GENERAL1_XLARGE: "BUILD_GENERAL1_XLARGE",
    BUILD_LAMBDA_10GB: "BUILD_LAMBDA_10GB",
    BUILD_LAMBDA_1GB: "BUILD_LAMBDA_1GB",
    BUILD_LAMBDA_2GB: "BUILD_LAMBDA_2GB",
    BUILD_LAMBDA_4GB: "BUILD_LAMBDA_4GB",
    BUILD_LAMBDA_8GB: "BUILD_LAMBDA_8GB",
    CUSTOM_INSTANCE_TYPE: "CUSTOM_INSTANCE_TYPE",
};
export const EnvironmentVariableType = {
    PARAMETER_STORE: "PARAMETER_STORE",
    PLAINTEXT: "PLAINTEXT",
    SECRETS_MANAGER: "SECRETS_MANAGER",
};
export const ImagePullCredentialsType = {
    CODEBUILD: "CODEBUILD",
    SERVICE_ROLE: "SERVICE_ROLE",
};
export const CredentialProviderType = {
    SECRETS_MANAGER: "SECRETS_MANAGER",
};
export const EnvironmentType = {
    ARM_CONTAINER: "ARM_CONTAINER",
    ARM_EC2: "ARM_EC2",
    ARM_LAMBDA_CONTAINER: "ARM_LAMBDA_CONTAINER",
    LINUX_CONTAINER: "LINUX_CONTAINER",
    LINUX_EC2: "LINUX_EC2",
    LINUX_GPU_CONTAINER: "LINUX_GPU_CONTAINER",
    LINUX_LAMBDA_CONTAINER: "LINUX_LAMBDA_CONTAINER",
    MAC_ARM: "MAC_ARM",
    WINDOWS_CONTAINER: "WINDOWS_CONTAINER",
    WINDOWS_EC2: "WINDOWS_EC2",
    WINDOWS_SERVER_2019_CONTAINER: "WINDOWS_SERVER_2019_CONTAINER",
    WINDOWS_SERVER_2022_CONTAINER: "WINDOWS_SERVER_2022_CONTAINER",
};
export const FileSystemType = {
    EFS: "EFS",
};
export const LogsConfigStatusType = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
export const BuildBatchPhaseType = {
    COMBINE_ARTIFACTS: "COMBINE_ARTIFACTS",
    DOWNLOAD_BATCHSPEC: "DOWNLOAD_BATCHSPEC",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    STOPPED: "STOPPED",
    SUBMITTED: "SUBMITTED",
    SUCCEEDED: "SUCCEEDED",
};
export const SourceAuthType = {
    CODECONNECTIONS: "CODECONNECTIONS",
    OAUTH: "OAUTH",
    SECRETS_MANAGER: "SECRETS_MANAGER",
};
export const SourceType = {
    BITBUCKET: "BITBUCKET",
    CODECOMMIT: "CODECOMMIT",
    CODEPIPELINE: "CODEPIPELINE",
    GITHUB: "GITHUB",
    GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE",
    GITLAB: "GITLAB",
    GITLAB_SELF_MANAGED: "GITLAB_SELF_MANAGED",
    NO_SOURCE: "NO_SOURCE",
    S3: "S3",
};
export const BuildPhaseType = {
    BUILD: "BUILD",
    COMPLETED: "COMPLETED",
    DOWNLOAD_SOURCE: "DOWNLOAD_SOURCE",
    FINALIZING: "FINALIZING",
    INSTALL: "INSTALL",
    POST_BUILD: "POST_BUILD",
    PRE_BUILD: "PRE_BUILD",
    PROVISIONING: "PROVISIONING",
    QUEUED: "QUEUED",
    SUBMITTED: "SUBMITTED",
    UPLOAD_ARTIFACTS: "UPLOAD_ARTIFACTS",
};
export const CommandType = {
    SHELL: "SHELL",
};
export const FleetOverflowBehavior = {
    ON_DEMAND: "ON_DEMAND",
    QUEUE: "QUEUE",
};
export const FleetProxyRuleBehavior = {
    ALLOW_ALL: "ALLOW_ALL",
    DENY_ALL: "DENY_ALL",
};
export const FleetProxyRuleEffectType = {
    ALLOW: "ALLOW",
    DENY: "DENY",
};
export const FleetProxyRuleType = {
    DOMAIN: "DOMAIN",
    IP: "IP",
};
export const FleetScalingType = {
    TARGET_TRACKING_SCALING: "TARGET_TRACKING_SCALING",
};
export const FleetScalingMetricType = {
    FLEET_UTILIZATION_RATE: "FLEET_UTILIZATION_RATE",
};
export const FleetContextCode = {
    ACTION_REQUIRED: "ACTION_REQUIRED",
    CREATE_FAILED: "CREATE_FAILED",
    INSUFFICIENT_CAPACITY: "INSUFFICIENT_CAPACITY",
    PENDING_DELETION: "PENDING_DELETION",
    UPDATE_FAILED: "UPDATE_FAILED",
};
export const FleetStatusCode = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETING: "DELETING",
    PENDING_DELETION: "PENDING_DELETION",
    ROTATING: "ROTATING",
    UPDATE_ROLLBACK_FAILED: "UPDATE_ROLLBACK_FAILED",
    UPDATING: "UPDATING",
};
export const ProjectVisibilityType = {
    PRIVATE: "PRIVATE",
    PUBLIC_READ: "PUBLIC_READ",
};
export const WebhookBuildType = {
    BUILD: "BUILD",
    BUILD_BATCH: "BUILD_BATCH",
    RUNNER_BUILDKITE_BUILD: "RUNNER_BUILDKITE_BUILD",
};
export const WebhookFilterType = {
    ACTOR_ACCOUNT_ID: "ACTOR_ACCOUNT_ID",
    BASE_REF: "BASE_REF",
    COMMIT_MESSAGE: "COMMIT_MESSAGE",
    EVENT: "EVENT",
    FILE_PATH: "FILE_PATH",
    HEAD_REF: "HEAD_REF",
    ORGANIZATION_NAME: "ORGANIZATION_NAME",
    RELEASE_NAME: "RELEASE_NAME",
    REPOSITORY_NAME: "REPOSITORY_NAME",
    TAG_NAME: "TAG_NAME",
    WORKFLOW_NAME: "WORKFLOW_NAME",
};
export const PullRequestBuildApproverRole = {
    BITBUCKET_ADMIN: "BITBUCKET_ADMIN",
    BITBUCKET_READ: "BITBUCKET_READ",
    BITBUCKET_WRITE: "BITBUCKET_WRITE",
    GITHUB_ADMIN: "GITHUB_ADMIN",
    GITHUB_MAINTAIN: "GITHUB_MAINTAIN",
    GITHUB_READ: "GITHUB_READ",
    GITHUB_TRIAGE: "GITHUB_TRIAGE",
    GITHUB_WRITE: "GITHUB_WRITE",
    GITLAB_DEVELOPER: "GITLAB_DEVELOPER",
    GITLAB_GUEST: "GITLAB_GUEST",
    GITLAB_MAINTAINER: "GITLAB_MAINTAINER",
    GITLAB_OWNER: "GITLAB_OWNER",
    GITLAB_PLANNER: "GITLAB_PLANNER",
    GITLAB_REPORTER: "GITLAB_REPORTER",
};
export const PullRequestBuildCommentApproval = {
    ALL_PULL_REQUESTS: "ALL_PULL_REQUESTS",
    DISABLED: "DISABLED",
    FORK_PULL_REQUESTS: "FORK_PULL_REQUESTS",
};
export const WebhookScopeType = {
    GITHUB_GLOBAL: "GITHUB_GLOBAL",
    GITHUB_ORGANIZATION: "GITHUB_ORGANIZATION",
    GITLAB_GROUP: "GITLAB_GROUP",
};
export const WebhookStatus = {
    ACTIVE: "ACTIVE",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETING: "DELETING",
};
export const ReportExportConfigType = {
    NO_EXPORT: "NO_EXPORT",
    S3: "S3",
};
export const ReportPackagingType = {
    NONE: "NONE",
    ZIP: "ZIP",
};
export const ReportGroupStatusType = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
};
export const ReportType = {
    CODE_COVERAGE: "CODE_COVERAGE",
    TEST: "TEST",
};
export const ReportStatusType = {
    DELETING: "DELETING",
    FAILED: "FAILED",
    GENERATING: "GENERATING",
    INCOMPLETE: "INCOMPLETE",
    SUCCEEDED: "SUCCEEDED",
};
export class ResourceAlreadyExistsException extends __BaseException {
    name = "ResourceAlreadyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceAlreadyExistsException.prototype);
    }
}
export class OAuthProviderException extends __BaseException {
    name = "OAuthProviderException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "OAuthProviderException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, OAuthProviderException.prototype);
    }
}
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
export const ReportCodeCoverageSortByType = {
    FILE_PATH: "FILE_PATH",
    LINE_COVERAGE_PERCENTAGE: "LINE_COVERAGE_PERCENTAGE",
};
export const SortOrderType = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const ReportGroupTrendFieldType = {
    BRANCHES_COVERED: "BRANCHES_COVERED",
    BRANCHES_MISSED: "BRANCHES_MISSED",
    BRANCH_COVERAGE: "BRANCH_COVERAGE",
    DURATION: "DURATION",
    LINES_COVERED: "LINES_COVERED",
    LINES_MISSED: "LINES_MISSED",
    LINE_COVERAGE: "LINE_COVERAGE",
    PASS_RATE: "PASS_RATE",
    TOTAL: "TOTAL",
};
export const ServerType = {
    BITBUCKET: "BITBUCKET",
    GITHUB: "GITHUB",
    GITHUB_ENTERPRISE: "GITHUB_ENTERPRISE",
    GITLAB: "GITLAB",
    GITLAB_SELF_MANAGED: "GITLAB_SELF_MANAGED",
};
export const LanguageType = {
    ANDROID: "ANDROID",
    BASE: "BASE",
    DOCKER: "DOCKER",
    DOTNET: "DOTNET",
    GOLANG: "GOLANG",
    JAVA: "JAVA",
    NODE_JS: "NODE_JS",
    PHP: "PHP",
    PYTHON: "PYTHON",
    RUBY: "RUBY",
};
export const PlatformType = {
    AMAZON_LINUX: "AMAZON_LINUX",
    DEBIAN: "DEBIAN",
    UBUNTU: "UBUNTU",
    WINDOWS_SERVER: "WINDOWS_SERVER",
};
export const FleetSortByType = {
    CREATED_TIME: "CREATED_TIME",
    LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME",
    NAME: "NAME",
};
export const ProjectSortByType = {
    CREATED_TIME: "CREATED_TIME",
    LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME",
    NAME: "NAME",
};
export const ReportGroupSortByType = {
    CREATED_TIME: "CREATED_TIME",
    LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME",
    NAME: "NAME",
};
export const SharedResourceSortByType = {
    ARN: "ARN",
    MODIFIED_TIME: "MODIFIED_TIME",
};
export const RetryBuildBatchType = {
    RETRY_ALL_BUILDS: "RETRY_ALL_BUILDS",
    RETRY_FAILED_BUILDS: "RETRY_FAILED_BUILDS",
};
export const CommandExecutionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.command && { command: SENSITIVE_STRING }),
    ...(obj.standardOutputContent && { standardOutputContent: SENSITIVE_STRING }),
    ...(obj.standardErrContent && { standardErrContent: SENSITIVE_STRING }),
});
export const BatchGetCommandExecutionsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.commandExecutions && {
        commandExecutions: obj.commandExecutions.map((item) => CommandExecutionFilterSensitiveLog(item)),
    }),
});
export const ImportSourceCredentialsInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.token && { token: SENSITIVE_STRING }),
});
export const ListCommandExecutionsForSandboxInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.nextToken && { nextToken: SENSITIVE_STRING }),
});
export const ListCommandExecutionsForSandboxOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.commandExecutions && {
        commandExecutions: obj.commandExecutions.map((item) => CommandExecutionFilterSensitiveLog(item)),
    }),
});
export const ListFleetsInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.nextToken && { nextToken: SENSITIVE_STRING }),
});
export const ListSandboxesForProjectInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.nextToken && { nextToken: SENSITIVE_STRING }),
});
export const StartCommandExecutionInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.command && { command: SENSITIVE_STRING }),
});
export const StartCommandExecutionOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.commandExecution && { commandExecution: CommandExecutionFilterSensitiveLog(obj.commandExecution) }),
});
export const StartSandboxInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.idempotencyToken && { idempotencyToken: SENSITIVE_STRING }),
});
