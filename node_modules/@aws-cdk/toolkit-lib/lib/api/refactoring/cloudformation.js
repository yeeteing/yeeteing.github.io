"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceMapping = exports.ResourceLocation = void 0;
/**
 * This class mirrors the `ResourceLocation` interface from CloudFormation,
 * but is richer, since it has a reference to the stack object, rather than
 * merely the stack name.
 */
class ResourceLocation {
    stack;
    logicalResourceId;
    constructor(stack, logicalResourceId) {
        this.stack = stack;
        this.logicalResourceId = logicalResourceId;
    }
    toPath() {
        const stack = this.stack;
        const resource = stack.template.Resources?.[this.logicalResourceId];
        const result = resource?.Metadata?.['aws:cdk:path'];
        if (result != null) {
            return result;
        }
        // If the path is not available, we can use stack name and logical ID
        return `${stack.stackName}.${this.logicalResourceId}`;
    }
    getType() {
        const resource = this.stack.template.Resources?.[this.logicalResourceId ?? ''];
        return resource?.Type ?? 'Unknown';
    }
    equalTo(other) {
        return this.logicalResourceId === other.logicalResourceId && this.stack.stackName === other.stack.stackName;
    }
}
exports.ResourceLocation = ResourceLocation;
/**
 * A mapping between a source and a destination location.
 */
class ResourceMapping {
    source;
    destination;
    constructor(source, destination) {
        this.source = source;
        this.destination = destination;
    }
    toTypedMapping() {
        return {
            // the type is the same in both source and destination,
            // so we can use either one
            type: this.source.getType(),
            sourcePath: this.source.toPath(),
            destinationPath: this.destination.toPath(),
        };
    }
}
exports.ResourceMapping = ResourceMapping;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRmb3JtYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjbG91ZGZvcm1hdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUF1QkE7Ozs7R0FJRztBQUNILE1BQWEsZ0JBQWdCO0lBQ0M7SUFBNEM7SUFBeEUsWUFBNEIsS0FBMEIsRUFBa0IsaUJBQXlCO1FBQXJFLFVBQUssR0FBTCxLQUFLLENBQXFCO1FBQWtCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBUTtJQUNqRyxDQUFDO0lBRU0sTUFBTTtRQUNYLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDekIsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNwRSxNQUFNLE1BQU0sR0FBRyxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUM7UUFFcEQsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFLENBQUM7WUFDbkIsT0FBTyxNQUFNLENBQUM7UUFDaEIsQ0FBQztRQUVELHFFQUFxRTtRQUNyRSxPQUFPLEdBQUcsS0FBSyxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRU0sT0FBTztRQUNaLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUMvRSxPQUFPLFFBQVEsRUFBRSxJQUFJLElBQUksU0FBUyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxPQUFPLENBQUMsS0FBdUI7UUFDcEMsT0FBTyxJQUFJLENBQUMsaUJBQWlCLEtBQUssS0FBSyxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDO0lBQzlHLENBQUM7Q0FDRjtBQXpCRCw0Q0F5QkM7QUFFRDs7R0FFRztBQUNILE1BQWEsZUFBZTtJQUNFO0lBQTBDO0lBQXRFLFlBQTRCLE1BQXdCLEVBQWtCLFdBQTZCO1FBQXZFLFdBQU0sR0FBTixNQUFNLENBQWtCO1FBQWtCLGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtJQUNuRyxDQUFDO0lBRU0sY0FBYztRQUNuQixPQUFPO1lBQ0wsdURBQXVEO1lBQ3ZELDJCQUEyQjtZQUMzQixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDM0IsVUFBVSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2hDLGVBQWUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRTtTQUMzQyxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBYkQsMENBYUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFR5cGVkTWFwcGluZyB9IGZyb20gJ0Bhd3MtY2RrL2Nsb3VkZm9ybWF0aW9uLWRpZmYnO1xuaW1wb3J0IHR5cGUgKiBhcyBjeGFwaSBmcm9tICdAYXdzLWNkay9jeC1hcGknO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsb3VkRm9ybWF0aW9uUmVzb3VyY2Uge1xuICBUeXBlOiBzdHJpbmc7XG4gIFByb3BlcnRpZXM/OiBhbnk7XG4gIE1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgRGVwZW5kc09uPzogc3RyaW5nIHwgc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xvdWRGb3JtYXRpb25UZW1wbGF0ZSB7XG4gIFJlc291cmNlcz86IHtcbiAgICBbbG9naWNhbElkOiBzdHJpbmddOiBDbG91ZEZvcm1hdGlvblJlc291cmNlO1xuICB9O1xuICBPdXRwdXRzPzogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDbG91ZEZvcm1hdGlvblN0YWNrIHtcbiAgcmVhZG9ubHkgZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50O1xuICByZWFkb25seSBzdGFja05hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgdGVtcGxhdGU6IENsb3VkRm9ybWF0aW9uVGVtcGxhdGU7XG59XG5cbi8qKlxuICogVGhpcyBjbGFzcyBtaXJyb3JzIHRoZSBgUmVzb3VyY2VMb2NhdGlvbmAgaW50ZXJmYWNlIGZyb20gQ2xvdWRGb3JtYXRpb24sXG4gKiBidXQgaXMgcmljaGVyLCBzaW5jZSBpdCBoYXMgYSByZWZlcmVuY2UgdG8gdGhlIHN0YWNrIG9iamVjdCwgcmF0aGVyIHRoYW5cbiAqIG1lcmVseSB0aGUgc3RhY2sgbmFtZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlc291cmNlTG9jYXRpb24ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgc3RhY2s6IENsb3VkRm9ybWF0aW9uU3RhY2ssIHB1YmxpYyByZWFkb25seSBsb2dpY2FsUmVzb3VyY2VJZDogc3RyaW5nKSB7XG4gIH1cblxuICBwdWJsaWMgdG9QYXRoKCk6IHN0cmluZyB7XG4gICAgY29uc3Qgc3RhY2sgPSB0aGlzLnN0YWNrO1xuICAgIGNvbnN0IHJlc291cmNlID0gc3RhY2sudGVtcGxhdGUuUmVzb3VyY2VzPy5bdGhpcy5sb2dpY2FsUmVzb3VyY2VJZF07XG4gICAgY29uc3QgcmVzdWx0ID0gcmVzb3VyY2U/Lk1ldGFkYXRhPy5bJ2F3czpjZGs6cGF0aCddO1xuXG4gICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBwYXRoIGlzIG5vdCBhdmFpbGFibGUsIHdlIGNhbiB1c2Ugc3RhY2sgbmFtZSBhbmQgbG9naWNhbCBJRFxuICAgIHJldHVybiBgJHtzdGFjay5zdGFja05hbWV9LiR7dGhpcy5sb2dpY2FsUmVzb3VyY2VJZH1gO1xuICB9XG5cbiAgcHVibGljIGdldFR5cGUoKTogc3RyaW5nIHtcbiAgICBjb25zdCByZXNvdXJjZSA9IHRoaXMuc3RhY2sudGVtcGxhdGUuUmVzb3VyY2VzPy5bdGhpcy5sb2dpY2FsUmVzb3VyY2VJZCA/PyAnJ107XG4gICAgcmV0dXJuIHJlc291cmNlPy5UeXBlID8/ICdVbmtub3duJztcbiAgfVxuXG4gIHB1YmxpYyBlcXVhbFRvKG90aGVyOiBSZXNvdXJjZUxvY2F0aW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMubG9naWNhbFJlc291cmNlSWQgPT09IG90aGVyLmxvZ2ljYWxSZXNvdXJjZUlkICYmIHRoaXMuc3RhY2suc3RhY2tOYW1lID09PSBvdGhlci5zdGFjay5zdGFja05hbWU7XG4gIH1cbn1cblxuLyoqXG4gKiBBIG1hcHBpbmcgYmV0d2VlbiBhIHNvdXJjZSBhbmQgYSBkZXN0aW5hdGlvbiBsb2NhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlc291cmNlTWFwcGluZyB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBzb3VyY2U6IFJlc291cmNlTG9jYXRpb24sIHB1YmxpYyByZWFkb25seSBkZXN0aW5hdGlvbjogUmVzb3VyY2VMb2NhdGlvbikge1xuICB9XG5cbiAgcHVibGljIHRvVHlwZWRNYXBwaW5nKCk6IFR5cGVkTWFwcGluZyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIHRoZSB0eXBlIGlzIHRoZSBzYW1lIGluIGJvdGggc291cmNlIGFuZCBkZXN0aW5hdGlvbixcbiAgICAgIC8vIHNvIHdlIGNhbiB1c2UgZWl0aGVyIG9uZVxuICAgICAgdHlwZTogdGhpcy5zb3VyY2UuZ2V0VHlwZSgpLFxuICAgICAgc291cmNlUGF0aDogdGhpcy5zb3VyY2UudG9QYXRoKCksXG4gICAgICBkZXN0aW5hdGlvblBhdGg6IHRoaXMuZGVzdGluYXRpb24udG9QYXRoKCksXG4gICAgfTtcbiAgfVxufVxuIl19