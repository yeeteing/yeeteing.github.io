import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { HttpRequest as __HttpRequest } from "@smithy/protocol-http";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectString as __expectString, parseEpochTimestamp as __parseEpochTimestamp, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { CloudControlServiceException as __BaseException } from "../models/CloudControlServiceException";
import { AlreadyExistsException, ClientTokenConflictException, ConcurrentModificationException, ConcurrentOperationException, GeneralServiceException, HandlerFailureException, HandlerInternalFailureException, InvalidCredentialsException, InvalidRequestException, NetworkFailureException, NotStabilizedException, NotUpdatableException, PrivateTypeException, RequestTokenNotFoundException, ResourceConflictException, ResourceNotFoundException, ServiceInternalErrorException, ServiceLimitExceededException, ThrottlingException, TypeNotFoundException, UnsupportedActionException, } from "../models/models_0";
export const se_CancelResourceRequestCommand = async (input, context) => {
    const headers = sharedHeaders("CancelResourceRequest");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_CreateResourceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateResource");
    let body;
    body = JSON.stringify(se_CreateResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_DeleteResourceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResource");
    let body;
    body = JSON.stringify(se_DeleteResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourceCommand = async (input, context) => {
    const headers = sharedHeaders("GetResource");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_GetResourceRequestStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetResourceRequestStatus");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListResourceRequestsCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceRequests");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_ListResourcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListResources");
    let body;
    body = JSON.stringify(_json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const se_UpdateResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateResource");
    let body;
    body = JSON.stringify(se_UpdateResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const de_CancelResourceRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CancelResourceRequestOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_CreateResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_CreateResourceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_DeleteResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_DeleteResourceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_GetResourceRequestStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_GetResourceRequestStatusOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListResourceRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_ListResourceRequestsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_ListResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = _json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
export const de_UpdateResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = de_UpdateResourceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConcurrentModificationException":
        case "com.amazonaws.cloudcontrol#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput, context);
        case "RequestTokenNotFoundException":
        case "com.amazonaws.cloudcontrol#RequestTokenNotFoundException":
            throw await de_RequestTokenNotFoundExceptionRes(parsedOutput, context);
        case "AlreadyExistsException":
        case "com.amazonaws.cloudcontrol#AlreadyExistsException":
            throw await de_AlreadyExistsExceptionRes(parsedOutput, context);
        case "ClientTokenConflictException":
        case "com.amazonaws.cloudcontrol#ClientTokenConflictException":
            throw await de_ClientTokenConflictExceptionRes(parsedOutput, context);
        case "ConcurrentOperationException":
        case "com.amazonaws.cloudcontrol#ConcurrentOperationException":
            throw await de_ConcurrentOperationExceptionRes(parsedOutput, context);
        case "GeneralServiceException":
        case "com.amazonaws.cloudcontrol#GeneralServiceException":
            throw await de_GeneralServiceExceptionRes(parsedOutput, context);
        case "HandlerFailureException":
        case "com.amazonaws.cloudcontrol#HandlerFailureException":
            throw await de_HandlerFailureExceptionRes(parsedOutput, context);
        case "HandlerInternalFailureException":
        case "com.amazonaws.cloudcontrol#HandlerInternalFailureException":
            throw await de_HandlerInternalFailureExceptionRes(parsedOutput, context);
        case "InvalidCredentialsException":
        case "com.amazonaws.cloudcontrol#InvalidCredentialsException":
            throw await de_InvalidCredentialsExceptionRes(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.cloudcontrol#InvalidRequestException":
            throw await de_InvalidRequestExceptionRes(parsedOutput, context);
        case "NetworkFailureException":
        case "com.amazonaws.cloudcontrol#NetworkFailureException":
            throw await de_NetworkFailureExceptionRes(parsedOutput, context);
        case "NotStabilizedException":
        case "com.amazonaws.cloudcontrol#NotStabilizedException":
            throw await de_NotStabilizedExceptionRes(parsedOutput, context);
        case "NotUpdatableException":
        case "com.amazonaws.cloudcontrol#NotUpdatableException":
            throw await de_NotUpdatableExceptionRes(parsedOutput, context);
        case "PrivateTypeException":
        case "com.amazonaws.cloudcontrol#PrivateTypeException":
            throw await de_PrivateTypeExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cloudcontrol#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cloudcontrol#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ServiceInternalErrorException":
        case "com.amazonaws.cloudcontrol#ServiceInternalErrorException":
            throw await de_ServiceInternalErrorExceptionRes(parsedOutput, context);
        case "ServiceLimitExceededException":
        case "com.amazonaws.cloudcontrol#ServiceLimitExceededException":
            throw await de_ServiceLimitExceededExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.cloudcontrol#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudcontrol#TypeNotFoundException":
            throw await de_TypeNotFoundExceptionRes(parsedOutput, context);
        case "UnsupportedActionException":
        case "com.amazonaws.cloudcontrol#UnsupportedActionException":
            throw await de_UnsupportedActionExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AlreadyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ClientTokenConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ClientTokenConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ConcurrentOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ConcurrentOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_GeneralServiceExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new GeneralServiceException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_HandlerFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new HandlerFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_HandlerInternalFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new HandlerInternalFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidCredentialsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidCredentialsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_InvalidRequestExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NetworkFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NetworkFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotStabilizedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotStabilizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_NotUpdatableExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new NotUpdatableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_PrivateTypeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new PrivateTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_RequestTokenNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new RequestTokenNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceInternalErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceInternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ServiceLimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ServiceLimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_TypeNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new TypeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const de_UnsupportedActionExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = _json(body);
    const exception = new UnsupportedActionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const se_CreateResourceInput = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        DesiredState: [],
        RoleArn: [],
        TypeName: [],
        TypeVersionId: [],
    });
};
const se_DeleteResourceInput = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Identifier: [],
        RoleArn: [],
        TypeName: [],
        TypeVersionId: [],
    });
};
const se_UpdateResourceInput = (input, context) => {
    return take(input, {
        ClientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        Identifier: [],
        PatchDocument: [],
        RoleArn: [],
        TypeName: [],
        TypeVersionId: [],
    });
};
const de_CancelResourceRequestOutput = (output, context) => {
    return take(output, {
        ProgressEvent: (_) => de_ProgressEvent(_, context),
    });
};
const de_CreateResourceOutput = (output, context) => {
    return take(output, {
        ProgressEvent: (_) => de_ProgressEvent(_, context),
    });
};
const de_DeleteResourceOutput = (output, context) => {
    return take(output, {
        ProgressEvent: (_) => de_ProgressEvent(_, context),
    });
};
const de_GetResourceRequestStatusOutput = (output, context) => {
    return take(output, {
        HooksProgressEvent: (_) => de_HooksProgressEvent(_, context),
        ProgressEvent: (_) => de_ProgressEvent(_, context),
    });
};
const de_HookProgressEvent = (output, context) => {
    return take(output, {
        FailureMode: __expectString,
        HookEventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HookStatus: __expectString,
        HookStatusMessage: __expectString,
        HookTypeArn: __expectString,
        HookTypeName: __expectString,
        HookTypeVersionId: __expectString,
        InvocationPoint: __expectString,
    });
};
const de_HooksProgressEvent = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HookProgressEvent(entry, context);
    });
    return retVal;
};
const de_ListResourceRequestsOutput = (output, context) => {
    return take(output, {
        NextToken: __expectString,
        ResourceRequestStatusSummaries: (_) => de_ResourceRequestStatusSummaries(_, context),
    });
};
const de_ProgressEvent = (output, context) => {
    return take(output, {
        ErrorCode: __expectString,
        EventTime: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        HooksRequestToken: __expectString,
        Identifier: __expectString,
        Operation: __expectString,
        OperationStatus: __expectString,
        RequestToken: __expectString,
        ResourceModel: __expectString,
        RetryAfter: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        StatusMessage: __expectString,
        TypeName: __expectString,
    });
};
const de_ResourceRequestStatusSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProgressEvent(entry, context);
    });
    return retVal;
};
const de_UpdateResourceOutput = (output, context) => {
    return take(output, {
        ProgressEvent: (_) => de_ProgressEvent(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const throwDefaultError = withBaseException(__BaseException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": `CloudApiService.${operation}`,
    };
}
