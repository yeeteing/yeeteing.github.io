"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCredentials = void 0;
const awscli_compatible_1 = require("./awscli-compatible");
const toolkit_error_1 = require("../../toolkit/toolkit-error");
const sdk_logger_1 = require("./sdk-logger");
const private_1 = require("../io/private");
class BaseCredentials {
    /**
     * Use no base credentials
     *
     * There will be no current account and no current region during synthesis. To
     * successfully deploy with this set of base credentials:
     *
     * - The CDK app must provide concrete accounts and regions during synthesis
     * - Credential plugins must be installed to provide credentials for those
     *   accounts.
     */
    static none() {
        return new class {
            async sdkBaseConfig() {
                return {
                    credentialProvider: () => {
                        throw new toolkit_error_1.AuthenticationError('No credentials available due to BaseCredentials.none()');
                    },
                };
            }
            toString() {
                return 'BaseCredentials.none()';
            }
        };
    }
    /**
     * Obtain base credentials and base region the same way the AWS CLI would
     *
     * Credentials and region will be read from the environment first, falling back
     * to INI files or other sources if available.
     *
     * The profile name is configurable.
     */
    static awsCliCompatible(options = {}) {
        return new class {
            sdkBaseConfig(ioHost, clientConfig) {
                const ioHelper = private_1.IoHelper.fromActionAwareIoHost(ioHost);
                const awsCli = new awscli_compatible_1.AwsCliCompatible(ioHelper, clientConfig.requestHandler ?? {}, new sdk_logger_1.IoHostSdkLogger(ioHelper));
                return awsCli.baseConfig(options.profile);
            }
            toString() {
                return `BaseCredentials.awsCliCompatible(${JSON.stringify(options)})`;
            }
        };
    }
    /**
     * Use a custom SDK identity provider for the base credentials
     *
     * If your provider uses STS calls to obtain base credentials, you must make
     * sure to also configure the necessary HTTP options (like proxy and user
     * agent) and the region on the STS client directly; the toolkit code cannot
     * do this for you.
     */
    static custom(options) {
        return new class {
            sdkBaseConfig() {
                return Promise.resolve({
                    credentialProvider: options.provider,
                    defaultRegion: options.region,
                });
            }
            toString() {
                return `BaseCredentials.custom(${JSON.stringify({
                    ...options,
                    provider: '...',
                })})`;
            }
        };
    }
}
exports.BaseCredentials = BaseCredentials;
//# sourceMappingURL=data:application/json;base64,