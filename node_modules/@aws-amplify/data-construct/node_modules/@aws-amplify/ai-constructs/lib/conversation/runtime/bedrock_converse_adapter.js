"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockConverseAdapter = void 0;
const client_bedrock_runtime_1 = require("@aws-sdk/client-bedrock-runtime");
const event_tools_provider_1 = require("./event-tools-provider");
const conversation_message_history_retriever_1 = require("./conversation_message_history_retriever");
const errors_1 = require("./errors");
const user_agent_provider_1 = require("./user_agent_provider");
/**
 * This class is responsible for interacting with Bedrock Converse API
 * in order to produce final response that can be sent back to caller.
 */
class BedrockConverseAdapter {
    /**
     * Creates Bedrock Converse Adapter.
     */
    constructor(event, additionalTools, bedrockClient = new client_bedrock_runtime_1.BedrockRuntimeClient({ region: event.modelConfiguration.region }), eventToolsProvider = new event_tools_provider_1.ConversationTurnEventToolsProvider(event), messageHistoryRetriever = new conversation_message_history_retriever_1.ConversationMessageHistoryRetriever(event), userAgentProvider = new user_agent_provider_1.UserAgentProvider(event), logger = console) {
        var _a, _b;
        this.event = event;
        this.bedrockClient = bedrockClient;
        this.messageHistoryRetriever = messageHistoryRetriever;
        this.logger = logger;
        this.executableToolByName = new Map();
        this.clientToolByName = new Map();
        this.askBedrock = async () => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const { modelId, systemPrompt, inferenceConfiguration } = this.event.modelConfiguration;
            const messages = await this.getEventMessagesAsBedrockMessages();
            let bedrockResponse;
            do {
                const toolConfig = this.createToolConfiguration();
                const converseCommandInput = {
                    modelId,
                    messages: [...messages],
                    system: [{ text: systemPrompt }],
                    inferenceConfig: inferenceConfiguration,
                    toolConfig,
                };
                this.logger.info('Sending Bedrock Converse request');
                this.logger.debug('Bedrock Converse request:', converseCommandInput);
                bedrockResponse = await this.bedrockClient.send(new client_bedrock_runtime_1.ConverseCommand(converseCommandInput));
                this.logger.info(`Received Bedrock Converse response, requestId=${bedrockResponse.$metadata.requestId}`, bedrockResponse.usage);
                this.logger.debug('Bedrock Converse response:', bedrockResponse);
                if ((_a = bedrockResponse.output) === null || _a === void 0 ? void 0 : _a.message) {
                    messages.push((_b = bedrockResponse.output) === null || _b === void 0 ? void 0 : _b.message);
                }
                if (bedrockResponse.stopReason === 'tool_use') {
                    const responseContentBlocks = (_e = (_d = (_c = bedrockResponse.output) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.content) !== null && _e !== void 0 ? _e : [];
                    const toolUseBlocks = responseContentBlocks.filter((block) => 'toolUse' in block);
                    const clientToolUseBlocks = responseContentBlocks.filter((block) => {
                        var _a, _b;
                        return ((_a = block.toolUse) === null || _a === void 0 ? void 0 : _a.name) &&
                            this.clientToolByName.has((_b = block.toolUse) === null || _b === void 0 ? void 0 : _b.name);
                    });
                    if (clientToolUseBlocks.length > 0) {
                        // For now if any of client tools is used we ignore executable tools
                        // and propagate result back to client.
                        return clientToolUseBlocks;
                    }
                    const toolResponseContentBlocks = [];
                    for (const responseContentBlock of toolUseBlocks) {
                        const toolUseBlock = responseContentBlock;
                        const toolResultContentBlock = await this.executeTool(toolUseBlock);
                        toolResponseContentBlocks.push(toolResultContentBlock);
                    }
                    messages.push({
                        role: 'user',
                        content: toolResponseContentBlocks,
                    });
                }
            } while (bedrockResponse.stopReason === 'tool_use');
            return (_h = (_g = (_f = bedrockResponse.output) === null || _f === void 0 ? void 0 : _f.message) === null || _g === void 0 ? void 0 : _g.content) !== null && _h !== void 0 ? _h : [];
        };
        /**
         * Maps event messages to Bedrock types.
         * 1. Makes a copy so that we don't mutate event.
         * 2. Decodes Base64 encoded images.
         */
        this.getEventMessagesAsBedrockMessages = async () => {
            var _a, _b, _c, _d;
            const messages = [];
            const eventMessages = await this.messageHistoryRetriever.getMessageHistory();
            for (const message of eventMessages) {
                const messageContent = [];
                for (const contentElement of message.content) {
                    if (typeof ((_b = (_a = contentElement.image) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.bytes) === 'string') {
                        messageContent.push({
                            image: {
                                format: contentElement.image.format,
                                source: {
                                    bytes: Buffer.from(contentElement.image.source.bytes, 'base64'),
                                },
                            },
                        });
                    }
                    else if (typeof ((_d = (_c = contentElement.document) === null || _c === void 0 ? void 0 : _c.source) === null || _d === void 0 ? void 0 : _d.bytes) === 'string') {
                        messageContent.push({
                            document: {
                                ...contentElement.document,
                                source: {
                                    bytes: Buffer.from(contentElement.document.source.bytes, 'base64'),
                                },
                            },
                        });
                    }
                    else {
                        // Otherwise type conforms to Bedrock's type and it's safe to cast.
                        messageContent.push(contentElement);
                    }
                }
                messages.push({
                    role: message.role,
                    content: messageContent,
                });
            }
            return messages;
        };
        this.createToolConfiguration = () => {
            if (this.allTools.length === 0) {
                return undefined;
            }
            return {
                tools: this.allTools.map((t) => {
                    return {
                        toolSpec: {
                            name: t.name,
                            description: t.description,
                            // We have to cast to bedrock type as we're using different types to describe JSON schema in our API.
                            // These types are runtime compatible.
                            inputSchema: t.inputSchema,
                        },
                    };
                }),
            };
        };
        this.executeTool = async (toolUseBlock) => {
            if (!toolUseBlock.toolUse.name) {
                throw Error('Bedrock tool use response is missing a tool name');
            }
            const tool = this.executableToolByName.get(toolUseBlock.toolUse.name);
            if (!tool) {
                throw Error(`Bedrock tool use response contains unknown tool '${toolUseBlock.toolUse.name}'`);
            }
            try {
                this.logger.info(`Invoking tool ${tool.name}`);
                this.logger.debug('Tool input:', toolUseBlock.toolUse.input);
                const toolResponse = await tool.execute(toolUseBlock.toolUse.input);
                this.logger.info(`Received response from ${tool.name} tool`);
                this.logger.debug(toolResponse);
                return {
                    toolResult: {
                        toolUseId: toolUseBlock.toolUse.toolUseId,
                        content: [toolResponse],
                        status: 'success',
                    },
                };
            }
            catch (e) {
                if (e instanceof Error) {
                    return {
                        toolResult: {
                            toolUseId: toolUseBlock.toolUse.toolUseId,
                            content: [{ text: e.toString() }],
                            status: 'error',
                        },
                    };
                }
                return {
                    toolResult: {
                        toolUseId: toolUseBlock.toolUse.toolUseId,
                        content: [{ text: 'unknown error occurred' }],
                        status: 'error',
                    },
                };
            }
        };
        this.bedrockClient.middlewareStack.add((next) => (args) => {
            // @ts-expect-error Request is typed as unknown.
            // But this is recommended way to alter headers per https://github.com/aws/aws-sdk-js-v3/blob/main/README.md.
            args.request.headers['x-amz-user-agent'] =
                userAgentProvider.getUserAgent();
            return next(args);
        }, {
            step: 'build',
            name: 'amplify-user-agent-injector',
        });
        this.executableTools = [
            ...eventToolsProvider.getEventTools(),
            ...additionalTools,
        ];
        this.clientTools = (_b = (_a = this.event.toolsConfiguration) === null || _a === void 0 ? void 0 : _a.clientTools) !== null && _b !== void 0 ? _b : [];
        this.allTools = [...this.executableTools, ...this.clientTools];
        const duplicateTools = new Set();
        this.executableTools.forEach((t) => {
            if (this.executableToolByName.has(t.name)) {
                duplicateTools.add(t.name);
            }
            this.executableToolByName.set(t.name, t);
        });
        this.clientTools.forEach((t) => {
            if (this.executableToolByName.has(t.name)) {
                duplicateTools.add(t.name);
            }
            if (this.clientToolByName.has(t.name)) {
                duplicateTools.add(t.name);
            }
            this.clientToolByName.set(t.name, t);
        });
        if (duplicateTools.size > 0) {
            throw new errors_1.ValidationError(`Tools must have unique names. Duplicate tools: ${[
                ...duplicateTools,
            ].join(', ')}.`);
        }
    }
    /**
     * Asks Bedrock for response using streaming version of Converse API.
     */
    async *askBedrockStreaming() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const { modelId, systemPrompt, inferenceConfiguration } = this.event.modelConfiguration;
        const messages = await this.getEventMessagesAsBedrockMessages();
        let bedrockResponse;
        // keep our own indexing for blocks instead of using Bedrock's indexes
        // since we stream subset of these upstream.
        let blockIndex = 0;
        let lastBlockIndex = 0;
        let stopReason = '';
        // Accumulates client facing content per turn.
        // So that upstream can persist full message at the end of the streaming.
        const accumulatedTurnContent = [];
        do {
            const toolConfig = this.createToolConfiguration();
            const converseCommandInput = {
                modelId,
                messages: [...messages],
                system: [{ text: systemPrompt }],
                inferenceConfig: inferenceConfiguration,
                toolConfig,
            };
            this.logger.info('Sending Bedrock Converse Stream request');
            this.logger.debug('Bedrock Converse Stream request:', converseCommandInput);
            bedrockResponse = await this.bedrockClient.send(new client_bedrock_runtime_1.ConverseStreamCommand(converseCommandInput));
            this.logger.info(`Received Bedrock Converse Stream response, requestId=${bedrockResponse.$metadata.requestId}`);
            if (!bedrockResponse.stream) {
                throw new Error('Bedrock response is missing stream');
            }
            let toolUseBlock;
            let clientToolsRequested = false;
            let text = '';
            let toolUseInput = '';
            let blockDeltaIndex = 0;
            let lastBlockDeltaIndex = 0;
            // Accumulate current message for the tool use loop purpose.
            const accumulatedAssistantMessage = {
                role: undefined,
                content: [],
            };
            let processedBedrockChunks = 0;
            try {
                for await (const chunk of bedrockResponse.stream) {
                    this.logger.debug('Bedrock Converse Stream response chunk:', chunk);
                    if (chunk.messageStart) {
                        accumulatedAssistantMessage.role = chunk.messageStart.role;
                    }
                    else if (chunk.contentBlockStart) {
                        blockDeltaIndex = 0;
                        lastBlockDeltaIndex = 0;
                        if ((_a = chunk.contentBlockStart.start) === null || _a === void 0 ? void 0 : _a.toolUse) {
                            toolUseBlock = {
                                toolUse: {
                                    ...(_b = chunk.contentBlockStart.start) === null || _b === void 0 ? void 0 : _b.toolUse,
                                    input: undefined,
                                },
                            };
                        }
                    }
                    else if (chunk.contentBlockDelta) {
                        if ((_c = chunk.contentBlockDelta.delta) === null || _c === void 0 ? void 0 : _c.toolUse) {
                            if (!chunk.contentBlockDelta.delta.toolUse.input) {
                                toolUseInput = '';
                            }
                            else {
                                toolUseInput += chunk.contentBlockDelta.delta.toolUse.input;
                            }
                        }
                        else if ((_d = chunk.contentBlockDelta.delta) === null || _d === void 0 ? void 0 : _d.text) {
                            text += chunk.contentBlockDelta.delta.text;
                            const amplifyChunk = {
                                accumulatedTurnContent: [...accumulatedTurnContent, { text }],
                                conversationId: this.event.conversationId,
                                associatedUserMessageId: this.event.currentMessageId,
                                contentBlockText: chunk.contentBlockDelta.delta.text,
                                contentBlockIndex: blockIndex,
                                contentBlockDeltaIndex: blockDeltaIndex,
                            };
                            // padding is sent from Bedrock but not included in the API.
                            if ('p' in chunk.contentBlockDelta) {
                                const bedrockPadding = chunk.contentBlockDelta.p;
                                if (typeof bedrockPadding === 'string') {
                                    amplifyChunk.p = bedrockPadding;
                                }
                            }
                            yield amplifyChunk;
                            lastBlockDeltaIndex = blockDeltaIndex;
                            blockDeltaIndex++;
                        }
                    }
                    else if (chunk.contentBlockStop) {
                        if (toolUseBlock) {
                            if (toolUseInput) {
                                toolUseBlock.toolUse.input = JSON.parse(toolUseInput);
                            }
                            else {
                                // Bedrock API requires tool input to be non-null in message history.
                                // Therefore, falling back to empty object.
                                toolUseBlock.toolUse.input = {};
                            }
                            (_e = accumulatedAssistantMessage.content) === null || _e === void 0 ? void 0 : _e.push(toolUseBlock);
                            if (toolUseBlock.toolUse.name &&
                                this.clientToolByName.has(toolUseBlock.toolUse.name)) {
                                clientToolsRequested = true;
                                accumulatedTurnContent.push(toolUseBlock);
                                yield {
                                    accumulatedTurnContent: [...accumulatedTurnContent],
                                    conversationId: this.event.conversationId,
                                    associatedUserMessageId: this.event.currentMessageId,
                                    contentBlockIndex: blockIndex,
                                    contentBlockToolUse: JSON.stringify(toolUseBlock),
                                };
                                lastBlockIndex = blockIndex;
                                blockIndex++;
                            }
                            toolUseBlock = undefined;
                            toolUseInput = '';
                        }
                        else {
                            (_f = accumulatedAssistantMessage.content) === null || _f === void 0 ? void 0 : _f.push({
                                text,
                            });
                            accumulatedTurnContent.push({ text });
                            yield {
                                accumulatedTurnContent: [...accumulatedTurnContent],
                                conversationId: this.event.conversationId,
                                associatedUserMessageId: this.event.currentMessageId,
                                contentBlockIndex: blockIndex,
                                contentBlockDoneAtIndex: lastBlockDeltaIndex,
                            };
                            text = '';
                            lastBlockIndex = blockIndex;
                            blockIndex++;
                        }
                    }
                    else if (chunk.messageStop) {
                        stopReason = (_g = chunk.messageStop.stopReason) !== null && _g !== void 0 ? _g : '';
                    }
                    processedBedrockChunks++;
                    if (processedBedrockChunks % 1000 === 0) {
                        this.logger.info(`Processed ${processedBedrockChunks} chunks from Bedrock Converse Stream response, requestId=${bedrockResponse.$metadata.requestId}`);
                    }
                }
            }
            finally {
                this.logger.info(`Completed processing ${processedBedrockChunks} chunks from Bedrock Converse Stream response, requestId=${bedrockResponse.$metadata.requestId}`);
            }
            this.logger.debug('Accumulated Bedrock Converse Stream response:', accumulatedAssistantMessage);
            if (clientToolsRequested) {
                // For now if any of client tools is used we ignore executable tools
                // and propagate result back to client.
                yield {
                    accumulatedTurnContent: [...accumulatedTurnContent],
                    conversationId: this.event.conversationId,
                    associatedUserMessageId: this.event.currentMessageId,
                    contentBlockIndex: lastBlockIndex,
                    stopReason: stopReason,
                };
                return;
            }
            messages.push(accumulatedAssistantMessage);
            if (stopReason === 'tool_use') {
                const responseContentBlocks = (_h = accumulatedAssistantMessage.content) !== null && _h !== void 0 ? _h : [];
                const toolUseBlocks = responseContentBlocks.filter((block) => 'toolUse' in block);
                const toolResponseContentBlocks = [];
                for (const responseContentBlock of toolUseBlocks) {
                    const toolUseBlock = responseContentBlock;
                    const toolResultContentBlock = await this.executeTool(toolUseBlock);
                    toolResponseContentBlocks.push(toolResultContentBlock);
                }
                messages.push({
                    role: 'user',
                    content: toolResponseContentBlocks,
                });
            }
        } while (stopReason === 'tool_use');
        yield {
            accumulatedTurnContent: [...accumulatedTurnContent],
            conversationId: this.event.conversationId,
            associatedUserMessageId: this.event.currentMessageId,
            contentBlockIndex: lastBlockIndex,
            stopReason: stopReason,
        };
    }
}
exports.BedrockConverseAdapter = BedrockConverseAdapter;
//# sourceMappingURL=data:application/json;base64,