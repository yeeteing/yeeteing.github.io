import { generateStatements, generateTypes, } from '@aws-amplify/graphql-generator';
import { Source } from 'graphql';
/**
 * Generates GraphQL types for a given AppSync API
 */
export class AppSyncGraphqlTypesGenerator {
    fetchSchema;
    resultBuilder;
    /**
     * Configures the AppSyncGraphqlTypesGenerator
     */
    constructor(fetchSchema, resultBuilder) {
        this.fetchSchema = fetchSchema;
        this.resultBuilder = resultBuilder;
    }
    generateTypes = async ({ target, multipleSwiftFiles, maxDepth, typenameIntrospection, }) => {
        const schema = await this.fetchSchema();
        if (!schema) {
            // eslint-disable-next-line @aws-amplify/amplify-backend-rules/prefer-amplify-errors
            throw new Error('Invalid schema');
        }
        const generatedStatements = generateStatements({
            schema,
            maxDepth,
            typenameIntrospection,
            target: 'graphql',
        });
        const queries = Object.entries(generatedStatements).map(([filename, contents]) => new Source(contents, filename));
        const generatedTypes = await generateTypes({
            schema,
            target,
            queries,
            multipleSwiftFiles,
        });
        return this.resultBuilder(generatedTypes);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF90eXBlc19nZW5lcmF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ3JhcGhxbF90eXBlc19nZW5lcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixhQUFhLEdBQ2QsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBT2pDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDRCQUE0QjtJQUs3QjtJQUNBO0lBTFY7O09BRUc7SUFDSCxZQUNVLFdBQWtDLEVBQ2xDLGFBRWE7UUFIYixnQkFBVyxHQUFYLFdBQVcsQ0FBdUI7UUFDbEMsa0JBQWEsR0FBYixhQUFhLENBRUE7SUFDcEIsQ0FBQztJQUVKLGFBQWEsR0FBRyxLQUFLLEVBQUUsRUFDckIsTUFBTSxFQUNOLGtCQUFrQixFQUNsQixRQUFRLEVBQ1IscUJBQXFCLEdBQ0ssRUFBRSxFQUFFO1FBQzlCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXhDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNaLG9GQUFvRjtZQUNwRixNQUFNLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDcEMsQ0FBQztRQUVELE1BQU0sbUJBQW1CLEdBQUcsa0JBQWtCLENBQUM7WUFDN0MsTUFBTTtZQUNOLFFBQVE7WUFDUixxQkFBcUI7WUFDckIsTUFBTSxFQUFFLFNBQVM7U0FDbEIsQ0FBQyxDQUFDO1FBRUgsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEdBQUcsQ0FDckQsQ0FBQyxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUN6RCxDQUFDO1FBRUYsTUFBTSxjQUFjLEdBQUcsTUFBTSxhQUFhLENBQUM7WUFDekMsTUFBTTtZQUNOLE1BQU07WUFDTixPQUFPO1lBQ1Asa0JBQWtCO1NBQ25CLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM1QyxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGdlbmVyYXRlU3RhdGVtZW50cyxcbiAgZ2VuZXJhdGVUeXBlcyxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2dyYXBocWwtZ2VuZXJhdG9yJztcbmltcG9ydCB7IFNvdXJjZSB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHtcbiAgR2VuZXJhdGlvblJlc3VsdCxcbiAgR3JhcGhxbFR5cGVzR2VuZXJhdG9yLFxuICBUeXBlc0dlbmVyYXRpb25QYXJhbWV0ZXJzLFxufSBmcm9tICcuL21vZGVsX2dlbmVyYXRvci5qcyc7XG5cbi8qKlxuICogR2VuZXJhdGVzIEdyYXBoUUwgdHlwZXMgZm9yIGEgZ2l2ZW4gQXBwU3luYyBBUElcbiAqL1xuZXhwb3J0IGNsYXNzIEFwcFN5bmNHcmFwaHFsVHlwZXNHZW5lcmF0b3IgaW1wbGVtZW50cyBHcmFwaHFsVHlwZXNHZW5lcmF0b3Ige1xuICAvKipcbiAgICogQ29uZmlndXJlcyB0aGUgQXBwU3luY0dyYXBocWxUeXBlc0dlbmVyYXRvclxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBmZXRjaFNjaGVtYTogKCkgPT4gUHJvbWlzZTxzdHJpbmc+LFxuICAgIHByaXZhdGUgcmVzdWx0QnVpbGRlcjogKFxuICAgICAgZmlsZU1hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPixcbiAgICApID0+IEdlbmVyYXRpb25SZXN1bHQsXG4gICkge31cblxuICBnZW5lcmF0ZVR5cGVzID0gYXN5bmMgKHtcbiAgICB0YXJnZXQsXG4gICAgbXVsdGlwbGVTd2lmdEZpbGVzLFxuICAgIG1heERlcHRoLFxuICAgIHR5cGVuYW1lSW50cm9zcGVjdGlvbixcbiAgfTogVHlwZXNHZW5lcmF0aW9uUGFyYW1ldGVycykgPT4ge1xuICAgIGNvbnN0IHNjaGVtYSA9IGF3YWl0IHRoaXMuZmV0Y2hTY2hlbWEoKTtcblxuICAgIGlmICghc2NoZW1hKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGF3cy1hbXBsaWZ5L2FtcGxpZnktYmFja2VuZC1ydWxlcy9wcmVmZXItYW1wbGlmeS1lcnJvcnNcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzY2hlbWEnKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZW5lcmF0ZWRTdGF0ZW1lbnRzID0gZ2VuZXJhdGVTdGF0ZW1lbnRzKHtcbiAgICAgIHNjaGVtYSxcbiAgICAgIG1heERlcHRoLFxuICAgICAgdHlwZW5hbWVJbnRyb3NwZWN0aW9uLFxuICAgICAgdGFyZ2V0OiAnZ3JhcGhxbCcsXG4gICAgfSk7XG5cbiAgICBjb25zdCBxdWVyaWVzID0gT2JqZWN0LmVudHJpZXMoZ2VuZXJhdGVkU3RhdGVtZW50cykubWFwKFxuICAgICAgKFtmaWxlbmFtZSwgY29udGVudHNdKSA9PiBuZXcgU291cmNlKGNvbnRlbnRzLCBmaWxlbmFtZSksXG4gICAgKTtcblxuICAgIGNvbnN0IGdlbmVyYXRlZFR5cGVzID0gYXdhaXQgZ2VuZXJhdGVUeXBlcyh7XG4gICAgICBzY2hlbWEsXG4gICAgICB0YXJnZXQsXG4gICAgICBxdWVyaWVzLFxuICAgICAgbXVsdGlwbGVTd2lmdEZpbGVzLFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMucmVzdWx0QnVpbGRlcihnZW5lcmF0ZWRUeXBlcyk7XG4gIH07XG59XG4iXX0=