"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackendIdentifierConversions = void 0;
const crypto_1 = require("crypto");
const STACK_NAME_LENGTH_LIMIT = 128;
const AMPLIFY_PREFIX = 'amplify';
const HASH_LENGTH = 10;
const NUM_DASHES = 4;
/**
 * Provides static methods for converting BackendIdentifier to/from a stack name string
 */
class BackendIdentifierConversions {
    /**
     * Convert a stack name to a BackendIdentifier
     *
     * If the stack name is ambiguous, undefined is returned
     */
    // It's fine to ignore the rule here because the anti-static rule is to ban the static function which should use constructor
    // eslint-disable-next-line no-restricted-syntax
    static fromStackName(stackName) {
        if (!stackName) {
            return;
        }
        const parts = stackName.split('-');
        if (parts.length !== 5) {
            return;
        }
        const [prefix, namespace, instance, type, hash] = parts;
        if (prefix !== AMPLIFY_PREFIX) {
            return;
        }
        if (type !== 'sandbox' && type !== 'branch') {
            return;
        }
        return {
            namespace,
            name: instance,
            type: type,
            hash,
        };
    }
    /**
     * Convert a BackendIdentifier to a stack name.
     *
     * !!!DANGER!!!
     * !!!DO NOT CHANGE THIS UNLESS YOU ARE 100% SURE YOU UNDERSTAND THE CONSEQUENCES!!!
     *
     * Changing this method will change how stack names are generated which could be a massive breaking change for existing Amplify stacks.
     */
    // It's fine to ignore the rule here because the anti-static rule is to ban the static function which should use constructor
    // eslint-disable-next-line no-restricted-syntax
    static toStackName(backendId) {
        const hash = getHash(backendId);
        // only take the first 50 chars here to make sure there is room in the stack name for the namespace as well
        const name = sanitizeChars(backendId.name).slice(0, 50);
        const namespaceMaxLength = STACK_NAME_LENGTH_LIMIT -
            AMPLIFY_PREFIX.length -
            backendId.type.length -
            name.length -
            NUM_DASHES -
            HASH_LENGTH;
        const namespace = sanitizeChars(backendId.namespace).slice(0, namespaceMaxLength - 1);
        return ['amplify', namespace, name, backendId.type, hash].join('-');
    }
}
exports.BackendIdentifierConversions = BackendIdentifierConversions;
/**
 * Gets a stable hash from the namespace and name in the backendId.
 *
 * If the backendId already includes a hash, this hash is returned as-is.
 *
 * !!!DANGER!!!
 * !!!DO NOT CHANGE THIS UNLESS YOU ARE 100% SURE YOU UNDERSTAND THE CONSEQUENCES!!!
 *
 * Changing this hash algorithm will change how stack names are generated which would be a massive breaking change for existing Amplify stacks.
 */
const getHash = (backendId) => backendId.hash ??
    // md5 would be sufficient here because this hash does not need to be cryptographically secure, but this ensures that we don't get unnecessarily flagged by some security scanner
    (0, crypto_1.createHash)('sha512')
        .update(backendId.namespace)
        .update(backendId.name)
        .digest('hex')
        .slice(0, HASH_LENGTH);
/**
 * Remove all non-alphanumeric characters from the input string
 */
const sanitizeChars = (str) => {
    return str.replace(/[^A-Za-z0-9]/g, '');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9pZGVudGlmaWVyX2NvbnZlcnNpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2JhY2tlbmRfaWRlbnRpZmllcl9jb252ZXJzaW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBb0M7QUFFcEMsTUFBTSx1QkFBdUIsR0FBRyxHQUFHLENBQUM7QUFDcEMsTUFBTSxjQUFjLEdBQUcsU0FBUyxDQUFDO0FBQ2pDLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUN2QixNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFFckI7O0dBRUc7QUFDSCxNQUFhLDRCQUE0QjtJQUN2Qzs7OztPQUlHO0lBQ0gsNEhBQTRIO0lBQzVILGdEQUFnRDtJQUNoRCxNQUFNLENBQUMsYUFBYSxDQUFDLFNBQWtCO1FBQ3JDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUNmLE9BQU87UUFDVCxDQUFDO1FBQ0QsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuQyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDdkIsT0FBTztRQUNULENBQUM7UUFDRCxNQUFNLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUN4RCxJQUFJLE1BQU0sS0FBSyxjQUFjLEVBQUUsQ0FBQztZQUM5QixPQUFPO1FBQ1QsQ0FBQztRQUNELElBQUksSUFBSSxLQUFLLFNBQVMsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFLENBQUM7WUFDNUMsT0FBTztRQUNULENBQUM7UUFFRCxPQUFPO1lBQ0wsU0FBUztZQUNULElBQUksRUFBRSxRQUFRO1lBQ2QsSUFBSSxFQUFFLElBQTRCO1lBQ2xDLElBQUk7U0FDTCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCw0SEFBNEg7SUFDNUgsZ0RBQWdEO0lBQ2hELE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBNEI7UUFDN0MsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRWhDLDJHQUEyRztRQUMzRyxNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFeEQsTUFBTSxrQkFBa0IsR0FDdEIsdUJBQXVCO1lBQ3ZCLGNBQWMsQ0FBQyxNQUFNO1lBQ3JCLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUNyQixJQUFJLENBQUMsTUFBTTtZQUNYLFVBQVU7WUFDVixXQUFXLENBQUM7UUFFZCxNQUFNLFNBQVMsR0FBRyxhQUFhLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FDeEQsQ0FBQyxFQUNELGtCQUFrQixHQUFHLENBQUMsQ0FDdkIsQ0FBQztRQUVGLE9BQU8sQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0RSxDQUFDO0NBQ0Y7QUEvREQsb0VBK0RDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxPQUFPLEdBQUcsQ0FBQyxTQUE0QixFQUFVLEVBQUUsQ0FDdkQsU0FBUyxDQUFDLElBQUk7SUFDZCxpTEFBaUw7SUFDakwsSUFBQSxtQkFBVSxFQUFDLFFBQVEsQ0FBQztTQUNqQixNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztTQUMzQixNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztTQUN0QixNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2IsS0FBSyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUUzQjs7R0FFRztBQUNILE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBVyxFQUFVLEVBQUU7SUFDNUMsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUMxQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgY3JlYXRlSGFzaCB9IGZyb20gJ2NyeXB0byc7XG5cbmNvbnN0IFNUQUNLX05BTUVfTEVOR1RIX0xJTUlUID0gMTI4O1xuY29uc3QgQU1QTElGWV9QUkVGSVggPSAnYW1wbGlmeSc7XG5jb25zdCBIQVNIX0xFTkdUSCA9IDEwO1xuY29uc3QgTlVNX0RBU0hFUyA9IDQ7XG5cbi8qKlxuICogUHJvdmlkZXMgc3RhdGljIG1ldGhvZHMgZm9yIGNvbnZlcnRpbmcgQmFja2VuZElkZW50aWZpZXIgdG8vZnJvbSBhIHN0YWNrIG5hbWUgc3RyaW5nXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZW5kSWRlbnRpZmllckNvbnZlcnNpb25zIHtcbiAgLyoqXG4gICAqIENvbnZlcnQgYSBzdGFjayBuYW1lIHRvIGEgQmFja2VuZElkZW50aWZpZXJcbiAgICpcbiAgICogSWYgdGhlIHN0YWNrIG5hbWUgaXMgYW1iaWd1b3VzLCB1bmRlZmluZWQgaXMgcmV0dXJuZWRcbiAgICovXG4gIC8vIEl0J3MgZmluZSB0byBpZ25vcmUgdGhlIHJ1bGUgaGVyZSBiZWNhdXNlIHRoZSBhbnRpLXN0YXRpYyBydWxlIGlzIHRvIGJhbiB0aGUgc3RhdGljIGZ1bmN0aW9uIHdoaWNoIHNob3VsZCB1c2UgY29uc3RydWN0b3JcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gIHN0YXRpYyBmcm9tU3RhY2tOYW1lKHN0YWNrTmFtZT86IHN0cmluZyk6IEJhY2tlbmRJZGVudGlmaWVyIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAoIXN0YWNrTmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBwYXJ0cyA9IHN0YWNrTmFtZS5zcGxpdCgnLScpO1xuICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgW3ByZWZpeCwgbmFtZXNwYWNlLCBpbnN0YW5jZSwgdHlwZSwgaGFzaF0gPSBwYXJ0cztcbiAgICBpZiAocHJlZml4ICE9PSBBTVBMSUZZX1BSRUZJWCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZSAhPT0gJ3NhbmRib3gnICYmIHR5cGUgIT09ICdicmFuY2gnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgIG5hbWU6IGluc3RhbmNlLFxuICAgICAgdHlwZTogdHlwZSBhcyAnc2FuZGJveCcgfCAnYnJhbmNoJyxcbiAgICAgIGhhc2gsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgQmFja2VuZElkZW50aWZpZXIgdG8gYSBzdGFjayBuYW1lLlxuICAgKlxuICAgKiAhISFEQU5HRVIhISFcbiAgICogISEhRE8gTk9UIENIQU5HRSBUSElTIFVOTEVTUyBZT1UgQVJFIDEwMCUgU1VSRSBZT1UgVU5ERVJTVEFORCBUSEUgQ09OU0VRVUVOQ0VTISEhXG4gICAqXG4gICAqIENoYW5naW5nIHRoaXMgbWV0aG9kIHdpbGwgY2hhbmdlIGhvdyBzdGFjayBuYW1lcyBhcmUgZ2VuZXJhdGVkIHdoaWNoIGNvdWxkIGJlIGEgbWFzc2l2ZSBicmVha2luZyBjaGFuZ2UgZm9yIGV4aXN0aW5nIEFtcGxpZnkgc3RhY2tzLlxuICAgKi9cbiAgLy8gSXQncyBmaW5lIHRvIGlnbm9yZSB0aGUgcnVsZSBoZXJlIGJlY2F1c2UgdGhlIGFudGktc3RhdGljIHJ1bGUgaXMgdG8gYmFuIHRoZSBzdGF0aWMgZnVuY3Rpb24gd2hpY2ggc2hvdWxkIHVzZSBjb25zdHJ1Y3RvclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgc3RhdGljIHRvU3RhY2tOYW1lKGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGhhc2ggPSBnZXRIYXNoKGJhY2tlbmRJZCk7XG5cbiAgICAvLyBvbmx5IHRha2UgdGhlIGZpcnN0IDUwIGNoYXJzIGhlcmUgdG8gbWFrZSBzdXJlIHRoZXJlIGlzIHJvb20gaW4gdGhlIHN0YWNrIG5hbWUgZm9yIHRoZSBuYW1lc3BhY2UgYXMgd2VsbFxuICAgIGNvbnN0IG5hbWUgPSBzYW5pdGl6ZUNoYXJzKGJhY2tlbmRJZC5uYW1lKS5zbGljZSgwLCA1MCk7XG5cbiAgICBjb25zdCBuYW1lc3BhY2VNYXhMZW5ndGggPVxuICAgICAgU1RBQ0tfTkFNRV9MRU5HVEhfTElNSVQgLVxuICAgICAgQU1QTElGWV9QUkVGSVgubGVuZ3RoIC1cbiAgICAgIGJhY2tlbmRJZC50eXBlLmxlbmd0aCAtXG4gICAgICBuYW1lLmxlbmd0aCAtXG4gICAgICBOVU1fREFTSEVTIC1cbiAgICAgIEhBU0hfTEVOR1RIO1xuXG4gICAgY29uc3QgbmFtZXNwYWNlID0gc2FuaXRpemVDaGFycyhiYWNrZW5kSWQubmFtZXNwYWNlKS5zbGljZShcbiAgICAgIDAsXG4gICAgICBuYW1lc3BhY2VNYXhMZW5ndGggLSAxLFxuICAgICk7XG5cbiAgICByZXR1cm4gWydhbXBsaWZ5JywgbmFtZXNwYWNlLCBuYW1lLCBiYWNrZW5kSWQudHlwZSwgaGFzaF0uam9pbignLScpO1xuICB9XG59XG5cbi8qKlxuICogR2V0cyBhIHN0YWJsZSBoYXNoIGZyb20gdGhlIG5hbWVzcGFjZSBhbmQgbmFtZSBpbiB0aGUgYmFja2VuZElkLlxuICpcbiAqIElmIHRoZSBiYWNrZW5kSWQgYWxyZWFkeSBpbmNsdWRlcyBhIGhhc2gsIHRoaXMgaGFzaCBpcyByZXR1cm5lZCBhcy1pcy5cbiAqXG4gKiAhISFEQU5HRVIhISFcbiAqICEhIURPIE5PVCBDSEFOR0UgVEhJUyBVTkxFU1MgWU9VIEFSRSAxMDAlIFNVUkUgWU9VIFVOREVSU1RBTkQgVEhFIENPTlNFUVVFTkNFUyEhIVxuICpcbiAqIENoYW5naW5nIHRoaXMgaGFzaCBhbGdvcml0aG0gd2lsbCBjaGFuZ2UgaG93IHN0YWNrIG5hbWVzIGFyZSBnZW5lcmF0ZWQgd2hpY2ggd291bGQgYmUgYSBtYXNzaXZlIGJyZWFraW5nIGNoYW5nZSBmb3IgZXhpc3RpbmcgQW1wbGlmeSBzdGFja3MuXG4gKi9cbmNvbnN0IGdldEhhc2ggPSAoYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllcik6IHN0cmluZyA9PlxuICBiYWNrZW5kSWQuaGFzaCA/P1xuICAvLyBtZDUgd291bGQgYmUgc3VmZmljaWVudCBoZXJlIGJlY2F1c2UgdGhpcyBoYXNoIGRvZXMgbm90IG5lZWQgdG8gYmUgY3J5cHRvZ3JhcGhpY2FsbHkgc2VjdXJlLCBidXQgdGhpcyBlbnN1cmVzIHRoYXQgd2UgZG9uJ3QgZ2V0IHVubmVjZXNzYXJpbHkgZmxhZ2dlZCBieSBzb21lIHNlY3VyaXR5IHNjYW5uZXJcbiAgY3JlYXRlSGFzaCgnc2hhNTEyJylcbiAgICAudXBkYXRlKGJhY2tlbmRJZC5uYW1lc3BhY2UpXG4gICAgLnVwZGF0ZShiYWNrZW5kSWQubmFtZSlcbiAgICAuZGlnZXN0KCdoZXgnKVxuICAgIC5zbGljZSgwLCBIQVNIX0xFTkdUSCk7XG5cbi8qKlxuICogUmVtb3ZlIGFsbCBub24tYWxwaGFudW1lcmljIGNoYXJhY3RlcnMgZnJvbSB0aGUgaW5wdXQgc3RyaW5nXG4gKi9cbmNvbnN0IHNhbml0aXplQ2hhcnMgPSAoc3RyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1teQS1aYS16MC05XS9nLCAnJyk7XG59O1xuIl19