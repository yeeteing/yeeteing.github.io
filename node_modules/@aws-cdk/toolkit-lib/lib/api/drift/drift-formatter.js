"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DriftFormatter = void 0;
const node_util_1 = require("node:util");
const cxschema = require("@aws-cdk/cloud-assembly-schema");
const cloudformation_diff_1 = require("@aws-cdk/cloudformation-diff");
const client_cloudformation_1 = require("@aws-sdk/client-cloudformation");
const chalk = require("chalk");
/**
 * Class for formatting drift detection output
 */
class DriftFormatter {
    stackName;
    stack;
    resourceDriftResults;
    allStackResources;
    constructor(props) {
        this.stack = props.stack;
        this.stackName = props.stack.displayName ?? props.stack.stackName;
        this.resourceDriftResults = props.resourceDrifts;
        this.allStackResources = new Map();
        Object.keys(this.stack.template.Resources || {}).forEach(id => {
            const resource = this.stack.template.Resources[id];
            // always ignore the metadata resource
            if (resource.Type === 'AWS::CDK::Metadata') {
                return;
            }
            this.allStackResources.set(id, resource.Type);
        });
    }
    /**
     * Format the stack drift detection results
     */
    formatStackDrift() {
        const formatterOutput = this.formatStackDriftChanges(this.buildLogicalToPathMap());
        // we are only interested in actual drifts and always ignore the metadata resource
        const actualDrifts = this.resourceDriftResults.filter(d => d.StackResourceDriftStatus === 'MODIFIED' ||
            d.StackResourceDriftStatus === 'DELETED' ||
            d.ResourceType === 'AWS::CDK::Metadata');
        // must output the stack name if there are drifts
        const stackHeader = (0, node_util_1.format)(`Stack ${chalk.bold(this.stackName)}\n`);
        if (actualDrifts.length === 0) {
            const finalResult = chalk.green('No drift detected\n');
            return {
                numResourcesWithDrift: 0,
                numResourcesUnchecked: this.allStackResources.size - this.resourceDriftResults.length,
                stackHeader,
                summary: finalResult,
            };
        }
        const finalResult = chalk.yellow(`\n${actualDrifts.length} resource${actualDrifts.length === 1 ? '' : 's'} ${actualDrifts.length === 1 ? 'has' : 'have'} drifted from their expected configuration\n`);
        return {
            numResourcesWithDrift: actualDrifts.length,
            numResourcesUnchecked: this.allStackResources.size - this.resourceDriftResults.length,
            stackHeader,
            unchanged: formatterOutput.unchanged,
            unchecked: formatterOutput.unchecked,
            modified: formatterOutput.modified,
            deleted: formatterOutput.deleted,
            summary: finalResult,
        };
    }
    buildLogicalToPathMap() {
        const map = {};
        for (const md of this.stack.findMetadataByType(cxschema.ArtifactMetadataEntryType.LOGICAL_ID)) {
            map[md.data] = md.path;
        }
        return map;
    }
    /**
     * Renders stack drift information to the given stream
     *
     * @param driftResults - The stack resource drifts from CloudFormation
     * @param allStackResources - A map of all stack resources
     * @param verbose - Whether to output more verbose text (include undrifted resources)
     * @param logicalToPathMap - A map from logical ID to construct path
     */
    formatStackDriftChanges(logicalToPathMap = {}) {
        if (this.resourceDriftResults.length === 0) {
            return {};
        }
        let unchanged;
        let unchecked;
        let modified;
        let deleted;
        const drifts = this.resourceDriftResults;
        // Process unchanged resources
        const unchangedResources = drifts.filter(d => d.StackResourceDriftStatus === client_cloudformation_1.StackResourceDriftStatus.IN_SYNC);
        if (unchangedResources.length > 0) {
            unchanged = this.printSectionHeader('Resources In Sync');
            for (const drift of unchangedResources) {
                if (!drift.LogicalResourceId || !drift.ResourceType)
                    continue;
                unchanged += `${CONTEXT} ${this.formatValue(drift.ResourceType, chalk.cyan)} ${this.formatLogicalId(logicalToPathMap, drift.LogicalResourceId)}\n`;
            }
            unchanged += this.printSectionFooter();
        }
        // Process all unchecked resources
        if (this.allStackResources) {
            const uncheckedResources = Array.from(this.allStackResources.keys()).filter((logicalId) => {
                return !drifts.find((drift) => drift.LogicalResourceId === logicalId);
            });
            if (uncheckedResources.length > 0) {
                unchecked = this.printSectionHeader('Unchecked Resources');
                for (const logicalId of uncheckedResources) {
                    const resourceType = this.allStackResources.get(logicalId);
                    unchecked += `${CONTEXT} ${this.formatValue(resourceType, chalk.cyan)} ${this.formatLogicalId(logicalToPathMap, logicalId)}\n`;
                }
                unchecked += this.printSectionFooter();
            }
        }
        // Process modified resources
        const modifiedResources = drifts.filter(d => d.StackResourceDriftStatus === client_cloudformation_1.StackResourceDriftStatus.MODIFIED);
        if (modifiedResources.length > 0) {
            modified = this.printSectionHeader('Modified Resources');
            for (const drift of modifiedResources) {
                if (!drift.LogicalResourceId || !drift.ResourceType)
                    continue;
                if (modified === undefined)
                    modified = '';
                modified += `${UPDATE} ${this.formatValue(drift.ResourceType, chalk.cyan)} ${this.formatLogicalId(logicalToPathMap, drift.LogicalResourceId)}\n`;
                if (drift.PropertyDifferences) {
                    const propDiffs = drift.PropertyDifferences;
                    for (let i = 0; i < propDiffs.length; i++) {
                        const diff = propDiffs[i];
                        if (!diff.PropertyPath)
                            continue;
                        const difference = new cloudformation_diff_1.Difference(diff.ExpectedValue, diff.ActualValue);
                        modified += this.formatTreeDiff(diff.PropertyPath, difference, i === propDiffs.length - 1);
                    }
                }
            }
            modified += this.printSectionFooter();
        }
        // Process deleted resources
        const deletedResources = drifts.filter(d => d.StackResourceDriftStatus === client_cloudformation_1.StackResourceDriftStatus.DELETED);
        if (deletedResources.length > 0) {
            deleted = this.printSectionHeader('Deleted Resources');
            for (const drift of deletedResources) {
                if (!drift.LogicalResourceId || !drift.ResourceType)
                    continue;
                deleted += `${REMOVAL} ${this.formatValue(drift.ResourceType, chalk.cyan)} ${this.formatLogicalId(logicalToPathMap, drift.LogicalResourceId)}\n`;
            }
            deleted += this.printSectionFooter();
        }
        return { unchanged, unchecked, modified, deleted };
    }
    formatLogicalId(logicalToPathMap, logicalId) {
        const path = logicalToPathMap[logicalId];
        if (!path)
            return logicalId;
        let normalizedPath = path;
        if (normalizedPath.startsWith('/')) {
            normalizedPath = normalizedPath.slice(1);
        }
        let parts = normalizedPath.split('/');
        if (parts.length > 1) {
            parts = parts.slice(1);
            // remove the last component if it's "Resource" or "Default" (if we have more than a single component)
            if (parts.length > 1) {
                const last = parts[parts.length - 1];
                if (last === 'Resource' || last === 'Default') {
                    parts = parts.slice(0, parts.length - 1);
                }
            }
            normalizedPath = parts.join('/');
        }
        return `${normalizedPath} ${chalk.gray(logicalId)}`;
    }
    formatValue(value, colorFn) {
        if (value == null) {
            return '';
        }
        if (typeof value === 'string') {
            return colorFn(value);
        }
        return colorFn(JSON.stringify(value));
    }
    printSectionHeader(title) {
        return `${chalk.underline(chalk.bold(title))}\n`;
    }
    printSectionFooter() {
        return '\n';
    }
    formatTreeDiff(propertyPath, difference, isLast) {
        let result = (0, node_util_1.format)(' %s─ %s %s\n', isLast ? '└' : '├', difference.isAddition ? ADDITION :
            difference.isRemoval ? REMOVAL :
                UPDATE, propertyPath);
        if (difference.isUpdate) {
            result += (0, node_util_1.format)('     ├─ %s %s\n', REMOVAL, this.formatValue(difference.oldValue, chalk.red));
            result += (0, node_util_1.format)('     └─ %s %s\n', ADDITION, this.formatValue(difference.newValue, chalk.green));
        }
        return result;
    }
}
exports.DriftFormatter = DriftFormatter;
const ADDITION = chalk.green('[+]');
const CONTEXT = chalk.grey('[ ]');
const UPDATE = chalk.yellow('[~]');
const REMOVAL = chalk.red('[-]');
//# sourceMappingURL=data:application/json;base64,