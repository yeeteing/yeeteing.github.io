/**
 * Notices command.
 */
export class NoticesCommand {
    noticesListCommand;
    noticesAcknowledgeCommand;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates notices command
     */
    constructor(noticesListCommand, noticesAcknowledgeCommand) {
        this.noticesListCommand = noticesListCommand;
        this.noticesAcknowledgeCommand = noticesAcknowledgeCommand;
        this.command = 'notices';
        this.describe =
            'Manage and interact with Amplify backend tooling notices. ' +
                'View and acknowledge important notifications about your Amplify environment, ' +
                'including package compatibility issues, version updates, and ' +
                'potential issues that may affect your development workflow.';
    }
    /**
     * @inheritDoc
     */
    handler = async () => {
        // CommandModule requires handler implementation. But this is never called if top level command
        // is configured to require subcommand.
        // Help is printed by default in that case before ever attempting to call handler.
        throw new Error('Top level generate handler should never be called');
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return (yargs
            .version(false)
            // Cast to erase options types used in internal sub command implementation. Otherwise, compiler fails here.
            .command(this.noticesListCommand)
            .command(this.noticesAcknowledgeCommand)
            .demandCommand()
            .strictCommands()
            .recommendCommands()
            .help());
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWNlc19jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL25vdGljZXMvbm90aWNlc19jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGNBQWM7SUFlTjtJQUNBO0lBZm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFDbUIsa0JBQXNDLEVBQ3RDLHlCQUFvRDtRQURwRCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMkI7UUFFckUsSUFBSSxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVE7WUFDWCw0REFBNEQ7Z0JBQzVELCtFQUErRTtnQkFDL0UsK0RBQStEO2dCQUMvRCw2REFBNkQsQ0FBQztJQUNsRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLEdBQUcsS0FBSyxJQUFtQixFQUFFO1FBQ2xDLCtGQUErRjtRQUMvRix1Q0FBdUM7UUFDdkMsa0ZBQWtGO1FBQ2xGLE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztJQUN2RSxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBUSxFQUFFO1FBQzlCLE9BQU8sQ0FDTCxLQUFLO2FBQ0YsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUNmLDJHQUEyRzthQUMxRyxPQUFPLENBQUMsSUFBSSxDQUFDLGtCQUE4QyxDQUFDO2FBQzVELE9BQU8sQ0FBQyxJQUFJLENBQUMseUJBQXFELENBQUM7YUFDbkUsYUFBYSxFQUFFO2FBQ2YsY0FBYyxFQUFFO2FBQ2hCLGlCQUFpQixFQUFFO2FBQ25CLElBQUksRUFBRSxDQUNWLENBQUM7SUFDSixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBOb3RpY2VzTGlzdENvbW1hbmQgfSBmcm9tICcuL25vdGljZXNfbGlzdF9jb21tYW5kLmpzJztcbmltcG9ydCB7IE5vdGljZXNBY2tub3dsZWRnZUNvbW1hbmQgfSBmcm9tICcuL25vdGljZXNfYWNrbm93bGVkZ2VfY29tbWFuZC5qcyc7XG5cbi8qKlxuICogTm90aWNlcyBjb21tYW5kLlxuICovXG5leHBvcnQgY2xhc3MgTm90aWNlc0NvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdD4ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbm90aWNlcyBjb21tYW5kXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5vdGljZXNMaXN0Q29tbWFuZDogTm90aWNlc0xpc3RDb21tYW5kLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgbm90aWNlc0Fja25vd2xlZGdlQ29tbWFuZDogTm90aWNlc0Fja25vd2xlZGdlQ29tbWFuZCxcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ25vdGljZXMnO1xuICAgIHRoaXMuZGVzY3JpYmUgPVxuICAgICAgJ01hbmFnZSBhbmQgaW50ZXJhY3Qgd2l0aCBBbXBsaWZ5IGJhY2tlbmQgdG9vbGluZyBub3RpY2VzLiAnICtcbiAgICAgICdWaWV3IGFuZCBhY2tub3dsZWRnZSBpbXBvcnRhbnQgbm90aWZpY2F0aW9ucyBhYm91dCB5b3VyIEFtcGxpZnkgZW52aXJvbm1lbnQsICcgK1xuICAgICAgJ2luY2x1ZGluZyBwYWNrYWdlIGNvbXBhdGliaWxpdHkgaXNzdWVzLCB2ZXJzaW9uIHVwZGF0ZXMsIGFuZCAnICtcbiAgICAgICdwb3RlbnRpYWwgaXNzdWVzIHRoYXQgbWF5IGFmZmVjdCB5b3VyIGRldmVsb3BtZW50IHdvcmtmbG93Lic7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgLy8gQ29tbWFuZE1vZHVsZSByZXF1aXJlcyBoYW5kbGVyIGltcGxlbWVudGF0aW9uLiBCdXQgdGhpcyBpcyBuZXZlciBjYWxsZWQgaWYgdG9wIGxldmVsIGNvbW1hbmRcbiAgICAvLyBpcyBjb25maWd1cmVkIHRvIHJlcXVpcmUgc3ViY29tbWFuZC5cbiAgICAvLyBIZWxwIGlzIHByaW50ZWQgYnkgZGVmYXVsdCBpbiB0aGF0IGNhc2UgYmVmb3JlIGV2ZXIgYXR0ZW1wdGluZyB0byBjYWxsIGhhbmRsZXIuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb3AgbGV2ZWwgZ2VuZXJhdGUgaGFuZGxlciBzaG91bGQgbmV2ZXIgYmUgY2FsbGVkJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndiA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHlhcmdzXG4gICAgICAgIC52ZXJzaW9uKGZhbHNlKVxuICAgICAgICAvLyBDYXN0IHRvIGVyYXNlIG9wdGlvbnMgdHlwZXMgdXNlZCBpbiBpbnRlcm5hbCBzdWIgY29tbWFuZCBpbXBsZW1lbnRhdGlvbi4gT3RoZXJ3aXNlLCBjb21waWxlciBmYWlscyBoZXJlLlxuICAgICAgICAuY29tbWFuZCh0aGlzLm5vdGljZXNMaXN0Q29tbWFuZCBhcyB1bmtub3duIGFzIENvbW1hbmRNb2R1bGUpXG4gICAgICAgIC5jb21tYW5kKHRoaXMubm90aWNlc0Fja25vd2xlZGdlQ29tbWFuZCBhcyB1bmtub3duIGFzIENvbW1hbmRNb2R1bGUpXG4gICAgICAgIC5kZW1hbmRDb21tYW5kKClcbiAgICAgICAgLnN0cmljdENvbW1hbmRzKClcbiAgICAgICAgLnJlY29tbWVuZENvbW1hbmRzKClcbiAgICAgICAgLmhlbHAoKVxuICAgICk7XG4gIH07XG59XG4iXX0=